
STM32H750B-DK_I2C_Touch_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800cf80  0800cf80  0001cf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800d078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800d0ec  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800d14c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  24000134  0800d1ac  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ee8  0800d1ac  00020ee8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030dcb  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000438e  00000000  00000000  00050f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  000552c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002140  00000000  00000000  00057590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c77  00000000  00000000  000596d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c518  00000000  00000000  0009a347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b82a  00000000  00000000  000c685f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00262089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e98  00000000  00000000  002620dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf68 	.word	0x0800cf68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800cf68 	.word	0x0800cf68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f002 faa5 	bl	8002be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f923 	bl	80008e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a2:	f000 f9ad 	bl	8000a00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 ff51 	bl	800154c <MX_GPIO_Init>
  MX_ADC1_Init();
 80006aa:	f000 f9d9 	bl	8000a60 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ae:	f000 fa4f 	bl	8000b50 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006b2:	f000 fab1 	bl	8000c18 <MX_ADC3_Init>
  MX_ETH_Init();
 80006b6:	f000 fb11 	bl	8000cdc <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006ba:	f000 fb5b 	bl	8000d74 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006be:	f000 fbbd 	bl	8000e3c <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006c2:	f000 fef5 	bl	80014b0 <MX_FMC_Init>
  MX_LTDC_Init();
 80006c6:	f000 fc5d 	bl	8000f84 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006ca:	f000 fd0d 	bl	80010e8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006ce:	f000 fd37 	bl	8001140 <MX_RTC_Init>
  MX_SAI2_Init();
 80006d2:	f000 fd5d 	bl	8001190 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006d6:	f000 fe19 	bl	800130c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006da:	f000 fe6b 	bl	80013b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006de:	f000 feb5 	bl	800144c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006e2:	f000 fc0f 	bl	8000f04 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);    // Set LCD_RST to high
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	486a      	ldr	r0, [pc, #424]	; (8000898 <main+0x204>)
 80006ee:	f004 fe29 	bl	8005344 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4869      	ldr	r0, [pc, #420]	; (800089c <main+0x208>)
 80006f8:	f004 fe3d 	bl	8005376 <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	4867      	ldr	r0, [pc, #412]	; (80008a0 <main+0x20c>)
 8000702:	f004 fe07 	bl	8005314 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b66      	ldr	r3, [pc, #408]	; (80008a4 <main+0x210>)
 800070c:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 800070e:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <main+0x210>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	2104      	movs	r1, #4
 8000718:	4863      	ldr	r0, [pc, #396]	; (80008a8 <main+0x214>)
 800071a:	f004 fe13 	bl	8005344 <HAL_GPIO_WritePin>


		// Reading from address 0x38 register Vendor's Chip ID (addr. 0xA8) default value should be 0x51=81  - Both variations work !
	    //dataBuffer[5] = 0xA8;
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA8, I2C_MEMADD_SIZE_8BIT,&VendorID, 1, HAL_MAX_DELAY);
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	4b60      	ldr	r3, [pc, #384]	; (80008ac <main+0x218>)
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	22a8      	movs	r2, #168	; 0xa8
 8000730:	2170      	movs	r1, #112	; 0x70
 8000732:	485f      	ldr	r0, [pc, #380]	; (80008b0 <main+0x21c>)
 8000734:	f004 feca 	bl	80054cc <HAL_I2C_Mem_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b5d      	ldr	r3, [pc, #372]	; (80008b4 <main+0x220>)
 800073e:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA0, I2C_MEMADD_SIZE_8BIT,&DeviceMode, 1, HAL_MAX_DELAY);
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	2301      	movs	r3, #1
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <main+0x224>)
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2301      	movs	r3, #1
 8000750:	22a0      	movs	r2, #160	; 0xa0
 8000752:	2170      	movs	r1, #112	; 0x70
 8000754:	4856      	ldr	r0, [pc, #344]	; (80008b0 <main+0x21c>)
 8000756:	f004 feb9 	bl	80054cc <HAL_I2C_Mem_Read>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <main+0x220>)
 8000760:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA1, I2C_MEMADD_SIZE_8BIT,&Gesture, 1, HAL_MAX_DELAY);
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	2301      	movs	r3, #1
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	4b53      	ldr	r3, [pc, #332]	; (80008bc <main+0x228>)
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	22a1      	movs	r2, #161	; 0xa1
 8000774:	2170      	movs	r1, #112	; 0x70
 8000776:	484e      	ldr	r0, [pc, #312]	; (80008b0 <main+0x21c>)
 8000778:	f004 fea8 	bl	80054cc <HAL_I2C_Mem_Read>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <main+0x220>)
 8000782:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA2, I2C_MEMADD_SIZE_8BIT,&Status, 1, HAL_MAX_DELAY);
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2301      	movs	r3, #1
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <main+0x22c>)
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	22a2      	movs	r2, #162	; 0xa2
 8000796:	2170      	movs	r1, #112	; 0x70
 8000798:	4845      	ldr	r0, [pc, #276]	; (80008b0 <main+0x21c>)
 800079a:	f004 fe97 	bl	80054cc <HAL_I2C_Mem_Read>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <main+0x220>)
 80007a4:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA3, I2C_MEMADD_SIZE_8BIT,&Touchxh, 1, HAL_MAX_DELAY);
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	2301      	movs	r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <main+0x230>)
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	22a3      	movs	r2, #163	; 0xa3
 80007b8:	2170      	movs	r1, #112	; 0x70
 80007ba:	483d      	ldr	r0, [pc, #244]	; (80008b0 <main+0x21c>)
 80007bc:	f004 fe86 	bl	80054cc <HAL_I2C_Mem_Read>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b3b      	ldr	r3, [pc, #236]	; (80008b4 <main+0x220>)
 80007c6:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA4, I2C_MEMADD_SIZE_8BIT,&Touchxl, 1, HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2301      	movs	r3, #1
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <main+0x234>)
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	22a4      	movs	r2, #164	; 0xa4
 80007da:	2170      	movs	r1, #112	; 0x70
 80007dc:	4834      	ldr	r0, [pc, #208]	; (80008b0 <main+0x21c>)
 80007de:	f004 fe75 	bl	80054cc <HAL_I2C_Mem_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <main+0x220>)
 80007e8:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA5, I2C_MEMADD_SIZE_8BIT,&Touchyh, 1, HAL_MAX_DELAY);
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4b35      	ldr	r3, [pc, #212]	; (80008cc <main+0x238>)
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	22a5      	movs	r2, #165	; 0xa5
 80007fc:	2170      	movs	r1, #112	; 0x70
 80007fe:	482c      	ldr	r0, [pc, #176]	; (80008b0 <main+0x21c>)
 8000800:	f004 fe64 	bl	80054cc <HAL_I2C_Mem_Read>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <main+0x220>)
 800080a:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA6, I2C_MEMADD_SIZE_8BIT,&Touchyl, 1, HAL_MAX_DELAY);
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	2301      	movs	r3, #1
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <main+0x23c>)
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2301      	movs	r3, #1
 800081c:	22a6      	movs	r2, #166	; 0xa6
 800081e:	2170      	movs	r1, #112	; 0x70
 8000820:	4823      	ldr	r0, [pc, #140]	; (80008b0 <main+0x21c>)
 8000822:	f004 fe53 	bl	80054cc <HAL_I2C_Mem_Read>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0x220>)
 800082c:	701a      	strb	r2, [r3, #0]

	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA0, I2C_MEMADD_SIZE_8BIT,dataBuffer, 10, HAL_MAX_DELAY);
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	230a      	movs	r3, #10
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <main+0x240>)
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	22a0      	movs	r2, #160	; 0xa0
 8000840:	2170      	movs	r1, #112	; 0x70
 8000842:	481b      	ldr	r0, [pc, #108]	; (80008b0 <main+0x21c>)
 8000844:	f004 fe42 	bl	80054cc <HAL_I2C_Mem_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <main+0x220>)
 800084e:	701a      	strb	r2, [r3, #0]

	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d 8Touch ID: 0x%2x=%d\n\r",Counter++,KeyState, dataBuffer[8],dataBuffer[8]);
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <main+0x244>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	4920      	ldr	r1, [pc, #128]	; (80008d8 <main+0x244>)
 8000858:	600a      	str	r2, [r1, #0]
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <main+0x210>)
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	491d      	ldr	r1, [pc, #116]	; (80008d4 <main+0x240>)
 8000860:	7a09      	ldrb	r1, [r1, #8]
 8000862:	4608      	mov	r0, r1
 8000864:	491b      	ldr	r1, [pc, #108]	; (80008d4 <main+0x240>)
 8000866:	7a09      	ldrb	r1, [r1, #8]
 8000868:	9102      	str	r1, [sp, #8]
 800086a:	9001      	str	r0, [sp, #4]
 800086c:	9200      	str	r2, [sp, #0]
 800086e:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <main+0x248>)
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <main+0x24c>)
 8000876:	f00b ff03 	bl	800c680 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800087a:	4819      	ldr	r0, [pc, #100]	; (80008e0 <main+0x24c>)
 800087c:	f7ff fd30 	bl	80002e0 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	4916      	ldr	r1, [pc, #88]	; (80008e0 <main+0x24c>)
 8000888:	4816      	ldr	r0, [pc, #88]	; (80008e4 <main+0x250>)
 800088a:	f00a f9d4 	bl	800ac36 <HAL_UART_Transmit>

	    HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f002 fa3b 	bl	8002d0c <HAL_Delay>
  {
 8000896:	e72c      	b.n	80006f2 <main+0x5e>
 8000898:	58020400 	.word	0x58020400
 800089c:	58022000 	.word	0x58022000
 80008a0:	58020800 	.word	0x58020800
 80008a4:	24000ea0 	.word	0x24000ea0
 80008a8:	58022400 	.word	0x58022400
 80008ac:	24000eae 	.word	0x24000eae
 80008b0:	240004a4 	.word	0x240004a4
 80008b4:	24000eb6 	.word	0x24000eb6
 80008b8:	24000eaf 	.word	0x24000eaf
 80008bc:	24000eb0 	.word	0x24000eb0
 80008c0:	24000eb1 	.word	0x24000eb1
 80008c4:	24000eb2 	.word	0x24000eb2
 80008c8:	24000eb3 	.word	0x24000eb3
 80008cc:	24000eb4 	.word	0x24000eb4
 80008d0:	24000eb5 	.word	0x24000eb5
 80008d4:	24000ea4 	.word	0x24000ea4
 80008d8:	24000e9c 	.word	0x24000e9c
 80008dc:	0800cf80 	.word	0x0800cf80
 80008e0:	24000d9c 	.word	0x24000d9c
 80008e4:	240007c8 	.word	0x240007c8

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09c      	sub	sp, #112	; 0x70
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	224c      	movs	r2, #76	; 0x4c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00b feba 	bl	800c670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2220      	movs	r2, #32
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00b feb4 	bl	800c670 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000908:	2002      	movs	r0, #2
 800090a:	f005 fde5 	bl	80064d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <SystemClock_Config+0x10c>)
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	4a37      	ldr	r2, [pc, #220]	; (80009f4 <SystemClock_Config+0x10c>)
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <SystemClock_Config+0x10c>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <SystemClock_Config+0x110>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000930:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <SystemClock_Config+0x110>)
 8000932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <SystemClock_Config+0x110>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000944:	bf00      	nop
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <SystemClock_Config+0x110>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000952:	d1f8      	bne.n	8000946 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <SystemClock_Config+0x114>)
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f023 0303 	bic.w	r3, r3, #3
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <SystemClock_Config+0x114>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000964:	230b      	movs	r3, #11
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800096e:	2301      	movs	r3, #1
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000982:	2316      	movs	r3, #22
 8000984:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000986:	23a9      	movs	r3, #169	; 0xa9
 8000988:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000996:	2300      	movs	r3, #0
 8000998:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099a:	2300      	movs	r3, #0
 800099c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fe9a 	bl	80066e0 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009b2:	f000 ff75 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	233f      	movs	r3, #63	; 0x3f
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 fada 	bl	8006f94 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x102>
  {
    Error_Handler();
 80009e6:	f000 ff5b 	bl	80018a0 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3770      	adds	r7, #112	; 0x70
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	58000400 	.word	0x58000400
 80009f8:	58024800 	.word	0x58024800
 80009fc:	58024400 	.word	0x58024400

08000a00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0b0      	sub	sp, #192	; 0xc0
 8000a04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	22c0      	movs	r2, #192	; 0xc0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f00b fe2f 	bl	800c670 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a22:	230c      	movs	r3, #12
 8000a24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a26:	2305      	movs	r3, #5
 8000a28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a36:	2320      	movs	r3, #32
 8000a38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4618      	mov	r0, r3
 8000a48:	f006 fe30 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a52:	f000 ff25 	bl	80018a0 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	37c0      	adds	r7, #192	; 0xc0
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <MX_ADC1_Init+0xec>)
 8000a88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000ae4:	f002 faf8 	bl	80030d8 <HAL_ADC_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aee:	f000 fed7 	bl	80018a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000afe:	f003 f90f 	bl	8003d20 <HAL_ADCEx_MultiModeConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b08:	f000 feca 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b10:	2306      	movs	r3, #6
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b18:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_ADC1_Init+0xe8>)
 8000b30:	f002 fc74 	bl	800341c <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b3a:	f000 feb1 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000188 	.word	0x24000188
 8000b4c:	40022000 	.word	0x40022000

08000b50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <MX_ADC2_Init+0xc4>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b74:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bc8:	f002 fa86 	bl	80030d8 <HAL_ADC_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bd2:	f000 fe65 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000be6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be8:	2304      	movs	r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_ADC2_Init+0xc0>)
 8000bfa:	f002 fc0f 	bl	800341c <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000c04:	f000 fe4c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240001ec 	.word	0x240001ec
 8000c14:	40022100 	.word	0x40022100

08000c18 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <MX_ADC3_Init+0xbc>)
 8000c34:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000c88:	f002 fa26 	bl	80030d8 <HAL_ADC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c92:	f000 fe05 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_ADC3_Init+0xc0>)
 8000c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ca6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_ADC3_Init+0xb8>)
 8000cba:	f002 fbaf 	bl	800341c <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cc4:	f000 fdec 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000250 	.word	0x24000250
 8000cd4:	58026000 	.word	0x58026000
 8000cd8:	1d500080 	.word	0x1d500080

08000cdc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ETH_Init+0x80>)
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <MX_ETH_Init+0x84>)
 8000ce4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_ETH_Init+0x88>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_ETH_Init+0x88>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_ETH_Init+0x88>)
 8000cf4:	22e1      	movs	r2, #225	; 0xe1
 8000cf6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_ETH_Init+0x88>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_ETH_Init+0x88>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ETH_Init+0x88>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_ETH_Init+0x88>)
 8000d0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_ETH_Init+0x8c>)
 8000d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <MX_ETH_Init+0x90>)
 8000d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x80>)
 8000d2c:	f003 f9ba 	bl	80040a4 <HAL_ETH_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d36:	f000 fdb3 	bl	80018a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3a:	2238      	movs	r2, #56	; 0x38
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d40:	f00b fc96 	bl	800c670 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d46:	2221      	movs	r2, #33	; 0x21
 8000d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_ETH_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	240002b4 	.word	0x240002b4
 8000d60:	40028000 	.word	0x40028000
 8000d64:	24000eb8 	.word	0x24000eb8
 8000d68:	240000d4 	.word	0x240000d4
 8000d6c:	24000074 	.word	0x24000074
 8000d70:	24000150 	.word	0x24000150

08000d74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_FDCAN1_Init+0xc4>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000d9e:	2210      	movs	r2, #16
 8000da0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_FDCAN1_Init+0xc0>)
 8000e22:	f003 fd63 	bl	80048ec <HAL_FDCAN_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e2c:	f000 fd38 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	24000364 	.word	0x24000364
 8000e38:	4000a000 	.word	0x4000a000

08000e3c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e42:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <MX_FDCAN2_Init+0xc4>)
 8000e44:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_FDCAN2_Init+0xc0>)
 8000eea:	f003 fcff 	bl	80048ec <HAL_FDCAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ef4:	f000 fcd4 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000404 	.word	0x24000404
 8000f00:	4000a400 	.word	0x4000a400

08000f04 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <MX_I2C4_Init+0x78>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <MX_I2C4_Init+0x7c>)
 8000f12:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f3e:	480e      	ldr	r0, [pc, #56]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f40:	f004 fa34 	bl	80053ac <HAL_I2C_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f4a:	f000 fca9 	bl	80018a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f52:	f004 fe39 	bl	8005bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f5c:	f000 fca0 	bl	80018a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_I2C4_Init+0x74>)
 8000f64:	f004 fe7b 	bl	8005c5e <HAL_I2CEx_ConfigDigitalFilter>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f6e:	f000 fc97 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	240004a4 	.word	0x240004a4
 8000f7c:	58001c00 	.word	0x58001c00
 8000f80:	10707dbc 	.word	0x10707dbc

08000f84 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09a      	sub	sp, #104	; 0x68
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	2234      	movs	r2, #52	; 0x34
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00b fb6c 	bl	800c670 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00b fb66 	bl	800c670 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fa6:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <MX_LTDC_Init+0x160>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000faa:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000fd4:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fdc:	f240 228e 	movw	r2, #654	; 0x28e
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fe4:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000fec:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000ff4:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ffa:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_LTDC_Init+0x15c>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001012:	4833      	ldr	r0, [pc, #204]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8001014:	f004 fe70 	bl	8005cf8 <HAL_LTDC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800101e:	f000 fc3f 	bl	80018a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001032:	2300      	movs	r3, #0
 8001034:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001044:	2305      	movs	r3, #5
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_LTDC_Init+0x15c>)
 8001070:	f004 ff12 	bl	8005e98 <HAL_LTDC_ConfigLayer>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800107a:	f000 fc11 	bl	80018a0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010a0:	2305      	movs	r3, #5
 80010a2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_LTDC_Init+0x15c>)
 80010ca:	f004 fee5 	bl	8005e98 <HAL_LTDC_ConfigLayer>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80010d4:	f000 fbe4 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3768      	adds	r7, #104	; 0x68
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	240004f8 	.word	0x240004f8
 80010e4:	50001000 	.word	0x50001000

080010e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_QUADSPI_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_QUADSPI_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_QUADSPI_Init+0x50>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_QUADSPI_Init+0x50>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001106:	2201      	movs	r2, #1
 8001108:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_QUADSPI_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_QUADSPI_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_QUADSPI_Init+0x50>)
 8001124:	f005 fa22 	bl	800656c <HAL_QSPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 fbb7 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	240005a0 	.word	0x240005a0
 800113c:	52005000 	.word	0x52005000

08001140 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_RTC_Init+0x48>)
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <MX_RTC_Init+0x4c>)
 8001148:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_RTC_Init+0x48>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_RTC_Init+0x48>)
 8001152:	227f      	movs	r2, #127	; 0x7f
 8001154:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_RTC_Init+0x48>)
 8001158:	22ff      	movs	r2, #255	; 0xff
 800115a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_RTC_Init+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_RTC_Init+0x48>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_RTC_Init+0x48>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_RTC_Init+0x48>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_RTC_Init+0x48>)
 8001176:	f008 ff97 	bl	800a0a8 <HAL_RTC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001180:	f000 fb8e 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	240005ec 	.word	0x240005ec
 800118c:	58004000 	.word	0x58004000

08001190 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001196:	4a59      	ldr	r2, [pc, #356]	; (80012fc <MX_SAI2_Init+0x16c>)
 8001198:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <MX_SAI2_Init+0x168>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011b2:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011b8:	4b4f      	ldr	r3, [pc, #316]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011d2:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <MX_SAI2_Init+0x170>)
 80011d4:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011de:	2200      	movs	r2, #0
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80011f6:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011fc:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <MX_SAI2_Init+0x168>)
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001206:	2208      	movs	r2, #8
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <MX_SAI2_Init+0x168>)
 800120c:	2201      	movs	r2, #1
 800120e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001212:	2200      	movs	r2, #0
 8001214:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001218:	2200      	movs	r2, #0
 800121a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <MX_SAI2_Init+0x168>)
 800121e:	2200      	movs	r2, #0
 8001220:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001224:	2200      	movs	r2, #0
 8001226:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <MX_SAI2_Init+0x168>)
 800122a:	2200      	movs	r2, #0
 800122c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001230:	2201      	movs	r2, #1
 8001232:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_SAI2_Init+0x168>)
 8001236:	2200      	movs	r2, #0
 8001238:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800123a:	482f      	ldr	r0, [pc, #188]	; (80012f8 <MX_SAI2_Init+0x168>)
 800123c:	f009 f84c 	bl	800a2d8 <HAL_SAI_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001246:	f000 fb2b 	bl	80018a0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <MX_SAI2_Init+0x174>)
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <MX_SAI2_Init+0x178>)
 800124e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <MX_SAI2_Init+0x174>)
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_SAI2_Init+0x174>)
 8001258:	2203      	movs	r2, #3
 800125a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_SAI2_Init+0x174>)
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_SAI2_Init+0x174>)
 8001264:	2200      	movs	r2, #0
 8001266:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_SAI2_Init+0x174>)
 800126a:	2200      	movs	r2, #0
 800126c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <MX_SAI2_Init+0x174>)
 8001270:	2201      	movs	r2, #1
 8001272:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_SAI2_Init+0x174>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_SAI2_Init+0x174>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_SAI2_Init+0x174>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_SAI2_Init+0x174>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_SAI2_Init+0x174>)
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_SAI2_Init+0x174>)
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_SAI2_Init+0x174>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_SAI2_Init+0x174>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_SAI2_Init+0x174>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_SAI2_Init+0x174>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_SAI2_Init+0x174>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_SAI2_Init+0x174>)
 80012bc:	2200      	movs	r2, #0
 80012be:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_SAI2_Init+0x174>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_SAI2_Init+0x174>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_SAI2_Init+0x174>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_SAI2_Init+0x174>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_SAI2_Init+0x174>)
 80012da:	2201      	movs	r2, #1
 80012dc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_SAI2_Init+0x174>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012e4:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_SAI2_Init+0x174>)
 80012e6:	f008 fff7 	bl	800a2d8 <HAL_SAI_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80012f0:	f000 fad6 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	24000610 	.word	0x24000610
 80012fc:	40015c04 	.word	0x40015c04
 8001300:	0002ee00 	.word	0x0002ee00
 8001304:	240006a8 	.word	0x240006a8
 8001308:	40015c24 	.word	0x40015c24

0800130c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001312:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <MX_SPI2_Init+0xa4>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001318:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800131c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001326:	2203      	movs	r2, #3
 8001328:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_SPI2_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_SPI2_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_SPI2_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI2_Init+0xa0>)
 800135c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001360:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001364:	2200      	movs	r2, #0
 8001366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_SPI2_Init+0xa0>)
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI2_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001388:	2200      	movs	r2, #0
 800138a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_SPI2_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI2_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_SPI2_Init+0xa0>)
 800139a:	f009 fabd 	bl	800a918 <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80013a4:	f000 fa7c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	24000740 	.word	0x24000740
 80013b0:	40003800 	.word	0x40003800

080013b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_USART3_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013fe:	f009 fbca 	bl	800ab96 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fa4a 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001410:	f00a fc5b 	bl	800bcca <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 fa41 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001422:	f00a fc90 	bl	800bd46 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fa38 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001432:	f00a fc11 	bl	800bc58 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fa30 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	240007c8 	.word	0x240007c8
 8001448:	40004800 	.word	0x40004800

0800144c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001452:	4a16      	ldr	r2, [pc, #88]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001454:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001458:	2209      	movs	r2, #9
 800145a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145e:	2202      	movs	r2, #2
 8001460:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146a:	2202      	movs	r2, #2
 800146c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001482:	2201      	movs	r2, #1
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001488:	2201      	movs	r2, #1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001494:	f004 fed8 	bl	8006248 <HAL_PCD_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800149e:	f000 f9ff 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2400085c 	.word	0x2400085c
 80014ac:	40080000 	.word	0x40080000

080014b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_FMC_Init+0x94>)
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <MX_FMC_Init+0x98>)
 80014cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_FMC_Init+0x94>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_FMC_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_FMC_Init+0x94>)
 80014dc:	2204      	movs	r2, #4
 80014de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_FMC_Init+0x94>)
 80014e2:	2210      	movs	r2, #16
 80014e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_FMC_Init+0x94>)
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_FMC_Init+0x94>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_FMC_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_FMC_Init+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_FMC_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_FMC_Init+0x94>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800150a:	2310      	movs	r3, #16
 800150c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800150e:	2310      	movs	r3, #16
 8001510:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001512:	2310      	movs	r3, #16
 8001514:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001516:	2310      	movs	r3, #16
 8001518:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800151e:	2310      	movs	r3, #16
 8001520:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001522:	2310      	movs	r3, #16
 8001524:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_FMC_Init+0x94>)
 800152c:	f009 f9b8 	bl	800a8a0 <HAL_SDRAM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001536:	f000 f9b3 	bl	80018a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000d68 	.word	0x24000d68
 8001548:	52004140 	.word	0x52004140

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b090      	sub	sp, #64	; 0x40
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001562:	4bbf      	ldr	r3, [pc, #764]	; (8001860 <MX_GPIO_Init+0x314>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4abd      	ldr	r2, [pc, #756]	; (8001860 <MX_GPIO_Init+0x314>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4bbb      	ldr	r3, [pc, #748]	; (8001860 <MX_GPIO_Init+0x314>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <MX_GPIO_Init+0x314>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4ab6      	ldr	r2, [pc, #728]	; (8001860 <MX_GPIO_Init+0x314>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4bb3      	ldr	r3, [pc, #716]	; (8001860 <MX_GPIO_Init+0x314>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800159e:	4bb0      	ldr	r3, [pc, #704]	; (8001860 <MX_GPIO_Init+0x314>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	4aae      	ldr	r2, [pc, #696]	; (8001860 <MX_GPIO_Init+0x314>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ae:	4bac      	ldr	r3, [pc, #688]	; (8001860 <MX_GPIO_Init+0x314>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015bc:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <MX_GPIO_Init+0x314>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	4aa7      	ldr	r2, [pc, #668]	; (8001860 <MX_GPIO_Init+0x314>)
 80015c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015cc:	4ba4      	ldr	r3, [pc, #656]	; (8001860 <MX_GPIO_Init+0x314>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4ba1      	ldr	r3, [pc, #644]	; (8001860 <MX_GPIO_Init+0x314>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	4a9f      	ldr	r2, [pc, #636]	; (8001860 <MX_GPIO_Init+0x314>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ea:	4b9d      	ldr	r3, [pc, #628]	; (8001860 <MX_GPIO_Init+0x314>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b99      	ldr	r3, [pc, #612]	; (8001860 <MX_GPIO_Init+0x314>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a98      	ldr	r2, [pc, #608]	; (8001860 <MX_GPIO_Init+0x314>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b95      	ldr	r3, [pc, #596]	; (8001860 <MX_GPIO_Init+0x314>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	4b92      	ldr	r3, [pc, #584]	; (8001860 <MX_GPIO_Init+0x314>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a90      	ldr	r2, [pc, #576]	; (8001860 <MX_GPIO_Init+0x314>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <MX_GPIO_Init+0x314>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001634:	4b8a      	ldr	r3, [pc, #552]	; (8001860 <MX_GPIO_Init+0x314>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a89      	ldr	r2, [pc, #548]	; (8001860 <MX_GPIO_Init+0x314>)
 800163c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b86      	ldr	r3, [pc, #536]	; (8001860 <MX_GPIO_Init+0x314>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b83      	ldr	r3, [pc, #524]	; (8001860 <MX_GPIO_Init+0x314>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a81      	ldr	r2, [pc, #516]	; (8001860 <MX_GPIO_Init+0x314>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <MX_GPIO_Init+0x314>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <MX_GPIO_Init+0x314>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <MX_GPIO_Init+0x314>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b77      	ldr	r3, [pc, #476]	; (8001860 <MX_GPIO_Init+0x314>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168e:	4b74      	ldr	r3, [pc, #464]	; (8001860 <MX_GPIO_Init+0x314>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a72      	ldr	r2, [pc, #456]	; (8001860 <MX_GPIO_Init+0x314>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <MX_GPIO_Init+0x314>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b2:	486c      	ldr	r0, [pc, #432]	; (8001864 <MX_GPIO_Init+0x318>)
 80016b4:	f003 fe46 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f241 0104 	movw	r1, #4100	; 0x1004
 80016be:	486a      	ldr	r0, [pc, #424]	; (8001868 <MX_GPIO_Init+0x31c>)
 80016c0:	f003 fe40 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2104      	movs	r1, #4
 80016c8:	4868      	ldr	r0, [pc, #416]	; (800186c <MX_GPIO_Init+0x320>)
 80016ca:	f003 fe3b 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016e0:	2303      	movs	r3, #3
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4861      	ldr	r0, [pc, #388]	; (8001870 <MX_GPIO_Init+0x324>)
 80016ec:	f003 fc62 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	485c      	ldr	r0, [pc, #368]	; (8001874 <MX_GPIO_Init+0x328>)
 8001704:	f003 fc56 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001708:	2330      	movs	r3, #48	; 0x30
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001718:	230a      	movs	r3, #10
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001720:	4619      	mov	r1, r3
 8001722:	4855      	ldr	r0, [pc, #340]	; (8001878 <MX_GPIO_Init+0x32c>)
 8001724:	f003 fc46 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001728:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	484f      	ldr	r0, [pc, #316]	; (800187c <MX_GPIO_Init+0x330>)
 800173e:	f003 fc39 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	484a      	ldr	r0, [pc, #296]	; (8001880 <MX_GPIO_Init+0x334>)
 8001758:	f003 fc2c 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800176e:	2301      	movs	r3, #1
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	4840      	ldr	r0, [pc, #256]	; (800187c <MX_GPIO_Init+0x330>)
 800177a:	f003 fc1b 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800178e:	2306      	movs	r3, #6
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	483a      	ldr	r0, [pc, #232]	; (8001884 <MX_GPIO_Init+0x338>)
 800179a:	f003 fc0b 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	4619      	mov	r1, r3
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <MX_GPIO_Init+0x318>)
 80017b8:	f003 fbfc 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80017bc:	2304      	movs	r3, #4
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	482c      	ldr	r0, [pc, #176]	; (8001884 <MX_GPIO_Init+0x338>)
 80017d2:	f003 fbef 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4827      	ldr	r0, [pc, #156]	; (8001888 <MX_GPIO_Init+0x33c>)
 80017ea:	f003 fbe3 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80017ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001802:	4619      	mov	r1, r3
 8001804:	481a      	ldr	r0, [pc, #104]	; (8001870 <MX_GPIO_Init+0x324>)
 8001806:	f003 fbd5 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800181a:	2309      	movs	r3, #9
 800181c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001822:	4619      	mov	r1, r3
 8001824:	4815      	ldr	r0, [pc, #84]	; (800187c <MX_GPIO_Init+0x330>)
 8001826:	f003 fbc5 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800182a:	f241 0304 	movw	r3, #4100	; 0x1004
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_GPIO_Init+0x31c>)
 8001844:	f003 fbb6 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001848:	2304      	movs	r3, #4
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	4619      	mov	r1, r3
 800185e:	e015      	b.n	800188c <MX_GPIO_Init+0x340>
 8001860:	58024400 	.word	0x58024400
 8001864:	58022000 	.word	0x58022000
 8001868:	58020400 	.word	0x58020400
 800186c:	58022400 	.word	0x58022400
 8001870:	58021c00 	.word	0x58021c00
 8001874:	58020c00 	.word	0x58020c00
 8001878:	58021000 	.word	0x58021000
 800187c:	58020000 	.word	0x58020000
 8001880:	58020800 	.word	0x58020800
 8001884:	58021800 	.word	0x58021800
 8001888:	58022800 	.word	0x58022800
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_GPIO_Init+0x350>)
 800188e:	f003 fb91 	bl	8004fb4 <HAL_GPIO_Init>

}
 8001892:	bf00      	nop
 8001894:	3740      	adds	r7, #64	; 0x40
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	58022400 	.word	0x58022400

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_MspInit+0x30>)
 80018b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018b8:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x30>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x30>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	58024400 	.word	0x58024400

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	; 0x40
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <HAL_ADC_MspInit+0x1e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d14e      	bne.n	80019a0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a70      	ldr	r2, [pc, #448]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 800190a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10e      	bne.n	8001932 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001914:	4b6e      	ldr	r3, [pc, #440]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800191a:	4a6d      	ldr	r2, [pc, #436]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001924:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	4a5e      	ldr	r2, [pc, #376]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800196e:	2301      	movs	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4854      	ldr	r0, [pc, #336]	; (8001ad4 <HAL_ADC_MspInit+0x1f4>)
 8001982:	f003 fb17 	bl	8004fb4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001986:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800198a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800198e:	f001 fa01 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001992:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001996:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800199a:	f001 f9fb 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800199e:	e08f      	b.n	8001ac0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_ADC_MspInit+0x1f8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d133      	bne.n	8001a12 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019aa:	4b48      	ldr	r3, [pc, #288]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 80019b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_ADC_MspInit+0x1ec>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10e      	bne.n	80019da <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019bc:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c2:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019f8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a00:	f001 f9c8 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a08:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a0c:	f001 f9c2 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a10:	e056      	b.n	8001ac0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_ADC_MspInit+0x1fc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d151      	bne.n	8001ac0 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a2b      	ldr	r2, [pc, #172]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_ADC_MspInit+0x1f0>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <HAL_ADC_MspInit+0x200>)
 8001a8c:	f003 fa92 	bl	8004fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a94:	2303      	movs	r3, #3
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <HAL_ADC_MspInit+0x1f4>)
 8001aa4:	f003 fa86 	bl	8004fb4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001aa8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001aac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ab0:	f001 f970 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001ab4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ab8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001abc:	f001 f96a 	bl	8002d94 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ac0:	bf00      	nop
 8001ac2:	3740      	adds	r7, #64	; 0x40
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	24000ec0 	.word	0x24000ec0
 8001ad0:	58024400 	.word	0x58024400
 8001ad4:	58020800 	.word	0x58020800
 8001ad8:	40022100 	.word	0x40022100
 8001adc:	58026000 	.word	0x58026000
 8001ae0:	58021400 	.word	0x58021400

08001ae4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b092      	sub	sp, #72	; 0x48
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <HAL_ETH_MspInit+0x23c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 8108 	bne.w	8001d18 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001b08:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b0e:	4a85      	ldr	r2, [pc, #532]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001b26:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2c:	4a7d      	ldr	r2, [pc, #500]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b36:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b44:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4a:	4a76      	ldr	r2, [pc, #472]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b54:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b72:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	4a67      	ldr	r2, [pc, #412]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	4a5f      	ldr	r2, [pc, #380]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc2:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	4b52      	ldr	r3, [pc, #328]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be0:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c08:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_ETH_MspInit+0x240>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001c34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c46:	230b      	movs	r3, #11
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4835      	ldr	r0, [pc, #212]	; (8001d28 <HAL_ETH_MspInit+0x244>)
 8001c52:	f003 f9af 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001c56:	2304      	movs	r3, #4
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c66:	230b      	movs	r3, #11
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482e      	ldr	r0, [pc, #184]	; (8001d2c <HAL_ETH_MspInit+0x248>)
 8001c72:	f003 f99f 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c88:	230b      	movs	r3, #11
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c90:	4619      	mov	r1, r3
 8001c92:	4827      	ldr	r0, [pc, #156]	; (8001d30 <HAL_ETH_MspInit+0x24c>)
 8001c94:	f003 f98e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001c98:	233e      	movs	r3, #62	; 0x3e
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca8:	230b      	movs	r3, #11
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4820      	ldr	r0, [pc, #128]	; (8001d34 <HAL_ETH_MspInit+0x250>)
 8001cb4:	f003 f97e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001cb8:	230c      	movs	r3, #12
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc8:	230b      	movs	r3, #11
 8001cca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <HAL_ETH_MspInit+0x254>)
 8001cd4:	f003 f96e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001cd8:	2386      	movs	r3, #134	; 0x86
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ce8:	230b      	movs	r3, #11
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4812      	ldr	r0, [pc, #72]	; (8001d3c <HAL_ETH_MspInit+0x258>)
 8001cf4:	f003 f95e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d08:	230b      	movs	r3, #11
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d10:	4619      	mov	r1, r3
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_ETH_MspInit+0x25c>)
 8001d14:	f003 f94e 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3748      	adds	r7, #72	; 0x48
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40028000 	.word	0x40028000
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58021800 	.word	0x58021800
 8001d2c:	58021000 	.word	0x58021000
 8001d30:	58022000 	.word	0x58022000
 8001d34:	58020800 	.word	0x58020800
 8001d38:	58021c00 	.word	0x58021c00
 8001d3c:	58020000 	.word	0x58020000
 8001d40:	58020400 	.word	0x58020400

08001d44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0bc      	sub	sp, #240	; 0xf0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	22c0      	movs	r2, #192	; 0xc0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00a fc83 	bl	800c670 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_FDCAN_MspInit+0x188>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d151      	bne.n	8001e18 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 fc8d 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001d98:	f7ff fd82 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d9c:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a4b      	ldr	r2, [pc, #300]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001da4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10e      	bne.n	8001dcc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001db0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001db4:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	4a40      	ldr	r2, [pc, #256]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e04:	2309      	movs	r3, #9
 8001e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4831      	ldr	r0, [pc, #196]	; (8001ed8 <HAL_FDCAN_MspInit+0x194>)
 8001e12:	f003 f8cf 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001e16:	e055      	b.n	8001ec4 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <HAL_FDCAN_MspInit+0x198>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d150      	bne.n	8001ec4 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 fc36 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001e46:	f7ff fd2b 	bl	80018a0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001e52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_FDCAN_MspInit+0x18c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10e      	bne.n	8001e7a <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_FDCAN_MspInit+0x190>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001e98:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <HAL_FDCAN_MspInit+0x19c>)
 8001ec0:	f003 f878 	bl	8004fb4 <HAL_GPIO_Init>
}
 8001ec4:	bf00      	nop
 8001ec6:	37f0      	adds	r7, #240	; 0xf0
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	4000a000 	.word	0x4000a000
 8001ed0:	24000ec4 	.word	0x24000ec4
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	58021c00 	.word	0x58021c00
 8001edc:	4000a400 	.word	0x4000a400
 8001ee0:	58020400 	.word	0x58020400

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0ba      	sub	sp, #232	; 0xe8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	22c0      	movs	r2, #192	; 0xc0
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00a fbb3 	bl	800c670 <memset>
  if(hi2c->Instance==I2C4)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_I2C_MspInit+0xc8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d146      	bne.n	8001fa2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f14:	f04f 0210 	mov.w	r2, #16
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 fbbe 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f36:	f7ff fcb3 	bl	80018a0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f72:	2304      	movs	r3, #4
 8001f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <HAL_I2C_MspInit+0xd0>)
 8001f80:	f003 f818 	bl	8004fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_I2C_MspInit+0xcc>)
 8001f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	37e8      	adds	r7, #232	; 0xe8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	58001c00 	.word	0x58001c00
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020c00 	.word	0x58020c00

08001fb8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0be      	sub	sp, #248	; 0xf8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 0320 	add.w	r3, r7, #32
 8001fd4:	22c0      	movs	r2, #192	; 0xc0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00a fb49 	bl	800c670 <memset>
  if(hltdc->Instance==LTDC)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_LTDC_MspInit+0x1c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 80c4 	bne.w	8002172 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002002:	2302      	movs	r3, #2
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002006:	2302      	movs	r3, #2
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800200a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800200e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	4618      	mov	r0, r3
 8002020:	f005 fb44 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800202a:	f7ff fc39 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800202e:	4b54      	ldr	r3, [pc, #336]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800204c:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a4b      	ldr	r2, [pc, #300]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800206a:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	4a43      	ldr	r2, [pc, #268]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 80020ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_LTDC_MspInit+0x1c8>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80020c4:	23fc      	movs	r3, #252	; 0xfc
 80020c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020dc:	230e      	movs	r3, #14
 80020de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4826      	ldr	r0, [pc, #152]	; (8002184 <HAL_LTDC_MspInit+0x1cc>)
 80020ea:	f002 ff63 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020ee:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002108:	230e      	movs	r3, #14
 800210a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002112:	4619      	mov	r1, r3
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <HAL_LTDC_MspInit+0x1d0>)
 8002116:	f002 ff4d 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800211a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002134:	230e      	movs	r3, #14
 8002136:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800213a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800213e:	4619      	mov	r1, r3
 8002140:	4812      	ldr	r0, [pc, #72]	; (800218c <HAL_LTDC_MspInit+0x1d4>)
 8002142:	f002 ff37 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002160:	230e      	movs	r3, #14
 8002162:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002166:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800216a:	4619      	mov	r1, r3
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_LTDC_MspInit+0x1d8>)
 800216e:	f002 ff21 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	37f8      	adds	r7, #248	; 0xf8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	50001000 	.word	0x50001000
 8002180:	58024400 	.word	0x58024400
 8002184:	58022800 	.word	0x58022800
 8002188:	58022000 	.word	0x58022000
 800218c:	58022400 	.word	0x58022400
 8002190:	58021c00 	.word	0x58021c00

08002194 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0bc      	sub	sp, #240	; 0xf0
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	22c0      	movs	r2, #192	; 0xc0
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f00a fa5b 	bl	800c670 <memset>
  if(hqspi->Instance==QUADSPI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a56      	ldr	r2, [pc, #344]	; (8002318 <HAL_QSPI_MspInit+0x184>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f040 80a5 	bne.w	8002310 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80021c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 fa66 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80021e6:	f7ff fb5b 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_QSPI_MspInit+0x188>)
 80021ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021f0:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_QSPI_MspInit+0x188>)
 80021f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021fa:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_QSPI_MspInit+0x188>)
 80021fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220e:	4a43      	ldr	r2, [pc, #268]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800222e:	f043 0320 	orr.w	r3, r3, #32
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224a:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_QSPI_MspInit+0x188>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_QSPI_MspInit+0x188>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800227a:	230a      	movs	r3, #10
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002284:	4619      	mov	r1, r3
 8002286:	4826      	ldr	r0, [pc, #152]	; (8002320 <HAL_QSPI_MspInit+0x18c>)
 8002288:	f002 fe94 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800228c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022a6:	2309      	movs	r3, #9
 80022a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b0:	4619      	mov	r1, r3
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <HAL_QSPI_MspInit+0x190>)
 80022b4:	f002 fe7e 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022d2:	230a      	movs	r3, #10
 80022d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022dc:	4619      	mov	r1, r3
 80022de:	4811      	ldr	r0, [pc, #68]	; (8002324 <HAL_QSPI_MspInit+0x190>)
 80022e0:	f002 fe68 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022fe:	2309      	movs	r3, #9
 8002300:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002304:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002308:	4619      	mov	r1, r3
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <HAL_QSPI_MspInit+0x194>)
 800230c:	f002 fe52 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002310:	bf00      	nop
 8002312:	37f0      	adds	r7, #240	; 0xf0
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	52005000 	.word	0x52005000
 800231c:	58024400 	.word	0x58024400
 8002320:	58020400 	.word	0x58020400
 8002324:	58021400 	.word	0x58021400
 8002328:	58020c00 	.word	0x58020c00

0800232c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0b2      	sub	sp, #200	; 0xc8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	22c0      	movs	r2, #192	; 0xc0
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f00a f997 	bl	800c670 <memset>
  if(hrtc->Instance==RTC)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_RTC_MspInit+0x5c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d119      	bne.n	8002380 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800234c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	4618      	mov	r0, r3
 8002366:	f005 f9a1 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002370:	f7ff fa96 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RTC_MspInit+0x60>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_RTC_MspInit+0x60>)
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	37c8      	adds	r7, #200	; 0xc8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58004000 	.word	0x58004000
 800238c:	58024400 	.word	0x58024400

08002390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0bc      	sub	sp, #240	; 0xf0
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	22c0      	movs	r2, #192	; 0xc0
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00a f95d 	bl	800c670 <memset>
  if(hspi->Instance==SPI2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a55      	ldr	r2, [pc, #340]	; (8002510 <HAL_SPI_MspInit+0x180>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 80a3 	bne.w	8002508 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	f107 0318 	add.w	r3, r7, #24
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 f968 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023e2:	f7ff fa5d 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023e6:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_SPI_MspInit+0x184>)
 80023e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ec:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_SPI_MspInit+0x184>)
 80023ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_SPI_MspInit+0x184>)
 80023f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	4a42      	ldr	r2, [pc, #264]	; (8002514 <HAL_SPI_MspInit+0x184>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002414:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_SPI_MspInit+0x184>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_SPI_MspInit+0x184>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800245e:	2310      	movs	r3, #16
 8002460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002476:	2307      	movs	r3, #7
 8002478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002480:	4619      	mov	r1, r3
 8002482:	4825      	ldr	r0, [pc, #148]	; (8002518 <HAL_SPI_MspInit+0x188>)
 8002484:	f002 fd96 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002488:	2308      	movs	r3, #8
 800248a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024a0:	2305      	movs	r3, #5
 80024a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024aa:	4619      	mov	r1, r3
 80024ac:	481b      	ldr	r0, [pc, #108]	; (800251c <HAL_SPI_MspInit+0x18c>)
 80024ae:	f002 fd81 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b2:	2304      	movs	r3, #4
 80024b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ca:	2305      	movs	r3, #5
 80024cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d4:	4619      	mov	r1, r3
 80024d6:	4812      	ldr	r0, [pc, #72]	; (8002520 <HAL_SPI_MspInit+0x190>)
 80024d8:	f002 fd6c 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f6:	2305      	movs	r3, #5
 80024f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002500:	4619      	mov	r1, r3
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_SPI_MspInit+0x188>)
 8002504:	f002 fd56 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002508:	bf00      	nop
 800250a:	37f0      	adds	r7, #240	; 0xf0
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40003800 	.word	0x40003800
 8002514:	58024400 	.word	0x58024400
 8002518:	58020400 	.word	0x58020400
 800251c:	58020c00 	.word	0x58020c00
 8002520:	58022000 	.word	0x58022000

08002524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0ba      	sub	sp, #232	; 0xe8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	22c0      	movs	r2, #192	; 0xc0
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f00a f893 	bl	800c670 <memset>
  if(huart->Instance==USART3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a27      	ldr	r2, [pc, #156]	; (80025ec <HAL_UART_MspInit+0xc8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d146      	bne.n	80025e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002554:	f04f 0202 	mov.w	r2, #2
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f005 f89e 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002576:	f7ff f993 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800257c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 8002582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002586:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800258c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80025b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d0:	2307      	movs	r3, #7
 80025d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <HAL_UART_MspInit+0xd0>)
 80025de:	f002 fce9 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	37e8      	adds	r7, #232	; 0xe8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004800 	.word	0x40004800
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58020400 	.word	0x58020400

080025f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0ba      	sub	sp, #232	; 0xe8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	22c0      	movs	r2, #192	; 0xc0
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f00a f829 	bl	800c670 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a30      	ldr	r2, [pc, #192]	; (80026e4 <HAL_PCD_MspInit+0xec>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d159      	bne.n	80026dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002628:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002634:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4618      	mov	r0, r3
 8002642:	f005 f833 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800264c:	f7ff f928 	bl	80018a0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002650:	f003 ff7c 	bl	800654c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265a:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002686:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800268a:	4619      	mov	r1, r3
 800268c:	4817      	ldr	r0, [pc, #92]	; (80026ec <HAL_PCD_MspInit+0xf4>)
 800268e:	f002 fc91 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002692:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80026ac:	230a      	movs	r3, #10
 80026ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <HAL_PCD_MspInit+0xf4>)
 80026ba:	f002 fc7b 	bl	8004fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 80026c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026c4:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 80026c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_PCD_MspInit+0xf0>)
 80026d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	37e8      	adds	r7, #232	; 0xe8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40080000 	.word	0x40080000
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58020000 	.word	0x58020000

080026f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0b8      	sub	sp, #224	; 0xe0
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_FMC_MspInit+0x15c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8099 	bne.w	8002842 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002710:	4b4e      	ldr	r3, [pc, #312]	; (800284c <HAL_FMC_MspInit+0x15c>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	22c0      	movs	r2, #192	; 0xc0
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f009 ffa6 	bl	800c670 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002730:	2300      	movs	r3, #0
 8002732:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	4618      	mov	r0, r3
 800273a:	f004 ffb7 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002744:	f7ff f8ac 	bl	80018a0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_FMC_MspInit+0x160>)
 800274a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <HAL_FMC_MspInit+0x160>)
 8002750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002754:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002758:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_FMC_MspInit+0x160>)
 800275a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800275e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002766:	f64f 7383 	movw	r3, #65411	; 0xff83
 800276a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002780:	230c      	movs	r3, #12
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800278a:	4619      	mov	r1, r3
 800278c:	4831      	ldr	r0, [pc, #196]	; (8002854 <HAL_FMC_MspInit+0x164>)
 800278e:	f002 fc11 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002792:	f248 1333 	movw	r3, #33075	; 0x8133
 8002796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ac:	230c      	movs	r3, #12
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027b6:	4619      	mov	r1, r3
 80027b8:	4827      	ldr	r0, [pc, #156]	; (8002858 <HAL_FMC_MspInit+0x168>)
 80027ba:	f002 fbfb 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80027be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027d8:	230c      	movs	r3, #12
 80027da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027e2:	4619      	mov	r1, r3
 80027e4:	481d      	ldr	r0, [pc, #116]	; (800285c <HAL_FMC_MspInit+0x16c>)
 80027e6:	f002 fbe5 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80027ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002804:	230c      	movs	r3, #12
 8002806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800280a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800280e:	4619      	mov	r1, r3
 8002810:	4813      	ldr	r0, [pc, #76]	; (8002860 <HAL_FMC_MspInit+0x170>)
 8002812:	f002 fbcf 	bl	8004fb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002816:	23e0      	movs	r3, #224	; 0xe0
 8002818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800282e:	230c      	movs	r3, #12
 8002830:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002838:	4619      	mov	r1, r3
 800283a:	480a      	ldr	r0, [pc, #40]	; (8002864 <HAL_FMC_MspInit+0x174>)
 800283c:	f002 fbba 	bl	8004fb4 <HAL_GPIO_Init>
 8002840:	e000      	b.n	8002844 <HAL_FMC_MspInit+0x154>
    return;
 8002842:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002844:	37e0      	adds	r7, #224	; 0xe0
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000ec8 	.word	0x24000ec8
 8002850:	58024400 	.word	0x58024400
 8002854:	58021000 	.word	0x58021000
 8002858:	58021800 	.word	0x58021800
 800285c:	58020c00 	.word	0x58020c00
 8002860:	58021400 	.word	0x58021400
 8002864:	58021c00 	.word	0x58021c00

08002868 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002870:	f7ff ff3e 	bl	80026f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0ba      	sub	sp, #232	; 0xe8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	22c0      	movs	r2, #192	; 0xc0
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f009 feef 	bl	800c670 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a45      	ldr	r2, [pc, #276]	; (80029ac <HAL_SAI_MspInit+0x130>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d13e      	bne.n	800291a <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800289c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fefb 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80028bc:	f7fe fff0 	bl	80018a0 <Error_Handler>
    }

    if (SAI2_client == 0)
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10e      	bne.n	80028e6 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028c8:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 80028ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ce:	4a39      	ldr	r2, [pc, #228]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 80028d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 80028da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80028e6:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a30      	ldr	r2, [pc, #192]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 80028ee:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80028f0:	23f0      	movs	r3, #240	; 0xf0
 80028f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002908:	230a      	movs	r3, #10
 800290a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800290e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002912:	4619      	mov	r1, r3
 8002914:	4828      	ldr	r0, [pc, #160]	; (80029b8 <HAL_SAI_MspInit+0x13c>)
 8002916:	f002 fb4d 	bl	8004fb4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_SAI_MspInit+0x140>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d13f      	bne.n	80029a4 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002930:	2300      	movs	r3, #0
 8002932:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f004 feb7 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002944:	f7fe ffac 	bl	80018a0 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 8002952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 8002958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800295c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_SAI_MspInit+0x138>)
 8002962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_SAI_MspInit+0x134>)
 8002976:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002992:	230a      	movs	r3, #10
 8002994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800299c:	4619      	mov	r1, r3
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <HAL_SAI_MspInit+0x144>)
 80029a0:	f002 fb08 	bl	8004fb4 <HAL_GPIO_Init>

    }
}
 80029a4:	bf00      	nop
 80029a6:	37e8      	adds	r7, #232	; 0xe8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40015c04 	.word	0x40015c04
 80029b0:	24000ecc 	.word	0x24000ecc
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58022000 	.word	0x58022000
 80029bc:	40015c24 	.word	0x40015c24
 80029c0:	58021800 	.word	0x58021800

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <NMI_Handler+0x4>

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <MemManage_Handler+0x4>

080029d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a10:	f000 f95c 	bl	8002ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <_sbrk+0x5c>)
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_sbrk+0x60>)
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <_sbrk+0x64>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <_sbrk+0x68>)
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a48:	f009 fdda 	bl	800c600 <__errno>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	220c      	movs	r2, #12
 8002a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e009      	b.n	8002a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <_sbrk+0x64>)
 8002a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	24080000 	.word	0x24080000
 8002a78:	00000400 	.word	0x00000400
 8002a7c:	24000ed0 	.word	0x24000ed0
 8002a80:	24000ee8 	.word	0x24000ee8

08002a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a88:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <SystemInit+0xe4>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	4a36      	ldr	r2, [pc, #216]	; (8002b68 <SystemInit+0xe4>)
 8002a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <SystemInit+0xe8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d807      	bhi.n	8002ab4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <SystemInit+0xe8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 030f 	bic.w	r3, r3, #15
 8002aac:	4a2f      	ldr	r2, [pc, #188]	; (8002b6c <SystemInit+0xe8>)
 8002aae:	f043 0307 	orr.w	r3, r3, #7
 8002ab2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <SystemInit+0xec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <SystemInit+0xec>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <SystemInit+0xec>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <SystemInit+0xec>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4929      	ldr	r1, [pc, #164]	; (8002b70 <SystemInit+0xec>)
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <SystemInit+0xf0>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <SystemInit+0xe8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <SystemInit+0xe8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 030f 	bic.w	r3, r3, #15
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <SystemInit+0xe8>)
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <SystemInit+0xec>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <SystemInit+0xec>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <SystemInit+0xec>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <SystemInit+0xec>)
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <SystemInit+0xf4>)
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <SystemInit+0xec>)
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <SystemInit+0xf8>)
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <SystemInit+0xec>)
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <SystemInit+0xfc>)
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <SystemInit+0xec>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <SystemInit+0xec>)
 8002b1a:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <SystemInit+0xfc>)
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <SystemInit+0xec>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <SystemInit+0xec>)
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <SystemInit+0xfc>)
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <SystemInit+0xec>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <SystemInit+0xec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <SystemInit+0xec>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <SystemInit+0xec>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <SystemInit+0x100>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <SystemInit+0x104>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4e:	d202      	bcs.n	8002b56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <SystemInit+0x108>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <SystemInit+0x10c>)
 8002b58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00
 8002b6c:	52002000 	.word	0x52002000
 8002b70:	58024400 	.word	0x58024400
 8002b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b78:	02020200 	.word	0x02020200
 8002b7c:	01ff0000 	.word	0x01ff0000
 8002b80:	01010280 	.word	0x01010280
 8002b84:	5c001000 	.word	0x5c001000
 8002b88:	ffff0000 	.word	0xffff0000
 8002b8c:	51008108 	.word	0x51008108
 8002b90:	52004000 	.word	0x52004000

08002b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b98:	f7ff ff74 	bl	8002a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b9e:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb4:	4c0a      	ldr	r4, [pc, #40]	; (8002be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f009 fd23 	bl	800c60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc6:	f7fd fd65 	bl	8000694 <main>
  bx  lr
 8002bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bd4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002bd8:	0800d078 	.word	0x0800d078
  ldr r2, =_sbss
 8002bdc:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002be0:	24000ee8 	.word	0x24000ee8

08002be4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC3_IRQHandler>
	...

08002be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f001 fa26 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf4:	f004 fb84 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_Init+0x68>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	4913      	ldr	r1, [pc, #76]	; (8002c54 <HAL_Init+0x6c>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_Init+0x68>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_Init+0x6c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_Init+0x70>)
 8002c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <HAL_Init+0x74>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f814 	bl	8002c60 <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e002      	b.n	8002c48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c42:	f7fe fe33 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58024400 	.word	0x58024400
 8002c54:	0800cffc 	.word	0x0800cffc
 8002c58:	24000004 	.word	0x24000004
 8002c5c:	24000000 	.word	0x24000000

08002c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_InitTick+0x60>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e021      	b.n	8002cb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_InitTick+0x64>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_InitTick+0x60>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f9fd 	bl	800408a <HAL_SYSTICK_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00e      	b.n	8002cb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d80a      	bhi.n	8002cb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f001 f9d5 	bl	8004056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <HAL_InitTick+0x68>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2400000c 	.word	0x2400000c
 8002cc4:	24000000 	.word	0x24000000
 8002cc8:	24000008 	.word	0x24000008

08002ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x20>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_IncTick+0x24>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2400000c 	.word	0x2400000c
 8002cf0:	24000ed4 	.word	0x24000ed4

08002cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_GetTick+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	24000ed4 	.word	0x24000ed4

08002d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff ffee 	bl	8002cf4 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d005      	beq.n	8002d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_Delay+0x44>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d32:	bf00      	nop
 8002d34:	f7ff ffde 	bl	8002cf4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d8f7      	bhi.n	8002d34 <HAL_Delay+0x28>
  {
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2400000c 	.word	0x2400000c

08002d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_GetREVID+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	5c001000 	.word	0x5c001000

08002d6c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d7c:	4904      	ldr	r1, [pc, #16]	; (8002d90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	58000400 	.word	0x58000400

08002d94 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	4904      	ldr	r1, [pc, #16]	; (8002dbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	58000400 	.word	0x58000400

08002dc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3330      	adds	r3, #48	; 0x30
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	4413      	add	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	211f      	movs	r1, #31
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 011f 	and.w	r1, r3, #31
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	431a      	orrs	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3314      	adds	r3, #20
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0e5b      	lsrs	r3, r3, #25
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	4413      	add	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0d1b      	lsrs	r3, r3, #20
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2107      	movs	r1, #7
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0d1b      	lsrs	r3, r3, #20
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0318 	and.w	r3, r3, #24
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fa4:	40d9      	lsrs	r1, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	400b      	ands	r3, r1
 8002faa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	000fffff 	.word	0x000fffff

08002fc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6093      	str	r3, [r2, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	5fffffc0 	.word	0x5fffffc0

08002fec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003000:	d101      	bne.n	8003006 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <LL_ADC_EnableInternalRegulator+0x24>)
 8003022:	4013      	ands	r3, r2
 8003024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	6fffffc0 	.word	0x6fffffc0

0800303c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003050:	d101      	bne.n	8003056 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <LL_ADC_IsEnabled+0x18>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <LL_ADC_IsEnabled+0x1a>
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d101      	bne.n	80030a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e18f      	b.n	8003412 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fe fbed 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff67 	bl	8002fec <LL_ADC_IsDeepPowerDownEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff4d 	bl	8002fc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff82 	bl	800303c <LL_ADC_IsInternalRegulatorEnabled>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d114      	bne.n	8003168 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff66 	bl	8003014 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003148:	4b87      	ldr	r3, [pc, #540]	; (8003368 <HAL_ADC_Init+0x290>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	4a87      	ldr	r2, [pc, #540]	; (800336c <HAL_ADC_Init+0x294>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	3301      	adds	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800315a:	e002      	b.n	8003162 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff65 	bl	800303c <LL_ADC_IsInternalRegulatorEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10d      	bne.n	8003194 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff76 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 800319e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 8129 	bne.w	8003400 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8125 	bne.w	8003400 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff4a 	bl	8003064 <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d136      	bne.n	8003244 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_ADC_Init+0x298>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_ADC_Init+0x112>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a63      	ldr	r2, [pc, #396]	; (8003374 <HAL_ADC_Init+0x29c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10e      	bne.n	8003208 <HAL_ADC_Init+0x130>
 80031ea:	4861      	ldr	r0, [pc, #388]	; (8003370 <HAL_ADC_Init+0x298>)
 80031ec:	f7ff ff3a 	bl	8003064 <LL_ADC_IsEnabled>
 80031f0:	4604      	mov	r4, r0
 80031f2:	4860      	ldr	r0, [pc, #384]	; (8003374 <HAL_ADC_Init+0x29c>)
 80031f4:	f7ff ff36 	bl	8003064 <LL_ADC_IsEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4323      	orrs	r3, r4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e008      	b.n	800321a <HAL_ADC_Init+0x142>
 8003208:	485b      	ldr	r0, [pc, #364]	; (8003378 <HAL_ADC_Init+0x2a0>)
 800320a:	f7ff ff2b 	bl	8003064 <LL_ADC_IsEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_ADC_Init+0x298>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_ADC_Init+0x15a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a51      	ldr	r2, [pc, #324]	; (8003374 <HAL_ADC_Init+0x29c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Init+0x15e>
 8003232:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_ADC_Init+0x2a4>)
 8003234:	e000      	b.n	8003238 <HAL_ADC_Init+0x160>
 8003236:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_ADC_Init+0x2a8>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7ff fdbe 	bl	8002dc0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003244:	f7ff fd86 	bl	8002d54 <HAL_GetREVID>
 8003248:	4603      	mov	r3, r0
 800324a:	f241 0203 	movw	r2, #4099	; 0x1003
 800324e:	4293      	cmp	r3, r2
 8003250:	d914      	bls.n	800327c <HAL_ADC_Init+0x1a4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d110      	bne.n	800327c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7d5b      	ldrb	r3, [r3, #21]
 800325e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003264:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800326a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7f1b      	ldrb	r3, [r3, #28]
 8003270:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003272:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003274:	f043 030c 	orr.w	r3, r3, #12
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e00d      	b.n	8003298 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7d5b      	ldrb	r3, [r3, #21]
 8003280:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003286:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800328c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7f1b      	ldrb	r3, [r3, #28]
 8003292:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7f1b      	ldrb	r3, [r3, #28]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	045b      	lsls	r3, r3, #17
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <HAL_ADC_Init+0x2ac>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	69b9      	ldr	r1, [r7, #24]
 80032da:	430b      	orrs	r3, r1
 80032dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fed1 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 80032e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fede 	bl	80030b0 <LL_ADC_INJ_IsConversionOngoing>
 80032f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d15f      	bne.n	80033bc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d15c      	bne.n	80033bc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7d1b      	ldrb	r3, [r3, #20]
 8003306:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_ADC_Init+0x2b0>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332a:	2b01      	cmp	r3, #1
 800332c:	d130      	bne.n	8003390 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_ADC_Init+0x2b4>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003342:	3a01      	subs	r2, #1
 8003344:	0411      	lsls	r1, r2, #16
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003356:	430a      	orrs	r2, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	611a      	str	r2, [r3, #16]
 8003364:	e01c      	b.n	80033a0 <HAL_ADC_Init+0x2c8>
 8003366:	bf00      	nop
 8003368:	24000000 	.word	0x24000000
 800336c:	053e2d63 	.word	0x053e2d63
 8003370:	40022000 	.word	0x40022000
 8003374:	40022100 	.word	0x40022100
 8003378:	58026000 	.word	0x58026000
 800337c:	40022300 	.word	0x40022300
 8003380:	58026300 	.word	0x58026300
 8003384:	fff0c003 	.word	0xfff0c003
 8003388:	ffffbffc 	.word	0xffffbffc
 800338c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb80 	bl	8003abc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10c      	bne.n	80033de <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f023 010f 	bic.w	r1, r3, #15
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
 80033dc:	e007      	b.n	80033ee <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020f 	bic.w	r2, r2, #15
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	f043 0201 	orr.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
 80033fe:	e007      	b.n	8003410 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0210 	orr.w	r2, r3, #16
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003410:	7ffb      	ldrb	r3, [r7, #31]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop

0800341c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b0a1      	sub	sp, #132	; 0x84
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a9d      	ldr	r2, [pc, #628]	; (80036ac <HAL_ADC_ConfigChannel+0x290>)
 8003436:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x2a>
 8003442:	2302      	movs	r3, #2
 8003444:	e321      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x66e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fe19 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 8306 	bne.w	8003a6c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <HAL_ADC_ConfigChannel+0x62>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	2201      	movs	r2, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	e016      	b.n	80034ac <HAL_ADC_ConfigChannel+0x90>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800348c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800348e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800349a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	69d1      	ldr	r1, [r2, #28]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	430b      	orrs	r3, r1
 80034b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f7ff fd02 	bl	8002ed0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fdda 	bl	800308a <LL_ADC_REG_IsConversionOngoing>
 80034d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fde7 	bl	80030b0 <LL_ADC_INJ_IsConversionOngoing>
 80034e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80b3 	bne.w	8003652 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 80af 	bne.w	8003652 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	461a      	mov	r2, r3
 8003502:	f7ff fd11 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_ADC_ConfigChannel+0x294>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d10b      	bne.n	800352c <HAL_ADC_ConfigChannel+0x110>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	e01d      	b.n	8003568 <HAL_ADC_ConfigChannel+0x14c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x136>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	e00a      	b.n	8003568 <HAL_ADC_ConfigChannel+0x14c>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d027      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6919      	ldr	r1, [r3, #16]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003580:	f7ff fc52 	bl	8002e28 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6919      	ldr	r1, [r3, #16]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	7e5b      	ldrb	r3, [r3, #25]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d102      	bne.n	800359a <HAL_ADC_ConfigChannel+0x17e>
 8003594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003598:	e000      	b.n	800359c <HAL_ADC_ConfigChannel+0x180>
 800359a:	2300      	movs	r3, #0
 800359c:	461a      	mov	r2, r3
 800359e:	f7ff fc7c 	bl	8002e9a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6919      	ldr	r1, [r3, #16]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	7e1b      	ldrb	r3, [r3, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x19c>
 80035b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035b6:	e000      	b.n	80035ba <HAL_ADC_ConfigChannel+0x19e>
 80035b8:	2300      	movs	r3, #0
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7ff fc54 	bl	8002e68 <LL_ADC_SetDataRightShift>
 80035c0:	e047      	b.n	8003652 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	069b      	lsls	r3, r3, #26
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d107      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	069b      	lsls	r3, r3, #26
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d107      	bne.n	800360a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003608:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	069b      	lsls	r3, r3, #26
 800361a:	429a      	cmp	r2, r3
 800361c:	d107      	bne.n	800362e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800362c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	069b      	lsls	r3, r3, #26
 800363e:	429a      	cmp	r2, r3
 8003640:	d107      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003650:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fd04 	bl	8003064 <LL_ADC_IsEnabled>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 820d 	bne.w	8003a7e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff fc85 	bl	8002f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <HAL_ADC_ConfigChannel+0x290>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f040 8133 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800368e:	2b00      	cmp	r3, #0
 8003690:	d110      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x298>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	3301      	adds	r3, #1
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2b09      	cmp	r3, #9
 80036a0:	bf94      	ite	ls
 80036a2:	2301      	movls	r3, #1
 80036a4:	2300      	movhi	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e01e      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x2cc>
 80036aa:	bf00      	nop
 80036ac:	47ff0000 	.word	0x47ff0000
 80036b0:	5c001000 	.word	0x5c001000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e003      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80036d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2b09      	cmp	r3, #9
 80036e0:	bf94      	ite	ls
 80036e2:	2301      	movls	r3, #1
 80036e4:	2300      	movhi	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d079      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x2ec>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	069b      	lsls	r3, r3, #26
 8003702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003706:	e015      	b.n	8003734 <HAL_ADC_ConfigChannel+0x318>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003718:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	069b      	lsls	r3, r3, #26
 8003730:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x338>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	3301      	adds	r3, #1
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	e017      	b.n	8003784 <HAL_ADC_ConfigChannel+0x368>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	ea42 0103 	orr.w	r1, r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x38e>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	051b      	lsls	r3, r3, #20
 80037a8:	e018      	b.n	80037dc <HAL_ADC_ConfigChannel+0x3c0>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037dc:	430b      	orrs	r3, r1
 80037de:	e07e      	b.n	80038de <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x3e0>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	3301      	adds	r3, #1
 80037f4:	069b      	lsls	r3, r3, #26
 80037f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037fa:	e015      	b.n	8003828 <HAL_ADC_ConfigChannel+0x40c>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e003      	b.n	8003820 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	069b      	lsls	r3, r3, #26
 8003824:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x42c>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	e017      	b.n	8003878 <HAL_ADC_ConfigChannel+0x45c>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	61bb      	str	r3, [r7, #24]
  return result;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	ea42 0103 	orr.w	r1, r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10d      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x488>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	3b1e      	subs	r3, #30
 800389c:	051b      	lsls	r3, r3, #20
 800389e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a2:	e01b      	b.n	80038dc <HAL_ADC_ConfigChannel+0x4c0>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	60fb      	str	r3, [r7, #12]
  return result;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	3b1e      	subs	r3, #30
 80038d6:	051b      	lsls	r3, r3, #20
 80038d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038dc:	430b      	orrs	r3, r1
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7ff fb20 	bl	8002f28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f280 80c6 	bge.w	8003a7e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a67      	ldr	r2, [pc, #412]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_ConfigChannel+0x4ea>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_ADC_ConfigChannel+0x4ee>
 8003906:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 8003908:	e000      	b.n	800390c <HAL_ADC_ConfigChannel+0x4f0>
 800390a:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fa7d 	bl	8002e0c <LL_ADC_GetCommonPathInternalCh>
 8003912:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x50c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10e      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x52a>
 8003928:	485a      	ldr	r0, [pc, #360]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 800392a:	f7ff fb9b 	bl	8003064 <LL_ADC_IsEnabled>
 800392e:	4604      	mov	r4, r0
 8003930:	4859      	ldr	r0, [pc, #356]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003932:	f7ff fb97 	bl	8003064 <LL_ADC_IsEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	4323      	orrs	r3, r4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e008      	b.n	8003958 <HAL_ADC_ConfigChannel+0x53c>
 8003946:	4857      	ldr	r0, [pc, #348]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 8003948:	f7ff fb8c 	bl	8003064 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d07d      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a51      	ldr	r2, [pc, #324]	; (8003aa8 <HAL_ADC_ConfigChannel+0x68c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d130      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x5ac>
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12b      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4b      	ldr	r2, [pc, #300]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 8003976:	4293      	cmp	r3, r2
 8003978:	f040 8081 	bne.w	8003a7e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_ADC_ConfigChannel+0x574>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x578>
 8003990:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 8003992:	e000      	b.n	8003996 <HAL_ADC_ConfigChannel+0x57a>
 8003994:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7ff fa21 	bl	8002de6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a4:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_ADC_ConfigChannel+0x690>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039b8:	e002      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f9      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039c6:	e05a      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d11e      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x5f4>
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d119      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d14b      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_ADC_ConfigChannel+0x5de>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x5e2>
 80039fa:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 80039fc:	e000      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x5e4>
 80039fe:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7ff f9ec 	bl	8002de6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a0e:	e036      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <HAL_ADC_ConfigChannel+0x69c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d131      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d12c      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <HAL_ADC_ConfigChannel+0x688>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d127      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_ADC_ConfigChannel+0x678>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_ADC_ConfigChannel+0x626>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_ADC_ConfigChannel+0x67c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x62a>
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <HAL_ADC_ConfigChannel+0x680>)
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x62c>
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_ADC_ConfigChannel+0x684>)
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f7ff f9c8 	bl	8002de6 <LL_ADC_SetCommonPathInternalCh>
 8003a56:	e012      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a6a:	e008      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3784      	adds	r7, #132	; 0x84
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd90      	pop	{r4, r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022100 	.word	0x40022100
 8003a9c:	40022300 	.word	0x40022300
 8003aa0:	58026300 	.word	0x58026300
 8003aa4:	58026000 	.word	0x58026000
 8003aa8:	cb840000 	.word	0xcb840000
 8003aac:	24000000 	.word	0x24000000
 8003ab0:	053e2d63 	.word	0x053e2d63
 8003ab4:	c7520000 	.word	0xc7520000
 8003ab8:	cfb80000 	.word	0xcfb80000

08003abc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7a      	ldr	r2, [pc, #488]	; (8003cb4 <ADC_ConfigureBoostMode+0x1f8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <ADC_ConfigureBoostMode+0x1c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a79      	ldr	r2, [pc, #484]	; (8003cb8 <ADC_ConfigureBoostMode+0x1fc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d109      	bne.n	8003aec <ADC_ConfigureBoostMode+0x30>
 8003ad8:	4b78      	ldr	r3, [pc, #480]	; (8003cbc <ADC_ConfigureBoostMode+0x200>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e008      	b.n	8003afe <ADC_ConfigureBoostMode+0x42>
 8003aec:	4b74      	ldr	r3, [pc, #464]	; (8003cc0 <ADC_ConfigureBoostMode+0x204>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01c      	beq.n	8003b3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b02:	f003 fd77 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8003b06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b10:	d010      	beq.n	8003b34 <ADC_ConfigureBoostMode+0x78>
 8003b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b16:	d873      	bhi.n	8003c00 <ADC_ConfigureBoostMode+0x144>
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d002      	beq.n	8003b24 <ADC_ConfigureBoostMode+0x68>
 8003b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b22:	d16d      	bne.n	8003c00 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	60fb      	str	r3, [r7, #12]
        break;
 8003b32:	e068      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	60fb      	str	r3, [r7, #12]
        break;
 8003b3a:	e064      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	f004 ffbc 	bl	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b48:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b52:	d051      	beq.n	8003bf8 <ADC_ConfigureBoostMode+0x13c>
 8003b54:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b58:	d854      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b5a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b5e:	d047      	beq.n	8003bf0 <ADC_ConfigureBoostMode+0x134>
 8003b60:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b64:	d84e      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b66:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b6a:	d03d      	beq.n	8003be8 <ADC_ConfigureBoostMode+0x12c>
 8003b6c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b70:	d848      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b76:	d033      	beq.n	8003be0 <ADC_ConfigureBoostMode+0x124>
 8003b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b7c:	d842      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b7e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b82:	d029      	beq.n	8003bd8 <ADC_ConfigureBoostMode+0x11c>
 8003b84:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b88:	d83c      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b8a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b8e:	d01a      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003b90:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b94:	d836      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003b96:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b9a:	d014      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003b9c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ba0:	d830      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d00e      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bac:	d82a      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003bae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bb2:	d008      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bb8:	d824      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x148>
 8003bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bbe:	d002      	beq.n	8003bc6 <ADC_ConfigureBoostMode+0x10a>
 8003bc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bc4:	d11e      	bne.n	8003c04 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
        break;
 8003bd6:	e016      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
        break;
 8003bde:	e012      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	60fb      	str	r3, [r7, #12]
        break;
 8003be6:	e00e      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	60fb      	str	r3, [r7, #12]
        break;
 8003bee:	e00a      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	09db      	lsrs	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
        break;
 8003bf6:	e006      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	60fb      	str	r3, [r7, #12]
        break;
 8003bfe:	e002      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c00:	bf00      	nop
 8003c02:	e000      	b.n	8003c06 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c04:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c06:	f7ff f8a5 	bl	8002d54 <HAL_GetREVID>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d815      	bhi.n	8003c40 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <ADC_ConfigureBoostMode+0x208>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d908      	bls.n	8003c2e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c2c:	e03e      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c3c:	609a      	str	r2, [r3, #8]
}
 8003c3e:	e035      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <ADC_ConfigureBoostMode+0x20c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d808      	bhi.n	8003c60 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	e025      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <ADC_ConfigureBoostMode+0x210>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d80a      	bhi.n	8003c7e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	e016      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <ADC_ConfigureBoostMode+0x214>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d80a      	bhi.n	8003c9c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	e007      	b.n	8003cac <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	40022100 	.word	0x40022100
 8003cbc:	40022300 	.word	0x40022300
 8003cc0:	58026300 	.word	0x58026300
 8003cc4:	01312d00 	.word	0x01312d00
 8003cc8:	005f5e10 	.word	0x005f5e10
 8003ccc:	00bebc20 	.word	0x00bebc20
 8003cd0:	017d7840 	.word	0x017d7840

08003cd4 <LL_ADC_IsEnabled>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <LL_ADC_IsEnabled+0x18>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <LL_ADC_IsEnabled+0x1a>
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_REG_IsConversionOngoing>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b09f      	sub	sp, #124	; 0x7c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0be      	b.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d102      	bne.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d58:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	e001      	b.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e09d      	b.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ffb9 	bl	8003cfa <LL_ADC_REG_IsConversionOngoing>
 8003d88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffb3 	bl	8003cfa <LL_ADC_REG_IsConversionOngoing>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d17f      	bne.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d17c      	bne.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a47      	ldr	r2, [pc, #284]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003db4:	4b45      	ldr	r3, [pc, #276]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003db6:	e000      	b.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d039      	beq.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dea:	4836      	ldr	r0, [pc, #216]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dec:	f7ff ff72 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003df0:	4604      	mov	r4, r0
 8003df2:	4835      	ldr	r0, [pc, #212]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003df4:	f7ff ff6e 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4323      	orrs	r3, r4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e008      	b.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e08:	4832      	ldr	r0, [pc, #200]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e0a:	f7ff ff63 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d047      	beq.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6811      	ldr	r1, [r2, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	6892      	ldr	r2, [r2, #8]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e36:	e03a      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10e      	bne.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e5a:	f7ff ff3b 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4819      	ldr	r0, [pc, #100]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e62:	f7ff ff37 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4323      	orrs	r3, r4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e008      	b.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e76:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e78:	f7ff ff2c 	bl	8003cd4 <LL_ADC_IsEnabled>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e96:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e98:	e009      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003eac:	e000      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003eb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	377c      	adds	r7, #124	; 0x7c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	40022100 	.word	0x40022100
 8003ecc:	40022300 	.word	0x40022300
 8003ed0:	58026300 	.word	0x58026300
 8003ed4:	58026000 	.word	0x58026000
 8003ed8:	fffff0e0 	.word	0xfffff0e0

08003edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <__NVIC_SetPriorityGrouping+0x40>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <__NVIC_SetPriorityGrouping+0x40>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	60d3      	str	r3, [r2, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00
 8003f20:	05fa0000 	.word	0x05fa0000

08003f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__NVIC_GetPriorityGrouping+0x18>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0307 	and.w	r3, r3, #7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800400c:	d301      	bcc.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <SysTick_Config+0x40>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	210f      	movs	r1, #15
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f7ff ff8e 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Config+0x40>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <SysTick_Config+0x40>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff47 	bl	8003edc <__NVIC_SetPriorityGrouping>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff5e 	bl	8003f24 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffb2 	bl	8003ffc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0cf      	b.n	8004256 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2223      	movs	r2, #35	; 0x23
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fd fd0b 	bl	8001ae4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ce:	4b64      	ldr	r3, [pc, #400]	; (8004260 <HAL_ETH_Init+0x1bc>)
 80040d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040d4:	4a62      	ldr	r2, [pc, #392]	; (8004260 <HAL_ETH_Init+0x1bc>)
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040de:	4b60      	ldr	r3, [pc, #384]	; (8004260 <HAL_ETH_Init+0x1bc>)
 80040e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7a1b      	ldrb	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fe fe39 	bl	8002d6c <HAL_SYSCFG_ETHInterfaceSelect>
 80040fa:	e003      	b.n	8004104 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004100:	f7fe fe34 	bl	8002d6c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_ETH_Init+0x1c0>)
 8004106:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800411e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004120:	f7fe fde8 	bl	8002cf4 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004126:	e011      	b.n	800414c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004128:	f7fe fde4 	bl	8002cf4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004136:	d909      	bls.n	800414c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2204      	movs	r2, #4
 800413c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	22e0      	movs	r2, #224	; 0xe0
 8004144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e084      	b.n	8004256 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e4      	bne.n	8004128 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f886 	bl	8004270 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004164:	f003 fa46 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8004168:	4603      	mov	r3, r0
 800416a:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <HAL_ETH_Init+0x1c4>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	0c9a      	lsrs	r2, r3, #18
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3a01      	subs	r2, #1
 8004178:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fa71 	bl	8004664 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800418e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800419a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	22e0      	movs	r2, #224	; 0xe0
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e049      	b.n	8004256 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <HAL_ETH_Init+0x1c8>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6952      	ldr	r2, [r2, #20]
 80041d6:	0051      	lsls	r1, r2, #1
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	430b      	orrs	r3, r1
 80041de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fad9 	bl	800479e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fb1f 	bl	8004830 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	3305      	adds	r3, #5
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	3303      	adds	r3, #3
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	061a      	lsls	r2, r3, #24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	3302      	adds	r3, #2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	3301      	adds	r3, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004230:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800423e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004240:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2210      	movs	r2, #16
 8004250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	58000400 	.word	0x58000400
 8004268:	431bde83 	.word	0x431bde83
 800426c:	ffff8001 	.word	0xffff8001

08004270 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004280:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004288:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800428a:	f003 f9b3 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 800428e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d908      	bls.n	80042aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d804      	bhi.n	80042aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e027      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d908      	bls.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a17      	ldr	r2, [pc, #92]	; (8004314 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d204      	bcs.n	80042c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e01a      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a13      	ldr	r2, [pc, #76]	; (8004314 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d303      	bcc.n	80042d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d911      	bls.n	80042f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d908      	bls.n	80042ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <HAL_ETH_SetMDIOClockRange+0xac>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d804      	bhi.n	80042ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e005      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e000      	b.n	80042fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	01312cff 	.word	0x01312cff
 8004310:	02160ebf 	.word	0x02160ebf
 8004314:	03938700 	.word	0x03938700
 8004318:	05f5e0ff 	.word	0x05f5e0ff
 800431c:	08f0d17f 	.word	0x08f0d17f

08004320 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	791b      	ldrb	r3, [r3, #4]
 8004338:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800433a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	7b1b      	ldrb	r3, [r3, #12]
 8004340:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	7b5b      	ldrb	r3, [r3, #13]
 8004348:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800434a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	7b9b      	ldrb	r3, [r3, #14]
 8004350:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7bdb      	ldrb	r3, [r3, #15]
 8004358:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800435a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	7c12      	ldrb	r2, [r2, #16]
 8004360:	2a00      	cmp	r2, #0
 8004362:	d102      	bne.n	800436a <ETH_SetMACConfig+0x4a>
 8004364:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004368:	e000      	b.n	800436c <ETH_SetMACConfig+0x4c>
 800436a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800436c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	7c52      	ldrb	r2, [r2, #17]
 8004372:	2a00      	cmp	r2, #0
 8004374:	d102      	bne.n	800437c <ETH_SetMACConfig+0x5c>
 8004376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800437a:	e000      	b.n	800437e <ETH_SetMACConfig+0x5e>
 800437c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800437e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	7c9b      	ldrb	r3, [r3, #18]
 8004384:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004386:	431a      	orrs	r2, r3
               macconf->Speed |
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800438c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004392:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	7f1b      	ldrb	r3, [r3, #28]
 8004398:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800439a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	7f5b      	ldrb	r3, [r3, #29]
 80043a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80043a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	7f92      	ldrb	r2, [r2, #30]
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d102      	bne.n	80043b2 <ETH_SetMACConfig+0x92>
 80043ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b0:	e000      	b.n	80043b4 <ETH_SetMACConfig+0x94>
 80043b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80043b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	7fdb      	ldrb	r3, [r3, #31]
 80043ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80043bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	d102      	bne.n	80043ce <ETH_SetMACConfig+0xae>
 80043c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043cc:	e000      	b.n	80043d0 <ETH_SetMACConfig+0xb0>
 80043ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80043d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80043d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80043e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b56      	ldr	r3, [pc, #344]	; (800454c <ETH_SetMACConfig+0x22c>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800440a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800440c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004414:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800441e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004420:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004428:	2a00      	cmp	r2, #0
 800442a:	d102      	bne.n	8004432 <ETH_SetMACConfig+0x112>
 800442c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004430:	e000      	b.n	8004434 <ETH_SetMACConfig+0x114>
 8004432:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004434:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <ETH_SetMACConfig+0x230>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	430b      	orrs	r3, r1
 8004450:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004458:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <ETH_SetMACConfig+0x234>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	430b      	orrs	r3, r1
 8004474:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800447c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004482:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800448a:	2a00      	cmp	r2, #0
 800448c:	d101      	bne.n	8004492 <ETH_SetMACConfig+0x172>
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	e000      	b.n	8004494 <ETH_SetMACConfig+0x174>
 8004492:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004494:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80044aa:	4013      	ands	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	68f9      	ldr	r1, [r7, #12]
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80044bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80044c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f023 0103 	bic.w	r1, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	430a      	orrs	r2, r1
 80044de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80044ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004506:	2a00      	cmp	r2, #0
 8004508:	d101      	bne.n	800450e <ETH_SetMACConfig+0x1ee>
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	e000      	b.n	8004510 <ETH_SetMACConfig+0x1f0>
 800450e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004510:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004518:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800451a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004522:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004530:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	430a      	orrs	r2, r1
 800453c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	00048083 	.word	0x00048083
 8004550:	c0f88000 	.word	0xc0f88000
 8004554:	fffffef0 	.word	0xfffffef0

08004558 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b38      	ldr	r3, [pc, #224]	; (8004650 <ETH_SetDMAConfig+0xf8>)
 800456e:	4013      	ands	r3, r2
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6811      	ldr	r1, [r2, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800457e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	791b      	ldrb	r3, [r3, #4]
 8004584:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800458a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	7b1b      	ldrb	r3, [r3, #12]
 8004590:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <ETH_SetDMAConfig+0xfc>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	7b5b      	ldrb	r3, [r3, #13]
 80045b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80045cc:	4b22      	ldr	r3, [pc, #136]	; (8004658 <ETH_SetDMAConfig+0x100>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	430b      	orrs	r3, r1
 80045d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7d1b      	ldrb	r3, [r3, #20]
 80045e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80045ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	7f5b      	ldrb	r3, [r3, #29]
 80045f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <ETH_SetDMAConfig+0x104>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	430b      	orrs	r3, r1
 800460e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004612:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	7f1b      	ldrb	r3, [r3, #28]
 800461a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <ETH_SetDMAConfig+0x108>)
 8004632:	4013      	ands	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	430b      	orrs	r3, r1
 800463c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004640:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	ffff87fd 	.word	0xffff87fd
 8004654:	ffff2ffe 	.word	0xffff2ffe
 8004658:	fffec000 	.word	0xfffec000
 800465c:	ffc0efef 	.word	0xffc0efef
 8004660:	7fc0ffff 	.word	0x7fc0ffff

08004664 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b0a4      	sub	sp, #144	; 0x90
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004672:	2300      	movs	r3, #0
 8004674:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80046a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80046bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80046c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80046c8:	2300      	movs	r3, #0
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80046de:	2300      	movs	r3, #0
 80046e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80046e6:	2300      	movs	r3, #0
 80046e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046fc:	2320      	movs	r3, #32
 80046fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800470e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004720:	2302      	movs	r3, #2
 8004722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800473e:	2300      	movs	r3, #0
 8004740:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fde6 	bl	8004320 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004754:	2301      	movs	r3, #1
 8004756:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004758:	2301      	movs	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004766:	2300      	movs	r3, #0
 8004768:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800476e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004772:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800477c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004784:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fee1 	bl	8004558 <ETH_SetDMAConfig>
}
 8004796:	bf00      	nop
 8004798:	3790      	adds	r7, #144	; 0x90
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e01d      	b.n	80047e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68d9      	ldr	r1, [r3, #12]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	3206      	adds	r2, #6
 80047de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d9de      	bls.n	80047ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fc:	461a      	mov	r2, r3
 80047fe:	2303      	movs	r3, #3
 8004800:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e023      	b.n	8004886 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	3212      	adds	r2, #18
 800487c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d9d8      	bls.n	800483e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	461a      	mov	r2, r3
 80048b4:	2303      	movs	r3, #3
 80048b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b098      	sub	sp, #96	; 0x60
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80048f4:	4a84      	ldr	r2, [pc, #528]	; (8004b08 <HAL_FDCAN_Init+0x21c>)
 80048f6:	f107 030c 	add.w	r3, r7, #12
 80048fa:	4611      	mov	r1, r2
 80048fc:	224c      	movs	r2, #76	; 0x4c
 80048fe:	4618      	mov	r0, r3
 8004900:	f007 fea8 	bl	800c654 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e1c6      	b.n	8004c9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7e      	ldr	r2, [pc, #504]	; (8004b0c <HAL_FDCAN_Init+0x220>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d106      	bne.n	8004926 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd fa02 	bl	8001d44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0210 	bic.w	r2, r2, #16
 800494e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004950:	f7fe f9d0 	bl	8002cf4 <HAL_GetTick>
 8004954:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004956:	e014      	b.n	8004982 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004958:	f7fe f9cc 	bl	8002cf4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b0a      	cmp	r3, #10
 8004964:	d90d      	bls.n	8004982 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e18c      	b.n	8004c9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b08      	cmp	r3, #8
 800498e:	d0e3      	beq.n	8004958 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a0:	f7fe f9a8 	bl	8002cf4 <HAL_GetTick>
 80049a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049a6:	e014      	b.n	80049d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049a8:	f7fe f9a4 	bl	8002cf4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b0a      	cmp	r3, #10
 80049b4:	d90d      	bls.n	80049d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2203      	movs	r2, #3
 80049ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e164      	b.n	8004c9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0e3      	beq.n	80049a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0202 	orr.w	r2, r2, #2
 80049ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	7c1b      	ldrb	r3, [r3, #16]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d108      	bne.n	8004a0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a06:	619a      	str	r2, [r3, #24]
 8004a08:	e007      	b.n	8004a1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7c5b      	ldrb	r3, [r3, #17]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d108      	bne.n	8004a34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a30:	619a      	str	r2, [r3, #24]
 8004a32:	e007      	b.n	8004a44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7c9b      	ldrb	r3, [r3, #18]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d108      	bne.n	8004a5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a5a:	619a      	str	r2, [r3, #24]
 8004a5c:	e007      	b.n	8004a6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0210 	bic.w	r2, r2, #16
 8004aa2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d108      	bne.n	8004abe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0204 	orr.w	r2, r2, #4
 8004aba:	619a      	str	r2, [r3, #24]
 8004abc:	e030      	b.n	8004b20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02c      	beq.n	8004b20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d020      	beq.n	8004b10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004adc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0210 	orr.w	r2, r2, #16
 8004aec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d114      	bne.n	8004b20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0220 	orr.w	r2, r2, #32
 8004b04:	619a      	str	r2, [r3, #24]
 8004b06:	e00b      	b.n	8004b20 <HAL_FDCAN_Init+0x234>
 8004b08:	0800cfb0 	.word	0x0800cfb0
 8004b0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0220 	orr.w	r2, r2, #32
 8004b1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b54:	d115      	bne.n	8004b82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	3b01      	subs	r3, #1
 8004b62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba8:	4413      	add	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d011      	beq.n	8004bd2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004bb6:	f023 0107 	bic.w	r1, r3, #7
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3360      	adds	r3, #96	; 0x60
 8004bc2:	443b      	add	r3, r7
 8004bc4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004be2:	f023 0107 	bic.w	r1, r3, #7
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	3360      	adds	r3, #96	; 0x60
 8004bee:	443b      	add	r3, r7
 8004bf0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	3360      	adds	r3, #96	; 0x60
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d012      	beq.n	8004c5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3360      	adds	r3, #96	; 0x60
 8004c48:	443b      	add	r3, r7
 8004c4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <HAL_FDCAN_Init+0x3b8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d107      	bne.n	8004c74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f022 0203 	bic.w	r2, r2, #3
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f80b 	bl	8004ca8 <FDCAN_CalcultateRamBlockAddresses>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3760      	adds	r7, #96	; 0x60
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	4000a000 	.word	0x4000a000

08004ca8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004cbe:	4ba7      	ldr	r3, [pc, #668]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	0091      	lsls	r1, r2, #2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	041a      	lsls	r2, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cfe:	4b97      	ldr	r3, [pc, #604]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0091      	lsls	r1, r2, #2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	041a      	lsls	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	0091      	lsls	r1, r2, #2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	041a      	lsls	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d88:	4b74      	ldr	r3, [pc, #464]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0091      	lsls	r1, r2, #2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004da2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004daa:	041a      	lsls	r2, r3, #16
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004dd0:	4b62      	ldr	r3, [pc, #392]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	0091      	lsls	r1, r2, #2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4413      	add	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004dfc:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	0091      	lsls	r1, r2, #2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e16:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	041a      	lsls	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4413      	add	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	0091      	lsls	r1, r2, #2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e58:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e74:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	061a      	lsls	r2, r3, #24
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8c:	4b34      	ldr	r3, [pc, #208]	; (8004f60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e8e:	4413      	add	r3, r2
 8004e90:	009a      	lsls	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d915      	bls.n	8004f84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004f58:	e006      	b.n	8004f68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004f5a:	bf00      	nop
 8004f5c:	ffff0003 	.word	0xffff0003
 8004f60:	10002b00 	.word	0x10002b00
 8004f64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e010      	b.n	8004fa6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e005      	b.n	8004f98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3304      	adds	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3f3      	bcc.n	8004f8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004fc2:	4b89      	ldr	r3, [pc, #548]	; (80051e8 <HAL_GPIO_Init+0x234>)
 8004fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fc6:	e194      	b.n	80052f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2101      	movs	r1, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8186 	beq.w	80052ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d005      	beq.n	8004ff8 <HAL_GPIO_Init+0x44>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d130      	bne.n	800505a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	2203      	movs	r2, #3
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800502e:	2201      	movs	r2, #1
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 0201 	and.w	r2, r3, #1
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b03      	cmp	r3, #3
 8005064:	d017      	beq.n	8005096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d123      	bne.n	80050ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	08da      	lsrs	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3208      	adds	r2, #8
 80050aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	220f      	movs	r2, #15
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	08da      	lsrs	r2, r3, #3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3208      	adds	r2, #8
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	2203      	movs	r2, #3
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0203 	and.w	r2, r3, #3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80e0 	beq.w	80052ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512c:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_GPIO_Init+0x238>)
 800512e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005132:	4a2e      	ldr	r2, [pc, #184]	; (80051ec <HAL_GPIO_Init+0x238>)
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_GPIO_Init+0x238>)
 800513e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800514a:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <HAL_GPIO_Init+0x23c>)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	3302      	adds	r3, #2
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <HAL_GPIO_Init+0x240>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d052      	beq.n	800521c <HAL_GPIO_Init+0x268>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_GPIO_Init+0x244>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_GPIO_Init+0x22e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_GPIO_Init+0x248>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02b      	beq.n	80051de <HAL_GPIO_Init+0x22a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <HAL_GPIO_Init+0x24c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d025      	beq.n	80051da <HAL_GPIO_Init+0x226>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <HAL_GPIO_Init+0x250>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01f      	beq.n	80051d6 <HAL_GPIO_Init+0x222>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <HAL_GPIO_Init+0x254>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d019      	beq.n	80051d2 <HAL_GPIO_Init+0x21e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	; (800520c <HAL_GPIO_Init+0x258>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_GPIO_Init+0x21a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <HAL_GPIO_Init+0x25c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00d      	beq.n	80051ca <HAL_GPIO_Init+0x216>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_GPIO_Init+0x260>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <HAL_GPIO_Init+0x212>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_GPIO_Init+0x264>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_GPIO_Init+0x20e>
 80051be:	2309      	movs	r3, #9
 80051c0:	e02d      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051c2:	230a      	movs	r3, #10
 80051c4:	e02b      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051c6:	2308      	movs	r3, #8
 80051c8:	e029      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051ca:	2307      	movs	r3, #7
 80051cc:	e027      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051ce:	2306      	movs	r3, #6
 80051d0:	e025      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051d2:	2305      	movs	r3, #5
 80051d4:	e023      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051d6:	2304      	movs	r3, #4
 80051d8:	e021      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051da:	2303      	movs	r3, #3
 80051dc:	e01f      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051de:	2302      	movs	r3, #2
 80051e0:	e01d      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01b      	b.n	800521e <HAL_GPIO_Init+0x26a>
 80051e6:	bf00      	nop
 80051e8:	58000080 	.word	0x58000080
 80051ec:	58024400 	.word	0x58024400
 80051f0:	58000400 	.word	0x58000400
 80051f4:	58020000 	.word	0x58020000
 80051f8:	58020400 	.word	0x58020400
 80051fc:	58020800 	.word	0x58020800
 8005200:	58020c00 	.word	0x58020c00
 8005204:	58021000 	.word	0x58021000
 8005208:	58021400 	.word	0x58021400
 800520c:	58021800 	.word	0x58021800
 8005210:	58021c00 	.word	0x58021c00
 8005214:	58022000 	.word	0x58022000
 8005218:	58022400 	.word	0x58022400
 800521c:	2300      	movs	r3, #0
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	f002 0203 	and.w	r2, r2, #3
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	4093      	lsls	r3, r2
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800522e:	4938      	ldr	r1, [pc, #224]	; (8005310 <HAL_GPIO_Init+0x35c>)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	3302      	adds	r3, #2
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800526a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4013      	ands	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f47f ae63 	bne.w	8004fc8 <HAL_GPIO_Init+0x14>
  }
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3724      	adds	r7, #36	; 0x24
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	58000400 	.word	0x58000400

08005314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
 8005330:	e001      	b.n	8005336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
 8005350:	4613      	mov	r3, r2
 8005352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005354:	787b      	ldrb	r3, [r7, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005360:	e003      	b.n	800536a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	041a      	lsls	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	619a      	str	r2, [r3, #24]
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4013      	ands	r3, r2
 800538e:	041a      	lsls	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	43d9      	mvns	r1, r3
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	400b      	ands	r3, r1
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	619a      	str	r2, [r3, #24]
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07f      	b.n	80054be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fc fd86 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	; 0x24
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	e006      	b.n	8005434 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005432:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d104      	bne.n	8005446 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <HAL_I2C_Init+0x11c>)
 8005452:	430b      	orrs	r3, r1
 8005454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	02008000 	.word	0x02008000

080054cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	817b      	strh	r3, [r7, #10]
 80054de:	460b      	mov	r3, r1
 80054e0:	813b      	strh	r3, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	f040 80fd 	bne.w	80056ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_I2C_Mem_Read+0x34>
 80054fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0f1      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_I2C_Mem_Read+0x4e>
 8005516:	2302      	movs	r3, #2
 8005518:	e0ea      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005522:	f7fd fbe7 	bl	8002cf4 <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2319      	movs	r3, #25
 800552e:	2201      	movs	r2, #1
 8005530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f95b 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0d5      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2222      	movs	r2, #34	; 0x22
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2240      	movs	r2, #64	; 0x40
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800556c:	88f8      	ldrh	r0, [r7, #6]
 800556e:	893a      	ldrh	r2, [r7, #8]
 8005570:	8979      	ldrh	r1, [r7, #10]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	4603      	mov	r3, r0
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f8bf 	bl	8005700 <I2C_RequestMemoryRead>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0ad      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2bff      	cmp	r3, #255	; 0xff
 800559c:	d90e      	bls.n	80055bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	22ff      	movs	r2, #255	; 0xff
 80055a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	8979      	ldrh	r1, [r7, #10]
 80055ac:	4b52      	ldr	r3, [pc, #328]	; (80056f8 <HAL_I2C_Mem_Read+0x22c>)
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fad5 	bl	8005b64 <I2C_TransferConfig>
 80055ba:	e00f      	b.n	80055dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	8979      	ldrh	r1, [r7, #10]
 80055ce:	4b4a      	ldr	r3, [pc, #296]	; (80056f8 <HAL_I2C_Mem_Read+0x22c>)
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fac4 	bl	8005b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2200      	movs	r2, #0
 80055e4:	2104      	movs	r1, #4
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f902 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e07c      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d034      	beq.n	800569c <HAL_I2C_Mem_Read+0x1d0>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d130      	bne.n	800569c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	2200      	movs	r2, #0
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8d3 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e04d      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2bff      	cmp	r3, #255	; 0xff
 800565c:	d90e      	bls.n	800567c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005668:	b2da      	uxtb	r2, r3
 800566a:	8979      	ldrh	r1, [r7, #10]
 800566c:	2300      	movs	r3, #0
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fa75 	bl	8005b64 <I2C_TransferConfig>
 800567a:	e00f      	b.n	800569c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	b2da      	uxtb	r2, r3
 800568c:	8979      	ldrh	r1, [r7, #10]
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fa64 	bl	8005b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d19a      	bne.n	80055dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f936 	bl	800591c <I2C_WaitOnSTOPFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e01a      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2220      	movs	r2, #32
 80056c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6859      	ldr	r1, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_I2C_Mem_Read+0x230>)
 80056ce:	400b      	ands	r3, r1
 80056d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
  }
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	80002400 	.word	0x80002400
 80056fc:	fe00e800 	.word	0xfe00e800

08005700 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4603      	mov	r3, r0
 8005710:	817b      	strh	r3, [r7, #10]
 8005712:	460b      	mov	r3, r1
 8005714:	813b      	strh	r3, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	8979      	ldrh	r1, [r7, #10]
 8005720:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <I2C_RequestMemoryRead+0xa4>)
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fa1c 	bl	8005b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	69b9      	ldr	r1, [r7, #24]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f8ac 	bl	800588e <I2C_WaitOnTXISFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e02c      	b.n	800579a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
 8005750:	e015      	b.n	800577e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005752:	893b      	ldrh	r3, [r7, #8]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b29b      	uxth	r3, r3
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f892 	bl	800588e <I2C_WaitOnTXISFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e012      	b.n	800579a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2200      	movs	r2, #0
 8005786:	2140      	movs	r1, #64	; 0x40
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f831 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	80002000 	.word	0x80002000

080057a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d103      	bne.n	80057c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d007      	beq.n	80057e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	619a      	str	r2, [r3, #24]
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	e031      	b.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d02d      	beq.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fd fa73 	bl	8002cf4 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d122      	bne.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d113      	bne.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	f043 0220 	orr.w	r2, r3, #32
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e00f      	b.n	8005886 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d0be      	beq.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800589a:	e033      	b.n	8005904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f87f 	bl	80059a4 <I2C_IsErrorOccurred>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e031      	b.n	8005914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d025      	beq.n	8005904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b8:	f7fd fa1c 	bl	8002cf4 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d11a      	bne.n	8005904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d013      	beq.n	8005904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e007      	b.n	8005914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d1c4      	bne.n	800589c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005928:	e02f      	b.n	800598a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f838 	bl	80059a4 <I2C_IsErrorOccurred>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e02d      	b.n	800599a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fd f9d9 	bl	8002cf4 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11a      	bne.n	800598a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d013      	beq.n	800598a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e007      	b.n	800599a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b20      	cmp	r3, #32
 8005996:	d1c8      	bne.n	800592a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d068      	beq.n	8005aa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2210      	movs	r2, #16
 80059d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059d8:	e049      	b.n	8005a6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d045      	beq.n	8005a6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fd f987 	bl	8002cf4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <I2C_IsErrorOccurred+0x54>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13a      	bne.n	8005a6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1a:	d121      	bne.n	8005a60 <I2C_IsErrorOccurred+0xbc>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a22:	d01d      	beq.n	8005a60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a24:	7cfb      	ldrb	r3, [r7, #19]
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d01a      	beq.n	8005a60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a3a:	f7fd f95b 	bl	8002cf4 <HAL_GetTick>
 8005a3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a40:	e00e      	b.n	8005a60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a42:	f7fd f957 	bl	8002cf4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b19      	cmp	r3, #25
 8005a4e:	d907      	bls.n	8005a60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f043 0320 	orr.w	r3, r3, #32
 8005a56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005a5e:	e006      	b.n	8005a6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d1e9      	bne.n	8005a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d003      	beq.n	8005a84 <I2C_IsErrorOccurred+0xe0>
 8005a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0aa      	beq.n	80059da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2220      	movs	r2, #32
 8005a92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f043 0308 	orr.w	r3, r3, #8
 8005adc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f043 0302 	orr.w	r3, r3, #2
 8005afe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01c      	beq.n	8005b52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fe45 	bl	80057a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6859      	ldr	r1, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <I2C_IsErrorOccurred+0x1bc>)
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3728      	adds	r7, #40	; 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	fe00e800 	.word	0xfe00e800

08005b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	817b      	strh	r3, [r7, #10]
 8005b72:	4613      	mov	r3, r2
 8005b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b7c:	7a7b      	ldrb	r3, [r7, #9]
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	0d5b      	lsrs	r3, r3, #21
 8005b9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ba2:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <I2C_TransferConfig+0x60>)
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	ea02 0103 	and.w	r1, r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	03ff63ff 	.word	0x03ff63ff

08005bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d138      	bne.n	8005c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e032      	b.n	8005c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2224      	movs	r2, #36	; 0x24
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d139      	bne.n	8005ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e033      	b.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2224      	movs	r2, #36	; 0x24
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e0bf      	b.n	8005e8a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc f94a 	bl	8001fb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6899      	ldr	r1, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_LTDC_Init+0x19c>)
 8005d6c:	400b      	ands	r3, r1
 8005d6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6899      	ldr	r1, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68d9      	ldr	r1, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b3e      	ldr	r3, [pc, #248]	; (8005e94 <HAL_LTDC_Init+0x19c>)
 8005d9a:	400b      	ands	r3, r1
 8005d9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	041b      	lsls	r3, r3, #16
 8005da4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68d9      	ldr	r1, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6919      	ldr	r1, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <HAL_LTDC_Init+0x19c>)
 8005dc8:	400b      	ands	r3, r1
 8005dca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6919      	ldr	r1, [r3, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6959      	ldr	r1, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_LTDC_Init+0x19c>)
 8005df6:	400b      	ands	r3, r1
 8005df8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6959      	ldr	r1, [r3, #20]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0206 	orr.w	r2, r2, #6
 8005e66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	f000f800 	.word	0xf000f800

08005e98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e98:	b5b0      	push	{r4, r5, r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_LTDC_ConfigLayer+0x1a>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e02c      	b.n	8005f0c <HAL_LTDC_ConfigLayer+0x74>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2134      	movs	r1, #52	; 0x34
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f811 	bl	8005f14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bdb0      	pop	{r4, r5, r7, pc}

08005f14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b089      	sub	sp, #36	; 0x24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f30:	4413      	add	r3, r2
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	01db      	lsls	r3, r3, #7
 8005f40:	4413      	add	r3, r2
 8005f42:	3384      	adds	r3, #132	; 0x84
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	01d2      	lsls	r2, r2, #7
 8005f50:	440a      	add	r2, r1
 8005f52:	3284      	adds	r2, #132	; 0x84
 8005f54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f6a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f6c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	01db      	lsls	r3, r3, #7
 8005f78:	440b      	add	r3, r1
 8005f7a:	3384      	adds	r3, #132	; 0x84
 8005f7c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f92:	4413      	add	r3, r2
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	01db      	lsls	r3, r3, #7
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3384      	adds	r3, #132	; 0x84
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	4611      	mov	r1, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	01d2      	lsls	r2, r2, #7
 8005fb2:	440a      	add	r2, r1
 8005fb4:	3284      	adds	r2, #132	; 0x84
 8005fb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fca:	4413      	add	r3, r2
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	440b      	add	r3, r1
 8005fda:	3384      	adds	r3, #132	; 0x84
 8005fdc:	4619      	mov	r1, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4413      	add	r3, r2
 8005ff0:	3384      	adds	r3, #132	; 0x84
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	01d2      	lsls	r2, r2, #7
 8005ffe:	440a      	add	r2, r1
 8006000:	3284      	adds	r2, #132	; 0x84
 8006002:	f023 0307 	bic.w	r3, r3, #7
 8006006:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	4413      	add	r3, r2
 8006014:	3384      	adds	r3, #132	; 0x84
 8006016:	461a      	mov	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	01db      	lsls	r3, r3, #7
 8006044:	4413      	add	r3, r2
 8006046:	3384      	adds	r3, #132	; 0x84
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	4413      	add	r3, r2
 8006056:	3384      	adds	r3, #132	; 0x84
 8006058:	461a      	mov	r2, r3
 800605a:	2300      	movs	r3, #0
 800605c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006064:	461a      	mov	r2, r3
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	431a      	orrs	r2, r3
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	440b      	add	r3, r1
 800607a:	3384      	adds	r3, #132	; 0x84
 800607c:	4619      	mov	r1, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	01db      	lsls	r3, r3, #7
 800608e:	4413      	add	r3, r2
 8006090:	3384      	adds	r3, #132	; 0x84
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	4611      	mov	r1, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	01d2      	lsls	r2, r2, #7
 800609e:	440a      	add	r2, r1
 80060a0:	3284      	adds	r2, #132	; 0x84
 80060a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4413      	add	r3, r2
 80060b4:	3384      	adds	r3, #132	; 0x84
 80060b6:	461a      	mov	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4413      	add	r3, r2
 80060ca:	3384      	adds	r3, #132	; 0x84
 80060cc:	69da      	ldr	r2, [r3, #28]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	01db      	lsls	r3, r3, #7
 80060d8:	440b      	add	r3, r1
 80060da:	3384      	adds	r3, #132	; 0x84
 80060dc:	4619      	mov	r1, r3
 80060de:	4b58      	ldr	r3, [pc, #352]	; (8006240 <LTDC_SetConfig+0x32c>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	68f9      	ldr	r1, [r7, #12]
 80060ee:	6809      	ldr	r1, [r1, #0]
 80060f0:	4608      	mov	r0, r1
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	01c9      	lsls	r1, r1, #7
 80060f6:	4401      	add	r1, r0
 80060f8:	3184      	adds	r1, #132	; 0x84
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4413      	add	r3, r2
 800610a:	3384      	adds	r3, #132	; 0x84
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	01db      	lsls	r3, r3, #7
 8006118:	4413      	add	r3, r2
 800611a:	3384      	adds	r3, #132	; 0x84
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	01db      	lsls	r3, r3, #7
 800612c:	4413      	add	r3, r2
 800612e:	3384      	adds	r3, #132	; 0x84
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006140:	2304      	movs	r3, #4
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e01b      	b.n	800617e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d102      	bne.n	8006154 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800614e:	2303      	movs	r3, #3
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e014      	b.n	800617e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b04      	cmp	r3, #4
 800615a:	d00b      	beq.n	8006174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006160:	2b02      	cmp	r3, #2
 8006162:	d007      	beq.n	8006174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006168:	2b03      	cmp	r3, #3
 800616a:	d003      	beq.n	8006174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006170:	2b07      	cmp	r3, #7
 8006172:	d102      	bne.n	800617a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006174:	2302      	movs	r3, #2
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	e001      	b.n	800617e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	4413      	add	r3, r2
 800618a:	3384      	adds	r3, #132	; 0x84
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	4611      	mov	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	01d2      	lsls	r2, r2, #7
 8006198:	440a      	add	r2, r1
 800619a:	3284      	adds	r2, #132	; 0x84
 800619c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80061a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	041a      	lsls	r2, r3, #16
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	1acb      	subs	r3, r1, r3
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	3307      	adds	r3, #7
 80061c0:	68f9      	ldr	r1, [r7, #12]
 80061c2:	6809      	ldr	r1, [r1, #0]
 80061c4:	4608      	mov	r0, r1
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	01c9      	lsls	r1, r1, #7
 80061ca:	4401      	add	r1, r0
 80061cc:	3184      	adds	r1, #132	; 0x84
 80061ce:	4313      	orrs	r3, r2
 80061d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	4413      	add	r3, r2
 80061de:	3384      	adds	r3, #132	; 0x84
 80061e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4619      	mov	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	01db      	lsls	r3, r3, #7
 80061ec:	440b      	add	r3, r1
 80061ee:	3384      	adds	r3, #132	; 0x84
 80061f0:	4619      	mov	r1, r3
 80061f2:	4b14      	ldr	r3, [pc, #80]	; (8006244 <LTDC_SetConfig+0x330>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	01db      	lsls	r3, r3, #7
 8006202:	4413      	add	r3, r2
 8006204:	3384      	adds	r3, #132	; 0x84
 8006206:	461a      	mov	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	4413      	add	r3, r2
 800621a:	3384      	adds	r3, #132	; 0x84
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	4611      	mov	r1, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	01d2      	lsls	r2, r2, #7
 8006228:	440a      	add	r2, r1
 800622a:	3284      	adds	r2, #132	; 0x84
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	6013      	str	r3, [r2, #0]
}
 8006232:	bf00      	nop
 8006234:	3724      	adds	r7, #36	; 0x24
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	fffff8f8 	.word	0xfffff8f8
 8006244:	fffff800 	.word	0xfffff800

08006248 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624a:	b08f      	sub	sp, #60	; 0x3c
 800624c:	af0a      	add	r7, sp, #40	; 0x28
 800624e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e116      	b.n	8006488 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fc f9bf 	bl	80025f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2203      	movs	r2, #3
 800627e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f005 ff15 	bl	800c0c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	687e      	ldr	r6, [r7, #4]
 80062a6:	466d      	mov	r5, sp
 80062a8:	f106 0410 	add.w	r4, r6, #16
 80062ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80062bc:	1d33      	adds	r3, r6, #4
 80062be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c0:	6838      	ldr	r0, [r7, #0]
 80062c2:	f005 fe93 	bl	800bfec <USB_CoreInit>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0d7      	b.n	8006488 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f005 ff03 	bl	800c0ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e04a      	b.n	8006380 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062ea:	7bfa      	ldrb	r2, [r7, #15]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	333d      	adds	r3, #61	; 0x3d
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062fe:	7bfa      	ldrb	r2, [r7, #15]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	333c      	adds	r3, #60	; 0x3c
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	b298      	uxth	r0, r3
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3356      	adds	r3, #86	; 0x56
 8006326:	4602      	mov	r2, r0
 8006328:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800632a:	7bfa      	ldrb	r2, [r7, #15]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3340      	adds	r3, #64	; 0x40
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800633e:	7bfa      	ldrb	r2, [r7, #15]
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3344      	adds	r3, #68	; 0x44
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006352:	7bfa      	ldrb	r2, [r7, #15]
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3348      	adds	r3, #72	; 0x48
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	334c      	adds	r3, #76	; 0x4c
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	3301      	adds	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d3af      	bcc.n	80062ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
 800638e:	e044      	b.n	800641a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063a6:	7bfa      	ldrb	r2, [r7, #15]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80063b8:	7bfa      	ldrb	r2, [r7, #15]
 80063ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063bc:	7bfa      	ldrb	r2, [r7, #15]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063d2:	7bfa      	ldrb	r2, [r7, #15]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063e8:	7bfa      	ldrb	r2, [r7, #15]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	3301      	adds	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	7bfa      	ldrb	r2, [r7, #15]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d3b5      	bcc.n	8006390 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	687e      	ldr	r6, [r7, #4]
 800642c:	466d      	mov	r5, sp
 800642e:	f106 0410 	add.w	r4, r6, #16
 8006432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800643a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800643e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006442:	1d33      	adds	r3, r6, #4
 8006444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006446:	6838      	ldr	r0, [r7, #0]
 8006448:	f005 fe9c 	bl	800c184 <USB_DevInit>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e014      	b.n	8006488 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f80a 	bl	8006490 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f006 f85a 	bl	800c53a <USB_DevDisconnect>

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	10000003 	.word	0x10000003

080064d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d00a      	beq.n	8006502 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064ec:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d001      	beq.n	80064fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e01f      	b.n	800653e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e01d      	b.n	800653e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006502:	4b11      	ldr	r3, [pc, #68]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f023 0207 	bic.w	r2, r3, #7
 800650a:	490f      	ldr	r1, [pc, #60]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4313      	orrs	r3, r2
 8006510:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006512:	f7fc fbef 	bl	8002cf4 <HAL_GetTick>
 8006516:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006518:	e009      	b.n	800652e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800651a:	f7fc fbeb 	bl	8002cf4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006528:	d901      	bls.n	800652e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e007      	b.n	800653e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653a:	d1ee      	bne.n	800651a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	58024800 	.word	0x58024800

0800654c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4a04      	ldr	r2, [pc, #16]	; (8006568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800655a:	60d3      	str	r3, [r2, #12]
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	58024800 	.word	0x58024800

0800656c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af02      	add	r7, sp, #8
 8006572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006574:	f7fc fbbe 	bl	8002cf4 <HAL_GetTick>
 8006578:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e05f      	b.n	8006644 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fb fdff 	bl	8002194 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006596:	f241 3188 	movw	r1, #5000	; 0x1388
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f85a 	bl	8006654 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	021a      	lsls	r2, r3, #8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	2120      	movs	r1, #32
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f852 	bl	8006670 <QSPI_WaitFlagStateUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d135      	bne.n	8006642 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <HAL_QSPI_Init+0xe0>)
 80065de:	4013      	ands	r3, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	0611      	lsls	r1, r2, #24
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68d2      	ldr	r2, [r2, #12]
 80065ea:	4311      	orrs	r1, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	69d2      	ldr	r2, [r2, #28]
 80065f0:	4311      	orrs	r1, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6a12      	ldr	r2, [r2, #32]
 80065f6:	4311      	orrs	r1, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <HAL_QSPI_Init+0xe4>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6912      	ldr	r2, [r2, #16]
 800660e:	0411      	lsls	r1, r2, #16
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6952      	ldr	r2, [r2, #20]
 8006614:	4311      	orrs	r1, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6992      	ldr	r2, [r2, #24]
 800661a:	4311      	orrs	r1, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	430b      	orrs	r3, r1
 8006622:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006642:	7afb      	ldrb	r3, [r7, #11]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	00ffff2f 	.word	0x00ffff2f
 8006650:	ffe0f8fe 	.word	0xffe0f8fe

08006654 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006680:	e01a      	b.n	80066b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d016      	beq.n	80066b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fc fb33 	bl	8002cf4 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2204      	movs	r2, #4
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	f043 0201 	orr.w	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e00e      	b.n	80066d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf14      	ite	ne
 80066c6:	2301      	movne	r3, #1
 80066c8:	2300      	moveq	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d1d6      	bne.n	8006682 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	; 0x30
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f000 bc48 	b.w	8006f84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8088 	beq.w	8006812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006702:	4b99      	ldr	r3, [pc, #612]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800670c:	4b96      	ldr	r3, [pc, #600]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b10      	cmp	r3, #16
 8006716:	d007      	beq.n	8006728 <HAL_RCC_OscConfig+0x48>
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	2b18      	cmp	r3, #24
 800671c:	d111      	bne.n	8006742 <HAL_RCC_OscConfig+0x62>
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d10c      	bne.n	8006742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006728:	4b8f      	ldr	r3, [pc, #572]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d06d      	beq.n	8006810 <HAL_RCC_OscConfig+0x130>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d169      	bne.n	8006810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f000 bc21 	b.w	8006f84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674a:	d106      	bne.n	800675a <HAL_RCC_OscConfig+0x7a>
 800674c:	4b86      	ldr	r3, [pc, #536]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a85      	ldr	r2, [pc, #532]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	e02e      	b.n	80067b8 <HAL_RCC_OscConfig+0xd8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10c      	bne.n	800677c <HAL_RCC_OscConfig+0x9c>
 8006762:	4b81      	ldr	r3, [pc, #516]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a80      	ldr	r2, [pc, #512]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a7d      	ldr	r2, [pc, #500]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e01d      	b.n	80067b8 <HAL_RCC_OscConfig+0xd8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0xc0>
 8006786:	4b78      	ldr	r3, [pc, #480]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a77      	ldr	r2, [pc, #476]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800678c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4b75      	ldr	r3, [pc, #468]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a74      	ldr	r2, [pc, #464]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e00b      	b.n	80067b8 <HAL_RCC_OscConfig+0xd8>
 80067a0:	4b71      	ldr	r3, [pc, #452]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a70      	ldr	r2, [pc, #448]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b6e      	ldr	r3, [pc, #440]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a6d      	ldr	r2, [pc, #436]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80067b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d013      	beq.n	80067e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fc fa98 	bl	8002cf4 <HAL_GetTick>
 80067c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067c8:	f7fc fa94 	bl	8002cf4 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e3d4      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067da:	4b63      	ldr	r3, [pc, #396]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0xe8>
 80067e6:	e014      	b.n	8006812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e8:	f7fc fa84 	bl	8002cf4 <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f0:	f7fc fa80 	bl	8002cf4 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	; 0x64
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e3c0      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006802:	4b59      	ldr	r3, [pc, #356]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0x110>
 800680e:	e000      	b.n	8006812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80ca 	beq.w	80069b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006820:	4b51      	ldr	r3, [pc, #324]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006828:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800682a:	4b4f      	ldr	r3, [pc, #316]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <HAL_RCC_OscConfig+0x166>
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	2b18      	cmp	r3, #24
 800683a:	d156      	bne.n	80068ea <HAL_RCC_OscConfig+0x20a>
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d151      	bne.n	80068ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006846:	4b48      	ldr	r3, [pc, #288]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_RCC_OscConfig+0x17e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e392      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800685e:	4b42      	ldr	r3, [pc, #264]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 0219 	bic.w	r2, r3, #25
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	493f      	ldr	r1, [pc, #252]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7fc fa40 	bl	8002cf4 <HAL_GetTick>
 8006874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006878:	f7fc fa3c 	bl	8002cf4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e37c      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800688a:	4b37      	ldr	r3, [pc, #220]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006896:	f7fc fa5d 	bl	8002d54 <HAL_GetREVID>
 800689a:	4603      	mov	r3, r0
 800689c:	f241 0203 	movw	r2, #4099	; 0x1003
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d817      	bhi.n	80068d4 <HAL_RCC_OscConfig+0x1f4>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d108      	bne.n	80068be <HAL_RCC_OscConfig+0x1de>
 80068ac:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80068b4:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068bc:	e07a      	b.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068be:	4b2a      	ldr	r3, [pc, #168]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	031b      	lsls	r3, r3, #12
 80068cc:	4926      	ldr	r1, [pc, #152]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d2:	e06f      	b.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d4:	4b24      	ldr	r3, [pc, #144]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	061b      	lsls	r3, r3, #24
 80068e2:	4921      	ldr	r1, [pc, #132]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068e8:	e064      	b.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d047      	beq.n	8006982 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 0219 	bic.w	r2, r3, #25
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	491a      	ldr	r1, [pc, #104]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006900:	4313      	orrs	r3, r2
 8006902:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fc f9f6 	bl	8002cf4 <HAL_GetTick>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690c:	f7fc f9f2 	bl	8002cf4 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e332      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692a:	f7fc fa13 	bl	8002d54 <HAL_GetREVID>
 800692e:	4603      	mov	r3, r0
 8006930:	f241 0203 	movw	r2, #4099	; 0x1003
 8006934:	4293      	cmp	r3, r2
 8006936:	d819      	bhi.n	800696c <HAL_RCC_OscConfig+0x28c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d108      	bne.n	8006952 <HAL_RCC_OscConfig+0x272>
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006948:	4a07      	ldr	r2, [pc, #28]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	6053      	str	r3, [r2, #4]
 8006950:	e030      	b.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	031b      	lsls	r3, r3, #12
 8006960:	4901      	ldr	r1, [pc, #4]	; (8006968 <HAL_RCC_OscConfig+0x288>)
 8006962:	4313      	orrs	r3, r2
 8006964:	604b      	str	r3, [r1, #4]
 8006966:	e025      	b.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
 8006968:	58024400 	.word	0x58024400
 800696c:	4b9a      	ldr	r3, [pc, #616]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	4997      	ldr	r1, [pc, #604]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]
 8006980:	e018      	b.n	80069b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006982:	4b95      	ldr	r3, [pc, #596]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a94      	ldr	r2, [pc, #592]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698e:	f7fc f9b1 	bl	8002cf4 <HAL_GetTick>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006996:	f7fc f9ad 	bl	8002cf4 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e2ed      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069a8:	4b8b      	ldr	r3, [pc, #556]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f0      	bne.n	8006996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80a9 	beq.w	8006b14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c2:	4b85      	ldr	r3, [pc, #532]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069cc:	4b82      	ldr	r3, [pc, #520]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d007      	beq.n	80069e8 <HAL_RCC_OscConfig+0x308>
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b18      	cmp	r3, #24
 80069dc:	d13a      	bne.n	8006a54 <HAL_RCC_OscConfig+0x374>
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d135      	bne.n	8006a54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069e8:	4b7b      	ldr	r3, [pc, #492]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_OscConfig+0x320>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	2b80      	cmp	r3, #128	; 0x80
 80069fa:	d001      	beq.n	8006a00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e2c1      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a00:	f7fc f9a8 	bl	8002d54 <HAL_GetREVID>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d817      	bhi.n	8006a3e <HAL_RCC_OscConfig+0x35e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d108      	bne.n	8006a28 <HAL_RCC_OscConfig+0x348>
 8006a16:	4b70      	ldr	r3, [pc, #448]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a1e:	4a6e      	ldr	r2, [pc, #440]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a26:	e075      	b.n	8006b14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a28:	4b6b      	ldr	r3, [pc, #428]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	069b      	lsls	r3, r3, #26
 8006a36:	4968      	ldr	r1, [pc, #416]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a3c:	e06a      	b.n	8006b14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a3e:	4b66      	ldr	r3, [pc, #408]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	4962      	ldr	r1, [pc, #392]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a52:	e05f      	b.n	8006b14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d042      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a5c:	4b5e      	ldr	r3, [pc, #376]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a5d      	ldr	r2, [pc, #372]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fc f944 	bl	8002cf4 <HAL_GetTick>
 8006a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a70:	f7fc f940 	bl	8002cf4 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e280      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a82:	4b55      	ldr	r3, [pc, #340]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a8e:	f7fc f961 	bl	8002d54 <HAL_GetREVID>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d817      	bhi.n	8006acc <HAL_RCC_OscConfig+0x3ec>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d108      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x3d6>
 8006aa4:	4b4c      	ldr	r3, [pc, #304]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006aac:	4a4a      	ldr	r2, [pc, #296]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab2:	6053      	str	r3, [r2, #4]
 8006ab4:	e02e      	b.n	8006b14 <HAL_RCC_OscConfig+0x434>
 8006ab6:	4b48      	ldr	r3, [pc, #288]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	069b      	lsls	r3, r3, #26
 8006ac4:	4944      	ldr	r1, [pc, #272]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
 8006aca:	e023      	b.n	8006b14 <HAL_RCC_OscConfig+0x434>
 8006acc:	4b42      	ldr	r3, [pc, #264]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	493f      	ldr	r1, [pc, #252]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60cb      	str	r3, [r1, #12]
 8006ae0:	e018      	b.n	8006b14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ae2:	4b3d      	ldr	r3, [pc, #244]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a3c      	ldr	r2, [pc, #240]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aee:	f7fc f901 	bl	8002cf4 <HAL_GetTick>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006af6:	f7fc f8fd 	bl	8002cf4 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e23d      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b08:	4b33      	ldr	r3, [pc, #204]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f0      	bne.n	8006af6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d036      	beq.n	8006b8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d019      	beq.n	8006b5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b28:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2c:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7fc f8de 	bl	8002cf4 <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b3c:	f7fc f8da 	bl	8002cf4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e21a      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b4e:	4b22      	ldr	r3, [pc, #136]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x45c>
 8006b5a:	e018      	b.n	8006b8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b68:	f7fc f8c4 	bl	8002cf4 <HAL_GetTick>
 8006b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b70:	f7fc f8c0 	bl	8002cf4 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e200      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d039      	beq.n	8006c0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01c      	beq.n	8006bdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bae:	f7fc f8a1 	bl	8002cf4 <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb6:	f7fc f89d 	bl	8002cf4 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e1dd      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bc8:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <HAL_RCC_OscConfig+0x4f8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x4d6>
 8006bd4:	e01b      	b.n	8006c0e <HAL_RCC_OscConfig+0x52e>
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bdc:	4b9b      	ldr	r3, [pc, #620]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a9a      	ldr	r2, [pc, #616]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006be8:	f7fc f884 	bl	8002cf4 <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bf0:	f7fc f880 	bl	8002cf4 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e1c0      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c02:	4b92      	ldr	r3, [pc, #584]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8081 	beq.w	8006d1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c1c:	4b8c      	ldr	r3, [pc, #560]	; (8006e50 <HAL_RCC_OscConfig+0x770>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a8b      	ldr	r2, [pc, #556]	; (8006e50 <HAL_RCC_OscConfig+0x770>)
 8006c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c28:	f7fc f864 	bl	8002cf4 <HAL_GetTick>
 8006c2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c30:	f7fc f860 	bl	8002cf4 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	; 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e1a0      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c42:	4b83      	ldr	r3, [pc, #524]	; (8006e50 <HAL_RCC_OscConfig+0x770>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d106      	bne.n	8006c64 <HAL_RCC_OscConfig+0x584>
 8006c56:	4b7d      	ldr	r3, [pc, #500]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4a7c      	ldr	r2, [pc, #496]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6713      	str	r3, [r2, #112]	; 0x70
 8006c62:	e02d      	b.n	8006cc0 <HAL_RCC_OscConfig+0x5e0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10c      	bne.n	8006c86 <HAL_RCC_OscConfig+0x5a6>
 8006c6c:	4b77      	ldr	r3, [pc, #476]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4a76      	ldr	r2, [pc, #472]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c72:	f023 0301 	bic.w	r3, r3, #1
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
 8006c78:	4b74      	ldr	r3, [pc, #464]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4a73      	ldr	r2, [pc, #460]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c7e:	f023 0304 	bic.w	r3, r3, #4
 8006c82:	6713      	str	r3, [r2, #112]	; 0x70
 8006c84:	e01c      	b.n	8006cc0 <HAL_RCC_OscConfig+0x5e0>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b05      	cmp	r3, #5
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x5c8>
 8006c8e:	4b6f      	ldr	r3, [pc, #444]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a6e      	ldr	r2, [pc, #440]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c94:	f043 0304 	orr.w	r3, r3, #4
 8006c98:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9a:	4b6c      	ldr	r3, [pc, #432]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	4a6b      	ldr	r2, [pc, #428]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca6:	e00b      	b.n	8006cc0 <HAL_RCC_OscConfig+0x5e0>
 8006ca8:	4b68      	ldr	r3, [pc, #416]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	4a67      	ldr	r2, [pc, #412]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb4:	4b65      	ldr	r3, [pc, #404]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	4a64      	ldr	r2, [pc, #400]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006cba:	f023 0304 	bic.w	r3, r3, #4
 8006cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d015      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fc f814 	bl	8002cf4 <HAL_GetTick>
 8006ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cce:	e00a      	b.n	8006ce6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd0:	f7fc f810 	bl	8002cf4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e14e      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ce6:	4b59      	ldr	r3, [pc, #356]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0ee      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x5f0>
 8006cf2:	e014      	b.n	8006d1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fb fffe 	bl	8002cf4 <HAL_GetTick>
 8006cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cfa:	e00a      	b.n	8006d12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfc:	f7fb fffa 	bl	8002cf4 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e138      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d12:	4b4e      	ldr	r3, [pc, #312]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1ee      	bne.n	8006cfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 812d 	beq.w	8006f82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d28:	4b48      	ldr	r3, [pc, #288]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d30:	2b18      	cmp	r3, #24
 8006d32:	f000 80bd 	beq.w	8006eb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	f040 809e 	bne.w	8006e7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d40:	4b42      	ldr	r3, [pc, #264]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a41      	ldr	r2, [pc, #260]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7fb ffd2 	bl	8002cf4 <HAL_GetTick>
 8006d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d54:	f7fb ffce 	bl	8002cf4 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e10e      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d72:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d76:	4b37      	ldr	r3, [pc, #220]	; (8006e54 <HAL_RCC_OscConfig+0x774>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d82:	0112      	lsls	r2, r2, #4
 8006d84:	430a      	orrs	r2, r1
 8006d86:	4931      	ldr	r1, [pc, #196]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	628b      	str	r3, [r1, #40]	; 0x28
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	3b01      	subs	r3, #1
 8006d92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	025b      	lsls	r3, r3, #9
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	3b01      	subs	r3, #1
 8006da8:	041b      	lsls	r3, r3, #16
 8006daa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	3b01      	subs	r3, #1
 8006db6:	061b      	lsls	r3, r3, #24
 8006db8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dbc:	4923      	ldr	r1, [pc, #140]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006dc2:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dce:	4b1f      	ldr	r3, [pc, #124]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd2:	4b21      	ldr	r3, [pc, #132]	; (8006e58 <HAL_RCC_OscConfig+0x778>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006dda:	00d2      	lsls	r2, r2, #3
 8006ddc:	491b      	ldr	r1, [pc, #108]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006de2:	4b1a      	ldr	r3, [pc, #104]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	f023 020c 	bic.w	r2, r3, #12
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	4917      	ldr	r1, [pc, #92]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006df4:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	f023 0202 	bic.w	r2, r3, #2
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e00:	4912      	ldr	r1, [pc, #72]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e06:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e12:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e2a:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a04      	ldr	r2, [pc, #16]	; (8006e4c <HAL_RCC_OscConfig+0x76c>)
 8006e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fb ff57 	bl	8002cf4 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e48:	e011      	b.n	8006e6e <HAL_RCC_OscConfig+0x78e>
 8006e4a:	bf00      	nop
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	58024800 	.word	0x58024800
 8006e54:	fffffc0c 	.word	0xfffffc0c
 8006e58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e5c:	f7fb ff4a 	bl	8002cf4 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e08a      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e6e:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x77c>
 8006e7a:	e082      	b.n	8006f82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e7c:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a42      	ldr	r2, [pc, #264]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7fb ff34 	bl	8002cf4 <HAL_GetTick>
 8006e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e90:	f7fb ff30 	bl	8002cf4 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e070      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ea2:	4b3a      	ldr	r3, [pc, #232]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x7b0>
 8006eae:	e068      	b.n	8006f82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006eb0:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006eb6:	4b35      	ldr	r3, [pc, #212]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d031      	beq.n	8006f28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f003 0203 	and.w	r2, r3, #3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d12a      	bne.n	8006f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	091b      	lsrs	r3, r3, #4
 8006ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d122      	bne.n	8006f28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d11a      	bne.n	8006f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	0a5b      	lsrs	r3, r3, #9
 8006ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d111      	bne.n	8006f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	0c1b      	lsrs	r3, r3, #16
 8006f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d108      	bne.n	8006f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	0e1b      	lsrs	r3, r3, #24
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e02b      	b.n	8006f84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	08db      	lsrs	r3, r3, #3
 8006f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d01f      	beq.n	8006f82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f4e:	f7fb fed1 	bl	8002cf4 <HAL_GetTick>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f54:	bf00      	nop
 8006f56:	f7fb fecd 	bl	8002cf4 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d0f9      	beq.n	8006f56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f62:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_RCC_OscConfig+0x8b0>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f6e:	00d2      	lsls	r2, r2, #3
 8006f70:	4906      	ldr	r1, [pc, #24]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <HAL_RCC_OscConfig+0x8ac>)
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3730      	adds	r7, #48	; 0x30
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	ffff0007 	.word	0xffff0007

08006f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e19c      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa8:	4b8a      	ldr	r3, [pc, #552]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d910      	bls.n	8006fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb6:	4b87      	ldr	r3, [pc, #540]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 020f 	bic.w	r2, r3, #15
 8006fbe:	4985      	ldr	r1, [pc, #532]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b83      	ldr	r3, [pc, #524]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e184      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	4b7b      	ldr	r3, [pc, #492]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d908      	bls.n	8007006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ff4:	4b78      	ldr	r3, [pc, #480]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	4975      	ldr	r1, [pc, #468]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007002:	4313      	orrs	r3, r2
 8007004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d010      	beq.n	8007034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	4b70      	ldr	r3, [pc, #448]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800701e:	429a      	cmp	r2, r3
 8007020:	d908      	bls.n	8007034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007022:	4b6d      	ldr	r3, [pc, #436]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	496a      	ldr	r1, [pc, #424]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007030:	4313      	orrs	r3, r2
 8007032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	d010      	beq.n	8007062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	4b64      	ldr	r3, [pc, #400]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800704c:	429a      	cmp	r2, r3
 800704e:	d908      	bls.n	8007062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007050:	4b61      	ldr	r3, [pc, #388]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	495e      	ldr	r1, [pc, #376]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 800705e:	4313      	orrs	r3, r2
 8007060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d010      	beq.n	8007090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69da      	ldr	r2, [r3, #28]
 8007072:	4b59      	ldr	r3, [pc, #356]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800707a:	429a      	cmp	r2, r3
 800707c:	d908      	bls.n	8007090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800707e:	4b56      	ldr	r3, [pc, #344]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	4953      	ldr	r1, [pc, #332]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 800708c:	4313      	orrs	r3, r2
 800708e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d010      	beq.n	80070be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	4b4d      	ldr	r3, [pc, #308]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d908      	bls.n	80070be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ac:	4b4a      	ldr	r3, [pc, #296]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f023 020f 	bic.w	r2, r3, #15
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4947      	ldr	r1, [pc, #284]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d055      	beq.n	8007176 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070ca:	4b43      	ldr	r3, [pc, #268]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4940      	ldr	r1, [pc, #256]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070e4:	4b3c      	ldr	r3, [pc, #240]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d121      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0f6      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d107      	bne.n	800710c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070fc:	4b36      	ldr	r3, [pc, #216]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d115      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0ea      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d107      	bne.n	8007124 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007114:	4b30      	ldr	r3, [pc, #192]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0de      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007124:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0d6      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007134:	4b28      	ldr	r3, [pc, #160]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f023 0207 	bic.w	r2, r3, #7
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	4925      	ldr	r1, [pc, #148]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007142:	4313      	orrs	r3, r2
 8007144:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007146:	f7fb fdd5 	bl	8002cf4 <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714c:	e00a      	b.n	8007164 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800714e:	f7fb fdd1 	bl	8002cf4 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f241 3288 	movw	r2, #5000	; 0x1388
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e0be      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007164:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	429a      	cmp	r2, r3
 8007174:	d1eb      	bne.n	800714e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	429a      	cmp	r2, r3
 8007190:	d208      	bcs.n	80071a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f023 020f 	bic.w	r2, r3, #15
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	490e      	ldr	r1, [pc, #56]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d214      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f023 020f 	bic.w	r2, r3, #15
 80071ba:	4906      	ldr	r1, [pc, #24]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	4313      	orrs	r3, r2
 80071c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d005      	beq.n	80071dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e086      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
 80071d4:	52002000 	.word	0x52002000
 80071d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	4b3f      	ldr	r3, [pc, #252]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d208      	bcs.n	800720a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071f8:	4b3c      	ldr	r3, [pc, #240]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4939      	ldr	r1, [pc, #228]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007206:	4313      	orrs	r3, r2
 8007208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	4b34      	ldr	r3, [pc, #208]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007222:	429a      	cmp	r2, r3
 8007224:	d208      	bcs.n	8007238 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007226:	4b31      	ldr	r3, [pc, #196]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	492e      	ldr	r1, [pc, #184]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007234:	4313      	orrs	r3, r2
 8007236:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007250:	429a      	cmp	r2, r3
 8007252:	d208      	bcs.n	8007266 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	4922      	ldr	r1, [pc, #136]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007262:	4313      	orrs	r3, r2
 8007264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d010      	beq.n	8007294 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69da      	ldr	r2, [r3, #28]
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727e:	429a      	cmp	r2, r3
 8007280:	d208      	bcs.n	8007294 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007282:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4917      	ldr	r1, [pc, #92]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007290:	4313      	orrs	r3, r2
 8007292:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007294:	f000 f834 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	4912      	ldr	r1, [pc, #72]	; (80072f0 <HAL_RCC_ClockConfig+0x35c>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072b2:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	4a0d      	ldr	r2, [pc, #52]	; (80072f0 <HAL_RCC_ClockConfig+0x35c>)
 80072bc:	5cd3      	ldrb	r3, [r2, r3]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <HAL_RCC_ClockConfig+0x360>)
 80072ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <HAL_RCC_ClockConfig+0x364>)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <HAL_RCC_ClockConfig+0x368>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fb fcc2 	bl	8002c60 <HAL_InitTick>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	58024400 	.word	0x58024400
 80072f0:	0800cffc 	.word	0x0800cffc
 80072f4:	24000004 	.word	0x24000004
 80072f8:	24000000 	.word	0x24000000
 80072fc:	24000008 	.word	0x24000008

08007300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007300:	b480      	push	{r7}
 8007302:	b089      	sub	sp, #36	; 0x24
 8007304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007306:	4bb3      	ldr	r3, [pc, #716]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800730e:	2b18      	cmp	r3, #24
 8007310:	f200 8155 	bhi.w	80075be <HAL_RCC_GetSysClockFreq+0x2be>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007381 	.word	0x08007381
 8007320:	080075bf 	.word	0x080075bf
 8007324:	080075bf 	.word	0x080075bf
 8007328:	080075bf 	.word	0x080075bf
 800732c:	080075bf 	.word	0x080075bf
 8007330:	080075bf 	.word	0x080075bf
 8007334:	080075bf 	.word	0x080075bf
 8007338:	080075bf 	.word	0x080075bf
 800733c:	080073a7 	.word	0x080073a7
 8007340:	080075bf 	.word	0x080075bf
 8007344:	080075bf 	.word	0x080075bf
 8007348:	080075bf 	.word	0x080075bf
 800734c:	080075bf 	.word	0x080075bf
 8007350:	080075bf 	.word	0x080075bf
 8007354:	080075bf 	.word	0x080075bf
 8007358:	080075bf 	.word	0x080075bf
 800735c:	080073ad 	.word	0x080073ad
 8007360:	080075bf 	.word	0x080075bf
 8007364:	080075bf 	.word	0x080075bf
 8007368:	080075bf 	.word	0x080075bf
 800736c:	080075bf 	.word	0x080075bf
 8007370:	080075bf 	.word	0x080075bf
 8007374:	080075bf 	.word	0x080075bf
 8007378:	080075bf 	.word	0x080075bf
 800737c:	080073b3 	.word	0x080073b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007380:	4b94      	ldr	r3, [pc, #592]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800738c:	4b91      	ldr	r3, [pc, #580]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	4a90      	ldr	r2, [pc, #576]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800739e:	e111      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073a0:	4b8d      	ldr	r3, [pc, #564]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073a2:	61bb      	str	r3, [r7, #24]
      break;
 80073a4:	e10e      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80073a6:	4b8d      	ldr	r3, [pc, #564]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073a8:	61bb      	str	r3, [r7, #24]
      break;
 80073aa:	e10b      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80073ac:	4b8c      	ldr	r3, [pc, #560]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073ae:	61bb      	str	r3, [r7, #24]
      break;
 80073b0:	e108      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b2:	4b88      	ldr	r3, [pc, #544]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80073bc:	4b85      	ldr	r3, [pc, #532]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	091b      	lsrs	r3, r3, #4
 80073c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073c8:	4b82      	ldr	r3, [pc, #520]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073d2:	4b80      	ldr	r3, [pc, #512]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	08db      	lsrs	r3, r3, #3
 80073d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80e1 	beq.w	80075b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	f000 8083 	beq.w	8007504 <HAL_RCC_GetSysClockFreq+0x204>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b02      	cmp	r3, #2
 8007402:	f200 80a1 	bhi.w	8007548 <HAL_RCC_GetSysClockFreq+0x248>
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0x114>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d056      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007412:	e099      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007414:	4b6f      	ldr	r3, [pc, #444]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02d      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007420:	4b6c      	ldr	r3, [pc, #432]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	08db      	lsrs	r3, r3, #3
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	4a6b      	ldr	r2, [pc, #428]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
 8007430:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b62      	ldr	r3, [pc, #392]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a02 	vldr	s12, [r7, #8]
 800745e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800747a:	e087      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eddf 6a58 	vldr	s13, [pc, #352]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b51      	ldr	r3, [pc, #324]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074be:	e065      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80075ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b40      	ldr	r3, [pc, #256]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007502:	e043      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80075f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b2f      	ldr	r3, [pc, #188]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a02 	vldr	s12, [r7, #8]
 800752a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007546:	e021      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a26 	vldr	s13, [pc, #152]	; 80075ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a02 	vldr	s12, [r7, #8]
 800756e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800758a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800758c:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	0a5b      	lsrs	r3, r3, #9
 8007592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007596:	3301      	adds	r3, #1
 8007598:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b0:	ee17 3a90 	vmov	r3, s15
 80075b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80075b6:	e005      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
      break;
 80075bc:	e002      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075c0:	61bb      	str	r3, [r7, #24]
      break;
 80075c2:	bf00      	nop
  }

  return sysclockfreq;
 80075c4:	69bb      	ldr	r3, [r7, #24]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3724      	adds	r7, #36	; 0x24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58024400 	.word	0x58024400
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
 80075e0:	017d7840 	.word	0x017d7840
 80075e4:	46000000 	.word	0x46000000
 80075e8:	4c742400 	.word	0x4c742400
 80075ec:	4a742400 	.word	0x4a742400
 80075f0:	4bbebc20 	.word	0x4bbebc20

080075f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075fa:	f7ff fe81 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 80075fe:	4602      	mov	r2, r0
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_RCC_GetHCLKFreq+0x50>)
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	490f      	ldr	r1, [pc, #60]	; (8007648 <HAL_RCC_GetHCLKFreq+0x54>)
 800760c:	5ccb      	ldrb	r3, [r1, r3]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	fa22 f303 	lsr.w	r3, r2, r3
 8007616:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <HAL_RCC_GetHCLKFreq+0x50>)
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	4a09      	ldr	r2, [pc, #36]	; (8007648 <HAL_RCC_GetHCLKFreq+0x54>)
 8007622:	5cd3      	ldrb	r3, [r2, r3]
 8007624:	f003 031f 	and.w	r3, r3, #31
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	fa22 f303 	lsr.w	r3, r2, r3
 800762e:	4a07      	ldr	r2, [pc, #28]	; (800764c <HAL_RCC_GetHCLKFreq+0x58>)
 8007630:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007632:	4a07      	ldr	r2, [pc, #28]	; (8007650 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <HAL_RCC_GetHCLKFreq+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	58024400 	.word	0x58024400
 8007648:	0800cffc 	.word	0x0800cffc
 800764c:	24000004 	.word	0x24000004
 8007650:	24000000 	.word	0x24000000

08007654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007658:	f7ff ffcc 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 800765c:	4602      	mov	r2, r0
 800765e:	4b06      	ldr	r3, [pc, #24]	; (8007678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	091b      	lsrs	r3, r3, #4
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	4904      	ldr	r1, [pc, #16]	; (800767c <HAL_RCC_GetPCLK1Freq+0x28>)
 800766a:	5ccb      	ldrb	r3, [r1, r3]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007674:	4618      	mov	r0, r3
 8007676:	bd80      	pop	{r7, pc}
 8007678:	58024400 	.word	0x58024400
 800767c:	0800cffc 	.word	0x0800cffc

08007680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007684:	f7ff ffb6 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8007688:	4602      	mov	r2, r0
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	4904      	ldr	r1, [pc, #16]	; (80076a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007696:	5ccb      	ldrb	r3, [r1, r3]
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	58024400 	.word	0x58024400
 80076a8:	0800cffc 	.word	0x0800cffc

080076ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b0:	b0ca      	sub	sp, #296	; 0x128
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076b8:	2300      	movs	r3, #0
 80076ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076be:	2300      	movs	r3, #0
 80076c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80076d0:	2500      	movs	r5, #0
 80076d2:	ea54 0305 	orrs.w	r3, r4, r5
 80076d6:	d049      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076e2:	d02f      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80076e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076e8:	d828      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076ee:	d01a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80076f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076f4:	d822      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80076fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076fe:	d007      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007700:	e01c      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007702:	4bb8      	ldr	r3, [pc, #736]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4ab7      	ldr	r2, [pc, #732]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800770e:	e01a      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007714:	3308      	adds	r3, #8
 8007716:	2102      	movs	r1, #2
 8007718:	4618      	mov	r0, r3
 800771a:	f002 fb61 	bl	8009de0 <RCCEx_PLL2_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007724:	e00f      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772a:	3328      	adds	r3, #40	; 0x28
 800772c:	2102      	movs	r1, #2
 800772e:	4618      	mov	r0, r3
 8007730:	f002 fc08 	bl	8009f44 <RCCEx_PLL3_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800773a:	e004      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007742:	e000      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800774e:	4ba5      	ldr	r3, [pc, #660]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007752:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775c:	4aa1      	ldr	r2, [pc, #644]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800775e:	430b      	orrs	r3, r1
 8007760:	6513      	str	r3, [r2, #80]	; 0x50
 8007762:	e003      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007778:	f04f 0900 	mov.w	r9, #0
 800777c:	ea58 0309 	orrs.w	r3, r8, r9
 8007780:	d047      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	2b04      	cmp	r3, #4
 800778a:	d82a      	bhi.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077a9 	.word	0x080077a9
 8007798:	080077b7 	.word	0x080077b7
 800779c:	080077cd 	.word	0x080077cd
 80077a0:	080077eb 	.word	0x080077eb
 80077a4:	080077eb 	.word	0x080077eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a8:	4b8e      	ldr	r3, [pc, #568]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	4a8d      	ldr	r2, [pc, #564]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077b4:	e01a      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ba:	3308      	adds	r3, #8
 80077bc:	2100      	movs	r1, #0
 80077be:	4618      	mov	r0, r3
 80077c0:	f002 fb0e 	bl	8009de0 <RCCEx_PLL2_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077ca:	e00f      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d0:	3328      	adds	r3, #40	; 0x28
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f002 fbb5 	bl	8009f44 <RCCEx_PLL3_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077e0:	e004      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077e8:	e000      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80077ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077f4:	4b7b      	ldr	r3, [pc, #492]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	f023 0107 	bic.w	r1, r3, #7
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	4a78      	ldr	r2, [pc, #480]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007804:	430b      	orrs	r3, r1
 8007806:	6513      	str	r3, [r2, #80]	; 0x50
 8007808:	e003      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800780e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800781e:	f04f 0b00 	mov.w	fp, #0
 8007822:	ea5a 030b 	orrs.w	r3, sl, fp
 8007826:	d04c      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800782e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007832:	d030      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007838:	d829      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800783a:	2bc0      	cmp	r3, #192	; 0xc0
 800783c:	d02d      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800783e:	2bc0      	cmp	r3, #192	; 0xc0
 8007840:	d825      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d018      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d821      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d007      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007852:	e01c      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007854:	4b63      	ldr	r3, [pc, #396]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	4a62      	ldr	r2, [pc, #392]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800785a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007860:	e01c      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007866:	3308      	adds	r3, #8
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f002 fab8 	bl	8009de0 <RCCEx_PLL2_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007876:	e011      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787c:	3328      	adds	r3, #40	; 0x28
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f002 fb5f 	bl	8009f44 <RCCEx_PLL3_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800788c:	e006      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007894:	e002      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007896:	bf00      	nop
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800789a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078a4:	4b4f      	ldr	r3, [pc, #316]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b2:	4a4c      	ldr	r2, [pc, #304]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6513      	str	r3, [r2, #80]	; 0x50
 80078b8:	e003      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80078ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078d2:	2300      	movs	r3, #0
 80078d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80078dc:	460b      	mov	r3, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	d053      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078ee:	d035      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80078f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078f4:	d82e      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078fa:	d031      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80078fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007900:	d828      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007906:	d01a      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790c:	d822      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007916:	d007      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007918:	e01c      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791a:	4b32      	ldr	r3, [pc, #200]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	4a31      	ldr	r2, [pc, #196]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007926:	e01c      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792c:	3308      	adds	r3, #8
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f002 fa55 	bl	8009de0 <RCCEx_PLL2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800793c:	e011      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007942:	3328      	adds	r3, #40	; 0x28
 8007944:	2100      	movs	r1, #0
 8007946:	4618      	mov	r0, r3
 8007948:	f002 fafc 	bl	8009f44 <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007952:	e006      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800795a:	e002      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800795c:	bf00      	nop
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800797a:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800797c:	430b      	orrs	r3, r1
 800797e:	6593      	str	r3, [r2, #88]	; 0x58
 8007980:	e003      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007996:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800799a:	2300      	movs	r3, #0
 800799c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80079a4:	460b      	mov	r3, r1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	d056      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079b6:	d038      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80079b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079bc:	d831      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079c2:	d034      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80079c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079c8:	d82b      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079ce:	d01d      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80079d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079d4:	d825      	bhi.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d006      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80079da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079de:	d00a      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80079e0:	e01f      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079e2:	bf00      	nop
 80079e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e8:	4ba2      	ldr	r3, [pc, #648]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4aa1      	ldr	r2, [pc, #644]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079f4:	e01c      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fa:	3308      	adds	r3, #8
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f002 f9ee 	bl	8009de0 <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a0a:	e011      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a10:	3328      	adds	r3, #40	; 0x28
 8007a12:	2100      	movs	r1, #0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f002 fa95 	bl	8009f44 <RCCEx_PLL3_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a20:	e006      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a28:	e002      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a38:	4b8e      	ldr	r3, [pc, #568]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a48:	4a8a      	ldr	r2, [pc, #552]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a4e:	e003      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007a72:	460b      	mov	r3, r1
 8007a74:	4313      	orrs	r3, r2
 8007a76:	d03a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7e:	2b30      	cmp	r3, #48	; 0x30
 8007a80:	d01f      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007a82:	2b30      	cmp	r3, #48	; 0x30
 8007a84:	d819      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d00c      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d815      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d019      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d111      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a96:	4b77      	ldr	r3, [pc, #476]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	4a76      	ldr	r2, [pc, #472]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007aa2:	e011      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	2102      	movs	r1, #2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 f997 	bl	8009de0 <RCCEx_PLL2_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ab8:	e006      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ac0:	e002      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ad0:	4b68      	ldr	r3, [pc, #416]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	4a65      	ldr	r2, [pc, #404]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ae4:	e003      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007afe:	2300      	movs	r3, #0
 8007b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	d051      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b18:	d035      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b1e:	d82e      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b24:	d031      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b2a:	d828      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b30:	d01a      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b36:	d822      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b40:	d007      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007b42:	e01c      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b44:	4b4b      	ldr	r3, [pc, #300]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4a4a      	ldr	r2, [pc, #296]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b50:	e01c      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b56:	3308      	adds	r3, #8
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f002 f940 	bl	8009de0 <RCCEx_PLL2_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b66:	e011      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6c:	3328      	adds	r3, #40	; 0x28
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 f9e7 	bl	8009f44 <RCCEx_PLL3_Config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b7c:	e006      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b94:	4b37      	ldr	r3, [pc, #220]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba2:	4a34      	ldr	r2, [pc, #208]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6513      	str	r3, [r2, #80]	; 0x50
 8007ba8:	e003      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	d056      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bdc:	d033      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be2:	d82c      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be8:	d02f      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bee:	d826      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bf4:	d02b      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bfa:	d820      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c00:	d012      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c06:	d81a      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d022      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c10:	d115      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	3308      	adds	r3, #8
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f002 f8e0 	bl	8009de0 <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c26:	e015      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2c:	3328      	adds	r3, #40	; 0x28
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 f987 	bl	8009f44 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c3c:	e00a      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c44:	e006      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c46:	bf00      	nop
 8007c48:	e004      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c4a:	bf00      	nop
 8007c4c:	e002      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10d      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6a:	4a02      	ldr	r2, [pc, #8]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6513      	str	r3, [r2, #80]	; 0x50
 8007c70:	e006      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c72:	bf00      	nop
 8007c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	d055      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cac:	d033      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cb2:	d82c      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb8:	d02f      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbe:	d826      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cc4:	d02b      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cca:	d820      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd0:	d012      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd6:	d81a      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d022      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ce0:	d115      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	2101      	movs	r1, #1
 8007cea:	4618      	mov	r0, r3
 8007cec:	f002 f878 	bl	8009de0 <RCCEx_PLL2_Config>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cf6:	e015      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfc:	3328      	adds	r3, #40	; 0x28
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 f91f 	bl	8009f44 <RCCEx_PLL3_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d0c:	e00a      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d14:	e006      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d16:	bf00      	nop
 8007d18:	e004      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d1a:	bf00      	nop
 8007d1c:	e002      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10b      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d2c:	4ba3      	ldr	r3, [pc, #652]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d3c:	4a9f      	ldr	r2, [pc, #636]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	6593      	str	r3, [r2, #88]	; 0x58
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d66:	460b      	mov	r3, r1
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d037      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d76:	d00e      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7c:	d816      	bhi.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d018      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d86:	d111      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d88:	4b8c      	ldr	r3, [pc, #560]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	4a8b      	ldr	r2, [pc, #556]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d94:	e00f      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f002 f81e 	bl	8009de0 <RCCEx_PLL2_Config>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007daa:	e004      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007db2:	e000      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007dbe:	4b7f      	ldr	r3, [pc, #508]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	4a7b      	ldr	r2, [pc, #492]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8007dd2:	e003      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007df2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	d039      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d81c      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007e06:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e49 	.word	0x08007e49
 8007e10:	08007e1d 	.word	0x08007e1d
 8007e14:	08007e2b 	.word	0x08007e2b
 8007e18:	08007e49 	.word	0x08007e49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1c:	4b67      	ldr	r3, [pc, #412]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a66      	ldr	r2, [pc, #408]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e28:	e00f      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2e:	3308      	adds	r3, #8
 8007e30:	2102      	movs	r1, #2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 ffd4 	bl	8009de0 <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e3e:	e004      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e46:	e000      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e52:	4b5a      	ldr	r3, [pc, #360]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e56:	f023 0103 	bic.w	r1, r3, #3
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e60:	4a56      	ldr	r2, [pc, #344]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e62:	430b      	orrs	r3, r1
 8007e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e66:	e003      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e80:	2300      	movs	r3, #0
 8007e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f000 809f 	beq.w	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e92:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a4a      	ldr	r2, [pc, #296]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e9e:	f7fa ff29 	bl	8002cf4 <HAL_GetTick>
 8007ea2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ea6:	e00b      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ea8:	f7fa ff24 	bl	8002cf4 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b64      	cmp	r3, #100	; 0x64
 8007eb6:	d903      	bls.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ebe:	e005      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec0:	4b3f      	ldr	r3, [pc, #252]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0ed      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d179      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ed4:	4b39      	ldr	r3, [pc, #228]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ee0:	4053      	eors	r3, r2
 8007ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d015      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007eea:	4b34      	ldr	r3, [pc, #208]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ef6:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efa:	4a30      	ldr	r2, [pc, #192]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f02:	4b2e      	ldr	r3, [pc, #184]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f06:	4a2d      	ldr	r2, [pc, #180]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f0e:	4a2b      	ldr	r2, [pc, #172]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f22:	d118      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f24:	f7fa fee6 	bl	8002cf4 <HAL_GetTick>
 8007f28:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f2c:	e00d      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f2e:	f7fa fee1 	bl	8002cf4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d903      	bls.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007f48:	e005      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f4a:	4b1c      	ldr	r3, [pc, #112]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0eb      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d129      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f6e:	d10e      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007f70:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f80:	091a      	lsrs	r2, r3, #4
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6113      	str	r3, [r2, #16]
 8007f8c:	e005      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f98:	6113      	str	r3, [r2, #16]
 8007f9a:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007faa:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007fba:	e009      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007fbc:	58024400 	.word	0x58024400
 8007fc0:	58024800 	.word	0x58024800
 8007fc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f002 0301 	and.w	r3, r2, #1
 8007fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fe6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f000 8089 	beq.w	8008104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff8:	2b28      	cmp	r3, #40	; 0x28
 8007ffa:	d86b      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007ffc:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	080080dd 	.word	0x080080dd
 8008008:	080080d5 	.word	0x080080d5
 800800c:	080080d5 	.word	0x080080d5
 8008010:	080080d5 	.word	0x080080d5
 8008014:	080080d5 	.word	0x080080d5
 8008018:	080080d5 	.word	0x080080d5
 800801c:	080080d5 	.word	0x080080d5
 8008020:	080080d5 	.word	0x080080d5
 8008024:	080080a9 	.word	0x080080a9
 8008028:	080080d5 	.word	0x080080d5
 800802c:	080080d5 	.word	0x080080d5
 8008030:	080080d5 	.word	0x080080d5
 8008034:	080080d5 	.word	0x080080d5
 8008038:	080080d5 	.word	0x080080d5
 800803c:	080080d5 	.word	0x080080d5
 8008040:	080080d5 	.word	0x080080d5
 8008044:	080080bf 	.word	0x080080bf
 8008048:	080080d5 	.word	0x080080d5
 800804c:	080080d5 	.word	0x080080d5
 8008050:	080080d5 	.word	0x080080d5
 8008054:	080080d5 	.word	0x080080d5
 8008058:	080080d5 	.word	0x080080d5
 800805c:	080080d5 	.word	0x080080d5
 8008060:	080080d5 	.word	0x080080d5
 8008064:	080080dd 	.word	0x080080dd
 8008068:	080080d5 	.word	0x080080d5
 800806c:	080080d5 	.word	0x080080d5
 8008070:	080080d5 	.word	0x080080d5
 8008074:	080080d5 	.word	0x080080d5
 8008078:	080080d5 	.word	0x080080d5
 800807c:	080080d5 	.word	0x080080d5
 8008080:	080080d5 	.word	0x080080d5
 8008084:	080080dd 	.word	0x080080dd
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080d5 	.word	0x080080d5
 8008090:	080080d5 	.word	0x080080d5
 8008094:	080080d5 	.word	0x080080d5
 8008098:	080080d5 	.word	0x080080d5
 800809c:	080080d5 	.word	0x080080d5
 80080a0:	080080d5 	.word	0x080080d5
 80080a4:	080080dd 	.word	0x080080dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ac:	3308      	adds	r3, #8
 80080ae:	2101      	movs	r1, #1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fe95 	bl	8009de0 <RCCEx_PLL2_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080bc:	e00f      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c2:	3328      	adds	r3, #40	; 0x28
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 ff3c 	bl	8009f44 <RCCEx_PLL3_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080d2:	e004      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80080dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80080e6:	4bbf      	ldr	r3, [pc, #764]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f4:	4abb      	ldr	r2, [pc, #748]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6553      	str	r3, [r2, #84]	; 0x54
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f002 0302 	and.w	r3, r2, #2
 8008110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008114:	2300      	movs	r3, #0
 8008116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800811a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d041      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800812a:	2b05      	cmp	r3, #5
 800812c:	d824      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008181 	.word	0x08008181
 8008138:	0800814d 	.word	0x0800814d
 800813c:	08008163 	.word	0x08008163
 8008140:	08008181 	.word	0x08008181
 8008144:	08008181 	.word	0x08008181
 8008148:	08008181 	.word	0x08008181
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008150:	3308      	adds	r3, #8
 8008152:	2101      	movs	r1, #1
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fe43 	bl	8009de0 <RCCEx_PLL2_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008160:	e00f      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008166:	3328      	adds	r3, #40	; 0x28
 8008168:	2101      	movs	r1, #1
 800816a:	4618      	mov	r0, r3
 800816c:	f001 feea 	bl	8009f44 <RCCEx_PLL3_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008176:	e004      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800817e:	e000      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800818a:	4b96      	ldr	r3, [pc, #600]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	f023 0107 	bic.w	r1, r3, #7
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008198:	4a92      	ldr	r2, [pc, #584]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800819a:	430b      	orrs	r3, r1
 800819c:	6553      	str	r3, [r2, #84]	; 0x54
 800819e:	e003      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f002 0304 	and.w	r3, r2, #4
 80081b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081b8:	2300      	movs	r3, #0
 80081ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4313      	orrs	r3, r2
 80081c6:	d044      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d825      	bhi.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80081d4:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081da:	bf00      	nop
 80081dc:	08008229 	.word	0x08008229
 80081e0:	080081f5 	.word	0x080081f5
 80081e4:	0800820b 	.word	0x0800820b
 80081e8:	08008229 	.word	0x08008229
 80081ec:	08008229 	.word	0x08008229
 80081f0:	08008229 	.word	0x08008229
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f8:	3308      	adds	r3, #8
 80081fa:	2101      	movs	r1, #1
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fdef 	bl	8009de0 <RCCEx_PLL2_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008208:	e00f      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820e:	3328      	adds	r3, #40	; 0x28
 8008210:	2101      	movs	r1, #1
 8008212:	4618      	mov	r0, r3
 8008214:	f001 fe96 	bl	8009f44 <RCCEx_PLL3_Config>
 8008218:	4603      	mov	r3, r0
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800821e:	e004      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008226:	e000      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10b      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008232:	4b6c      	ldr	r3, [pc, #432]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008236:	f023 0107 	bic.w	r1, r3, #7
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008242:	4a68      	ldr	r2, [pc, #416]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008244:	430b      	orrs	r3, r1
 8008246:	6593      	str	r3, [r2, #88]	; 0x58
 8008248:	e003      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800824e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f002 0320 	and.w	r3, r2, #32
 800825e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800826c:	460b      	mov	r3, r1
 800826e:	4313      	orrs	r3, r2
 8008270:	d055      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800827e:	d033      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008284:	d82c      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828a:	d02f      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800828c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008290:	d826      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008296:	d02b      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800829c:	d820      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800829e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a2:	d012      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80082a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a8:	d81a      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d022      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80082ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b2:	d115      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b8:	3308      	adds	r3, #8
 80082ba:	2100      	movs	r1, #0
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fd8f 	bl	8009de0 <RCCEx_PLL2_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80082c8:	e015      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ce:	3328      	adds	r3, #40	; 0x28
 80082d0:	2102      	movs	r1, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fe36 	bl	8009f44 <RCCEx_PLL3_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80082de:	e00a      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082e6:	e006      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082e8:	bf00      	nop
 80082ea:	e004      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082ec:	bf00      	nop
 80082ee:	e002      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082f0:	bf00      	nop
 80082f2:	e000      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082fe:	4b39      	ldr	r3, [pc, #228]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008302:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830e:	4a35      	ldr	r2, [pc, #212]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008310:	430b      	orrs	r3, r1
 8008312:	6553      	str	r3, [r2, #84]	; 0x54
 8008314:	e003      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800831a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800832e:	2300      	movs	r3, #0
 8008330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008338:	460b      	mov	r3, r1
 800833a:	4313      	orrs	r3, r2
 800833c:	d058      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800834a:	d033      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800834c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008350:	d82c      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008356:	d02f      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835c:	d826      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800835e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008362:	d02b      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008368:	d820      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800836a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800836e:	d012      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008374:	d81a      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d022      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800837a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837e:	d115      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	3308      	adds	r3, #8
 8008386:	2100      	movs	r1, #0
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fd29 	bl	8009de0 <RCCEx_PLL2_Config>
 800838e:	4603      	mov	r3, r0
 8008390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008394:	e015      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839a:	3328      	adds	r3, #40	; 0x28
 800839c:	2102      	movs	r1, #2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fdd0 	bl	8009f44 <RCCEx_PLL3_Config>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083aa:	e00a      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083b2:	e006      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083b4:	bf00      	nop
 80083b6:	e004      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083b8:	bf00      	nop
 80083ba:	e002      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083bc:	bf00      	nop
 80083be:	e000      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10e      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083da:	4a02      	ldr	r2, [pc, #8]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083dc:	430b      	orrs	r3, r1
 80083de:	6593      	str	r3, [r2, #88]	; 0x58
 80083e0:	e006      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80083fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008400:	2300      	movs	r3, #0
 8008402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008406:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800840a:	460b      	mov	r3, r1
 800840c:	4313      	orrs	r3, r2
 800840e:	d055      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008418:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800841c:	d033      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800841e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008422:	d82c      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008428:	d02f      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800842a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800842e:	d826      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008430:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008434:	d02b      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008436:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800843a:	d820      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800843c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008440:	d012      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008446:	d81a      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d022      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800844c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008450:	d115      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008456:	3308      	adds	r3, #8
 8008458:	2100      	movs	r1, #0
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fcc0 	bl	8009de0 <RCCEx_PLL2_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008466:	e015      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846c:	3328      	adds	r3, #40	; 0x28
 800846e:	2102      	movs	r1, #2
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fd67 	bl	8009f44 <RCCEx_PLL3_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800847c:	e00a      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008484:	e006      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008486:	bf00      	nop
 8008488:	e004      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800848a:	bf00      	nop
 800848c:	e002      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800848e:	bf00      	nop
 8008490:	e000      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10b      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800849c:	4ba1      	ldr	r3, [pc, #644]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800849e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084ac:	4a9d      	ldr	r2, [pc, #628]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ae:	430b      	orrs	r3, r1
 80084b0:	6593      	str	r3, [r2, #88]	; 0x58
 80084b2:	e003      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f002 0308 	and.w	r3, r2, #8
 80084c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80084d6:	460b      	mov	r3, r1
 80084d8:	4313      	orrs	r3, r2
 80084da:	d01e      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e8:	d10c      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ee:	3328      	adds	r3, #40	; 0x28
 80084f0:	2102      	movs	r1, #2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fd26 	bl	8009f44 <RCCEx_PLL3_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008504:	4b87      	ldr	r3, [pc, #540]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008508:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008514:	4a83      	ldr	r2, [pc, #524]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008516:	430b      	orrs	r3, r1
 8008518:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f002 0310 	and.w	r3, r2, #16
 8008526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800852a:	2300      	movs	r3, #0
 800852c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008530:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008534:	460b      	mov	r3, r1
 8008536:	4313      	orrs	r3, r2
 8008538:	d01e      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008546:	d10c      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854c:	3328      	adds	r3, #40	; 0x28
 800854e:	2102      	movs	r1, #2
 8008550:	4618      	mov	r0, r3
 8008552:	f001 fcf7 	bl	8009f44 <RCCEx_PLL3_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008562:	4b70      	ldr	r3, [pc, #448]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008572:	4a6c      	ldr	r2, [pc, #432]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008574:	430b      	orrs	r3, r1
 8008576:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008588:	2300      	movs	r3, #0
 800858a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800858e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008592:	460b      	mov	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	d03e      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a4:	d022      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80085a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085aa:	d81b      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80085b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b4:	d00b      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80085b6:	e015      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085bc:	3308      	adds	r3, #8
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fc0d 	bl	8009de0 <RCCEx_PLL2_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80085cc:	e00f      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d2:	3328      	adds	r3, #40	; 0x28
 80085d4:	2102      	movs	r1, #2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fcb4 	bl	8009f44 <RCCEx_PLL3_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80085e2:	e004      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085ea:	e000      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80085ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10b      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085f6:	4b4b      	ldr	r3, [pc, #300]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80085fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008606:	4a47      	ldr	r2, [pc, #284]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008608:	430b      	orrs	r3, r1
 800860a:	6593      	str	r3, [r2, #88]	; 0x58
 800860c:	e003      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008622:	67bb      	str	r3, [r7, #120]	; 0x78
 8008624:	2300      	movs	r3, #0
 8008626:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800862c:	460b      	mov	r3, r1
 800862e:	4313      	orrs	r3, r2
 8008630:	d03b      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800863e:	d01f      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008644:	d818      	bhi.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800864a:	d003      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800864c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008650:	d007      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008652:	e011      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008654:	4b33      	ldr	r3, [pc, #204]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	4a32      	ldr	r2, [pc, #200]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800865a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800865e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008660:	e00f      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008666:	3328      	adds	r3, #40	; 0x28
 8008668:	2101      	movs	r1, #1
 800866a:	4618      	mov	r0, r3
 800866c:	f001 fc6a 	bl	8009f44 <RCCEx_PLL3_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008676:	e004      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800867e:	e000      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800868a:	4b26      	ldr	r3, [pc, #152]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869a:	4a22      	ldr	r2, [pc, #136]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800869c:	430b      	orrs	r3, r1
 800869e:	6553      	str	r3, [r2, #84]	; 0x54
 80086a0:	e003      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80086b6:	673b      	str	r3, [r7, #112]	; 0x70
 80086b8:	2300      	movs	r3, #0
 80086ba:	677b      	str	r3, [r7, #116]	; 0x74
 80086bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80086c0:	460b      	mov	r3, r1
 80086c2:	4313      	orrs	r3, r2
 80086c4:	d034      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80086d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d4:	d007      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80086d6:	e011      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a11      	ldr	r2, [pc, #68]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086e4:	e00e      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ea:	3308      	adds	r3, #8
 80086ec:	2102      	movs	r1, #2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fb76 	bl	8009de0 <RCCEx_PLL2_Config>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086fa:	e003      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800870e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871a:	4a02      	ldr	r2, [pc, #8]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800871c:	430b      	orrs	r3, r1
 800871e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008720:	e006      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008722:	bf00      	nop
 8008724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800872c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800873c:	66bb      	str	r3, [r7, #104]	; 0x68
 800873e:	2300      	movs	r3, #0
 8008740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008742:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008746:	460b      	mov	r3, r1
 8008748:	4313      	orrs	r3, r2
 800874a:	d00c      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008750:	3328      	adds	r3, #40	; 0x28
 8008752:	2102      	movs	r1, #2
 8008754:	4618      	mov	r0, r3
 8008756:	f001 fbf5 	bl	8009f44 <RCCEx_PLL3_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008772:	663b      	str	r3, [r7, #96]	; 0x60
 8008774:	2300      	movs	r3, #0
 8008776:	667b      	str	r3, [r7, #100]	; 0x64
 8008778:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800877c:	460b      	mov	r3, r1
 800877e:	4313      	orrs	r3, r2
 8008780:	d038      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800878a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800878e:	d018      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008794:	d811      	bhi.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879a:	d014      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800879c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a0:	d80b      	bhi.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d011      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80087a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087aa:	d106      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ac:	4bc3      	ldr	r3, [pc, #780]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	4ac2      	ldr	r2, [pc, #776]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80087b8:	e008      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087c0:	e004      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087c2:	bf00      	nop
 80087c4:	e002      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10b      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087d4:	4bb9      	ldr	r3, [pc, #740]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087e4:	4ab5      	ldr	r2, [pc, #724]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087e6:	430b      	orrs	r3, r1
 80087e8:	6553      	str	r3, [r2, #84]	; 0x54
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008800:	65bb      	str	r3, [r7, #88]	; 0x58
 8008802:	2300      	movs	r3, #0
 8008804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800880a:	460b      	mov	r3, r1
 800880c:	4313      	orrs	r3, r2
 800880e:	d009      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008810:	4baa      	ldr	r3, [pc, #680]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881e:	4aa7      	ldr	r2, [pc, #668]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008820:	430b      	orrs	r3, r1
 8008822:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008830:	653b      	str	r3, [r7, #80]	; 0x50
 8008832:	2300      	movs	r3, #0
 8008834:	657b      	str	r3, [r7, #84]	; 0x54
 8008836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800883a:	460b      	mov	r3, r1
 800883c:	4313      	orrs	r3, r2
 800883e:	d00a      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008840:	4b9e      	ldr	r3, [pc, #632]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008850:	4a9a      	ldr	r2, [pc, #616]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008852:	430b      	orrs	r3, r1
 8008854:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008862:	64bb      	str	r3, [r7, #72]	; 0x48
 8008864:	2300      	movs	r3, #0
 8008866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008868:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800886c:	460b      	mov	r3, r1
 800886e:	4313      	orrs	r3, r2
 8008870:	d009      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008872:	4b92      	ldr	r3, [pc, #584]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008880:	4a8e      	ldr	r2, [pc, #568]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008882:	430b      	orrs	r3, r1
 8008884:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008892:	643b      	str	r3, [r7, #64]	; 0x40
 8008894:	2300      	movs	r3, #0
 8008896:	647b      	str	r3, [r7, #68]	; 0x44
 8008898:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800889c:	460b      	mov	r3, r1
 800889e:	4313      	orrs	r3, r2
 80088a0:	d00e      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088a2:	4b86      	ldr	r3, [pc, #536]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	4a85      	ldr	r2, [pc, #532]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088ac:	6113      	str	r3, [r2, #16]
 80088ae:	4b83      	ldr	r3, [pc, #524]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088b0:	6919      	ldr	r1, [r3, #16]
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088ba:	4a80      	ldr	r2, [pc, #512]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088bc:	430b      	orrs	r3, r1
 80088be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80088cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80088d6:	460b      	mov	r3, r1
 80088d8:	4313      	orrs	r3, r2
 80088da:	d009      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088dc:	4b77      	ldr	r3, [pc, #476]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80088e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ea:	4a74      	ldr	r2, [pc, #464]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ec:	430b      	orrs	r3, r1
 80088ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30
 80088fe:	2300      	movs	r3, #0
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
 8008902:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008906:	460b      	mov	r3, r1
 8008908:	4313      	orrs	r3, r2
 800890a:	d00a      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800890c:	4b6b      	ldr	r3, [pc, #428]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008910:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800891c:	4a67      	ldr	r2, [pc, #412]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891e:	430b      	orrs	r3, r1
 8008920:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	2100      	movs	r1, #0
 800892c:	62b9      	str	r1, [r7, #40]	; 0x28
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008934:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008938:	460b      	mov	r3, r1
 800893a:	4313      	orrs	r3, r2
 800893c:	d011      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008942:	3308      	adds	r3, #8
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fa4a 	bl	8009de0 <RCCEx_PLL2_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800895e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	2100      	movs	r1, #0
 800896c:	6239      	str	r1, [r7, #32]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
 8008974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008978:	460b      	mov	r3, r1
 800897a:	4313      	orrs	r3, r2
 800897c:	d011      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008982:	3308      	adds	r3, #8
 8008984:	2101      	movs	r1, #1
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fa2a 	bl	8009de0 <RCCEx_PLL2_Config>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800899e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	2100      	movs	r1, #0
 80089ac:	61b9      	str	r1, [r7, #24]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80089b8:	460b      	mov	r3, r1
 80089ba:	4313      	orrs	r3, r2
 80089bc:	d011      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c2:	3308      	adds	r3, #8
 80089c4:	2102      	movs	r1, #2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 fa0a 	bl	8009de0 <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	2100      	movs	r1, #0
 80089ec:	6139      	str	r1, [r7, #16]
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	617b      	str	r3, [r7, #20]
 80089f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80089f8:	460b      	mov	r3, r1
 80089fa:	4313      	orrs	r3, r2
 80089fc:	d011      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	3328      	adds	r3, #40	; 0x28
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fa9c 	bl	8009f44 <RCCEx_PLL3_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	f003 0310 	and.w	r3, r3, #16
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	d011      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a42:	3328      	adds	r3, #40	; 0x28
 8008a44:	2101      	movs	r1, #1
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fa7c 	bl	8009f44 <RCCEx_PLL3_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	607b      	str	r3, [r7, #4]
 8008a74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d011      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a82:	3328      	adds	r3, #40	; 0x28
 8008a84:	2102      	movs	r1, #2
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 fa5c 	bl	8009f44 <RCCEx_PLL3_Config>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008aa2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e000      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008abc:	58024400 	.word	0x58024400

08008ac0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b090      	sub	sp, #64	; 0x40
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ace:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	f040 8094 	bne.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ad8:	4b9e      	ldr	r3, [pc, #632]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	f200 8087 	bhi.w	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b05 	.word	0x08008b05
 8008af4:	08008b2d 	.word	0x08008b2d
 8008af8:	08008b55 	.word	0x08008b55
 8008afc:	08008bf1 	.word	0x08008bf1
 8008b00:	08008b7d 	.word	0x08008b7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b04:	4b93      	ldr	r3, [pc, #588]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b10:	d108      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f810 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b20:	f000 bd45 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b28:	f000 bd41 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b2c:	4b89      	ldr	r3, [pc, #548]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b38:	d108      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b3a:	f107 0318 	add.w	r3, r7, #24
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fd54 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b48:	f000 bd31 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b50:	f000 bd2d 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b54:	4b7f      	ldr	r3, [pc, #508]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b60:	d108      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b62:	f107 030c 	add.w	r3, r7, #12
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fe94 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b70:	f000 bd1d 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b78:	f000 bd19 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b7c:	4b75      	ldr	r3, [pc, #468]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b86:	4b73      	ldr	r3, [pc, #460]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d10c      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b98:	4b6e      	ldr	r3, [pc, #440]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	08db      	lsrs	r3, r3, #3
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	4a6d      	ldr	r2, [pc, #436]	; (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008baa:	e01f      	b.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bac:	4b69      	ldr	r3, [pc, #420]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb8:	d106      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bc0:	d102      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bc2:	4b66      	ldr	r3, [pc, #408]	; (8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc6:	e011      	b.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bc8:	4b62      	ldr	r3, [pc, #392]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bd4:	d106      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bdc:	d102      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008bde:	4b60      	ldr	r3, [pc, #384]	; (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be2:	e003      	b.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008be8:	f000 bce1 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008bec:	f000 bcdf 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bf0:	4b5c      	ldr	r3, [pc, #368]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf4:	f000 bcdb 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bfc:	f000 bcd7 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c04:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	f040 80ad 	bne.w	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008c0e:	4b51      	ldr	r3, [pc, #324]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1e:	d056      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c26:	f200 8090 	bhi.w	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008c2e:	f000 8088 	beq.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	2bc0      	cmp	r3, #192	; 0xc0
 8008c36:	f200 8088 	bhi.w	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	2b80      	cmp	r3, #128	; 0x80
 8008c3e:	d032      	beq.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	f200 8081 	bhi.w	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d014      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008c54:	e079      	b.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c56:	4b3f      	ldr	r3, [pc, #252]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c62:	d108      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 ff67 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c72:	f000 bc9c 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7a:	f000 bc98 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c7e:	4b35      	ldr	r3, [pc, #212]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c8a:	d108      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8c:	f107 0318 	add.w	r3, r7, #24
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fcab 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c9a:	f000 bc88 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca2:	f000 bc84 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ca6:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cb2:	d108      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cb4:	f107 030c 	add.w	r3, r7, #12
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fdeb 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc2:	f000 bc74 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cca:	f000 bc70 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cce:	4b21      	ldr	r3, [pc, #132]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d10c      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cea:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	08db      	lsrs	r3, r3, #3
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	4a18      	ldr	r2, [pc, #96]	; (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfc:	e01f      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cfe:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d12:	d102      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d18:	e011      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d34:	e003      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d3a:	f000 bc38 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d3e:	f000 bc36 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d42:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d46:	f000 bc32 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d4e:	f000 bc2e 	b.w	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
 8008d58:	03d09000 	.word	0x03d09000
 8008d5c:	003d0900 	.word	0x003d0900
 8008d60:	017d7840 	.word	0x017d7840
 8008d64:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d6c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008d70:	430b      	orrs	r3, r1
 8008d72:	f040 809c 	bne.w	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008d76:	4b9e      	ldr	r3, [pc, #632]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008d7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d86:	d054      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d8e:	f200 808b 	bhi.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d98:	f000 8083 	beq.w	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008da2:	f200 8081 	bhi.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dac:	d02f      	beq.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db4:	d878      	bhi.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dc2:	d012      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008dc4:	e070      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dc6:	4b8a      	ldr	r3, [pc, #552]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd2:	d107      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 feaf 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de2:	e3e4      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008de8:	e3e1      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dea:	4b81      	ldr	r3, [pc, #516]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008df6:	d107      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df8:	f107 0318 	add.w	r3, r7, #24
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fbf5 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e06:	e3d2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0c:	e3cf      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e0e:	4b78      	ldr	r3, [pc, #480]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fd37 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2a:	e3c0      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e30:	e3bd      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e32:	4b6f      	ldr	r3, [pc, #444]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e3c:	4b6c      	ldr	r3, [pc, #432]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d10c      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e4e:	4b68      	ldr	r3, [pc, #416]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	4a66      	ldr	r2, [pc, #408]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e60:	e01e      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e62:	4b63      	ldr	r3, [pc, #396]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d106      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e76:	d102      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e78:	4b5f      	ldr	r3, [pc, #380]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7c:	e010      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e7e:	4b5c      	ldr	r3, [pc, #368]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e8a:	d106      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e92:	d102      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e94:	4b59      	ldr	r3, [pc, #356]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e98:	e002      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008e9e:	e386      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ea0:	e385      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ea2:	4b57      	ldr	r3, [pc, #348]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea6:	e382      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eac:	e37f      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008eb6:	430b      	orrs	r3, r1
 8008eb8:	f040 80a7 	bne.w	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008ebc:	4b4c      	ldr	r3, [pc, #304]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ecc:	d055      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ed4:	f200 8096 	bhi.w	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ede:	f000 8084 	beq.w	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ee8:	f200 808c 	bhi.w	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef2:	d030      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008efa:	f200 8083 	bhi.w	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f0a:	d012      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008f0c:	e07a      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f0e:	4b38      	ldr	r3, [pc, #224]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1a:	d107      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fe0b 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f2a:	e340      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f30:	e33d      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f32:	4b2f      	ldr	r3, [pc, #188]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f40:	f107 0318 	add.w	r3, r7, #24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb51 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f4e:	e32e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f54:	e32b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f56:	4b26      	ldr	r3, [pc, #152]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f62:	d107      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fc93 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f72:	e31c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f78:	e319      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f84:	4b1a      	ldr	r3, [pc, #104]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d10c      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f96:	4b16      	ldr	r3, [pc, #88]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	08db      	lsrs	r3, r3, #3
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	4a14      	ldr	r2, [pc, #80]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e01e      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008faa:	4b11      	ldr	r3, [pc, #68]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb6:	d106      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc4:	e010      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fda:	d102      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fdc:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fe6:	e2e2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fe8:	e2e1      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fea:	4b05      	ldr	r3, [pc, #20]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fee:	e2de      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	03d09000 	.word	0x03d09000
 8008ff8:	003d0900 	.word	0x003d0900
 8008ffc:	017d7840 	.word	0x017d7840
 8009000:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009008:	e2d1      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800900a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009012:	430b      	orrs	r3, r1
 8009014:	f040 809c 	bne.w	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009018:	4b93      	ldr	r3, [pc, #588]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800901a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009020:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009028:	d054      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009030:	f200 808b 	bhi.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800903a:	f000 8083 	beq.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009044:	f200 8081 	bhi.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904e:	d02f      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009056:	d878      	bhi.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009064:	d012      	beq.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009066:	e070      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009068:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009074:	d107      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fd5e 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009084:	e293      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800908a:	e290      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800908c:	4b76      	ldr	r3, [pc, #472]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009098:	d107      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800909a:	f107 0318 	add.w	r3, r7, #24
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 faa4 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090a8:	e281      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ae:	e27e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090b0:	4b6d      	ldr	r3, [pc, #436]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090bc:	d107      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090be:	f107 030c 	add.w	r3, r7, #12
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fbe6 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090cc:	e26f      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d2:	e26c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090d4:	4b64      	ldr	r3, [pc, #400]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090de:	4b62      	ldr	r3, [pc, #392]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d10c      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090f0:	4b5d      	ldr	r3, [pc, #372]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	4a5c      	ldr	r2, [pc, #368]	; (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009102:	e01e      	b.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009104:	4b58      	ldr	r3, [pc, #352]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009110:	d106      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009118:	d102      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800911a:	4b55      	ldr	r3, [pc, #340]	; (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800911e:	e010      	b.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009120:	4b51      	ldr	r3, [pc, #324]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800912c:	d106      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800912e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009134:	d102      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009136:	4b4f      	ldr	r3, [pc, #316]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800913a:	e002      	b.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009140:	e235      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009142:	e234      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009144:	4b4c      	ldr	r3, [pc, #304]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009148:	e231      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800914e:	e22e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009154:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009158:	430b      	orrs	r3, r1
 800915a:	f040 808f 	bne.w	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800915e:	4b42      	ldr	r3, [pc, #264]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009162:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009166:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800916e:	d06b      	beq.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009176:	d874      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800917e:	d056      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009186:	d86c      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800918e:	d03b      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009196:	d864      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800919e:	d021      	beq.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091a6:	d85c      	bhi.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b4:	d004      	beq.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80091b6:	e054      	b.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80091b8:	f7fe fa4c 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 80091bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091be:	e1f6      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c0:	4b29      	ldr	r3, [pc, #164]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091cc:	d107      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ce:	f107 0318 	add.w	r3, r7, #24
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fa0a 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091dc:	e1e7      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e2:	e1e4      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091e4:	4b20      	ldr	r3, [pc, #128]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f0:	d107      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f2:	f107 030c 	add.w	r3, r7, #12
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fb4c 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009200:	e1d5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009206:	e1d2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009208:	4b17      	ldr	r3, [pc, #92]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b04      	cmp	r3, #4
 8009212:	d109      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009214:	4b14      	ldr	r3, [pc, #80]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	08db      	lsrs	r3, r3, #3
 800921a:	f003 0303 	and.w	r3, r3, #3
 800921e:	4a13      	ldr	r2, [pc, #76]	; (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009226:	e1c2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800922c:	e1bf      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923a:	d102      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009240:	e1b5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009246:	e1b2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009248:	4b07      	ldr	r3, [pc, #28]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009254:	d102      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800925a:	e1a8      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009260:	e1a5      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009266:	e1a2      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009268:	58024400 	.word	0x58024400
 800926c:	03d09000 	.word	0x03d09000
 8009270:	003d0900 	.word	0x003d0900
 8009274:	017d7840 	.word	0x017d7840
 8009278:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800927c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009280:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009284:	430b      	orrs	r3, r1
 8009286:	d173      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009288:	4b9c      	ldr	r3, [pc, #624]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800928a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009290:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009298:	d02f      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a0:	d863      	bhi.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d004      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ae:	d012      	beq.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80092b0:	e05b      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b2:	4b92      	ldr	r3, [pc, #584]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092be:	d107      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c0:	f107 0318 	add.w	r3, r7, #24
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f991 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ce:	e16e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d4:	e16b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092d6:	4b89      	ldr	r3, [pc, #548]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e2:	d107      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092e4:	f107 030c 	add.w	r3, r7, #12
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fad3 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f2:	e15c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f8:	e159      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092fa:	4b80      	ldr	r3, [pc, #512]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009302:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009304:	4b7d      	ldr	r3, [pc, #500]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b04      	cmp	r3, #4
 800930e:	d10c      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009316:	4b79      	ldr	r3, [pc, #484]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	08db      	lsrs	r3, r3, #3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	4a77      	ldr	r2, [pc, #476]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009322:	fa22 f303 	lsr.w	r3, r2, r3
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009328:	e01e      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800932a:	4b74      	ldr	r3, [pc, #464]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009336:	d106      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800933e:	d102      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009340:	4b70      	ldr	r3, [pc, #448]	; (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009344:	e010      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009346:	4b6d      	ldr	r3, [pc, #436]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800934e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009352:	d106      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800935a:	d102      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800935c:	4b6a      	ldr	r3, [pc, #424]	; (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009360:	e002      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009366:	e122      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009368:	e121      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800936e:	e11e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009374:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009378:	430b      	orrs	r3, r1
 800937a:	d133      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800937c:	4b5f      	ldr	r3, [pc, #380]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800937e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009384:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009392:	d012      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009394:	e023      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009396:	4b59      	ldr	r3, [pc, #356]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093a2:	d107      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fbc7 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b2:	e0fc      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b8:	e0f9      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093ba:	4b50      	ldr	r3, [pc, #320]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093c6:	d107      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c8:	f107 0318 	add.w	r3, r7, #24
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f90d 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d6:	e0ea      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093dc:	e0e7      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e2:	e0e4      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80093ec:	430b      	orrs	r3, r1
 80093ee:	f040 808d 	bne.w	800950c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80093f2:	4b42      	ldr	r3, [pc, #264]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80093fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009402:	d06b      	beq.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800940a:	d874      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009412:	d056      	beq.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800941a:	d86c      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009422:	d03b      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800942a:	d864      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009432:	d021      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943a:	d85c      	bhi.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009448:	d004      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800944a:	e054      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800944c:	f000 f8b8 	bl	80095c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009450:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009452:	e0ac      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009454:	4b29      	ldr	r3, [pc, #164]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800945c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009460:	d107      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009462:	f107 0318 	add.w	r3, r7, #24
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f8c0 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009470:	e09d      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009476:	e09a      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009478:	4b20      	ldr	r3, [pc, #128]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009484:	d107      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009486:	f107 030c 	add.w	r3, r7, #12
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fa02 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009494:	e08b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800949a:	e088      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800949c:	4b17      	ldr	r3, [pc, #92]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d109      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094a8:	4b14      	ldr	r3, [pc, #80]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	08db      	lsrs	r3, r3, #3
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	4a13      	ldr	r2, [pc, #76]	; (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80094b4:	fa22 f303 	lsr.w	r3, r2, r3
 80094b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ba:	e078      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c0:	e075      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094c2:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ce:	d102      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80094d0:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d4:	e06b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094da:	e068      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094e8:	d102      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80094ea:	4b07      	ldr	r3, [pc, #28]	; (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ee:	e05e      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f4:	e05b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094fa:	e058      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094fc:	58024400 	.word	0x58024400
 8009500:	03d09000 	.word	0x03d09000
 8009504:	003d0900 	.word	0x003d0900
 8009508:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800950c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009510:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009514:	430b      	orrs	r3, r1
 8009516:	d148      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009518:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800951a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009520:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009528:	d02a      	beq.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009530:	d838      	bhi.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800953e:	d00d      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009540:	e030      	b.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009542:	4b1d      	ldr	r3, [pc, #116]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800954a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009550:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009554:	e02b      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800955a:	e028      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800955c:	4b16      	ldr	r3, [pc, #88]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009568:	d107      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800956a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fae4 	bl	8009b3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009578:	e019      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800957e:	e016      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009580:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800958c:	d107      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800958e:	f107 0318 	add.w	r3, r7, #24
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f82a 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959c:	e007      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a2:	e004      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a8:	e001      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80095ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3740      	adds	r7, #64	; 0x40
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	58024400 	.word	0x58024400
 80095bc:	017d7840 	.word	0x017d7840

080095c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80095c4:	f7fe f816 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095d6:	5ccb      	ldrb	r3, [r1, r3]
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	58024400 	.word	0x58024400
 80095e8:	0800cffc 	.word	0x0800cffc

080095ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b089      	sub	sp, #36	; 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095f4:	4ba1      	ldr	r3, [pc, #644]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80095fe:	4b9f      	ldr	r3, [pc, #636]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	0b1b      	lsrs	r3, r3, #12
 8009604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009608:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800960a:	4b9c      	ldr	r3, [pc, #624]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	091b      	lsrs	r3, r3, #4
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009616:	4b99      	ldr	r3, [pc, #612]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961a:	08db      	lsrs	r3, r3, #3
 800961c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	fb02 f303 	mul.w	r3, r2, r3
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 8111 	beq.w	800985c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b02      	cmp	r3, #2
 800963e:	f000 8083 	beq.w	8009748 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b02      	cmp	r3, #2
 8009646:	f200 80a1 	bhi.w	800978c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d003      	beq.n	8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d056      	beq.n	8009704 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009656:	e099      	b.n	800978c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009658:	4b88      	ldr	r3, [pc, #544]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02d      	beq.n	80096c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009664:	4b85      	ldr	r3, [pc, #532]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	08db      	lsrs	r3, r3, #3
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	4a84      	ldr	r2, [pc, #528]	; (8009880 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009670:	fa22 f303 	lsr.w	r3, r2, r3
 8009674:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968e:	4b7b      	ldr	r3, [pc, #492]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969e:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096be:	e087      	b.n	80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d2:	4b6a      	ldr	r3, [pc, #424]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009702:	e065      	b.n	80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800988c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009716:	4b59      	ldr	r3, [pc, #356]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009726:	ed97 6a03 	vldr	s12, [r7, #12]
 800972a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800972e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009746:	e043      	b.n	80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975a:	4b48      	ldr	r3, [pc, #288]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976a:	ed97 6a03 	vldr	s12, [r7, #12]
 800976e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800978a:	e021      	b.n	80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009796:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800988c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800979a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979e:	4b37      	ldr	r3, [pc, #220]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80097d0:	4b2a      	ldr	r3, [pc, #168]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d4:	0a5b      	lsrs	r3, r3, #9
 80097d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f6:	ee17 2a90 	vmov	r2, s15
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80097fe:	4b1f      	ldr	r3, [pc, #124]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009818:	edd7 6a07 	vldr	s13, [r7, #28]
 800981c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009824:	ee17 2a90 	vmov	r2, s15
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800982c:	4b13      	ldr	r3, [pc, #76]	; (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	0e1b      	lsrs	r3, r3, #24
 8009832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009846:	edd7 6a07 	vldr	s13, [r7, #28]
 800984a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800984e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009852:	ee17 2a90 	vmov	r2, s15
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800985a:	e008      	b.n	800986e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	609a      	str	r2, [r3, #8]
}
 800986e:	bf00      	nop
 8009870:	3724      	adds	r7, #36	; 0x24
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	58024400 	.word	0x58024400
 8009880:	03d09000 	.word	0x03d09000
 8009884:	46000000 	.word	0x46000000
 8009888:	4c742400 	.word	0x4c742400
 800988c:	4a742400 	.word	0x4a742400
 8009890:	4bbebc20 	.word	0x4bbebc20

08009894 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009894:	b480      	push	{r7}
 8009896:	b089      	sub	sp, #36	; 0x24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800989c:	4ba1      	ldr	r3, [pc, #644]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	f003 0303 	and.w	r3, r3, #3
 80098a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80098a6:	4b9f      	ldr	r3, [pc, #636]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098aa:	0d1b      	lsrs	r3, r3, #20
 80098ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098b2:	4b9c      	ldr	r3, [pc, #624]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b6:	0a1b      	lsrs	r3, r3, #8
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80098be:	4b99      	ldr	r3, [pc, #612]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c2:	08db      	lsrs	r3, r3, #3
 80098c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	fb02 f303 	mul.w	r3, r2, r3
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8111 	beq.w	8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	f000 8083 	beq.w	80099f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	f200 80a1 	bhi.w	8009a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d056      	beq.n	80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098fe:	e099      	b.n	8009a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009900:	4b88      	ldr	r3, [pc, #544]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0320 	and.w	r3, r3, #32
 8009908:	2b00      	cmp	r3, #0
 800990a:	d02d      	beq.n	8009968 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800990c:	4b85      	ldr	r3, [pc, #532]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	08db      	lsrs	r3, r3, #3
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	4a84      	ldr	r2, [pc, #528]	; (8009b28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009918:	fa22 f303 	lsr.w	r3, r2, r3
 800991c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009936:	4b7b      	ldr	r3, [pc, #492]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009946:	ed97 6a03 	vldr	s12, [r7, #12]
 800994a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800994e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009962:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009966:	e087      	b.n	8009a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009972:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997a:	4b6a      	ldr	r3, [pc, #424]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998a:	ed97 6a03 	vldr	s12, [r7, #12]
 800998e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099aa:	e065      	b.n	8009a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099be:	4b59      	ldr	r3, [pc, #356]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ee:	e043      	b.n	8009a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a02:	4b48      	ldr	r3, [pc, #288]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a32:	e021      	b.n	8009a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a46:	4b37      	ldr	r3, [pc, #220]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a78:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	0a5b      	lsrs	r3, r3, #9
 8009a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9e:	ee17 2a90 	vmov	r2, s15
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009aa6:	4b1f      	ldr	r3, [pc, #124]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	0c1b      	lsrs	r3, r3, #16
 8009aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab0:	ee07 3a90 	vmov	s15, r3
 8009ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009acc:	ee17 2a90 	vmov	r2, s15
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ad4:	4b13      	ldr	r3, [pc, #76]	; (8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009afa:	ee17 2a90 	vmov	r2, s15
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b02:	e008      	b.n	8009b16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	609a      	str	r2, [r3, #8]
}
 8009b16:	bf00      	nop
 8009b18:	3724      	adds	r7, #36	; 0x24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	58024400 	.word	0x58024400
 8009b28:	03d09000 	.word	0x03d09000
 8009b2c:	46000000 	.word	0x46000000
 8009b30:	4c742400 	.word	0x4c742400
 8009b34:	4a742400 	.word	0x4a742400
 8009b38:	4bbebc20 	.word	0x4bbebc20

08009b3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b089      	sub	sp, #36	; 0x24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b44:	4ba0      	ldr	r3, [pc, #640]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009b4e:	4b9e      	ldr	r3, [pc, #632]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	091b      	lsrs	r3, r3, #4
 8009b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b5a:	4b9b      	ldr	r3, [pc, #620]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b64:	4b98      	ldr	r3, [pc, #608]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b68:	08db      	lsrs	r3, r3, #3
 8009b6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	ee07 3a90 	vmov	s15, r3
 8009b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 8111 	beq.w	8009daa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	f000 8083 	beq.w	8009c96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	f200 80a1 	bhi.w	8009cda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d056      	beq.n	8009c52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ba4:	e099      	b.n	8009cda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ba6:	4b88      	ldr	r3, [pc, #544]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d02d      	beq.n	8009c0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bb2:	4b85      	ldr	r3, [pc, #532]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	08db      	lsrs	r3, r3, #3
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	4a83      	ldr	r2, [pc, #524]	; (8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bdc:	4b7a      	ldr	r3, [pc, #488]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be4:	ee07 3a90 	vmov	s15, r3
 8009be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bec:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c0c:	e087      	b.n	8009d1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c20:	4b69      	ldr	r3, [pc, #420]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c28:	ee07 3a90 	vmov	s15, r3
 8009c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c30:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c34:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c50:	e065      	b.n	8009d1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c64:	4b58      	ldr	r3, [pc, #352]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c74:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c78:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c94:	e043      	b.n	8009d1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009ddc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca8:	4b47      	ldr	r3, [pc, #284]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cbc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cd8:	e021      	b.n	8009d1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	ee07 3a90 	vmov	s15, r3
 8009ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cec:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf4:	ee07 3a90 	vmov	s15, r3
 8009cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009d1e:	4b2a      	ldr	r3, [pc, #168]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d22:	0a5b      	lsrs	r3, r3, #9
 8009d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d44:	ee17 2a90 	vmov	r2, s15
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d50:	0c1b      	lsrs	r3, r3, #16
 8009d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d72:	ee17 2a90 	vmov	r2, s15
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009d7a:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7e:	0e1b      	lsrs	r3, r3, #24
 8009d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da0:	ee17 2a90 	vmov	r2, s15
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009da8:	e008      	b.n	8009dbc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	609a      	str	r2, [r3, #8]
}
 8009dbc:	bf00      	nop
 8009dbe:	3724      	adds	r7, #36	; 0x24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	58024400 	.word	0x58024400
 8009dcc:	03d09000 	.word	0x03d09000
 8009dd0:	46000000 	.word	0x46000000
 8009dd4:	4c742400 	.word	0x4c742400
 8009dd8:	4a742400 	.word	0x4a742400
 8009ddc:	4bbebc20 	.word	0x4bbebc20

08009de0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dee:	4b53      	ldr	r3, [pc, #332]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d101      	bne.n	8009dfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e099      	b.n	8009f32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dfe:	4b4f      	ldr	r3, [pc, #316]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a4e      	ldr	r2, [pc, #312]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e0a:	f7f8 ff73 	bl	8002cf4 <HAL_GetTick>
 8009e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e10:	e008      	b.n	8009e24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e12:	f7f8 ff6f 	bl	8002cf4 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e086      	b.n	8009f32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e24:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f0      	bne.n	8009e12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e30:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	031b      	lsls	r3, r3, #12
 8009e3e:	493f      	ldr	r1, [pc, #252]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	628b      	str	r3, [r1, #40]	; 0x28
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	025b      	lsls	r3, r3, #9
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	061b      	lsls	r3, r3, #24
 8009e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e74:	4931      	ldr	r1, [pc, #196]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e7a:	4b30      	ldr	r3, [pc, #192]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	492d      	ldr	r1, [pc, #180]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e8c:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f023 0220 	bic.w	r2, r3, #32
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	4928      	ldr	r1, [pc, #160]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e9e:	4b27      	ldr	r3, [pc, #156]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a26      	ldr	r2, [pc, #152]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ea4:	f023 0310 	bic.w	r3, r3, #16
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009eaa:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eae:	4b24      	ldr	r3, [pc, #144]	; (8009f40 <RCCEx_PLL2_Config+0x160>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	69d2      	ldr	r2, [r2, #28]
 8009eb6:	00d2      	lsls	r2, r2, #3
 8009eb8:	4920      	ldr	r1, [pc, #128]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ebe:	4b1f      	ldr	r3, [pc, #124]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec2:	4a1e      	ldr	r2, [pc, #120]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	f043 0310 	orr.w	r3, r3, #16
 8009ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d106      	bne.n	8009ede <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ed0:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009edc:	e00f      	b.n	8009efe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d106      	bne.n	8009ef2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ee4:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	4a14      	ldr	r2, [pc, #80]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ef0:	e005      	b.n	8009efe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ef2:	4b12      	ldr	r3, [pc, #72]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	4a11      	ldr	r2, [pc, #68]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009efc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009efe:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a0e      	ldr	r2, [pc, #56]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f0a:	f7f8 fef3 	bl	8002cf4 <HAL_GetTick>
 8009f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f10:	e008      	b.n	8009f24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f12:	f7f8 feef 	bl	8002cf4 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d901      	bls.n	8009f24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e006      	b.n	8009f32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <RCCEx_PLL2_Config+0x15c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0f0      	beq.n	8009f12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	ffff0007 	.word	0xffff0007

08009f44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f52:	4b53      	ldr	r3, [pc, #332]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d101      	bne.n	8009f62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e099      	b.n	800a096 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f62:	4b4f      	ldr	r3, [pc, #316]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a4e      	ldr	r2, [pc, #312]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f6e:	f7f8 fec1 	bl	8002cf4 <HAL_GetTick>
 8009f72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f74:	e008      	b.n	8009f88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f76:	f7f8 febd 	bl	8002cf4 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d901      	bls.n	8009f88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e086      	b.n	800a096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f88:	4b45      	ldr	r3, [pc, #276]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1f0      	bne.n	8009f76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f94:	4b42      	ldr	r3, [pc, #264]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	051b      	lsls	r3, r3, #20
 8009fa2:	493f      	ldr	r1, [pc, #252]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	025b      	lsls	r3, r3, #9
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	041b      	lsls	r3, r3, #16
 8009fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	061b      	lsls	r3, r3, #24
 8009fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fd8:	4931      	ldr	r1, [pc, #196]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fde:	4b30      	ldr	r3, [pc, #192]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	492d      	ldr	r1, [pc, #180]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	4928      	ldr	r1, [pc, #160]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a002:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a26      	ldr	r2, [pc, #152]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a00e:	4b24      	ldr	r3, [pc, #144]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a012:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <RCCEx_PLL3_Config+0x160>)
 800a014:	4013      	ands	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	69d2      	ldr	r2, [r2, #28]
 800a01a:	00d2      	lsls	r2, r2, #3
 800a01c:	4920      	ldr	r1, [pc, #128]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a022:	4b1f      	ldr	r3, [pc, #124]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a02c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d106      	bne.n	800a042 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a03a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a03e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a040:	e00f      	b.n	800a062 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d106      	bne.n	800a056 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a048:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04c:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a04e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a052:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a054:	e005      	b.n	800a062 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	4a11      	ldr	r2, [pc, #68]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a05c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a062:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a0e      	ldr	r2, [pc, #56]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a06c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a06e:	f7f8 fe41 	bl	8002cf4 <HAL_GetTick>
 800a072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a074:	e008      	b.n	800a088 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a076:	f7f8 fe3d 	bl	8002cf4 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	2b02      	cmp	r3, #2
 800a082:	d901      	bls.n	800a088 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e006      	b.n	800a096 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <RCCEx_PLL3_Config+0x15c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0f0      	beq.n	800a076 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	ffff0007 	.word	0xffff0007

0800a0a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d071      	beq.n	800a19e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d106      	bne.n	800a0d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7f8 f92c 	bl	800232c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f003 0310 	and.w	r3, r3, #16
 800a0e6:	2b10      	cmp	r3, #16
 800a0e8:	d050      	beq.n	800a18c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	22ca      	movs	r2, #202	; 0xca
 800a0f0:	625a      	str	r2, [r3, #36]	; 0x24
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2253      	movs	r2, #83	; 0x53
 800a0f8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f87a 	bl	800a1f4 <RTC_EnterInitMode>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d124      	bne.n	800a154 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6899      	ldr	r1, [r3, #8]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <HAL_RTC_Init+0x100>)
 800a116:	400b      	ands	r3, r1
 800a118:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6899      	ldr	r1, [r3, #8]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	431a      	orrs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	0419      	lsls	r1, r3, #16
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f886 	bl	800a25c <RTC_ExitInitMode>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0203 	bic.w	r2, r2, #3
 800a168:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	431a      	orrs	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	22ff      	movs	r2, #255	; 0xff
 800a188:	625a      	str	r2, [r3, #36]	; 0x24
 800a18a:	e001      	b.n	800a190 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	ff8fffbf 	.word	0xff8fffbf

0800a1ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <HAL_RTC_WaitForSynchro+0x44>)
 800a1ba:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a1bc:	f7f8 fd9a 	bl	8002cf4 <HAL_GetTick>
 800a1c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1c2:	e009      	b.n	800a1d8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1c4:	f7f8 fd96 	bl	8002cf4 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1d2:	d901      	bls.n	800a1d8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e007      	b.n	800a1e8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	f003 0320 	and.w	r3, r3, #32
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0ee      	beq.n	800a1c4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	0003ff5f 	.word	0x0003ff5f

0800a1f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d120      	bne.n	800a250 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f04f 32ff 	mov.w	r2, #4294967295
 800a216:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a218:	f7f8 fd6c 	bl	8002cf4 <HAL_GetTick>
 800a21c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a21e:	e00d      	b.n	800a23c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a220:	f7f8 fd68 	bl	8002cf4 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a22e:	d905      	bls.n	800a23c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2203      	movs	r2, #3
 800a238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <RTC_EnterInitMode+0x5c>
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d1e7      	bne.n	800a220 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a268:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	4a19      	ldr	r2, [pc, #100]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a26e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a272:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a274:	4b17      	ldr	r3, [pc, #92]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10c      	bne.n	800a29a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff ff93 	bl	800a1ac <HAL_RTC_WaitForSynchro>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2203      	movs	r2, #3
 800a290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	73fb      	strb	r3, [r7, #15]
 800a298:	e017      	b.n	800a2ca <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a2a0:	f023 0320 	bic.w	r3, r3, #32
 800a2a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ff80 	bl	800a1ac <HAL_RTC_WaitForSynchro>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a2c4:	f043 0320 	orr.w	r3, r3, #32
 800a2c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	58004000 	.word	0x58004000

0800a2d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e28e      	b.n	800a808 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a2ea:	f7f8 fd33 	bl	8002d54 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d113      	bne.n	800a320 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a96      	ldr	r2, [pc, #600]	; (800a558 <HAL_SAI_Init+0x280>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d004      	beq.n	800a30c <HAL_SAI_Init+0x34>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a95      	ldr	r2, [pc, #596]	; (800a55c <HAL_SAI_Init+0x284>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d107      	bne.n	800a31c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a310:	2b01      	cmp	r3, #1
 800a312:	d103      	bne.n	800a31c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e273      	b.n	800a808 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a8c      	ldr	r2, [pc, #560]	; (800a558 <HAL_SAI_Init+0x280>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d004      	beq.n	800a334 <HAL_SAI_Init+0x5c>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a8c      	ldr	r2, [pc, #560]	; (800a560 <HAL_SAI_Init+0x288>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d102      	bne.n	800a33a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a334:	4b8b      	ldr	r3, [pc, #556]	; (800a564 <HAL_SAI_Init+0x28c>)
 800a336:	61bb      	str	r3, [r7, #24]
 800a338:	e028      	b.n	800a38c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a8a      	ldr	r2, [pc, #552]	; (800a568 <HAL_SAI_Init+0x290>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d004      	beq.n	800a34e <HAL_SAI_Init+0x76>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a88      	ldr	r2, [pc, #544]	; (800a56c <HAL_SAI_Init+0x294>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d102      	bne.n	800a354 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a34e:	4b88      	ldr	r3, [pc, #544]	; (800a570 <HAL_SAI_Init+0x298>)
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	e01b      	b.n	800a38c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a86      	ldr	r2, [pc, #536]	; (800a574 <HAL_SAI_Init+0x29c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d004      	beq.n	800a368 <HAL_SAI_Init+0x90>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a85      	ldr	r2, [pc, #532]	; (800a578 <HAL_SAI_Init+0x2a0>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d102      	bne.n	800a36e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a368:	4b84      	ldr	r3, [pc, #528]	; (800a57c <HAL_SAI_Init+0x2a4>)
 800a36a:	61bb      	str	r3, [r7, #24]
 800a36c:	e00e      	b.n	800a38c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a7a      	ldr	r2, [pc, #488]	; (800a55c <HAL_SAI_Init+0x284>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d004      	beq.n	800a382 <HAL_SAI_Init+0xaa>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a80      	ldr	r2, [pc, #512]	; (800a580 <HAL_SAI_Init+0x2a8>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d102      	bne.n	800a388 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a382:	4b80      	ldr	r3, [pc, #512]	; (800a584 <HAL_SAI_Init+0x2ac>)
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	e001      	b.n	800a38c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e23d      	b.n	800a808 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7f8 fa6b 	bl	800287c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fa40 	bl	800a82c <SAI_Disable>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e228      	b.n	800a808 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d00c      	beq.n	800a3e0 <HAL_SAI_Init+0x108>
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d80d      	bhi.n	800a3e6 <HAL_SAI_Init+0x10e>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <HAL_SAI_Init+0xfc>
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d003      	beq.n	800a3da <HAL_SAI_Init+0x102>
 800a3d2:	e008      	b.n	800a3e6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3d8:	e008      	b.n	800a3ec <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a3da:	2310      	movs	r3, #16
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3de:	e005      	b.n	800a3ec <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3e4:	e002      	b.n	800a3ec <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3ea:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	2b05      	cmp	r3, #5
 800a3f2:	d832      	bhi.n	800a45a <HAL_SAI_Init+0x182>
 800a3f4:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <HAL_SAI_Init+0x124>)
 800a3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fa:	bf00      	nop
 800a3fc:	0800a415 	.word	0x0800a415
 800a400:	0800a41b 	.word	0x0800a41b
 800a404:	0800a423 	.word	0x0800a423
 800a408:	0800a42b 	.word	0x0800a42b
 800a40c:	0800a43b 	.word	0x0800a43b
 800a410:	0800a44b 	.word	0x0800a44b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a414:	2300      	movs	r3, #0
 800a416:	61fb      	str	r3, [r7, #28]
      break;
 800a418:	e022      	b.n	800a460 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a41a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a41e:	61fb      	str	r3, [r7, #28]
      break;
 800a420:	e01e      	b.n	800a460 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a426:	61fb      	str	r3, [r7, #28]
      break;
 800a428:	e01a      	b.n	800a460 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a42a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a42e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a438:	e012      	b.n	800a460 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a43a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a43e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	f043 0302 	orr.w	r3, r3, #2
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a448:	e00a      	b.n	800a460 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a44a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a44e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	f043 0303 	orr.w	r3, r3, #3
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a458:	e002      	b.n	800a460 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	61fb      	str	r3, [r7, #28]
      break;
 800a45e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a464:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80c5 	beq.w	800a5fa <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a37      	ldr	r2, [pc, #220]	; (800a558 <HAL_SAI_Init+0x280>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d004      	beq.n	800a488 <HAL_SAI_Init+0x1b0>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a37      	ldr	r2, [pc, #220]	; (800a560 <HAL_SAI_Init+0x288>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d106      	bne.n	800a496 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a488:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a48c:	f04f 0100 	mov.w	r1, #0
 800a490:	f7fe fb16 	bl	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a494:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a33      	ldr	r2, [pc, #204]	; (800a568 <HAL_SAI_Init+0x290>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d004      	beq.n	800a4aa <HAL_SAI_Init+0x1d2>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a31      	ldr	r2, [pc, #196]	; (800a56c <HAL_SAI_Init+0x294>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d106      	bne.n	800a4b8 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a4aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a4ae:	f04f 0100 	mov.w	r1, #0
 800a4b2:	f7fe fb05 	bl	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4b6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a2d      	ldr	r2, [pc, #180]	; (800a574 <HAL_SAI_Init+0x29c>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d004      	beq.n	800a4cc <HAL_SAI_Init+0x1f4>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a2c      	ldr	r2, [pc, #176]	; (800a578 <HAL_SAI_Init+0x2a0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d106      	bne.n	800a4da <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a4cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a4d0:	f04f 0100 	mov.w	r1, #0
 800a4d4:	f7fe faf4 	bl	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4d8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a1f      	ldr	r2, [pc, #124]	; (800a55c <HAL_SAI_Init+0x284>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d106      	bne.n	800a4f2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a4e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a4e8:	f04f 0100 	mov.w	r1, #0
 800a4ec:	f7fe fae8 	bl	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4f0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a22      	ldr	r2, [pc, #136]	; (800a580 <HAL_SAI_Init+0x2a8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d106      	bne.n	800a50a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a4fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a500:	f04f 0100 	mov.w	r1, #0
 800a504:	f7fe fadc 	bl	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a508:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a512:	d139      	bne.n	800a588 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d102      	bne.n	800a522 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e00a      	b.n	800a538 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a526:	2b08      	cmp	r3, #8
 800a528:	d103      	bne.n	800a532 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a52a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	e002      	b.n	800a538 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a536:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4619      	mov	r1, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	fb02 f303 	mul.w	r3, r2, r3
 800a54e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a552:	613b      	str	r3, [r7, #16]
 800a554:	e030      	b.n	800a5b8 <HAL_SAI_Init+0x2e0>
 800a556:	bf00      	nop
 800a558:	40015804 	.word	0x40015804
 800a55c:	58005404 	.word	0x58005404
 800a560:	40015824 	.word	0x40015824
 800a564:	40015800 	.word	0x40015800
 800a568:	40015c04 	.word	0x40015c04
 800a56c:	40015c24 	.word	0x40015c24
 800a570:	40015c00 	.word	0x40015c00
 800a574:	40016004 	.word	0x40016004
 800a578:	40016024 	.word	0x40016024
 800a57c:	40016000 	.word	0x40016000
 800a580:	58005424 	.word	0x58005424
 800a584:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a590:	d101      	bne.n	800a596 <HAL_SAI_Init+0x2be>
 800a592:	2302      	movs	r3, #2
 800a594:	e000      	b.n	800a598 <HAL_SAI_Init+0x2c0>
 800a596:	2301      	movs	r3, #1
 800a598:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	fb02 f303 	mul.w	r3, r2, r3
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5b6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	4a95      	ldr	r2, [pc, #596]	; (800a810 <HAL_SAI_Init+0x538>)
 800a5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c0:	08da      	lsrs	r2, r3, #3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a5c6:	6939      	ldr	r1, [r7, #16]
 800a5c8:	4b91      	ldr	r3, [pc, #580]	; (800a810 <HAL_SAI_Init+0x538>)
 800a5ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a5ce:	08da      	lsrs	r2, r3, #3
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	1aca      	subs	r2, r1, r3
 800a5da:	2a08      	cmp	r2, #8
 800a5dc:	d904      	bls.n	800a5e8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d104      	bne.n	800a5fa <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	085a      	lsrs	r2, r3, #1
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_SAI_Init+0x332>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d109      	bne.n	800a61e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d101      	bne.n	800a616 <HAL_SAI_Init+0x33e>
 800a612:	2300      	movs	r3, #0
 800a614:	e001      	b.n	800a61a <HAL_SAI_Init+0x342>
 800a616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a61a:	623b      	str	r3, [r7, #32]
 800a61c:	e008      	b.n	800a630 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a622:	2b01      	cmp	r3, #1
 800a624:	d102      	bne.n	800a62c <HAL_SAI_Init+0x354>
 800a626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a62a:	e000      	b.n	800a62e <HAL_SAI_Init+0x356>
 800a62c:	2300      	movs	r3, #0
 800a62e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a630:	f7f8 fb90 	bl	8002d54 <HAL_GetREVID>
 800a634:	4603      	mov	r3, r0
 800a636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a63a:	d331      	bcc.n	800a6a0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b73      	ldr	r3, [pc, #460]	; (800a814 <HAL_SAI_Init+0x53c>)
 800a648:	400b      	ands	r3, r1
 800a64a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a660:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a666:	431a      	orrs	r2, r3
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a674:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a680:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	051b      	lsls	r3, r3, #20
 800a688:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a68e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e02d      	b.n	800a6fc <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6819      	ldr	r1, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	4b5b      	ldr	r3, [pc, #364]	; (800a818 <HAL_SAI_Init+0x540>)
 800a6ac:	400b      	ands	r3, r1
 800a6ae:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6be:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6c4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a6d8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6e4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	051b      	lsls	r3, r3, #20
 800a6ec:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6f2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6859      	ldr	r1, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	4b45      	ldr	r3, [pc, #276]	; (800a81c <HAL_SAI_Init+0x544>)
 800a708:	400b      	ands	r3, r1
 800a70a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6859      	ldr	r1, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	69da      	ldr	r2, [r3, #28]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	431a      	orrs	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6899      	ldr	r1, [r3, #8]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	4b3a      	ldr	r3, [pc, #232]	; (800a820 <HAL_SAI_Init+0x548>)
 800a736:	400b      	ands	r3, r1
 800a738:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6899      	ldr	r1, [r3, #8]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a744:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a74a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a750:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a756:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a75c:	3b01      	subs	r3, #1
 800a75e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a760:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68d9      	ldr	r1, [r3, #12]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a778:	400b      	ands	r3, r1
 800a77a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68d9      	ldr	r1, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a790:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a792:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a798:	3b01      	subs	r3, #1
 800a79a:	021b      	lsls	r3, r3, #8
 800a79c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <HAL_SAI_Init+0x54c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d004      	beq.n	800a7ba <HAL_SAI_Init+0x4e2>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1c      	ldr	r2, [pc, #112]	; (800a828 <HAL_SAI_Init+0x550>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d119      	bne.n	800a7ee <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7be:	f023 0201 	bic.w	r2, r3, #1
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d10e      	bne.n	800a7ee <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e6:	f043 0201 	orr.w	r2, r3, #1
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3728      	adds	r7, #40	; 0x28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	cccccccd 	.word	0xcccccccd
 800a814:	f005c010 	.word	0xf005c010
 800a818:	f805c010 	.word	0xf805c010
 800a81c:	ffff1ff0 	.word	0xffff1ff0
 800a820:	fff88000 	.word	0xfff88000
 800a824:	40015804 	.word	0x40015804
 800a828:	58005404 	.word	0x58005404

0800a82c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a834:	4b18      	ldr	r3, [pc, #96]	; (800a898 <SAI_Disable+0x6c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a18      	ldr	r2, [pc, #96]	; (800a89c <SAI_Disable+0x70>)
 800a83a:	fba2 2303 	umull	r2, r3, r2, r3
 800a83e:	0b1b      	lsrs	r3, r3, #12
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a856:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10a      	bne.n	800a874 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	72fb      	strb	r3, [r7, #11]
      break;
 800a872:	e009      	b.n	800a888 <SAI_Disable+0x5c>
    }
    count--;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3b01      	subs	r3, #1
 800a878:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e7      	bne.n	800a858 <SAI_Disable+0x2c>

  return status;
 800a888:	7afb      	ldrb	r3, [r7, #11]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	24000000 	.word	0x24000000
 800a89c:	95cbec1b 	.word	0x95cbec1b

0800a8a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e02b      	b.n	800a90c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d106      	bne.n	800a8ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7f7 ffcd 	bl	8002868 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	f001 fabd 	bl	800be60 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	f001 fb11 	bl	800bf18 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a8f6:	4b07      	ldr	r3, [pc, #28]	; (800a914 <HAL_SDRAM_Init+0x74>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a06      	ldr	r2, [pc, #24]	; (800a914 <HAL_SDRAM_Init+0x74>)
 800a8fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a900:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	52004000 	.word	0x52004000

0800a918 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e10f      	b.n	800ab4a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a87      	ldr	r2, [pc, #540]	; (800ab54 <HAL_SPI_Init+0x23c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00f      	beq.n	800a95a <HAL_SPI_Init+0x42>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a86      	ldr	r2, [pc, #536]	; (800ab58 <HAL_SPI_Init+0x240>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d00a      	beq.n	800a95a <HAL_SPI_Init+0x42>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a84      	ldr	r2, [pc, #528]	; (800ab5c <HAL_SPI_Init+0x244>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d005      	beq.n	800a95a <HAL_SPI_Init+0x42>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	2b0f      	cmp	r3, #15
 800a954:	d901      	bls.n	800a95a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e0f7      	b.n	800ab4a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f900 	bl	800ab60 <SPI_GetPacketSize>
 800a960:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a7b      	ldr	r2, [pc, #492]	; (800ab54 <HAL_SPI_Init+0x23c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00c      	beq.n	800a986 <HAL_SPI_Init+0x6e>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a79      	ldr	r2, [pc, #484]	; (800ab58 <HAL_SPI_Init+0x240>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <HAL_SPI_Init+0x6e>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a78      	ldr	r2, [pc, #480]	; (800ab5c <HAL_SPI_Init+0x244>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d002      	beq.n	800a986 <HAL_SPI_Init+0x6e>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b08      	cmp	r3, #8
 800a984:	d811      	bhi.n	800a9aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a98a:	4a72      	ldr	r2, [pc, #456]	; (800ab54 <HAL_SPI_Init+0x23c>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d009      	beq.n	800a9a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a70      	ldr	r2, [pc, #448]	; (800ab58 <HAL_SPI_Init+0x240>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d004      	beq.n	800a9a4 <HAL_SPI_Init+0x8c>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a6f      	ldr	r2, [pc, #444]	; (800ab5c <HAL_SPI_Init+0x244>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d104      	bne.n	800a9ae <HAL_SPI_Init+0x96>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b10      	cmp	r3, #16
 800a9a8:	d901      	bls.n	800a9ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e0cd      	b.n	800ab4a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f7 fce4 	bl	8002390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f022 0201 	bic.w	r2, r2, #1
 800a9de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a9ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f4:	d119      	bne.n	800aa2a <HAL_SPI_Init+0x112>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9fe:	d103      	bne.n	800aa08 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10c      	bne.n	800aa2a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa18:	d107      	bne.n	800aa2a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00f      	beq.n	800aa56 <HAL_SPI_Init+0x13e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	2b06      	cmp	r3, #6
 800aa3c:	d90b      	bls.n	800aa56 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	e007      	b.n	800aa66 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	69da      	ldr	r2, [r3, #28]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa78:	ea42 0103 	orr.w	r1, r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	431a      	orrs	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa96:	431a      	orrs	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	431a      	orrs	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	431a      	orrs	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac6:	ea42 0103 	orr.w	r1, r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d113      	bne.n	800ab06 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaf0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0201 	bic.w	r2, r2, #1
 800ab14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	40013000 	.word	0x40013000
 800ab58:	40003800 	.word	0x40003800
 800ab5c:	40003c00 	.word	0x40003c00

0800ab60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6c:	095b      	lsrs	r3, r3, #5
 800ab6e:	3301      	adds	r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	3301      	adds	r3, #1
 800ab78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3307      	adds	r3, #7
 800ab7e:	08db      	lsrs	r3, r3, #3
 800ab80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e042      	b.n	800ac2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7f7 fcb2 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2224      	movs	r2, #36	; 0x24
 800abc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0201 	bic.w	r2, r2, #1
 800abd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f8bb 	bl	800ad54 <UART_SetConfig>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e022      	b.n	800ac2e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fe17 	bl	800b824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f042 0201 	orr.w	r2, r2, #1
 800ac24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fe9e 	bl	800b968 <UART_CheckIdleState>
 800ac2c:	4603      	mov	r3, r0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b08a      	sub	sp, #40	; 0x28
 800ac3a:	af02      	add	r7, sp, #8
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	603b      	str	r3, [r7, #0]
 800ac42:	4613      	mov	r3, r2
 800ac44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d17b      	bne.n	800ad48 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d002      	beq.n	800ac5c <HAL_UART_Transmit+0x26>
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e074      	b.n	800ad4a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2221      	movs	r2, #33	; 0x21
 800ac6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac70:	f7f8 f840 	bl	8002cf4 <HAL_GetTick>
 800ac74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	88fa      	ldrh	r2, [r7, #6]
 800ac7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	88fa      	ldrh	r2, [r7, #6]
 800ac82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac8e:	d108      	bne.n	800aca2 <HAL_UART_Transmit+0x6c>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	61bb      	str	r3, [r7, #24]
 800aca0:	e003      	b.n	800acaa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800acaa:	e030      	b.n	800ad0e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2200      	movs	r2, #0
 800acb4:	2180      	movs	r1, #128	; 0x80
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 ff00 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d005      	beq.n	800acce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e03d      	b.n	800ad4a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10b      	bne.n	800acec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ace2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	3302      	adds	r3, #2
 800ace8:	61bb      	str	r3, [r7, #24]
 800acea:	e007      	b.n	800acfc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	3301      	adds	r3, #1
 800acfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1c8      	bne.n	800acac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2200      	movs	r2, #0
 800ad22:	2140      	movs	r1, #64	; 0x40
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 fec9 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d005      	beq.n	800ad3c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e006      	b.n	800ad4a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	e000      	b.n	800ad4a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ad48:	2302      	movs	r3, #2
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad58:	b092      	sub	sp, #72	; 0x48
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	689a      	ldr	r2, [r3, #8]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	431a      	orrs	r2, r3
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4bbe      	ldr	r3, [pc, #760]	; (800b07c <UART_SetConfig+0x328>)
 800ad84:	4013      	ands	r3, r2
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	6812      	ldr	r2, [r2, #0]
 800ad8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	68da      	ldr	r2, [r3, #12]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4ab3      	ldr	r2, [pc, #716]	; (800b080 <UART_SetConfig+0x32c>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d004      	beq.n	800adc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adbc:	4313      	orrs	r3, r2
 800adbe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689a      	ldr	r2, [r3, #8]
 800adc6:	4baf      	ldr	r3, [pc, #700]	; (800b084 <UART_SetConfig+0x330>)
 800adc8:	4013      	ands	r3, r2
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	6812      	ldr	r2, [r2, #0]
 800adce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800add0:	430b      	orrs	r3, r1
 800add2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	f023 010f 	bic.w	r1, r3, #15
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4aa6      	ldr	r2, [pc, #664]	; (800b088 <UART_SetConfig+0x334>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d177      	bne.n	800aee4 <UART_SetConfig+0x190>
 800adf4:	4ba5      	ldr	r3, [pc, #660]	; (800b08c <UART_SetConfig+0x338>)
 800adf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adfc:	2b28      	cmp	r3, #40	; 0x28
 800adfe:	d86d      	bhi.n	800aedc <UART_SetConfig+0x188>
 800ae00:	a201      	add	r2, pc, #4	; (adr r2, 800ae08 <UART_SetConfig+0xb4>)
 800ae02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae06:	bf00      	nop
 800ae08:	0800aead 	.word	0x0800aead
 800ae0c:	0800aedd 	.word	0x0800aedd
 800ae10:	0800aedd 	.word	0x0800aedd
 800ae14:	0800aedd 	.word	0x0800aedd
 800ae18:	0800aedd 	.word	0x0800aedd
 800ae1c:	0800aedd 	.word	0x0800aedd
 800ae20:	0800aedd 	.word	0x0800aedd
 800ae24:	0800aedd 	.word	0x0800aedd
 800ae28:	0800aeb5 	.word	0x0800aeb5
 800ae2c:	0800aedd 	.word	0x0800aedd
 800ae30:	0800aedd 	.word	0x0800aedd
 800ae34:	0800aedd 	.word	0x0800aedd
 800ae38:	0800aedd 	.word	0x0800aedd
 800ae3c:	0800aedd 	.word	0x0800aedd
 800ae40:	0800aedd 	.word	0x0800aedd
 800ae44:	0800aedd 	.word	0x0800aedd
 800ae48:	0800aebd 	.word	0x0800aebd
 800ae4c:	0800aedd 	.word	0x0800aedd
 800ae50:	0800aedd 	.word	0x0800aedd
 800ae54:	0800aedd 	.word	0x0800aedd
 800ae58:	0800aedd 	.word	0x0800aedd
 800ae5c:	0800aedd 	.word	0x0800aedd
 800ae60:	0800aedd 	.word	0x0800aedd
 800ae64:	0800aedd 	.word	0x0800aedd
 800ae68:	0800aec5 	.word	0x0800aec5
 800ae6c:	0800aedd 	.word	0x0800aedd
 800ae70:	0800aedd 	.word	0x0800aedd
 800ae74:	0800aedd 	.word	0x0800aedd
 800ae78:	0800aedd 	.word	0x0800aedd
 800ae7c:	0800aedd 	.word	0x0800aedd
 800ae80:	0800aedd 	.word	0x0800aedd
 800ae84:	0800aedd 	.word	0x0800aedd
 800ae88:	0800aecd 	.word	0x0800aecd
 800ae8c:	0800aedd 	.word	0x0800aedd
 800ae90:	0800aedd 	.word	0x0800aedd
 800ae94:	0800aedd 	.word	0x0800aedd
 800ae98:	0800aedd 	.word	0x0800aedd
 800ae9c:	0800aedd 	.word	0x0800aedd
 800aea0:	0800aedd 	.word	0x0800aedd
 800aea4:	0800aedd 	.word	0x0800aedd
 800aea8:	0800aed5 	.word	0x0800aed5
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e222      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e21e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aebc:	2308      	movs	r3, #8
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e21a      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aec4:	2310      	movs	r3, #16
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeca:	e216      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aecc:	2320      	movs	r3, #32
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aed2:	e212      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeda:	e20e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aedc:	2380      	movs	r3, #128	; 0x80
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aee2:	e20a      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a69      	ldr	r2, [pc, #420]	; (800b090 <UART_SetConfig+0x33c>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d130      	bne.n	800af50 <UART_SetConfig+0x1fc>
 800aeee:	4b67      	ldr	r3, [pc, #412]	; (800b08c <UART_SetConfig+0x338>)
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	2b05      	cmp	r3, #5
 800aef8:	d826      	bhi.n	800af48 <UART_SetConfig+0x1f4>
 800aefa:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <UART_SetConfig+0x1ac>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af19 	.word	0x0800af19
 800af04:	0800af21 	.word	0x0800af21
 800af08:	0800af29 	.word	0x0800af29
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af39 	.word	0x0800af39
 800af14:	0800af41 	.word	0x0800af41
 800af18:	2300      	movs	r3, #0
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e1ec      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af20:	2304      	movs	r3, #4
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af26:	e1e8      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af28:	2308      	movs	r3, #8
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2e:	e1e4      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af30:	2310      	movs	r3, #16
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af36:	e1e0      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af38:	2320      	movs	r3, #32
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3e:	e1dc      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af40:	2340      	movs	r3, #64	; 0x40
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af46:	e1d8      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af48:	2380      	movs	r3, #128	; 0x80
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af4e:	e1d4      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a4f      	ldr	r2, [pc, #316]	; (800b094 <UART_SetConfig+0x340>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d130      	bne.n	800afbc <UART_SetConfig+0x268>
 800af5a:	4b4c      	ldr	r3, [pc, #304]	; (800b08c <UART_SetConfig+0x338>)
 800af5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b05      	cmp	r3, #5
 800af64:	d826      	bhi.n	800afb4 <UART_SetConfig+0x260>
 800af66:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <UART_SetConfig+0x218>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800af85 	.word	0x0800af85
 800af70:	0800af8d 	.word	0x0800af8d
 800af74:	0800af95 	.word	0x0800af95
 800af78:	0800af9d 	.word	0x0800af9d
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800afad 	.word	0x0800afad
 800af84:	2300      	movs	r3, #0
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8a:	e1b6      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af8c:	2304      	movs	r3, #4
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e1b2      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af94:	2308      	movs	r3, #8
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e1ae      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800af9c:	2310      	movs	r3, #16
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e1aa      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800afa4:	2320      	movs	r3, #32
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e1a6      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800afac:	2340      	movs	r3, #64	; 0x40
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afb2:	e1a2      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afba:	e19e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a35      	ldr	r2, [pc, #212]	; (800b098 <UART_SetConfig+0x344>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d130      	bne.n	800b028 <UART_SetConfig+0x2d4>
 800afc6:	4b31      	ldr	r3, [pc, #196]	; (800b08c <UART_SetConfig+0x338>)
 800afc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	2b05      	cmp	r3, #5
 800afd0:	d826      	bhi.n	800b020 <UART_SetConfig+0x2cc>
 800afd2:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <UART_SetConfig+0x284>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800aff1 	.word	0x0800aff1
 800afdc:	0800aff9 	.word	0x0800aff9
 800afe0:	0800b001 	.word	0x0800b001
 800afe4:	0800b009 	.word	0x0800b009
 800afe8:	0800b011 	.word	0x0800b011
 800afec:	0800b019 	.word	0x0800b019
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff6:	e180      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800aff8:	2304      	movs	r3, #4
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affe:	e17c      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b000:	2308      	movs	r3, #8
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b006:	e178      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b008:	2310      	movs	r3, #16
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00e:	e174      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b010:	2320      	movs	r3, #32
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b016:	e170      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b018:	2340      	movs	r3, #64	; 0x40
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01e:	e16c      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b020:	2380      	movs	r3, #128	; 0x80
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b026:	e168      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a1b      	ldr	r2, [pc, #108]	; (800b09c <UART_SetConfig+0x348>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d142      	bne.n	800b0b8 <UART_SetConfig+0x364>
 800b032:	4b16      	ldr	r3, [pc, #88]	; (800b08c <UART_SetConfig+0x338>)
 800b034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	2b05      	cmp	r3, #5
 800b03c:	d838      	bhi.n	800b0b0 <UART_SetConfig+0x35c>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <UART_SetConfig+0x2f0>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b05d 	.word	0x0800b05d
 800b048:	0800b065 	.word	0x0800b065
 800b04c:	0800b06d 	.word	0x0800b06d
 800b050:	0800b075 	.word	0x0800b075
 800b054:	0800b0a1 	.word	0x0800b0a1
 800b058:	0800b0a9 	.word	0x0800b0a9
 800b05c:	2300      	movs	r3, #0
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e14a      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b064:	2304      	movs	r3, #4
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e146      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b06c:	2308      	movs	r3, #8
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e142      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b074:	2310      	movs	r3, #16
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e13e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b07c:	cfff69f3 	.word	0xcfff69f3
 800b080:	58000c00 	.word	0x58000c00
 800b084:	11fff4ff 	.word	0x11fff4ff
 800b088:	40011000 	.word	0x40011000
 800b08c:	58024400 	.word	0x58024400
 800b090:	40004400 	.word	0x40004400
 800b094:	40004800 	.word	0x40004800
 800b098:	40004c00 	.word	0x40004c00
 800b09c:	40005000 	.word	0x40005000
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a6:	e128      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b0a8:	2340      	movs	r3, #64	; 0x40
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ae:	e124      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b0b0:	2380      	movs	r3, #128	; 0x80
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b6:	e120      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4acb      	ldr	r2, [pc, #812]	; (800b3ec <UART_SetConfig+0x698>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d176      	bne.n	800b1b0 <UART_SetConfig+0x45c>
 800b0c2:	4bcb      	ldr	r3, [pc, #812]	; (800b3f0 <UART_SetConfig+0x69c>)
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0ca:	2b28      	cmp	r3, #40	; 0x28
 800b0cc:	d86c      	bhi.n	800b1a8 <UART_SetConfig+0x454>
 800b0ce:	a201      	add	r2, pc, #4	; (adr r2, 800b0d4 <UART_SetConfig+0x380>)
 800b0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d4:	0800b179 	.word	0x0800b179
 800b0d8:	0800b1a9 	.word	0x0800b1a9
 800b0dc:	0800b1a9 	.word	0x0800b1a9
 800b0e0:	0800b1a9 	.word	0x0800b1a9
 800b0e4:	0800b1a9 	.word	0x0800b1a9
 800b0e8:	0800b1a9 	.word	0x0800b1a9
 800b0ec:	0800b1a9 	.word	0x0800b1a9
 800b0f0:	0800b1a9 	.word	0x0800b1a9
 800b0f4:	0800b181 	.word	0x0800b181
 800b0f8:	0800b1a9 	.word	0x0800b1a9
 800b0fc:	0800b1a9 	.word	0x0800b1a9
 800b100:	0800b1a9 	.word	0x0800b1a9
 800b104:	0800b1a9 	.word	0x0800b1a9
 800b108:	0800b1a9 	.word	0x0800b1a9
 800b10c:	0800b1a9 	.word	0x0800b1a9
 800b110:	0800b1a9 	.word	0x0800b1a9
 800b114:	0800b189 	.word	0x0800b189
 800b118:	0800b1a9 	.word	0x0800b1a9
 800b11c:	0800b1a9 	.word	0x0800b1a9
 800b120:	0800b1a9 	.word	0x0800b1a9
 800b124:	0800b1a9 	.word	0x0800b1a9
 800b128:	0800b1a9 	.word	0x0800b1a9
 800b12c:	0800b1a9 	.word	0x0800b1a9
 800b130:	0800b1a9 	.word	0x0800b1a9
 800b134:	0800b191 	.word	0x0800b191
 800b138:	0800b1a9 	.word	0x0800b1a9
 800b13c:	0800b1a9 	.word	0x0800b1a9
 800b140:	0800b1a9 	.word	0x0800b1a9
 800b144:	0800b1a9 	.word	0x0800b1a9
 800b148:	0800b1a9 	.word	0x0800b1a9
 800b14c:	0800b1a9 	.word	0x0800b1a9
 800b150:	0800b1a9 	.word	0x0800b1a9
 800b154:	0800b199 	.word	0x0800b199
 800b158:	0800b1a9 	.word	0x0800b1a9
 800b15c:	0800b1a9 	.word	0x0800b1a9
 800b160:	0800b1a9 	.word	0x0800b1a9
 800b164:	0800b1a9 	.word	0x0800b1a9
 800b168:	0800b1a9 	.word	0x0800b1a9
 800b16c:	0800b1a9 	.word	0x0800b1a9
 800b170:	0800b1a9 	.word	0x0800b1a9
 800b174:	0800b1a1 	.word	0x0800b1a1
 800b178:	2301      	movs	r3, #1
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17e:	e0bc      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b180:	2304      	movs	r3, #4
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b186:	e0b8      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b188:	2308      	movs	r3, #8
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18e:	e0b4      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b190:	2310      	movs	r3, #16
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b196:	e0b0      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b198:	2320      	movs	r3, #32
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19e:	e0ac      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b1a0:	2340      	movs	r3, #64	; 0x40
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a6:	e0a8      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ae:	e0a4      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a8f      	ldr	r2, [pc, #572]	; (800b3f4 <UART_SetConfig+0x6a0>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d130      	bne.n	800b21c <UART_SetConfig+0x4c8>
 800b1ba:	4b8d      	ldr	r3, [pc, #564]	; (800b3f0 <UART_SetConfig+0x69c>)
 800b1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	2b05      	cmp	r3, #5
 800b1c4:	d826      	bhi.n	800b214 <UART_SetConfig+0x4c0>
 800b1c6:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <UART_SetConfig+0x478>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1e5 	.word	0x0800b1e5
 800b1d0:	0800b1ed 	.word	0x0800b1ed
 800b1d4:	0800b1f5 	.word	0x0800b1f5
 800b1d8:	0800b1fd 	.word	0x0800b1fd
 800b1dc:	0800b205 	.word	0x0800b205
 800b1e0:	0800b20d 	.word	0x0800b20d
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ea:	e086      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b1ec:	2304      	movs	r3, #4
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f2:	e082      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b1f4:	2308      	movs	r3, #8
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fa:	e07e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b202:	e07a      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b204:	2320      	movs	r3, #32
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20a:	e076      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b20c:	2340      	movs	r3, #64	; 0x40
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b212:	e072      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b214:	2380      	movs	r3, #128	; 0x80
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21a:	e06e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a75      	ldr	r2, [pc, #468]	; (800b3f8 <UART_SetConfig+0x6a4>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d130      	bne.n	800b288 <UART_SetConfig+0x534>
 800b226:	4b72      	ldr	r3, [pc, #456]	; (800b3f0 <UART_SetConfig+0x69c>)
 800b228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	2b05      	cmp	r3, #5
 800b230:	d826      	bhi.n	800b280 <UART_SetConfig+0x52c>
 800b232:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <UART_SetConfig+0x4e4>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b251 	.word	0x0800b251
 800b23c:	0800b259 	.word	0x0800b259
 800b240:	0800b261 	.word	0x0800b261
 800b244:	0800b269 	.word	0x0800b269
 800b248:	0800b271 	.word	0x0800b271
 800b24c:	0800b279 	.word	0x0800b279
 800b250:	2300      	movs	r3, #0
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b256:	e050      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b258:	2304      	movs	r3, #4
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25e:	e04c      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b260:	2308      	movs	r3, #8
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e048      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b268:	2310      	movs	r3, #16
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e044      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b270:	2320      	movs	r3, #32
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b276:	e040      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b278:	2340      	movs	r3, #64	; 0x40
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e03c      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b280:	2380      	movs	r3, #128	; 0x80
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b286:	e038      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a5b      	ldr	r2, [pc, #364]	; (800b3fc <UART_SetConfig+0x6a8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d130      	bne.n	800b2f4 <UART_SetConfig+0x5a0>
 800b292:	4b57      	ldr	r3, [pc, #348]	; (800b3f0 <UART_SetConfig+0x69c>)
 800b294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	d826      	bhi.n	800b2ec <UART_SetConfig+0x598>
 800b29e:	a201      	add	r2, pc, #4	; (adr r2, 800b2a4 <UART_SetConfig+0x550>)
 800b2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a4:	0800b2bd 	.word	0x0800b2bd
 800b2a8:	0800b2c5 	.word	0x0800b2c5
 800b2ac:	0800b2cd 	.word	0x0800b2cd
 800b2b0:	0800b2d5 	.word	0x0800b2d5
 800b2b4:	0800b2dd 	.word	0x0800b2dd
 800b2b8:	0800b2e5 	.word	0x0800b2e5
 800b2bc:	2302      	movs	r3, #2
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c2:	e01a      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ca:	e016      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d2:	e012      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2da:	e00e      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2dc:	2320      	movs	r3, #32
 800b2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e2:	e00a      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2e4:	2340      	movs	r3, #64	; 0x40
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ea:	e006      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2ec:	2380      	movs	r3, #128	; 0x80
 800b2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f2:	e002      	b.n	800b2fa <UART_SetConfig+0x5a6>
 800b2f4:	2380      	movs	r3, #128	; 0x80
 800b2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a3f      	ldr	r2, [pc, #252]	; (800b3fc <UART_SetConfig+0x6a8>)
 800b300:	4293      	cmp	r3, r2
 800b302:	f040 80f8 	bne.w	800b4f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b306:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	dc46      	bgt.n	800b39c <UART_SetConfig+0x648>
 800b30e:	2b02      	cmp	r3, #2
 800b310:	f2c0 8082 	blt.w	800b418 <UART_SetConfig+0x6c4>
 800b314:	3b02      	subs	r3, #2
 800b316:	2b1e      	cmp	r3, #30
 800b318:	d87e      	bhi.n	800b418 <UART_SetConfig+0x6c4>
 800b31a:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0x5cc>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b3a3 	.word	0x0800b3a3
 800b324:	0800b419 	.word	0x0800b419
 800b328:	0800b3ab 	.word	0x0800b3ab
 800b32c:	0800b419 	.word	0x0800b419
 800b330:	0800b419 	.word	0x0800b419
 800b334:	0800b419 	.word	0x0800b419
 800b338:	0800b3bb 	.word	0x0800b3bb
 800b33c:	0800b419 	.word	0x0800b419
 800b340:	0800b419 	.word	0x0800b419
 800b344:	0800b419 	.word	0x0800b419
 800b348:	0800b419 	.word	0x0800b419
 800b34c:	0800b419 	.word	0x0800b419
 800b350:	0800b419 	.word	0x0800b419
 800b354:	0800b419 	.word	0x0800b419
 800b358:	0800b3cb 	.word	0x0800b3cb
 800b35c:	0800b419 	.word	0x0800b419
 800b360:	0800b419 	.word	0x0800b419
 800b364:	0800b419 	.word	0x0800b419
 800b368:	0800b419 	.word	0x0800b419
 800b36c:	0800b419 	.word	0x0800b419
 800b370:	0800b419 	.word	0x0800b419
 800b374:	0800b419 	.word	0x0800b419
 800b378:	0800b419 	.word	0x0800b419
 800b37c:	0800b419 	.word	0x0800b419
 800b380:	0800b419 	.word	0x0800b419
 800b384:	0800b419 	.word	0x0800b419
 800b388:	0800b419 	.word	0x0800b419
 800b38c:	0800b419 	.word	0x0800b419
 800b390:	0800b419 	.word	0x0800b419
 800b394:	0800b419 	.word	0x0800b419
 800b398:	0800b40b 	.word	0x0800b40b
 800b39c:	2b40      	cmp	r3, #64	; 0x40
 800b39e:	d037      	beq.n	800b410 <UART_SetConfig+0x6bc>
 800b3a0:	e03a      	b.n	800b418 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b3a2:	f7fe f90d 	bl	80095c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b3a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3a8:	e03c      	b.n	800b424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe f91c 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b8:	e034      	b.n	800b424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ba:	f107 0318 	add.w	r3, r7, #24
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fa68 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c8:	e02c      	b.n	800b424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <UART_SetConfig+0x69c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d016      	beq.n	800b404 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <UART_SetConfig+0x69c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	08db      	lsrs	r3, r3, #3
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	4a07      	ldr	r2, [pc, #28]	; (800b400 <UART_SetConfig+0x6ac>)
 800b3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3e8:	e01c      	b.n	800b424 <UART_SetConfig+0x6d0>
 800b3ea:	bf00      	nop
 800b3ec:	40011400 	.word	0x40011400
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	40007800 	.word	0x40007800
 800b3f8:	40007c00 	.word	0x40007c00
 800b3fc:	58000c00 	.word	0x58000c00
 800b400:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b404:	4b9d      	ldr	r3, [pc, #628]	; (800b67c <UART_SetConfig+0x928>)
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b408:	e00c      	b.n	800b424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b40a:	4b9d      	ldr	r3, [pc, #628]	; (800b680 <UART_SetConfig+0x92c>)
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b40e:	e009      	b.n	800b424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b416:	e005      	b.n	800b424 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b422:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 81de 	beq.w	800b7e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	4a94      	ldr	r2, [pc, #592]	; (800b684 <UART_SetConfig+0x930>)
 800b432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b436:	461a      	mov	r2, r3
 800b438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b43e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	4413      	add	r3, r2
 800b44a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d305      	bcc.n	800b45c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b458:	429a      	cmp	r2, r3
 800b45a:	d903      	bls.n	800b464 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b462:	e1c1      	b.n	800b7e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b466:	2200      	movs	r2, #0
 800b468:	60bb      	str	r3, [r7, #8]
 800b46a:	60fa      	str	r2, [r7, #12]
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	4a84      	ldr	r2, [pc, #528]	; (800b684 <UART_SetConfig+0x930>)
 800b472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b476:	b29b      	uxth	r3, r3
 800b478:	2200      	movs	r2, #0
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b486:	f7f4 ff83 	bl	8000390 <__aeabi_uldivmod>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	4610      	mov	r0, r2
 800b490:	4619      	mov	r1, r3
 800b492:	f04f 0200 	mov.w	r2, #0
 800b496:	f04f 0300 	mov.w	r3, #0
 800b49a:	020b      	lsls	r3, r1, #8
 800b49c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4a0:	0202      	lsls	r2, r0, #8
 800b4a2:	6979      	ldr	r1, [r7, #20]
 800b4a4:	6849      	ldr	r1, [r1, #4]
 800b4a6:	0849      	lsrs	r1, r1, #1
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	eb12 0804 	adds.w	r8, r2, r4
 800b4b2:	eb43 0905 	adc.w	r9, r3, r5
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	469a      	mov	sl, r3
 800b4be:	4693      	mov	fp, r2
 800b4c0:	4652      	mov	r2, sl
 800b4c2:	465b      	mov	r3, fp
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	f7f4 ff62 	bl	8000390 <__aeabi_uldivmod>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4da:	d308      	bcc.n	800b4ee <UART_SetConfig+0x79a>
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e2:	d204      	bcs.n	800b4ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ea:	60da      	str	r2, [r3, #12]
 800b4ec:	e17c      	b.n	800b7e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b4f4:	e178      	b.n	800b7e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4fe:	f040 80c5 	bne.w	800b68c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b502:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b506:	2b20      	cmp	r3, #32
 800b508:	dc48      	bgt.n	800b59c <UART_SetConfig+0x848>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	db7b      	blt.n	800b606 <UART_SetConfig+0x8b2>
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d879      	bhi.n	800b606 <UART_SetConfig+0x8b2>
 800b512:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <UART_SetConfig+0x7c4>)
 800b514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b518:	0800b5a3 	.word	0x0800b5a3
 800b51c:	0800b5ab 	.word	0x0800b5ab
 800b520:	0800b607 	.word	0x0800b607
 800b524:	0800b607 	.word	0x0800b607
 800b528:	0800b5b3 	.word	0x0800b5b3
 800b52c:	0800b607 	.word	0x0800b607
 800b530:	0800b607 	.word	0x0800b607
 800b534:	0800b607 	.word	0x0800b607
 800b538:	0800b5c3 	.word	0x0800b5c3
 800b53c:	0800b607 	.word	0x0800b607
 800b540:	0800b607 	.word	0x0800b607
 800b544:	0800b607 	.word	0x0800b607
 800b548:	0800b607 	.word	0x0800b607
 800b54c:	0800b607 	.word	0x0800b607
 800b550:	0800b607 	.word	0x0800b607
 800b554:	0800b607 	.word	0x0800b607
 800b558:	0800b5d3 	.word	0x0800b5d3
 800b55c:	0800b607 	.word	0x0800b607
 800b560:	0800b607 	.word	0x0800b607
 800b564:	0800b607 	.word	0x0800b607
 800b568:	0800b607 	.word	0x0800b607
 800b56c:	0800b607 	.word	0x0800b607
 800b570:	0800b607 	.word	0x0800b607
 800b574:	0800b607 	.word	0x0800b607
 800b578:	0800b607 	.word	0x0800b607
 800b57c:	0800b607 	.word	0x0800b607
 800b580:	0800b607 	.word	0x0800b607
 800b584:	0800b607 	.word	0x0800b607
 800b588:	0800b607 	.word	0x0800b607
 800b58c:	0800b607 	.word	0x0800b607
 800b590:	0800b607 	.word	0x0800b607
 800b594:	0800b607 	.word	0x0800b607
 800b598:	0800b5f9 	.word	0x0800b5f9
 800b59c:	2b40      	cmp	r3, #64	; 0x40
 800b59e:	d02e      	beq.n	800b5fe <UART_SetConfig+0x8aa>
 800b5a0:	e031      	b.n	800b606 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5a2:	f7fc f857 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 800b5a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5a8:	e033      	b.n	800b612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5aa:	f7fc f869 	bl	8007680 <HAL_RCC_GetPCLK2Freq>
 800b5ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5b0:	e02f      	b.n	800b612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe f818 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c0:	e027      	b.n	800b612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c2:	f107 0318 	add.w	r3, r7, #24
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe f964 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d0:	e01f      	b.n	800b612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d2:	4b2d      	ldr	r3, [pc, #180]	; (800b688 <UART_SetConfig+0x934>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 0320 	and.w	r3, r3, #32
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d009      	beq.n	800b5f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5de:	4b2a      	ldr	r3, [pc, #168]	; (800b688 <UART_SetConfig+0x934>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	08db      	lsrs	r3, r3, #3
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	4a24      	ldr	r2, [pc, #144]	; (800b67c <UART_SetConfig+0x928>)
 800b5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5f0:	e00f      	b.n	800b612 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b5f2:	4b22      	ldr	r3, [pc, #136]	; (800b67c <UART_SetConfig+0x928>)
 800b5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5f6:	e00c      	b.n	800b612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5f8:	4b21      	ldr	r3, [pc, #132]	; (800b680 <UART_SetConfig+0x92c>)
 800b5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5fc:	e009      	b.n	800b612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b604:	e005      	b.n	800b612 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80e7 	beq.w	800b7e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	4a19      	ldr	r2, [pc, #100]	; (800b684 <UART_SetConfig+0x930>)
 800b620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b624:	461a      	mov	r2, r3
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	fbb3 f3f2 	udiv	r3, r3, r2
 800b62c:	005a      	lsls	r2, r3, #1
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	085b      	lsrs	r3, r3, #1
 800b634:	441a      	add	r2, r3
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	2b0f      	cmp	r3, #15
 800b644:	d916      	bls.n	800b674 <UART_SetConfig+0x920>
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b64c:	d212      	bcs.n	800b674 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	b29b      	uxth	r3, r3
 800b652:	f023 030f 	bic.w	r3, r3, #15
 800b656:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	f003 0307 	and.w	r3, r3, #7
 800b662:	b29a      	uxth	r2, r3
 800b664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b666:	4313      	orrs	r3, r2
 800b668:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b670:	60da      	str	r2, [r3, #12]
 800b672:	e0b9      	b.n	800b7e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b67a:	e0b5      	b.n	800b7e8 <UART_SetConfig+0xa94>
 800b67c:	03d09000 	.word	0x03d09000
 800b680:	003d0900 	.word	0x003d0900
 800b684:	0800d00c 	.word	0x0800d00c
 800b688:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b68c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b690:	2b20      	cmp	r3, #32
 800b692:	dc49      	bgt.n	800b728 <UART_SetConfig+0x9d4>
 800b694:	2b00      	cmp	r3, #0
 800b696:	db7c      	blt.n	800b792 <UART_SetConfig+0xa3e>
 800b698:	2b20      	cmp	r3, #32
 800b69a:	d87a      	bhi.n	800b792 <UART_SetConfig+0xa3e>
 800b69c:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <UART_SetConfig+0x950>)
 800b69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a2:	bf00      	nop
 800b6a4:	0800b72f 	.word	0x0800b72f
 800b6a8:	0800b737 	.word	0x0800b737
 800b6ac:	0800b793 	.word	0x0800b793
 800b6b0:	0800b793 	.word	0x0800b793
 800b6b4:	0800b73f 	.word	0x0800b73f
 800b6b8:	0800b793 	.word	0x0800b793
 800b6bc:	0800b793 	.word	0x0800b793
 800b6c0:	0800b793 	.word	0x0800b793
 800b6c4:	0800b74f 	.word	0x0800b74f
 800b6c8:	0800b793 	.word	0x0800b793
 800b6cc:	0800b793 	.word	0x0800b793
 800b6d0:	0800b793 	.word	0x0800b793
 800b6d4:	0800b793 	.word	0x0800b793
 800b6d8:	0800b793 	.word	0x0800b793
 800b6dc:	0800b793 	.word	0x0800b793
 800b6e0:	0800b793 	.word	0x0800b793
 800b6e4:	0800b75f 	.word	0x0800b75f
 800b6e8:	0800b793 	.word	0x0800b793
 800b6ec:	0800b793 	.word	0x0800b793
 800b6f0:	0800b793 	.word	0x0800b793
 800b6f4:	0800b793 	.word	0x0800b793
 800b6f8:	0800b793 	.word	0x0800b793
 800b6fc:	0800b793 	.word	0x0800b793
 800b700:	0800b793 	.word	0x0800b793
 800b704:	0800b793 	.word	0x0800b793
 800b708:	0800b793 	.word	0x0800b793
 800b70c:	0800b793 	.word	0x0800b793
 800b710:	0800b793 	.word	0x0800b793
 800b714:	0800b793 	.word	0x0800b793
 800b718:	0800b793 	.word	0x0800b793
 800b71c:	0800b793 	.word	0x0800b793
 800b720:	0800b793 	.word	0x0800b793
 800b724:	0800b785 	.word	0x0800b785
 800b728:	2b40      	cmp	r3, #64	; 0x40
 800b72a:	d02e      	beq.n	800b78a <UART_SetConfig+0xa36>
 800b72c:	e031      	b.n	800b792 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b72e:	f7fb ff91 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 800b732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b734:	e033      	b.n	800b79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b736:	f7fb ffa3 	bl	8007680 <HAL_RCC_GetPCLK2Freq>
 800b73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b73c:	e02f      	b.n	800b79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b742:	4618      	mov	r0, r3
 800b744:	f7fd ff52 	bl	80095ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b74c:	e027      	b.n	800b79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b74e:	f107 0318 	add.w	r3, r7, #24
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe f89e 	bl	8009894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b75c:	e01f      	b.n	800b79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b75e:	4b2d      	ldr	r3, [pc, #180]	; (800b814 <UART_SetConfig+0xac0>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	2b00      	cmp	r3, #0
 800b768:	d009      	beq.n	800b77e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b76a:	4b2a      	ldr	r3, [pc, #168]	; (800b814 <UART_SetConfig+0xac0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	08db      	lsrs	r3, r3, #3
 800b770:	f003 0303 	and.w	r3, r3, #3
 800b774:	4a28      	ldr	r2, [pc, #160]	; (800b818 <UART_SetConfig+0xac4>)
 800b776:	fa22 f303 	lsr.w	r3, r2, r3
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b77c:	e00f      	b.n	800b79e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b77e:	4b26      	ldr	r3, [pc, #152]	; (800b818 <UART_SetConfig+0xac4>)
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b782:	e00c      	b.n	800b79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b784:	4b25      	ldr	r3, [pc, #148]	; (800b81c <UART_SetConfig+0xac8>)
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b788:	e009      	b.n	800b79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b790:	e005      	b.n	800b79e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b79c:	bf00      	nop
    }

    if (pclk != 0U)
 800b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d021      	beq.n	800b7e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	4a1d      	ldr	r2, [pc, #116]	; (800b820 <UART_SetConfig+0xacc>)
 800b7aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	085b      	lsrs	r3, r3, #1
 800b7bc:	441a      	add	r2, r3
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	2b0f      	cmp	r3, #15
 800b7cc:	d909      	bls.n	800b7e2 <UART_SetConfig+0xa8e>
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d4:	d205      	bcs.n	800b7e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60da      	str	r2, [r3, #12]
 800b7e0:	e002      	b.n	800b7e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2200      	movs	r2, #0
 800b802:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b804:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3748      	adds	r7, #72	; 0x48
 800b80c:	46bd      	mov	sp, r7
 800b80e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b812:	bf00      	nop
 800b814:	58024400 	.word	0x58024400
 800b818:	03d09000 	.word	0x03d09000
 800b81c:	003d0900 	.word	0x003d0900
 800b820:	0800d00c 	.word	0x0800d00c

0800b824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00a      	beq.n	800b84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00a      	beq.n	800b892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	430a      	orrs	r2, r1
 800b890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b896:	f003 0308 	and.w	r3, r3, #8
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b8:	f003 0310 	and.w	r3, r3, #16
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00a      	beq.n	800b8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b900:	2b00      	cmp	r3, #0
 800b902:	d01a      	beq.n	800b93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	430a      	orrs	r2, r1
 800b918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b922:	d10a      	bne.n	800b93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	605a      	str	r2, [r3, #4]
  }
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b098      	sub	sp, #96	; 0x60
 800b96c:	af02      	add	r7, sp, #8
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b978:	f7f7 f9bc 	bl	8002cf4 <HAL_GetTick>
 800b97c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0308 	and.w	r3, r3, #8
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d12f      	bne.n	800b9ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b98c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b994:	2200      	movs	r2, #0
 800b996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f88e 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d022      	beq.n	800b9ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e6      	bne.n	800b9a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2220      	movs	r2, #32
 800b9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e063      	b.n	800bab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0304 	and.w	r3, r3, #4
 800b9f6:	2b04      	cmp	r3, #4
 800b9f8:	d149      	bne.n	800ba8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba02:	2200      	movs	r2, #0
 800ba04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f857 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d03c      	beq.n	800ba8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	623b      	str	r3, [r7, #32]
   return(result);
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba32:	633b      	str	r3, [r7, #48]	; 0x30
 800ba34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e6      	bne.n	800ba14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f023 0301 	bic.w	r3, r3, #1
 800ba5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba66:	61fa      	str	r2, [r7, #28]
 800ba68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	69b9      	ldr	r1, [r7, #24]
 800ba6c:	69fa      	ldr	r2, [r7, #28]
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	617b      	str	r3, [r7, #20]
   return(result);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e5      	bne.n	800ba46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e012      	b.n	800bab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3758      	adds	r7, #88	; 0x58
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	4613      	mov	r3, r2
 800baca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bacc:	e049      	b.n	800bb62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad4:	d045      	beq.n	800bb62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad6:	f7f7 f90d 	bl	8002cf4 <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	69ba      	ldr	r2, [r7, #24]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d302      	bcc.n	800baec <UART_WaitOnFlagUntilTimeout+0x30>
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	e048      	b.n	800bb82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0304 	and.w	r3, r3, #4
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d031      	beq.n	800bb62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	f003 0308 	and.w	r3, r3, #8
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	d110      	bne.n	800bb2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2208      	movs	r2, #8
 800bb12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 f839 	bl	800bb8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2208      	movs	r2, #8
 800bb1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e029      	b.n	800bb82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb3c:	d111      	bne.n	800bb62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 f81f 	bl	800bb8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e00f      	b.n	800bb82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69da      	ldr	r2, [r3, #28]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	bf0c      	ite	eq
 800bb72:	2301      	moveq	r3, #1
 800bb74:	2300      	movne	r3, #0
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	461a      	mov	r2, r3
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d0a6      	beq.n	800bace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b095      	sub	sp, #84	; 0x54
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb2:	643b      	str	r3, [r7, #64]	; 0x40
 800bbb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbba:	e841 2300 	strex	r3, r2, [r1]
 800bbbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1e6      	bne.n	800bb94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3308      	adds	r3, #8
 800bbcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	e853 3f00 	ldrex	r3, [r3]
 800bbd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbd6:	69fa      	ldr	r2, [r7, #28]
 800bbd8:	4b1e      	ldr	r3, [pc, #120]	; (800bc54 <UART_EndRxTransfer+0xc8>)
 800bbda:	4013      	ands	r3, r2
 800bbdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbee:	e841 2300 	strex	r3, r2, [r1]
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1e5      	bne.n	800bbc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d118      	bne.n	800bc34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	e853 3f00 	ldrex	r3, [r3]
 800bc0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f023 0310 	bic.w	r3, r3, #16
 800bc16:	647b      	str	r3, [r7, #68]	; 0x44
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc24:	6979      	ldr	r1, [r7, #20]
 800bc26:	69ba      	ldr	r2, [r7, #24]
 800bc28:	e841 2300 	strex	r3, r2, [r1]
 800bc2c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1e6      	bne.n	800bc02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2220      	movs	r2, #32
 800bc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bc48:	bf00      	nop
 800bc4a:	3754      	adds	r7, #84	; 0x54
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	effffffe 	.word	0xeffffffe

0800bc58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <HAL_UARTEx_DisableFifoMode+0x16>
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	e027      	b.n	800bcbe <HAL_UARTEx_DisableFifoMode+0x66>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2224      	movs	r2, #36	; 0x24
 800bc7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0201 	bic.w	r2, r2, #1
 800bc94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d101      	bne.n	800bce2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcde:	2302      	movs	r3, #2
 800bce0:	e02d      	b.n	800bd3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2224      	movs	r2, #36	; 0x24
 800bcee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f022 0201 	bic.w	r2, r2, #1
 800bd08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f850 	bl	800bdc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d101      	bne.n	800bd5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	e02d      	b.n	800bdba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2224      	movs	r2, #36	; 0x24
 800bd6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f022 0201 	bic.w	r2, r2, #1
 800bd84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	430a      	orrs	r2, r1
 800bd98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f812 	bl	800bdc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2220      	movs	r2, #32
 800bdac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d108      	bne.n	800bde6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bde4:	e031      	b.n	800be4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bde6:	2310      	movs	r3, #16
 800bde8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdea:	2310      	movs	r3, #16
 800bdec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	0e5b      	lsrs	r3, r3, #25
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	0f5b      	lsrs	r3, r3, #29
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f003 0307 	and.w	r3, r3, #7
 800be0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	7b3a      	ldrb	r2, [r7, #12]
 800be12:	4911      	ldr	r1, [pc, #68]	; (800be58 <UARTEx_SetNbDataToProcess+0x94>)
 800be14:	5c8a      	ldrb	r2, [r1, r2]
 800be16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be1a:	7b3a      	ldrb	r2, [r7, #12]
 800be1c:	490f      	ldr	r1, [pc, #60]	; (800be5c <UARTEx_SetNbDataToProcess+0x98>)
 800be1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be20:	fb93 f3f2 	sdiv	r3, r3, r2
 800be24:	b29a      	uxth	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	7b7a      	ldrb	r2, [r7, #13]
 800be30:	4909      	ldr	r1, [pc, #36]	; (800be58 <UARTEx_SetNbDataToProcess+0x94>)
 800be32:	5c8a      	ldrb	r2, [r1, r2]
 800be34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be38:	7b7a      	ldrb	r2, [r7, #13]
 800be3a:	4908      	ldr	r1, [pc, #32]	; (800be5c <UARTEx_SetNbDataToProcess+0x98>)
 800be3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be42:	b29a      	uxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	0800d024 	.word	0x0800d024
 800be5c:	0800d02c 	.word	0x0800d02c

0800be60 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d121      	bne.n	800beb6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	4b27      	ldr	r3, [pc, #156]	; (800bf14 <FMC_SDRAM_Init+0xb4>)
 800be78:	4013      	ands	r3, r2
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	6851      	ldr	r1, [r2, #4]
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	6892      	ldr	r2, [r2, #8]
 800be82:	4311      	orrs	r1, r2
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	68d2      	ldr	r2, [r2, #12]
 800be88:	4311      	orrs	r1, r2
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	6912      	ldr	r2, [r2, #16]
 800be8e:	4311      	orrs	r1, r2
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	6952      	ldr	r2, [r2, #20]
 800be94:	4311      	orrs	r1, r2
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	6992      	ldr	r2, [r2, #24]
 800be9a:	4311      	orrs	r1, r2
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	69d2      	ldr	r2, [r2, #28]
 800bea0:	4311      	orrs	r1, r2
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	6a12      	ldr	r2, [r2, #32]
 800bea6:	4311      	orrs	r1, r2
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800beac:	430a      	orrs	r2, r1
 800beae:	431a      	orrs	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	e026      	b.n	800bf04 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	69d9      	ldr	r1, [r3, #28]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	4319      	orrs	r1, r3
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	430b      	orrs	r3, r1
 800bece:	431a      	orrs	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	4b0e      	ldr	r3, [pc, #56]	; (800bf14 <FMC_SDRAM_Init+0xb4>)
 800beda:	4013      	ands	r3, r2
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	6851      	ldr	r1, [r2, #4]
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	6892      	ldr	r2, [r2, #8]
 800bee4:	4311      	orrs	r1, r2
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	68d2      	ldr	r2, [r2, #12]
 800beea:	4311      	orrs	r1, r2
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	6912      	ldr	r2, [r2, #16]
 800bef0:	4311      	orrs	r1, r2
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	6952      	ldr	r2, [r2, #20]
 800bef6:	4311      	orrs	r1, r2
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	6992      	ldr	r2, [r2, #24]
 800befc:	430a      	orrs	r2, r1
 800befe:	431a      	orrs	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	ffff8000 	.word	0xffff8000

0800bf18 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d128      	bne.n	800bf7c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	1e59      	subs	r1, r3, #1
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	4319      	orrs	r1, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	021b      	lsls	r3, r3, #8
 800bf4a:	4319      	orrs	r1, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	031b      	lsls	r3, r3, #12
 800bf54:	4319      	orrs	r1, r3
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	4319      	orrs	r1, r3
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	051b      	lsls	r3, r3, #20
 800bf68:	4319      	orrs	r1, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	061b      	lsls	r3, r3, #24
 800bf72:	430b      	orrs	r3, r1
 800bf74:	431a      	orrs	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	609a      	str	r2, [r3, #8]
 800bf7a:	e02d      	b.n	800bfd8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	4b19      	ldr	r3, [pc, #100]	; (800bfe8 <FMC_SDRAM_Timing_Init+0xd0>)
 800bf82:	4013      	ands	r3, r2
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	68d2      	ldr	r2, [r2, #12]
 800bf88:	3a01      	subs	r2, #1
 800bf8a:	0311      	lsls	r1, r2, #12
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	6952      	ldr	r2, [r2, #20]
 800bf90:	3a01      	subs	r2, #1
 800bf92:	0512      	lsls	r2, r2, #20
 800bf94:	430a      	orrs	r2, r1
 800bf96:	431a      	orrs	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	1e59      	subs	r1, r3, #1
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	4319      	orrs	r1, r3
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	4319      	orrs	r1, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	041b      	lsls	r3, r3, #16
 800bfc6:	4319      	orrs	r1, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	061b      	lsls	r3, r3, #24
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	ff0f0fff 	.word	0xff0f0fff

0800bfec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfec:	b084      	sub	sp, #16
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	f107 001c 	add.w	r0, r7, #28
 800bffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	2b01      	cmp	r3, #1
 800c002:	d120      	bne.n	800c046 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <USB_CoreInit+0xd4>)
 800c016:	4013      	ands	r3, r2
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d105      	bne.n	800c03a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 faac 	bl	800c598 <USB_CoreReset>
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]
 800c044:	e01a      	b.n	800c07c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 faa0 	bl	800c598 <USB_CoreReset>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	639a      	str	r2, [r3, #56]	; 0x38
 800c06e:	e005      	b.n	800c07c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d116      	bne.n	800c0b0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c090:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <USB_CoreInit+0xd8>)
 800c092:	4313      	orrs	r3, r2
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f043 0206 	orr.w	r2, r3, #6
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	f043 0220 	orr.w	r2, r3, #32
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0bc:	b004      	add	sp, #16
 800c0be:	4770      	bx	lr
 800c0c0:	ffbdffbf 	.word	0xffbdffbf
 800c0c4:	03ee0000 	.word	0x03ee0000

0800c0c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f023 0201 	bic.w	r2, r3, #1
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c106:	78fb      	ldrb	r3, [r7, #3]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d115      	bne.n	800c138 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c118:	2001      	movs	r0, #1
 800c11a:	f7f6 fdf7 	bl	8002d0c <HAL_Delay>
      ms++;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3301      	adds	r3, #1
 800c122:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fa29 	bl	800c57c <USB_GetMode>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d01e      	beq.n	800c16e <USB_SetCurrentMode+0x84>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b31      	cmp	r3, #49	; 0x31
 800c134:	d9f0      	bls.n	800c118 <USB_SetCurrentMode+0x2e>
 800c136:	e01a      	b.n	800c16e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d115      	bne.n	800c16a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c14a:	2001      	movs	r0, #1
 800c14c:	f7f6 fdde 	bl	8002d0c <HAL_Delay>
      ms++;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa10 	bl	800c57c <USB_GetMode>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <USB_SetCurrentMode+0x84>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b31      	cmp	r3, #49	; 0x31
 800c166:	d9f0      	bls.n	800c14a <USB_SetCurrentMode+0x60>
 800c168:	e001      	b.n	800c16e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e005      	b.n	800c17a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b32      	cmp	r3, #50	; 0x32
 800c172:	d101      	bne.n	800c178 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e000      	b.n	800c17a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
	...

0800c184 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c184:	b084      	sub	sp, #16
 800c186:	b580      	push	{r7, lr}
 800c188:	b086      	sub	sp, #24
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	e009      	b.n	800c1b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	3340      	adds	r3, #64	; 0x40
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	613b      	str	r3, [r7, #16]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2b0e      	cmp	r3, #14
 800c1bc:	d9f2      	bls.n	800c1a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d11c      	bne.n	800c1fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1d2:	f043 0302 	orr.w	r3, r3, #2
 800c1d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	e005      	b.n	800c20a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c210:	461a      	mov	r2, r3
 800c212:	2300      	movs	r3, #0
 800c214:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21c:	4619      	mov	r1, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c224:	461a      	mov	r2, r3
 800c226:	680b      	ldr	r3, [r1, #0]
 800c228:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d10c      	bne.n	800c24a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	2b00      	cmp	r3, #0
 800c234:	d104      	bne.n	800c240 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f965 	bl	800c508 <USB_SetDevSpeed>
 800c23e:	e008      	b.n	800c252 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c240:	2101      	movs	r1, #1
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f960 	bl	800c508 <USB_SetDevSpeed>
 800c248:	e003      	b.n	800c252 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c24a:	2103      	movs	r1, #3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f95b 	bl	800c508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c252:	2110      	movs	r1, #16
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f8f3 	bl	800c440 <USB_FlushTxFifo>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f91f 	bl	800c4a8 <USB_FlushRxFifo>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27a:	461a      	mov	r2, r3
 800c27c:	2300      	movs	r3, #0
 800c27e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c286:	461a      	mov	r2, r3
 800c288:	2300      	movs	r3, #0
 800c28a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c292:	461a      	mov	r2, r3
 800c294:	2300      	movs	r3, #0
 800c296:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c298:	2300      	movs	r3, #0
 800c29a:	613b      	str	r3, [r7, #16]
 800c29c:	e043      	b.n	800c326 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2b4:	d118      	bne.n	800c2e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10a      	bne.n	800c2d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	e013      	b.n	800c2fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2de:	461a      	mov	r2, r3
 800c2e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2e4:	6013      	str	r3, [r2, #0]
 800c2e6:	e008      	b.n	800c2fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4413      	add	r3, r2
 800c302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c306:	461a      	mov	r2, r3
 800c308:	2300      	movs	r3, #0
 800c30a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c318:	461a      	mov	r2, r3
 800c31a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c31e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	3301      	adds	r3, #1
 800c324:	613b      	str	r3, [r7, #16]
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d3b7      	bcc.n	800c29e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c32e:	2300      	movs	r3, #0
 800c330:	613b      	str	r3, [r7, #16]
 800c332:	e043      	b.n	800c3bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c34a:	d118      	bne.n	800c37e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10a      	bne.n	800c368 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35e:	461a      	mov	r2, r3
 800c360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	e013      	b.n	800c390 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c374:	461a      	mov	r2, r3
 800c376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	e008      	b.n	800c390 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38a:	461a      	mov	r2, r3
 800c38c:	2300      	movs	r3, #0
 800c38e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	015a      	lsls	r2, r3, #5
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	4413      	add	r3, r2
 800c398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39c:	461a      	mov	r2, r3
 800c39e:	2300      	movs	r3, #0
 800c3a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	015a      	lsls	r2, r3, #5
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	613b      	str	r3, [r7, #16]
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d3b7      	bcc.n	800c334 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c3e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d105      	bne.n	800c3f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	f043 0210 	orr.w	r2, r3, #16
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	699a      	ldr	r2, [r3, #24]
 800c3fc:	4b0e      	ldr	r3, [pc, #56]	; (800c438 <USB_DevInit+0x2b4>)
 800c3fe:	4313      	orrs	r3, r2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	f043 0208 	orr.w	r2, r3, #8
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d105      	bne.n	800c428 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	699a      	ldr	r2, [r3, #24]
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <USB_DevInit+0x2b8>)
 800c422:	4313      	orrs	r3, r2
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c434:	b004      	add	sp, #16
 800c436:	4770      	bx	lr
 800c438:	803c3800 	.word	0x803c3800
 800c43c:	40000004 	.word	0x40000004

0800c440 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	4a13      	ldr	r2, [pc, #76]	; (800c4a4 <USB_FlushTxFifo+0x64>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d901      	bls.n	800c460 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e01b      	b.n	800c498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	daf2      	bge.n	800c44e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	019b      	lsls	r3, r3, #6
 800c470:	f043 0220 	orr.w	r2, r3, #32
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4a08      	ldr	r2, [pc, #32]	; (800c4a4 <USB_FlushTxFifo+0x64>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d901      	bls.n	800c48a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c486:	2303      	movs	r3, #3
 800c488:	e006      	b.n	800c498 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	f003 0320 	and.w	r3, r3, #32
 800c492:	2b20      	cmp	r3, #32
 800c494:	d0f0      	beq.n	800c478 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	00030d40 	.word	0x00030d40

0800c4a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	4a11      	ldr	r2, [pc, #68]	; (800c504 <USB_FlushRxFifo+0x5c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d901      	bls.n	800c4c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e018      	b.n	800c4f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	daf2      	bge.n	800c4b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2210      	movs	r2, #16
 800c4d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	4a08      	ldr	r2, [pc, #32]	; (800c504 <USB_FlushRxFifo+0x5c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d901      	bls.n	800c4ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e006      	b.n	800c4f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b10      	cmp	r3, #16
 800c4f4:	d0f0      	beq.n	800c4d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	00030d40 	.word	0x00030d40

0800c508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	460b      	mov	r3, r1
 800c512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	68f9      	ldr	r1, [r7, #12]
 800c524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c528:	4313      	orrs	r3, r2
 800c52a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b085      	sub	sp, #20
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c554:	f023 0303 	bic.w	r3, r3, #3
 800c558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c568:	f043 0302 	orr.w	r3, r3, #2
 800c56c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	f003 0301 	and.w	r3, r3, #1
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	4a13      	ldr	r2, [pc, #76]	; (800c5fc <USB_CoreReset+0x64>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d901      	bls.n	800c5b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e01b      	b.n	800c5ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	daf2      	bge.n	800c5a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f043 0201 	orr.w	r2, r3, #1
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <USB_CoreReset+0x64>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d901      	bls.n	800c5e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e006      	b.n	800c5ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d0f0      	beq.n	800c5ce <USB_CoreReset+0x36>

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	00030d40 	.word	0x00030d40

0800c600 <__errno>:
 800c600:	4b01      	ldr	r3, [pc, #4]	; (800c608 <__errno+0x8>)
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	24000010 	.word	0x24000010

0800c60c <__libc_init_array>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	4d0d      	ldr	r5, [pc, #52]	; (800c644 <__libc_init_array+0x38>)
 800c610:	4c0d      	ldr	r4, [pc, #52]	; (800c648 <__libc_init_array+0x3c>)
 800c612:	1b64      	subs	r4, r4, r5
 800c614:	10a4      	asrs	r4, r4, #2
 800c616:	2600      	movs	r6, #0
 800c618:	42a6      	cmp	r6, r4
 800c61a:	d109      	bne.n	800c630 <__libc_init_array+0x24>
 800c61c:	4d0b      	ldr	r5, [pc, #44]	; (800c64c <__libc_init_array+0x40>)
 800c61e:	4c0c      	ldr	r4, [pc, #48]	; (800c650 <__libc_init_array+0x44>)
 800c620:	f000 fca2 	bl	800cf68 <_init>
 800c624:	1b64      	subs	r4, r4, r5
 800c626:	10a4      	asrs	r4, r4, #2
 800c628:	2600      	movs	r6, #0
 800c62a:	42a6      	cmp	r6, r4
 800c62c:	d105      	bne.n	800c63a <__libc_init_array+0x2e>
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	f855 3b04 	ldr.w	r3, [r5], #4
 800c634:	4798      	blx	r3
 800c636:	3601      	adds	r6, #1
 800c638:	e7ee      	b.n	800c618 <__libc_init_array+0xc>
 800c63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63e:	4798      	blx	r3
 800c640:	3601      	adds	r6, #1
 800c642:	e7f2      	b.n	800c62a <__libc_init_array+0x1e>
 800c644:	0800d070 	.word	0x0800d070
 800c648:	0800d070 	.word	0x0800d070
 800c64c:	0800d070 	.word	0x0800d070
 800c650:	0800d074 	.word	0x0800d074

0800c654 <memcpy>:
 800c654:	440a      	add	r2, r1
 800c656:	4291      	cmp	r1, r2
 800c658:	f100 33ff 	add.w	r3, r0, #4294967295
 800c65c:	d100      	bne.n	800c660 <memcpy+0xc>
 800c65e:	4770      	bx	lr
 800c660:	b510      	push	{r4, lr}
 800c662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c66a:	4291      	cmp	r1, r2
 800c66c:	d1f9      	bne.n	800c662 <memcpy+0xe>
 800c66e:	bd10      	pop	{r4, pc}

0800c670 <memset>:
 800c670:	4402      	add	r2, r0
 800c672:	4603      	mov	r3, r0
 800c674:	4293      	cmp	r3, r2
 800c676:	d100      	bne.n	800c67a <memset+0xa>
 800c678:	4770      	bx	lr
 800c67a:	f803 1b01 	strb.w	r1, [r3], #1
 800c67e:	e7f9      	b.n	800c674 <memset+0x4>

0800c680 <sniprintf>:
 800c680:	b40c      	push	{r2, r3}
 800c682:	b530      	push	{r4, r5, lr}
 800c684:	4b17      	ldr	r3, [pc, #92]	; (800c6e4 <sniprintf+0x64>)
 800c686:	1e0c      	subs	r4, r1, #0
 800c688:	681d      	ldr	r5, [r3, #0]
 800c68a:	b09d      	sub	sp, #116	; 0x74
 800c68c:	da08      	bge.n	800c6a0 <sniprintf+0x20>
 800c68e:	238b      	movs	r3, #139	; 0x8b
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	f04f 30ff 	mov.w	r0, #4294967295
 800c696:	b01d      	add	sp, #116	; 0x74
 800c698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c69c:	b002      	add	sp, #8
 800c69e:	4770      	bx	lr
 800c6a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c6a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c6a8:	bf14      	ite	ne
 800c6aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c6ae:	4623      	moveq	r3, r4
 800c6b0:	9304      	str	r3, [sp, #16]
 800c6b2:	9307      	str	r3, [sp, #28]
 800c6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6b8:	9002      	str	r0, [sp, #8]
 800c6ba:	9006      	str	r0, [sp, #24]
 800c6bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c6c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c6c2:	ab21      	add	r3, sp, #132	; 0x84
 800c6c4:	a902      	add	r1, sp, #8
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	f000 f869 	bl	800c7a0 <_svfiprintf_r>
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	bfbc      	itt	lt
 800c6d2:	238b      	movlt	r3, #139	; 0x8b
 800c6d4:	602b      	strlt	r3, [r5, #0]
 800c6d6:	2c00      	cmp	r4, #0
 800c6d8:	d0dd      	beq.n	800c696 <sniprintf+0x16>
 800c6da:	9b02      	ldr	r3, [sp, #8]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
 800c6e0:	e7d9      	b.n	800c696 <sniprintf+0x16>
 800c6e2:	bf00      	nop
 800c6e4:	24000010 	.word	0x24000010

0800c6e8 <__ssputs_r>:
 800c6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ec:	688e      	ldr	r6, [r1, #8]
 800c6ee:	429e      	cmp	r6, r3
 800c6f0:	4682      	mov	sl, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	4690      	mov	r8, r2
 800c6f6:	461f      	mov	r7, r3
 800c6f8:	d838      	bhi.n	800c76c <__ssputs_r+0x84>
 800c6fa:	898a      	ldrh	r2, [r1, #12]
 800c6fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c700:	d032      	beq.n	800c768 <__ssputs_r+0x80>
 800c702:	6825      	ldr	r5, [r4, #0]
 800c704:	6909      	ldr	r1, [r1, #16]
 800c706:	eba5 0901 	sub.w	r9, r5, r1
 800c70a:	6965      	ldr	r5, [r4, #20]
 800c70c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c714:	3301      	adds	r3, #1
 800c716:	444b      	add	r3, r9
 800c718:	106d      	asrs	r5, r5, #1
 800c71a:	429d      	cmp	r5, r3
 800c71c:	bf38      	it	cc
 800c71e:	461d      	movcc	r5, r3
 800c720:	0553      	lsls	r3, r2, #21
 800c722:	d531      	bpl.n	800c788 <__ssputs_r+0xa0>
 800c724:	4629      	mov	r1, r5
 800c726:	f000 fb55 	bl	800cdd4 <_malloc_r>
 800c72a:	4606      	mov	r6, r0
 800c72c:	b950      	cbnz	r0, 800c744 <__ssputs_r+0x5c>
 800c72e:	230c      	movs	r3, #12
 800c730:	f8ca 3000 	str.w	r3, [sl]
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c744:	6921      	ldr	r1, [r4, #16]
 800c746:	464a      	mov	r2, r9
 800c748:	f7ff ff84 	bl	800c654 <memcpy>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	6126      	str	r6, [r4, #16]
 800c75a:	6165      	str	r5, [r4, #20]
 800c75c:	444e      	add	r6, r9
 800c75e:	eba5 0509 	sub.w	r5, r5, r9
 800c762:	6026      	str	r6, [r4, #0]
 800c764:	60a5      	str	r5, [r4, #8]
 800c766:	463e      	mov	r6, r7
 800c768:	42be      	cmp	r6, r7
 800c76a:	d900      	bls.n	800c76e <__ssputs_r+0x86>
 800c76c:	463e      	mov	r6, r7
 800c76e:	6820      	ldr	r0, [r4, #0]
 800c770:	4632      	mov	r2, r6
 800c772:	4641      	mov	r1, r8
 800c774:	f000 faa8 	bl	800ccc8 <memmove>
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	1b9b      	subs	r3, r3, r6
 800c77c:	60a3      	str	r3, [r4, #8]
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	4433      	add	r3, r6
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	2000      	movs	r0, #0
 800c786:	e7db      	b.n	800c740 <__ssputs_r+0x58>
 800c788:	462a      	mov	r2, r5
 800c78a:	f000 fb97 	bl	800cebc <_realloc_r>
 800c78e:	4606      	mov	r6, r0
 800c790:	2800      	cmp	r0, #0
 800c792:	d1e1      	bne.n	800c758 <__ssputs_r+0x70>
 800c794:	6921      	ldr	r1, [r4, #16]
 800c796:	4650      	mov	r0, sl
 800c798:	f000 fab0 	bl	800ccfc <_free_r>
 800c79c:	e7c7      	b.n	800c72e <__ssputs_r+0x46>
	...

0800c7a0 <_svfiprintf_r>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	4698      	mov	r8, r3
 800c7a6:	898b      	ldrh	r3, [r1, #12]
 800c7a8:	061b      	lsls	r3, r3, #24
 800c7aa:	b09d      	sub	sp, #116	; 0x74
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	4614      	mov	r4, r2
 800c7b2:	d50e      	bpl.n	800c7d2 <_svfiprintf_r+0x32>
 800c7b4:	690b      	ldr	r3, [r1, #16]
 800c7b6:	b963      	cbnz	r3, 800c7d2 <_svfiprintf_r+0x32>
 800c7b8:	2140      	movs	r1, #64	; 0x40
 800c7ba:	f000 fb0b 	bl	800cdd4 <_malloc_r>
 800c7be:	6028      	str	r0, [r5, #0]
 800c7c0:	6128      	str	r0, [r5, #16]
 800c7c2:	b920      	cbnz	r0, 800c7ce <_svfiprintf_r+0x2e>
 800c7c4:	230c      	movs	r3, #12
 800c7c6:	603b      	str	r3, [r7, #0]
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7cc:	e0d1      	b.n	800c972 <_svfiprintf_r+0x1d2>
 800c7ce:	2340      	movs	r3, #64	; 0x40
 800c7d0:	616b      	str	r3, [r5, #20]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d6:	2320      	movs	r3, #32
 800c7d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7e0:	2330      	movs	r3, #48	; 0x30
 800c7e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c98c <_svfiprintf_r+0x1ec>
 800c7e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7ea:	f04f 0901 	mov.w	r9, #1
 800c7ee:	4623      	mov	r3, r4
 800c7f0:	469a      	mov	sl, r3
 800c7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f6:	b10a      	cbz	r2, 800c7fc <_svfiprintf_r+0x5c>
 800c7f8:	2a25      	cmp	r2, #37	; 0x25
 800c7fa:	d1f9      	bne.n	800c7f0 <_svfiprintf_r+0x50>
 800c7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c800:	d00b      	beq.n	800c81a <_svfiprintf_r+0x7a>
 800c802:	465b      	mov	r3, fp
 800c804:	4622      	mov	r2, r4
 800c806:	4629      	mov	r1, r5
 800c808:	4638      	mov	r0, r7
 800c80a:	f7ff ff6d 	bl	800c6e8 <__ssputs_r>
 800c80e:	3001      	adds	r0, #1
 800c810:	f000 80aa 	beq.w	800c968 <_svfiprintf_r+0x1c8>
 800c814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c816:	445a      	add	r2, fp
 800c818:	9209      	str	r2, [sp, #36]	; 0x24
 800c81a:	f89a 3000 	ldrb.w	r3, [sl]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f000 80a2 	beq.w	800c968 <_svfiprintf_r+0x1c8>
 800c824:	2300      	movs	r3, #0
 800c826:	f04f 32ff 	mov.w	r2, #4294967295
 800c82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c82e:	f10a 0a01 	add.w	sl, sl, #1
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	9307      	str	r3, [sp, #28]
 800c836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c83a:	931a      	str	r3, [sp, #104]	; 0x68
 800c83c:	4654      	mov	r4, sl
 800c83e:	2205      	movs	r2, #5
 800c840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c844:	4851      	ldr	r0, [pc, #324]	; (800c98c <_svfiprintf_r+0x1ec>)
 800c846:	f7f3 fd53 	bl	80002f0 <memchr>
 800c84a:	9a04      	ldr	r2, [sp, #16]
 800c84c:	b9d8      	cbnz	r0, 800c886 <_svfiprintf_r+0xe6>
 800c84e:	06d0      	lsls	r0, r2, #27
 800c850:	bf44      	itt	mi
 800c852:	2320      	movmi	r3, #32
 800c854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c858:	0711      	lsls	r1, r2, #28
 800c85a:	bf44      	itt	mi
 800c85c:	232b      	movmi	r3, #43	; 0x2b
 800c85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c862:	f89a 3000 	ldrb.w	r3, [sl]
 800c866:	2b2a      	cmp	r3, #42	; 0x2a
 800c868:	d015      	beq.n	800c896 <_svfiprintf_r+0xf6>
 800c86a:	9a07      	ldr	r2, [sp, #28]
 800c86c:	4654      	mov	r4, sl
 800c86e:	2000      	movs	r0, #0
 800c870:	f04f 0c0a 	mov.w	ip, #10
 800c874:	4621      	mov	r1, r4
 800c876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c87a:	3b30      	subs	r3, #48	; 0x30
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	d94e      	bls.n	800c91e <_svfiprintf_r+0x17e>
 800c880:	b1b0      	cbz	r0, 800c8b0 <_svfiprintf_r+0x110>
 800c882:	9207      	str	r2, [sp, #28]
 800c884:	e014      	b.n	800c8b0 <_svfiprintf_r+0x110>
 800c886:	eba0 0308 	sub.w	r3, r0, r8
 800c88a:	fa09 f303 	lsl.w	r3, r9, r3
 800c88e:	4313      	orrs	r3, r2
 800c890:	9304      	str	r3, [sp, #16]
 800c892:	46a2      	mov	sl, r4
 800c894:	e7d2      	b.n	800c83c <_svfiprintf_r+0x9c>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	1d19      	adds	r1, r3, #4
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	9103      	str	r1, [sp, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	bfbb      	ittet	lt
 800c8a2:	425b      	neglt	r3, r3
 800c8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a8:	9307      	strge	r3, [sp, #28]
 800c8aa:	9307      	strlt	r3, [sp, #28]
 800c8ac:	bfb8      	it	lt
 800c8ae:	9204      	strlt	r2, [sp, #16]
 800c8b0:	7823      	ldrb	r3, [r4, #0]
 800c8b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b4:	d10c      	bne.n	800c8d0 <_svfiprintf_r+0x130>
 800c8b6:	7863      	ldrb	r3, [r4, #1]
 800c8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ba:	d135      	bne.n	800c928 <_svfiprintf_r+0x188>
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	1d1a      	adds	r2, r3, #4
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	9203      	str	r2, [sp, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	bfb8      	it	lt
 800c8c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8cc:	3402      	adds	r4, #2
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c99c <_svfiprintf_r+0x1fc>
 800c8d4:	7821      	ldrb	r1, [r4, #0]
 800c8d6:	2203      	movs	r2, #3
 800c8d8:	4650      	mov	r0, sl
 800c8da:	f7f3 fd09 	bl	80002f0 <memchr>
 800c8de:	b140      	cbz	r0, 800c8f2 <_svfiprintf_r+0x152>
 800c8e0:	2340      	movs	r3, #64	; 0x40
 800c8e2:	eba0 000a 	sub.w	r0, r0, sl
 800c8e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c8ea:	9b04      	ldr	r3, [sp, #16]
 800c8ec:	4303      	orrs	r3, r0
 800c8ee:	3401      	adds	r4, #1
 800c8f0:	9304      	str	r3, [sp, #16]
 800c8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f6:	4826      	ldr	r0, [pc, #152]	; (800c990 <_svfiprintf_r+0x1f0>)
 800c8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8fc:	2206      	movs	r2, #6
 800c8fe:	f7f3 fcf7 	bl	80002f0 <memchr>
 800c902:	2800      	cmp	r0, #0
 800c904:	d038      	beq.n	800c978 <_svfiprintf_r+0x1d8>
 800c906:	4b23      	ldr	r3, [pc, #140]	; (800c994 <_svfiprintf_r+0x1f4>)
 800c908:	bb1b      	cbnz	r3, 800c952 <_svfiprintf_r+0x1b2>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	3307      	adds	r3, #7
 800c90e:	f023 0307 	bic.w	r3, r3, #7
 800c912:	3308      	adds	r3, #8
 800c914:	9303      	str	r3, [sp, #12]
 800c916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c918:	4433      	add	r3, r6
 800c91a:	9309      	str	r3, [sp, #36]	; 0x24
 800c91c:	e767      	b.n	800c7ee <_svfiprintf_r+0x4e>
 800c91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c922:	460c      	mov	r4, r1
 800c924:	2001      	movs	r0, #1
 800c926:	e7a5      	b.n	800c874 <_svfiprintf_r+0xd4>
 800c928:	2300      	movs	r3, #0
 800c92a:	3401      	adds	r4, #1
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	4619      	mov	r1, r3
 800c930:	f04f 0c0a 	mov.w	ip, #10
 800c934:	4620      	mov	r0, r4
 800c936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c93a:	3a30      	subs	r2, #48	; 0x30
 800c93c:	2a09      	cmp	r2, #9
 800c93e:	d903      	bls.n	800c948 <_svfiprintf_r+0x1a8>
 800c940:	2b00      	cmp	r3, #0
 800c942:	d0c5      	beq.n	800c8d0 <_svfiprintf_r+0x130>
 800c944:	9105      	str	r1, [sp, #20]
 800c946:	e7c3      	b.n	800c8d0 <_svfiprintf_r+0x130>
 800c948:	fb0c 2101 	mla	r1, ip, r1, r2
 800c94c:	4604      	mov	r4, r0
 800c94e:	2301      	movs	r3, #1
 800c950:	e7f0      	b.n	800c934 <_svfiprintf_r+0x194>
 800c952:	ab03      	add	r3, sp, #12
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	462a      	mov	r2, r5
 800c958:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <_svfiprintf_r+0x1f8>)
 800c95a:	a904      	add	r1, sp, #16
 800c95c:	4638      	mov	r0, r7
 800c95e:	f3af 8000 	nop.w
 800c962:	1c42      	adds	r2, r0, #1
 800c964:	4606      	mov	r6, r0
 800c966:	d1d6      	bne.n	800c916 <_svfiprintf_r+0x176>
 800c968:	89ab      	ldrh	r3, [r5, #12]
 800c96a:	065b      	lsls	r3, r3, #25
 800c96c:	f53f af2c 	bmi.w	800c7c8 <_svfiprintf_r+0x28>
 800c970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c972:	b01d      	add	sp, #116	; 0x74
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	ab03      	add	r3, sp, #12
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	462a      	mov	r2, r5
 800c97e:	4b06      	ldr	r3, [pc, #24]	; (800c998 <_svfiprintf_r+0x1f8>)
 800c980:	a904      	add	r1, sp, #16
 800c982:	4638      	mov	r0, r7
 800c984:	f000 f87a 	bl	800ca7c <_printf_i>
 800c988:	e7eb      	b.n	800c962 <_svfiprintf_r+0x1c2>
 800c98a:	bf00      	nop
 800c98c:	0800d034 	.word	0x0800d034
 800c990:	0800d03e 	.word	0x0800d03e
 800c994:	00000000 	.word	0x00000000
 800c998:	0800c6e9 	.word	0x0800c6e9
 800c99c:	0800d03a 	.word	0x0800d03a

0800c9a0 <_printf_common>:
 800c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	4699      	mov	r9, r3
 800c9a8:	688a      	ldr	r2, [r1, #8]
 800c9aa:	690b      	ldr	r3, [r1, #16]
 800c9ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	bfb8      	it	lt
 800c9b4:	4613      	movlt	r3, r2
 800c9b6:	6033      	str	r3, [r6, #0]
 800c9b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9bc:	4607      	mov	r7, r0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	b10a      	cbz	r2, 800c9c6 <_printf_common+0x26>
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	0699      	lsls	r1, r3, #26
 800c9ca:	bf42      	ittt	mi
 800c9cc:	6833      	ldrmi	r3, [r6, #0]
 800c9ce:	3302      	addmi	r3, #2
 800c9d0:	6033      	strmi	r3, [r6, #0]
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	f015 0506 	ands.w	r5, r5, #6
 800c9d8:	d106      	bne.n	800c9e8 <_printf_common+0x48>
 800c9da:	f104 0a19 	add.w	sl, r4, #25
 800c9de:	68e3      	ldr	r3, [r4, #12]
 800c9e0:	6832      	ldr	r2, [r6, #0]
 800c9e2:	1a9b      	subs	r3, r3, r2
 800c9e4:	42ab      	cmp	r3, r5
 800c9e6:	dc26      	bgt.n	800ca36 <_printf_common+0x96>
 800c9e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9ec:	1e13      	subs	r3, r2, #0
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	bf18      	it	ne
 800c9f2:	2301      	movne	r3, #1
 800c9f4:	0692      	lsls	r2, r2, #26
 800c9f6:	d42b      	bmi.n	800ca50 <_printf_common+0xb0>
 800c9f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	4638      	mov	r0, r7
 800ca00:	47c0      	blx	r8
 800ca02:	3001      	adds	r0, #1
 800ca04:	d01e      	beq.n	800ca44 <_printf_common+0xa4>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	68e5      	ldr	r5, [r4, #12]
 800ca0a:	6832      	ldr	r2, [r6, #0]
 800ca0c:	f003 0306 	and.w	r3, r3, #6
 800ca10:	2b04      	cmp	r3, #4
 800ca12:	bf08      	it	eq
 800ca14:	1aad      	subeq	r5, r5, r2
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	bf0c      	ite	eq
 800ca1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca20:	2500      	movne	r5, #0
 800ca22:	4293      	cmp	r3, r2
 800ca24:	bfc4      	itt	gt
 800ca26:	1a9b      	subgt	r3, r3, r2
 800ca28:	18ed      	addgt	r5, r5, r3
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	341a      	adds	r4, #26
 800ca2e:	42b5      	cmp	r5, r6
 800ca30:	d11a      	bne.n	800ca68 <_printf_common+0xc8>
 800ca32:	2000      	movs	r0, #0
 800ca34:	e008      	b.n	800ca48 <_printf_common+0xa8>
 800ca36:	2301      	movs	r3, #1
 800ca38:	4652      	mov	r2, sl
 800ca3a:	4649      	mov	r1, r9
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	47c0      	blx	r8
 800ca40:	3001      	adds	r0, #1
 800ca42:	d103      	bne.n	800ca4c <_printf_common+0xac>
 800ca44:	f04f 30ff 	mov.w	r0, #4294967295
 800ca48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4c:	3501      	adds	r5, #1
 800ca4e:	e7c6      	b.n	800c9de <_printf_common+0x3e>
 800ca50:	18e1      	adds	r1, r4, r3
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	2030      	movs	r0, #48	; 0x30
 800ca56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca5a:	4422      	add	r2, r4
 800ca5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca64:	3302      	adds	r3, #2
 800ca66:	e7c7      	b.n	800c9f8 <_printf_common+0x58>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4638      	mov	r0, r7
 800ca70:	47c0      	blx	r8
 800ca72:	3001      	adds	r0, #1
 800ca74:	d0e6      	beq.n	800ca44 <_printf_common+0xa4>
 800ca76:	3601      	adds	r6, #1
 800ca78:	e7d9      	b.n	800ca2e <_printf_common+0x8e>
	...

0800ca7c <_printf_i>:
 800ca7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca80:	7e0f      	ldrb	r7, [r1, #24]
 800ca82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca84:	2f78      	cmp	r7, #120	; 0x78
 800ca86:	4691      	mov	r9, r2
 800ca88:	4680      	mov	r8, r0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	469a      	mov	sl, r3
 800ca8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca92:	d807      	bhi.n	800caa4 <_printf_i+0x28>
 800ca94:	2f62      	cmp	r7, #98	; 0x62
 800ca96:	d80a      	bhi.n	800caae <_printf_i+0x32>
 800ca98:	2f00      	cmp	r7, #0
 800ca9a:	f000 80d8 	beq.w	800cc4e <_printf_i+0x1d2>
 800ca9e:	2f58      	cmp	r7, #88	; 0x58
 800caa0:	f000 80a3 	beq.w	800cbea <_printf_i+0x16e>
 800caa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caac:	e03a      	b.n	800cb24 <_printf_i+0xa8>
 800caae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cab2:	2b15      	cmp	r3, #21
 800cab4:	d8f6      	bhi.n	800caa4 <_printf_i+0x28>
 800cab6:	a101      	add	r1, pc, #4	; (adr r1, 800cabc <_printf_i+0x40>)
 800cab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cabc:	0800cb15 	.word	0x0800cb15
 800cac0:	0800cb29 	.word	0x0800cb29
 800cac4:	0800caa5 	.word	0x0800caa5
 800cac8:	0800caa5 	.word	0x0800caa5
 800cacc:	0800caa5 	.word	0x0800caa5
 800cad0:	0800caa5 	.word	0x0800caa5
 800cad4:	0800cb29 	.word	0x0800cb29
 800cad8:	0800caa5 	.word	0x0800caa5
 800cadc:	0800caa5 	.word	0x0800caa5
 800cae0:	0800caa5 	.word	0x0800caa5
 800cae4:	0800caa5 	.word	0x0800caa5
 800cae8:	0800cc35 	.word	0x0800cc35
 800caec:	0800cb59 	.word	0x0800cb59
 800caf0:	0800cc17 	.word	0x0800cc17
 800caf4:	0800caa5 	.word	0x0800caa5
 800caf8:	0800caa5 	.word	0x0800caa5
 800cafc:	0800cc57 	.word	0x0800cc57
 800cb00:	0800caa5 	.word	0x0800caa5
 800cb04:	0800cb59 	.word	0x0800cb59
 800cb08:	0800caa5 	.word	0x0800caa5
 800cb0c:	0800caa5 	.word	0x0800caa5
 800cb10:	0800cc1f 	.word	0x0800cc1f
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	1d1a      	adds	r2, r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	602a      	str	r2, [r5, #0]
 800cb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb24:	2301      	movs	r3, #1
 800cb26:	e0a3      	b.n	800cc70 <_printf_i+0x1f4>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	6829      	ldr	r1, [r5, #0]
 800cb2c:	0606      	lsls	r6, r0, #24
 800cb2e:	f101 0304 	add.w	r3, r1, #4
 800cb32:	d50a      	bpl.n	800cb4a <_printf_i+0xce>
 800cb34:	680e      	ldr	r6, [r1, #0]
 800cb36:	602b      	str	r3, [r5, #0]
 800cb38:	2e00      	cmp	r6, #0
 800cb3a:	da03      	bge.n	800cb44 <_printf_i+0xc8>
 800cb3c:	232d      	movs	r3, #45	; 0x2d
 800cb3e:	4276      	negs	r6, r6
 800cb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb44:	485e      	ldr	r0, [pc, #376]	; (800ccc0 <_printf_i+0x244>)
 800cb46:	230a      	movs	r3, #10
 800cb48:	e019      	b.n	800cb7e <_printf_i+0x102>
 800cb4a:	680e      	ldr	r6, [r1, #0]
 800cb4c:	602b      	str	r3, [r5, #0]
 800cb4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb52:	bf18      	it	ne
 800cb54:	b236      	sxthne	r6, r6
 800cb56:	e7ef      	b.n	800cb38 <_printf_i+0xbc>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	6820      	ldr	r0, [r4, #0]
 800cb5c:	1d19      	adds	r1, r3, #4
 800cb5e:	6029      	str	r1, [r5, #0]
 800cb60:	0601      	lsls	r1, r0, #24
 800cb62:	d501      	bpl.n	800cb68 <_printf_i+0xec>
 800cb64:	681e      	ldr	r6, [r3, #0]
 800cb66:	e002      	b.n	800cb6e <_printf_i+0xf2>
 800cb68:	0646      	lsls	r6, r0, #25
 800cb6a:	d5fb      	bpl.n	800cb64 <_printf_i+0xe8>
 800cb6c:	881e      	ldrh	r6, [r3, #0]
 800cb6e:	4854      	ldr	r0, [pc, #336]	; (800ccc0 <_printf_i+0x244>)
 800cb70:	2f6f      	cmp	r7, #111	; 0x6f
 800cb72:	bf0c      	ite	eq
 800cb74:	2308      	moveq	r3, #8
 800cb76:	230a      	movne	r3, #10
 800cb78:	2100      	movs	r1, #0
 800cb7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb7e:	6865      	ldr	r5, [r4, #4]
 800cb80:	60a5      	str	r5, [r4, #8]
 800cb82:	2d00      	cmp	r5, #0
 800cb84:	bfa2      	ittt	ge
 800cb86:	6821      	ldrge	r1, [r4, #0]
 800cb88:	f021 0104 	bicge.w	r1, r1, #4
 800cb8c:	6021      	strge	r1, [r4, #0]
 800cb8e:	b90e      	cbnz	r6, 800cb94 <_printf_i+0x118>
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	d04d      	beq.n	800cc30 <_printf_i+0x1b4>
 800cb94:	4615      	mov	r5, r2
 800cb96:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb9a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb9e:	5dc7      	ldrb	r7, [r0, r7]
 800cba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cba4:	4637      	mov	r7, r6
 800cba6:	42bb      	cmp	r3, r7
 800cba8:	460e      	mov	r6, r1
 800cbaa:	d9f4      	bls.n	800cb96 <_printf_i+0x11a>
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d10b      	bne.n	800cbc8 <_printf_i+0x14c>
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	07de      	lsls	r6, r3, #31
 800cbb4:	d508      	bpl.n	800cbc8 <_printf_i+0x14c>
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	6861      	ldr	r1, [r4, #4]
 800cbba:	4299      	cmp	r1, r3
 800cbbc:	bfde      	ittt	le
 800cbbe:	2330      	movle	r3, #48	; 0x30
 800cbc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbc8:	1b52      	subs	r2, r2, r5
 800cbca:	6122      	str	r2, [r4, #16]
 800cbcc:	f8cd a000 	str.w	sl, [sp]
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	aa03      	add	r2, sp, #12
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	f7ff fee2 	bl	800c9a0 <_printf_common>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d14c      	bne.n	800cc7a <_printf_i+0x1fe>
 800cbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe4:	b004      	add	sp, #16
 800cbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbea:	4835      	ldr	r0, [pc, #212]	; (800ccc0 <_printf_i+0x244>)
 800cbec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbf0:	6829      	ldr	r1, [r5, #0]
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbf8:	6029      	str	r1, [r5, #0]
 800cbfa:	061d      	lsls	r5, r3, #24
 800cbfc:	d514      	bpl.n	800cc28 <_printf_i+0x1ac>
 800cbfe:	07df      	lsls	r7, r3, #31
 800cc00:	bf44      	itt	mi
 800cc02:	f043 0320 	orrmi.w	r3, r3, #32
 800cc06:	6023      	strmi	r3, [r4, #0]
 800cc08:	b91e      	cbnz	r6, 800cc12 <_printf_i+0x196>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	f023 0320 	bic.w	r3, r3, #32
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	2310      	movs	r3, #16
 800cc14:	e7b0      	b.n	800cb78 <_printf_i+0xfc>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	f043 0320 	orr.w	r3, r3, #32
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	2378      	movs	r3, #120	; 0x78
 800cc20:	4828      	ldr	r0, [pc, #160]	; (800ccc4 <_printf_i+0x248>)
 800cc22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc26:	e7e3      	b.n	800cbf0 <_printf_i+0x174>
 800cc28:	0659      	lsls	r1, r3, #25
 800cc2a:	bf48      	it	mi
 800cc2c:	b2b6      	uxthmi	r6, r6
 800cc2e:	e7e6      	b.n	800cbfe <_printf_i+0x182>
 800cc30:	4615      	mov	r5, r2
 800cc32:	e7bb      	b.n	800cbac <_printf_i+0x130>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	6826      	ldr	r6, [r4, #0]
 800cc38:	6961      	ldr	r1, [r4, #20]
 800cc3a:	1d18      	adds	r0, r3, #4
 800cc3c:	6028      	str	r0, [r5, #0]
 800cc3e:	0635      	lsls	r5, r6, #24
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	d501      	bpl.n	800cc48 <_printf_i+0x1cc>
 800cc44:	6019      	str	r1, [r3, #0]
 800cc46:	e002      	b.n	800cc4e <_printf_i+0x1d2>
 800cc48:	0670      	lsls	r0, r6, #25
 800cc4a:	d5fb      	bpl.n	800cc44 <_printf_i+0x1c8>
 800cc4c:	8019      	strh	r1, [r3, #0]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6123      	str	r3, [r4, #16]
 800cc52:	4615      	mov	r5, r2
 800cc54:	e7ba      	b.n	800cbcc <_printf_i+0x150>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	1d1a      	adds	r2, r3, #4
 800cc5a:	602a      	str	r2, [r5, #0]
 800cc5c:	681d      	ldr	r5, [r3, #0]
 800cc5e:	6862      	ldr	r2, [r4, #4]
 800cc60:	2100      	movs	r1, #0
 800cc62:	4628      	mov	r0, r5
 800cc64:	f7f3 fb44 	bl	80002f0 <memchr>
 800cc68:	b108      	cbz	r0, 800cc6e <_printf_i+0x1f2>
 800cc6a:	1b40      	subs	r0, r0, r5
 800cc6c:	6060      	str	r0, [r4, #4]
 800cc6e:	6863      	ldr	r3, [r4, #4]
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	2300      	movs	r3, #0
 800cc74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc78:	e7a8      	b.n	800cbcc <_printf_i+0x150>
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	462a      	mov	r2, r5
 800cc7e:	4649      	mov	r1, r9
 800cc80:	4640      	mov	r0, r8
 800cc82:	47d0      	blx	sl
 800cc84:	3001      	adds	r0, #1
 800cc86:	d0ab      	beq.n	800cbe0 <_printf_i+0x164>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	079b      	lsls	r3, r3, #30
 800cc8c:	d413      	bmi.n	800ccb6 <_printf_i+0x23a>
 800cc8e:	68e0      	ldr	r0, [r4, #12]
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	4298      	cmp	r0, r3
 800cc94:	bfb8      	it	lt
 800cc96:	4618      	movlt	r0, r3
 800cc98:	e7a4      	b.n	800cbe4 <_printf_i+0x168>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4649      	mov	r1, r9
 800cca0:	4640      	mov	r0, r8
 800cca2:	47d0      	blx	sl
 800cca4:	3001      	adds	r0, #1
 800cca6:	d09b      	beq.n	800cbe0 <_printf_i+0x164>
 800cca8:	3501      	adds	r5, #1
 800ccaa:	68e3      	ldr	r3, [r4, #12]
 800ccac:	9903      	ldr	r1, [sp, #12]
 800ccae:	1a5b      	subs	r3, r3, r1
 800ccb0:	42ab      	cmp	r3, r5
 800ccb2:	dcf2      	bgt.n	800cc9a <_printf_i+0x21e>
 800ccb4:	e7eb      	b.n	800cc8e <_printf_i+0x212>
 800ccb6:	2500      	movs	r5, #0
 800ccb8:	f104 0619 	add.w	r6, r4, #25
 800ccbc:	e7f5      	b.n	800ccaa <_printf_i+0x22e>
 800ccbe:	bf00      	nop
 800ccc0:	0800d045 	.word	0x0800d045
 800ccc4:	0800d056 	.word	0x0800d056

0800ccc8 <memmove>:
 800ccc8:	4288      	cmp	r0, r1
 800ccca:	b510      	push	{r4, lr}
 800cccc:	eb01 0402 	add.w	r4, r1, r2
 800ccd0:	d902      	bls.n	800ccd8 <memmove+0x10>
 800ccd2:	4284      	cmp	r4, r0
 800ccd4:	4623      	mov	r3, r4
 800ccd6:	d807      	bhi.n	800cce8 <memmove+0x20>
 800ccd8:	1e43      	subs	r3, r0, #1
 800ccda:	42a1      	cmp	r1, r4
 800ccdc:	d008      	beq.n	800ccf0 <memmove+0x28>
 800ccde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cce6:	e7f8      	b.n	800ccda <memmove+0x12>
 800cce8:	4402      	add	r2, r0
 800ccea:	4601      	mov	r1, r0
 800ccec:	428a      	cmp	r2, r1
 800ccee:	d100      	bne.n	800ccf2 <memmove+0x2a>
 800ccf0:	bd10      	pop	{r4, pc}
 800ccf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccfa:	e7f7      	b.n	800ccec <memmove+0x24>

0800ccfc <_free_r>:
 800ccfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	d044      	beq.n	800cd8c <_free_r+0x90>
 800cd02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd06:	9001      	str	r0, [sp, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd0e:	bfb8      	it	lt
 800cd10:	18e4      	addlt	r4, r4, r3
 800cd12:	f000 f913 	bl	800cf3c <__malloc_lock>
 800cd16:	4a1e      	ldr	r2, [pc, #120]	; (800cd90 <_free_r+0x94>)
 800cd18:	9801      	ldr	r0, [sp, #4]
 800cd1a:	6813      	ldr	r3, [r2, #0]
 800cd1c:	b933      	cbnz	r3, 800cd2c <_free_r+0x30>
 800cd1e:	6063      	str	r3, [r4, #4]
 800cd20:	6014      	str	r4, [r2, #0]
 800cd22:	b003      	add	sp, #12
 800cd24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd28:	f000 b90e 	b.w	800cf48 <__malloc_unlock>
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	d908      	bls.n	800cd42 <_free_r+0x46>
 800cd30:	6825      	ldr	r5, [r4, #0]
 800cd32:	1961      	adds	r1, r4, r5
 800cd34:	428b      	cmp	r3, r1
 800cd36:	bf01      	itttt	eq
 800cd38:	6819      	ldreq	r1, [r3, #0]
 800cd3a:	685b      	ldreq	r3, [r3, #4]
 800cd3c:	1949      	addeq	r1, r1, r5
 800cd3e:	6021      	streq	r1, [r4, #0]
 800cd40:	e7ed      	b.n	800cd1e <_free_r+0x22>
 800cd42:	461a      	mov	r2, r3
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	b10b      	cbz	r3, 800cd4c <_free_r+0x50>
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	d9fa      	bls.n	800cd42 <_free_r+0x46>
 800cd4c:	6811      	ldr	r1, [r2, #0]
 800cd4e:	1855      	adds	r5, r2, r1
 800cd50:	42a5      	cmp	r5, r4
 800cd52:	d10b      	bne.n	800cd6c <_free_r+0x70>
 800cd54:	6824      	ldr	r4, [r4, #0]
 800cd56:	4421      	add	r1, r4
 800cd58:	1854      	adds	r4, r2, r1
 800cd5a:	42a3      	cmp	r3, r4
 800cd5c:	6011      	str	r1, [r2, #0]
 800cd5e:	d1e0      	bne.n	800cd22 <_free_r+0x26>
 800cd60:	681c      	ldr	r4, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	6053      	str	r3, [r2, #4]
 800cd66:	4421      	add	r1, r4
 800cd68:	6011      	str	r1, [r2, #0]
 800cd6a:	e7da      	b.n	800cd22 <_free_r+0x26>
 800cd6c:	d902      	bls.n	800cd74 <_free_r+0x78>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	e7d6      	b.n	800cd22 <_free_r+0x26>
 800cd74:	6825      	ldr	r5, [r4, #0]
 800cd76:	1961      	adds	r1, r4, r5
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf04      	itt	eq
 800cd7c:	6819      	ldreq	r1, [r3, #0]
 800cd7e:	685b      	ldreq	r3, [r3, #4]
 800cd80:	6063      	str	r3, [r4, #4]
 800cd82:	bf04      	itt	eq
 800cd84:	1949      	addeq	r1, r1, r5
 800cd86:	6021      	streq	r1, [r4, #0]
 800cd88:	6054      	str	r4, [r2, #4]
 800cd8a:	e7ca      	b.n	800cd22 <_free_r+0x26>
 800cd8c:	b003      	add	sp, #12
 800cd8e:	bd30      	pop	{r4, r5, pc}
 800cd90:	24000ed8 	.word	0x24000ed8

0800cd94 <sbrk_aligned>:
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	4e0e      	ldr	r6, [pc, #56]	; (800cdd0 <sbrk_aligned+0x3c>)
 800cd98:	460c      	mov	r4, r1
 800cd9a:	6831      	ldr	r1, [r6, #0]
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	b911      	cbnz	r1, 800cda6 <sbrk_aligned+0x12>
 800cda0:	f000 f8bc 	bl	800cf1c <_sbrk_r>
 800cda4:	6030      	str	r0, [r6, #0]
 800cda6:	4621      	mov	r1, r4
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f000 f8b7 	bl	800cf1c <_sbrk_r>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d00a      	beq.n	800cdc8 <sbrk_aligned+0x34>
 800cdb2:	1cc4      	adds	r4, r0, #3
 800cdb4:	f024 0403 	bic.w	r4, r4, #3
 800cdb8:	42a0      	cmp	r0, r4
 800cdba:	d007      	beq.n	800cdcc <sbrk_aligned+0x38>
 800cdbc:	1a21      	subs	r1, r4, r0
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f000 f8ac 	bl	800cf1c <_sbrk_r>
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d101      	bne.n	800cdcc <sbrk_aligned+0x38>
 800cdc8:	f04f 34ff 	mov.w	r4, #4294967295
 800cdcc:	4620      	mov	r0, r4
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
 800cdd0:	24000edc 	.word	0x24000edc

0800cdd4 <_malloc_r>:
 800cdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd8:	1ccd      	adds	r5, r1, #3
 800cdda:	f025 0503 	bic.w	r5, r5, #3
 800cdde:	3508      	adds	r5, #8
 800cde0:	2d0c      	cmp	r5, #12
 800cde2:	bf38      	it	cc
 800cde4:	250c      	movcc	r5, #12
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	4607      	mov	r7, r0
 800cdea:	db01      	blt.n	800cdf0 <_malloc_r+0x1c>
 800cdec:	42a9      	cmp	r1, r5
 800cdee:	d905      	bls.n	800cdfc <_malloc_r+0x28>
 800cdf0:	230c      	movs	r3, #12
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	2600      	movs	r6, #0
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	4e2e      	ldr	r6, [pc, #184]	; (800ceb8 <_malloc_r+0xe4>)
 800cdfe:	f000 f89d 	bl	800cf3c <__malloc_lock>
 800ce02:	6833      	ldr	r3, [r6, #0]
 800ce04:	461c      	mov	r4, r3
 800ce06:	bb34      	cbnz	r4, 800ce56 <_malloc_r+0x82>
 800ce08:	4629      	mov	r1, r5
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	f7ff ffc2 	bl	800cd94 <sbrk_aligned>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	4604      	mov	r4, r0
 800ce14:	d14d      	bne.n	800ceb2 <_malloc_r+0xde>
 800ce16:	6834      	ldr	r4, [r6, #0]
 800ce18:	4626      	mov	r6, r4
 800ce1a:	2e00      	cmp	r6, #0
 800ce1c:	d140      	bne.n	800cea0 <_malloc_r+0xcc>
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	4631      	mov	r1, r6
 800ce22:	4638      	mov	r0, r7
 800ce24:	eb04 0803 	add.w	r8, r4, r3
 800ce28:	f000 f878 	bl	800cf1c <_sbrk_r>
 800ce2c:	4580      	cmp	r8, r0
 800ce2e:	d13a      	bne.n	800cea6 <_malloc_r+0xd2>
 800ce30:	6821      	ldr	r1, [r4, #0]
 800ce32:	3503      	adds	r5, #3
 800ce34:	1a6d      	subs	r5, r5, r1
 800ce36:	f025 0503 	bic.w	r5, r5, #3
 800ce3a:	3508      	adds	r5, #8
 800ce3c:	2d0c      	cmp	r5, #12
 800ce3e:	bf38      	it	cc
 800ce40:	250c      	movcc	r5, #12
 800ce42:	4629      	mov	r1, r5
 800ce44:	4638      	mov	r0, r7
 800ce46:	f7ff ffa5 	bl	800cd94 <sbrk_aligned>
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	d02b      	beq.n	800cea6 <_malloc_r+0xd2>
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	442b      	add	r3, r5
 800ce52:	6023      	str	r3, [r4, #0]
 800ce54:	e00e      	b.n	800ce74 <_malloc_r+0xa0>
 800ce56:	6822      	ldr	r2, [r4, #0]
 800ce58:	1b52      	subs	r2, r2, r5
 800ce5a:	d41e      	bmi.n	800ce9a <_malloc_r+0xc6>
 800ce5c:	2a0b      	cmp	r2, #11
 800ce5e:	d916      	bls.n	800ce8e <_malloc_r+0xba>
 800ce60:	1961      	adds	r1, r4, r5
 800ce62:	42a3      	cmp	r3, r4
 800ce64:	6025      	str	r5, [r4, #0]
 800ce66:	bf18      	it	ne
 800ce68:	6059      	strne	r1, [r3, #4]
 800ce6a:	6863      	ldr	r3, [r4, #4]
 800ce6c:	bf08      	it	eq
 800ce6e:	6031      	streq	r1, [r6, #0]
 800ce70:	5162      	str	r2, [r4, r5]
 800ce72:	604b      	str	r3, [r1, #4]
 800ce74:	4638      	mov	r0, r7
 800ce76:	f104 060b 	add.w	r6, r4, #11
 800ce7a:	f000 f865 	bl	800cf48 <__malloc_unlock>
 800ce7e:	f026 0607 	bic.w	r6, r6, #7
 800ce82:	1d23      	adds	r3, r4, #4
 800ce84:	1af2      	subs	r2, r6, r3
 800ce86:	d0b6      	beq.n	800cdf6 <_malloc_r+0x22>
 800ce88:	1b9b      	subs	r3, r3, r6
 800ce8a:	50a3      	str	r3, [r4, r2]
 800ce8c:	e7b3      	b.n	800cdf6 <_malloc_r+0x22>
 800ce8e:	6862      	ldr	r2, [r4, #4]
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	bf0c      	ite	eq
 800ce94:	6032      	streq	r2, [r6, #0]
 800ce96:	605a      	strne	r2, [r3, #4]
 800ce98:	e7ec      	b.n	800ce74 <_malloc_r+0xa0>
 800ce9a:	4623      	mov	r3, r4
 800ce9c:	6864      	ldr	r4, [r4, #4]
 800ce9e:	e7b2      	b.n	800ce06 <_malloc_r+0x32>
 800cea0:	4634      	mov	r4, r6
 800cea2:	6876      	ldr	r6, [r6, #4]
 800cea4:	e7b9      	b.n	800ce1a <_malloc_r+0x46>
 800cea6:	230c      	movs	r3, #12
 800cea8:	603b      	str	r3, [r7, #0]
 800ceaa:	4638      	mov	r0, r7
 800ceac:	f000 f84c 	bl	800cf48 <__malloc_unlock>
 800ceb0:	e7a1      	b.n	800cdf6 <_malloc_r+0x22>
 800ceb2:	6025      	str	r5, [r4, #0]
 800ceb4:	e7de      	b.n	800ce74 <_malloc_r+0xa0>
 800ceb6:	bf00      	nop
 800ceb8:	24000ed8 	.word	0x24000ed8

0800cebc <_realloc_r>:
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	4680      	mov	r8, r0
 800cec2:	4614      	mov	r4, r2
 800cec4:	460e      	mov	r6, r1
 800cec6:	b921      	cbnz	r1, 800ced2 <_realloc_r+0x16>
 800cec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cecc:	4611      	mov	r1, r2
 800cece:	f7ff bf81 	b.w	800cdd4 <_malloc_r>
 800ced2:	b92a      	cbnz	r2, 800cee0 <_realloc_r+0x24>
 800ced4:	f7ff ff12 	bl	800ccfc <_free_r>
 800ced8:	4625      	mov	r5, r4
 800ceda:	4628      	mov	r0, r5
 800cedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee0:	f000 f838 	bl	800cf54 <_malloc_usable_size_r>
 800cee4:	4284      	cmp	r4, r0
 800cee6:	4607      	mov	r7, r0
 800cee8:	d802      	bhi.n	800cef0 <_realloc_r+0x34>
 800ceea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceee:	d812      	bhi.n	800cf16 <_realloc_r+0x5a>
 800cef0:	4621      	mov	r1, r4
 800cef2:	4640      	mov	r0, r8
 800cef4:	f7ff ff6e 	bl	800cdd4 <_malloc_r>
 800cef8:	4605      	mov	r5, r0
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d0ed      	beq.n	800ceda <_realloc_r+0x1e>
 800cefe:	42bc      	cmp	r4, r7
 800cf00:	4622      	mov	r2, r4
 800cf02:	4631      	mov	r1, r6
 800cf04:	bf28      	it	cs
 800cf06:	463a      	movcs	r2, r7
 800cf08:	f7ff fba4 	bl	800c654 <memcpy>
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	4640      	mov	r0, r8
 800cf10:	f7ff fef4 	bl	800ccfc <_free_r>
 800cf14:	e7e1      	b.n	800ceda <_realloc_r+0x1e>
 800cf16:	4635      	mov	r5, r6
 800cf18:	e7df      	b.n	800ceda <_realloc_r+0x1e>
	...

0800cf1c <_sbrk_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d06      	ldr	r5, [pc, #24]	; (800cf38 <_sbrk_r+0x1c>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	f7f5 fd76 	bl	8002a18 <_sbrk>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_sbrk_r+0x1a>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_sbrk_r+0x1a>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	24000ee0 	.word	0x24000ee0

0800cf3c <__malloc_lock>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	; (800cf44 <__malloc_lock+0x8>)
 800cf3e:	f000 b811 	b.w	800cf64 <__retarget_lock_acquire_recursive>
 800cf42:	bf00      	nop
 800cf44:	24000ee4 	.word	0x24000ee4

0800cf48 <__malloc_unlock>:
 800cf48:	4801      	ldr	r0, [pc, #4]	; (800cf50 <__malloc_unlock+0x8>)
 800cf4a:	f000 b80c 	b.w	800cf66 <__retarget_lock_release_recursive>
 800cf4e:	bf00      	nop
 800cf50:	24000ee4 	.word	0x24000ee4

0800cf54 <_malloc_usable_size_r>:
 800cf54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf58:	1f18      	subs	r0, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	bfbc      	itt	lt
 800cf5e:	580b      	ldrlt	r3, [r1, r0]
 800cf60:	18c0      	addlt	r0, r0, r3
 800cf62:	4770      	bx	lr

0800cf64 <__retarget_lock_acquire_recursive>:
 800cf64:	4770      	bx	lr

0800cf66 <__retarget_lock_release_recursive>:
 800cf66:	4770      	bx	lr

0800cf68 <_init>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr

0800cf74 <_fini>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr


STM32H750B-DK_I2C_Touch_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800cf50  0800cf50  0001cf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d064  0800d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800d06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800d0cc  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800d12c  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef0  24000120  0800d18c  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001010  0800d18c  00021010  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ee7e  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004542  00000000  00000000  0004f00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d0  00000000  00000000  00053558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b33  00000000  00000000  00055828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040d5c  00000000  00000000  0005735b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d4f7  00000000  00000000  000980b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019bc44  00000000  00000000  000c55ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fc0  00000000  00000000  002611f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0026b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf38 	.word	0x0800cf38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800cf38 	.word	0x0800cf38

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	b08b      	sub	sp, #44	; 0x2c
 8000690:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f002 fa8d 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f90b 	bl	80008b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800069a:	f000 f995 	bl	80009c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 ff39 	bl	8001514 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a2:	f000 f9c1 	bl	8000a28 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006a6:	f000 fa37 	bl	8000b18 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006aa:	f000 fa99 	bl	8000be0 <MX_ADC3_Init>
  MX_ETH_Init();
 80006ae:	f000 faf9 	bl	8000ca4 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006b2:	f000 fb43 	bl	8000d3c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006b6:	f000 fba5 	bl	8000e04 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006ba:	f000 fedd 	bl	8001478 <MX_FMC_Init>
  MX_LTDC_Init();
 80006be:	f000 fc45 	bl	8000f4c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006c2:	f000 fcf5 	bl	80010b0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006c6:	f000 fd1f 	bl	8001108 <MX_RTC_Init>
  MX_SAI2_Init();
 80006ca:	f000 fd45 	bl	8001158 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006ce:	f000 fe01 	bl	80012d4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006d2:	f000 fe53 	bl	800137c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d6:	f000 fe9d 	bl	8001414 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 80006da:	f000 fbf7 	bl	8000ecc <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);    // Set LCD_RST to high
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e4:	4860      	ldr	r0, [pc, #384]	; (8000868 <main+0x1dc>)
 80006e6:	f004 fe11 	bl	800530c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	485f      	ldr	r0, [pc, #380]	; (800086c <main+0x1e0>)
 80006f0:	f004 fe25 	bl	800533e <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	485d      	ldr	r0, [pc, #372]	; (8000870 <main+0x1e4>)
 80006fa:	f004 fdef 	bl	80052dc <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b5c      	ldr	r3, [pc, #368]	; (8000874 <main+0x1e8>)
 8000704:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <main+0x1e8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2104      	movs	r1, #4
 8000710:	4859      	ldr	r0, [pc, #356]	; (8000878 <main+0x1ec>)
 8000712:	f004 fdfb 	bl	800530c <HAL_GPIO_WritePin>


		// Reading from address 0x38 register Vendor's Chip ID (addr. 0xA8) default value should be 0x51=81  - Both variations work !
	    //dataBuffer[5] = 0xA8;
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0xA8, I2C_MEMADD_SIZE_8BIT,&VendorID, 1, HAL_MAX_DELAY);
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2301      	movs	r3, #1
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	4b56      	ldr	r3, [pc, #344]	; (800087c <main+0x1f0>)
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	22a8      	movs	r2, #168	; 0xa8
 8000728:	2170      	movs	r1, #112	; 0x70
 800072a:	4855      	ldr	r0, [pc, #340]	; (8000880 <main+0x1f4>)
 800072c:	f004 feb2 	bl	8005494 <HAL_I2C_Mem_Read>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b53      	ldr	r3, [pc, #332]	; (8000884 <main+0x1f8>)
 8000736:	701a      	strb	r2, [r3, #0]
//	    04h  TOUCH1_XL
//	    05h  TOUCH1_YH
//	    06h  TOUCH1_YL
//	    A8h  Vendor ID = 0x51

	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0x00, I2C_MEMADD_SIZE_8BIT,&DeviceMode, 1, HAL_MAX_DELAY);
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2301      	movs	r3, #1
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4b51      	ldr	r3, [pc, #324]	; (8000888 <main+0x1fc>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	2200      	movs	r2, #0
 800074a:	2170      	movs	r1, #112	; 0x70
 800074c:	484c      	ldr	r0, [pc, #304]	; (8000880 <main+0x1f4>)
 800074e:	f004 fea1 	bl	8005494 <HAL_I2C_Mem_Read>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <main+0x1f8>)
 8000758:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0x01, I2C_MEMADD_SIZE_8BIT,&Gesture, 1, HAL_MAX_DELAY);
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2301      	movs	r3, #1
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	4b49      	ldr	r3, [pc, #292]	; (800088c <main+0x200>)
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	2201      	movs	r2, #1
 800076c:	2170      	movs	r1, #112	; 0x70
 800076e:	4844      	ldr	r0, [pc, #272]	; (8000880 <main+0x1f4>)
 8000770:	f004 fe90 	bl	8005494 <HAL_I2C_Mem_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x1f8>)
 800077a:	701a      	strb	r2, [r3, #0]
	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0x02, I2C_MEMADD_SIZE_8BIT,&Status, 1, HAL_MAX_DELAY);
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	9302      	str	r3, [sp, #8]
 8000782:	2301      	movs	r3, #1
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	4b42      	ldr	r3, [pc, #264]	; (8000890 <main+0x204>)
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	2202      	movs	r2, #2
 800078e:	2170      	movs	r1, #112	; 0x70
 8000790:	483b      	ldr	r0, [pc, #236]	; (8000880 <main+0x1f4>)
 8000792:	f004 fe7f 	bl	8005494 <HAL_I2C_Mem_Read>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <main+0x1f8>)
 800079c:	701a      	strb	r2, [r3, #0]
//	    retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0x06, I2C_MEMADD_SIZE_8BIT,&Touchyl, 1, HAL_MAX_DELAY);
//	    TouchX =  (Touchxh & 0x0f) * 256 + Touchxl;
//		TouchY =  (Touchyh & 0x0f) * 256 + Touchyl;


		retval = HAL_I2C_Mem_Read(&hi2c4, (0x38 << 1), 0x3, I2C_MEMADD_SIZE_8BIT,&dataBuffer, 4, HAL_MAX_DELAY);
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2304      	movs	r3, #4
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <main+0x208>)
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	2203      	movs	r2, #3
 80007b0:	2170      	movs	r1, #112	; 0x70
 80007b2:	4833      	ldr	r0, [pc, #204]	; (8000880 <main+0x1f4>)
 80007b4:	f004 fe6e 	bl	8005494 <HAL_I2C_Mem_Read>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <main+0x1f8>)
 80007be:	701a      	strb	r2, [r3, #0]
	    if (Status != 0) {
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <main+0x204>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d014      	beq.n	80007f2 <main+0x166>
			TouchX = ( (dataBuffer[0] & 0b1111) << 8) + dataBuffer[1];
 80007c8:	4b32      	ldr	r3, [pc, #200]	; (8000894 <main+0x208>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007d2:	4a30      	ldr	r2, [pc, #192]	; (8000894 <main+0x208>)
 80007d4:	7852      	ldrb	r2, [r2, #1]
 80007d6:	4413      	add	r3, r2
 80007d8:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <main+0x20c>)
 80007da:	6013      	str	r3, [r2, #0]
			TouchY = ( (dataBuffer[2] & 0b1111) << 8) + dataBuffer[3];
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <main+0x208>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e6:	4a2b      	ldr	r2, [pc, #172]	; (8000894 <main+0x208>)
 80007e8:	78d2      	ldrb	r2, [r2, #3]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a2b      	ldr	r2, [pc, #172]	; (800089c <main+0x210>)
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	e005      	b.n	80007fe <main+0x172>
	    } else {
			TouchX = 0;
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <main+0x20c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
			TouchY = 0;
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <main+0x210>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]

	    }

	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d TouchID: 0x%02x=%d Status:%d Gesture:0x%02x X:%d Y:%d\n\r",Counter++,KeyState, VendorID,VendorID,Status & 0b1111,Gesture, TouchX,TouchY);
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <main+0x214>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	4926      	ldr	r1, [pc, #152]	; (80008a0 <main+0x214>)
 8000806:	600a      	str	r2, [r1, #0]
 8000808:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <main+0x1e8>)
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	491b      	ldr	r1, [pc, #108]	; (800087c <main+0x1f0>)
 800080e:	7809      	ldrb	r1, [r1, #0]
 8000810:	460d      	mov	r5, r1
 8000812:	491a      	ldr	r1, [pc, #104]	; (800087c <main+0x1f0>)
 8000814:	7809      	ldrb	r1, [r1, #0]
 8000816:	460e      	mov	r6, r1
 8000818:	491d      	ldr	r1, [pc, #116]	; (8000890 <main+0x204>)
 800081a:	7809      	ldrb	r1, [r1, #0]
 800081c:	f001 010f 	and.w	r1, r1, #15
 8000820:	481a      	ldr	r0, [pc, #104]	; (800088c <main+0x200>)
 8000822:	7800      	ldrb	r0, [r0, #0]
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <main+0x20c>)
 8000828:	6800      	ldr	r0, [r0, #0]
 800082a:	4c1c      	ldr	r4, [pc, #112]	; (800089c <main+0x210>)
 800082c:	6824      	ldr	r4, [r4, #0]
 800082e:	9406      	str	r4, [sp, #24]
 8000830:	9005      	str	r0, [sp, #20]
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	9004      	str	r0, [sp, #16]
 8000836:	9103      	str	r1, [sp, #12]
 8000838:	9602      	str	r6, [sp, #8]
 800083a:	9501      	str	r5, [sp, #4]
 800083c:	9200      	str	r2, [sp, #0]
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <main+0x218>)
 8000840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <main+0x21c>)
 8000846:	f00b febf 	bl	800c5c8 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <main+0x21c>)
 800084c:	f7ff fd48 	bl	80002e0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	4914      	ldr	r1, [pc, #80]	; (80008a8 <main+0x21c>)
 8000858:	4814      	ldr	r0, [pc, #80]	; (80008ac <main+0x220>)
 800085a:	f00a f9d0 	bl	800abfe <HAL_UART_Transmit>

	    HAL_Delay(1000);
 800085e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000862:	f002 fa37 	bl	8002cd4 <HAL_Delay>
  {
 8000866:	e740      	b.n	80006ea <main+0x5e>
 8000868:	58020400 	.word	0x58020400
 800086c:	58022000 	.word	0x58022000
 8000870:	58020800 	.word	0x58020800
 8000874:	24000e8c 	.word	0x24000e8c
 8000878:	58022400 	.word	0x58022400
 800087c:	24000ea2 	.word	0x24000ea2
 8000880:	24000490 	.word	0x24000490
 8000884:	24000ea6 	.word	0x24000ea6
 8000888:	24000ea3 	.word	0x24000ea3
 800088c:	24000ea4 	.word	0x24000ea4
 8000890:	24000ea5 	.word	0x24000ea5
 8000894:	24000e98 	.word	0x24000e98
 8000898:	24000e90 	.word	0x24000e90
 800089c:	24000e94 	.word	0x24000e94
 80008a0:	24000e88 	.word	0x24000e88
 80008a4:	0800cf50 	.word	0x0800cf50
 80008a8:	24000d88 	.word	0x24000d88
 80008ac:	240007b4 	.word	0x240007b4

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09c      	sub	sp, #112	; 0x70
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	224c      	movs	r2, #76	; 0x4c
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00b feb6 	bl	800c630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2220      	movs	r2, #32
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00b feb0 	bl	800c630 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f005 fde5 	bl	80064a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <SystemClock_Config+0x10c>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <SystemClock_Config+0x10c>)
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <SystemClock_Config+0x10c>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <SystemClock_Config+0x110>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <SystemClock_Config+0x110>)
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <SystemClock_Config+0x110>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090c:	bf00      	nop
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <SystemClock_Config+0x110>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091a:	d1f8      	bne.n	800090e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <SystemClock_Config+0x114>)
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f023 0303 	bic.w	r3, r3, #3
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <SystemClock_Config+0x114>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800092c:	230b      	movs	r3, #11
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000930:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000936:	2301      	movs	r3, #1
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800093e:	2301      	movs	r3, #1
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800094a:	2316      	movs	r3, #22
 800094c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800094e:	23a9      	movs	r3, #169	; 0xa9
 8000950:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000956:	2304      	movs	r3, #4
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800095e:	2300      	movs	r3, #0
 8000960:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000962:	2300      	movs	r3, #0
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4618      	mov	r0, r3
 8000970:	f005 fe9a 	bl	80066a8 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800097a:	f000 ff75 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	233f      	movs	r3, #63	; 0x3f
 8000980:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2101      	movs	r1, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 fada 	bl	8006f5c <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80009ae:	f000 ff5b 	bl	8001868 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3770      	adds	r7, #112	; 0x70
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	58000400 	.word	0x58000400
 80009c0:	58024800 	.word	0x58024800
 80009c4:	58024400 	.word	0x58024400

080009c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0b0      	sub	sp, #192	; 0xc0
 80009cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	22c0      	movs	r2, #192	; 0xc0
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00b fe2b 	bl	800c630 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ea:	230c      	movs	r3, #12
 80009ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009ee:	2305      	movs	r3, #5
 80009f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009fe:	2320      	movs	r3, #32
 8000a00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f006 fe30 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a1a:	f000 ff25 	bl	8001868 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	37c0      	adds	r7, #192	; 0xc0
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a4c:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a4e:	4a31      	ldr	r2, [pc, #196]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aaa:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000aac:	f002 faf8 	bl	80030a0 <HAL_ADC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ab6:	f000 fed7 	bl	8001868 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000ac6:	f003 f90f 	bl	8003ce8 <HAL_ADCEx_MultiModeConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ad0:	f000 feca 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_ADC1_Init+0xe8>)
 8000af8:	f002 fc74 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b02:	f000 feb1 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	24000174 	.word	0x24000174
 8000b14:	40022000 	.word	0x40022000

08000b18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b32:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <MX_ADC2_Init+0xc4>)
 8000b34:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b8e:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b90:	f002 fa86 	bl	80030a0 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b9a:	f000 fe65 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000baa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000bc2:	f002 fc0f 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000bcc:	f000 fe4c 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240001d8 	.word	0x240001d8
 8000bdc:	40022100 	.word	0x40022100

08000be0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000bfa:	4a28      	ldr	r2, [pc, #160]	; (8000c9c <MX_ADC3_Init+0xbc>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c50:	f002 fa26 	bl	80030a0 <HAL_ADC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f000 fe05 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_ADC3_Init+0xc0>)
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c62:	2306      	movs	r3, #6
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c6e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2304      	movs	r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_ADC3_Init+0xb8>)
 8000c82:	f002 fbaf 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c8c:	f000 fdec 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2400023c 	.word	0x2400023c
 8000c9c:	58026000 	.word	0x58026000
 8000ca0:	1d500080 	.word	0x1d500080

08000ca4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_ETH_Init+0x80>)
 8000caa:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <MX_ETH_Init+0x84>)
 8000cac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cbc:	22e1      	movs	r2, #225	; 0xe1
 8000cbe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_ETH_Init+0x88>)
 8000cd6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_ETH_Init+0x80>)
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <MX_ETH_Init+0x8c>)
 8000ce2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_ETH_Init+0x80>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_ETH_Init+0x90>)
 8000ce8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cf0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_ETH_Init+0x80>)
 8000cf4:	f003 f9ba 	bl	800406c <HAL_ETH_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cfe:	f000 fdb3 	bl	8001868 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d02:	2238      	movs	r2, #56	; 0x38
 8000d04:	2100      	movs	r1, #0
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d08:	f00b fc92 	bl	800c630 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d0e:	2221      	movs	r2, #33	; 0x21
 8000d10:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_ETH_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	240002a0 	.word	0x240002a0
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	24000ea8 	.word	0x24000ea8
 8000d30:	240000c0 	.word	0x240000c0
 8000d34:	24000060 	.word	0x24000060
 8000d38:	2400013c 	.word	0x2400013c

08000d3c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <MX_FDCAN1_Init+0xc4>)
 8000d44:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_FDCAN1_Init+0xc0>)
 8000dea:	f003 fd63 	bl	80048b4 <HAL_FDCAN_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000df4:	f000 fd38 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	24000350 	.word	0x24000350
 8000e00:	4000a000 	.word	0x4000a000

08000e04 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <MX_FDCAN2_Init+0xc4>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e2e:	2210      	movs	r2, #16
 8000e30:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_FDCAN2_Init+0xc0>)
 8000eb2:	f003 fcff 	bl	80048b4 <HAL_FDCAN_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ebc:	f000 fcd4 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	240003f0 	.word	0x240003f0
 8000ec8:	4000a400 	.word	0x4000a400

08000ecc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_I2C4_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <MX_I2C4_Init+0x7c>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f08:	f004 fa34 	bl	8005374 <HAL_I2C_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f12:	f000 fca9 	bl	8001868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f1a:	f004 fe39 	bl	8005b90 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f24:	f000 fca0 	bl	8001868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_I2C4_Init+0x74>)
 8000f2c:	f004 fe7b 	bl	8005c26 <HAL_I2CEx_ConfigDigitalFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f000 fc97 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24000490 	.word	0x24000490
 8000f44:	58001c00 	.word	0x58001c00
 8000f48:	10707dbc 	.word	0x10707dbc

08000f4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09a      	sub	sp, #104	; 0x68
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f56:	2234      	movs	r2, #52	; 0x34
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00b fb68 	bl	800c630 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00b fb62 	bl	800c630 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f6e:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <MX_LTDC_Init+0x160>)
 8000f70:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f72:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f90:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f98:	220e      	movs	r2, #14
 8000f9a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f9c:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fa4:	f240 228e 	movw	r2, #654	; 0x28e
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fac:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fb4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fbc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fda:	4833      	ldr	r0, [pc, #204]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8000fdc:	f004 fe70 	bl	8005cc0 <HAL_LTDC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fe6:	f000 fc3f 	bl	8001868 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800100c:	2305      	movs	r3, #5
 800100e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800102e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8001038:	f004 ff12 	bl	8005e60 <HAL_LTDC_ConfigLayer>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001042:	f000 fc11 	bl	8001868 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001066:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001068:	2305      	movs	r3, #5
 800106a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_LTDC_Init+0x15c>)
 8001092:	f004 fee5 	bl	8005e60 <HAL_LTDC_ConfigLayer>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800109c:	f000 fbe4 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3768      	adds	r7, #104	; 0x68
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	240004e4 	.word	0x240004e4
 80010ac:	50001000 	.word	0x50001000

080010b0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_QUADSPI_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_QUADSPI_Init+0x50>)
 80010ec:	f005 fa22 	bl	8006534 <HAL_QSPI_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010f6:	f000 fbb7 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2400058c 	.word	0x2400058c
 8001104:	52005000 	.word	0x52005000

08001108 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_RTC_Init+0x48>)
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <MX_RTC_Init+0x4c>)
 8001110:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_RTC_Init+0x48>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <MX_RTC_Init+0x48>)
 800111a:	227f      	movs	r2, #127	; 0x7f
 800111c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_RTC_Init+0x48>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_RTC_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_RTC_Init+0x48>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_RTC_Init+0x48>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_RTC_Init+0x48>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_RTC_Init+0x48>)
 800113e:	f008 ff97 	bl	800a070 <HAL_RTC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001148:	f000 fb8e 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	240005d8 	.word	0x240005d8
 8001154:	58004000 	.word	0x58004000

08001158 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <MX_SAI2_Init+0x168>)
 800115e:	4a59      	ldr	r2, [pc, #356]	; (80012c4 <MX_SAI2_Init+0x16c>)
 8001160:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001164:	2200      	movs	r2, #0
 8001166:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001168:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <MX_SAI2_Init+0x168>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001176:	2200      	movs	r2, #0
 8001178:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800117a:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <MX_SAI2_Init+0x168>)
 800117c:	2200      	movs	r2, #0
 800117e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <MX_SAI2_Init+0x168>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001192:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001198:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <MX_SAI2_Init+0x168>)
 800119a:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <MX_SAI2_Init+0x170>)
 800119c:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011cc:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011da:	2200      	movs	r2, #0
 80011dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <MX_SAI2_Init+0x168>)
 80011fe:	2200      	movs	r2, #0
 8001200:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001202:	482f      	ldr	r0, [pc, #188]	; (80012c0 <MX_SAI2_Init+0x168>)
 8001204:	f009 f84c 	bl	800a2a0 <HAL_SAI_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800120e:	f000 fb2b 	bl	8001868 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_SAI2_Init+0x174>)
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <MX_SAI2_Init+0x178>)
 8001216:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_SAI2_Init+0x174>)
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_SAI2_Init+0x174>)
 8001220:	2203      	movs	r2, #3
 8001222:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_SAI2_Init+0x174>)
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_SAI2_Init+0x174>)
 800122c:	2200      	movs	r2, #0
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_SAI2_Init+0x174>)
 8001232:	2200      	movs	r2, #0
 8001234:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_SAI2_Init+0x174>)
 8001238:	2201      	movs	r2, #1
 800123a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_SAI2_Init+0x174>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_SAI2_Init+0x174>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_SAI2_Init+0x174>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_SAI2_Init+0x174>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_SAI2_Init+0x174>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_SAI2_Init+0x174>)
 800125c:	2200      	movs	r2, #0
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_SAI2_Init+0x174>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_SAI2_Init+0x174>)
 800126a:	2201      	movs	r2, #1
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_SAI2_Init+0x174>)
 8001270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_SAI2_Init+0x174>)
 8001278:	2208      	movs	r2, #8
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_SAI2_Init+0x174>)
 800127e:	2201      	movs	r2, #1
 8001280:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_SAI2_Init+0x174>)
 8001284:	2200      	movs	r2, #0
 8001286:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_SAI2_Init+0x174>)
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_SAI2_Init+0x174>)
 8001290:	2200      	movs	r2, #0
 8001292:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_SAI2_Init+0x174>)
 8001296:	2200      	movs	r2, #0
 8001298:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SAI2_Init+0x174>)
 800129c:	2200      	movs	r2, #0
 800129e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_SAI2_Init+0x174>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SAI2_Init+0x174>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_SAI2_Init+0x174>)
 80012ae:	f008 fff7 	bl	800a2a0 <HAL_SAI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80012b8:	f000 fad6 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	240005fc 	.word	0x240005fc
 80012c4:	40015c04 	.word	0x40015c04
 80012c8:	0002ee00 	.word	0x0002ee00
 80012cc:	24000694 	.word	0x24000694
 80012d0:	40015c24 	.word	0x40015c24

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012da:	4a27      	ldr	r2, [pc, #156]	; (8001378 <MX_SPI2_Init+0xa4>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_SPI2_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_SPI2_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_SPI2_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI2_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <MX_SPI2_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI2_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI2_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI2_Init+0xa0>)
 8001362:	f009 fabd 	bl	800a8e0 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 800136c:	f000 fa7c 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2400072c 	.word	0x2400072c
 8001378:	40003800 	.word	0x40003800

0800137c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <MX_USART3_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013c6:	f009 fbca 	bl	800ab5e <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 fa4a 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013d8:	f00a fc5b 	bl	800bc92 <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 fa41 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ea:	f00a fc90 	bl	800bd0e <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 fa38 	bl	8001868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013fa:	f00a fc11 	bl	800bc20 <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 fa30 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	240007b4 	.word	0x240007b4
 8001410:	40004800 	.word	0x40004800

08001414 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800141c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001420:	2209      	movs	r2, #9
 8001422:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001426:	2202      	movs	r2, #2
 8001428:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001432:	2202      	movs	r2, #2
 8001434:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144a:	2201      	movs	r2, #1
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001450:	2201      	movs	r2, #1
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145c:	f004 fed8 	bl	8006210 <HAL_PCD_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001466:	f000 f9ff 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000848 	.word	0x24000848
 8001474:	40080000 	.word	0x40080000

08001478 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_FMC_Init+0x94>)
 8001492:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <MX_FMC_Init+0x98>)
 8001494:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_FMC_Init+0x94>)
 8001498:	2201      	movs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_FMC_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_FMC_Init+0x94>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_FMC_Init+0x94>)
 80014aa:	2210      	movs	r2, #16
 80014ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_FMC_Init+0x94>)
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_FMC_Init+0x94>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_FMC_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_FMC_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_FMC_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_FMC_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014d6:	2310      	movs	r3, #16
 80014d8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014da:	2310      	movs	r3, #16
 80014dc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014de:	2310      	movs	r3, #16
 80014e0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014e2:	2310      	movs	r3, #16
 80014e4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014e6:	2310      	movs	r3, #16
 80014e8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014ea:	2310      	movs	r3, #16
 80014ec:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_FMC_Init+0x94>)
 80014f4:	f009 f9b8 	bl	800a868 <HAL_SDRAM_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014fe:	f000 f9b3 	bl	8001868 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000d54 	.word	0x24000d54
 8001510:	52004140 	.word	0x52004140

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b090      	sub	sp, #64	; 0x40
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800152a:	4bbf      	ldr	r3, [pc, #764]	; (8001828 <MX_GPIO_Init+0x314>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4abd      	ldr	r2, [pc, #756]	; (8001828 <MX_GPIO_Init+0x314>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4bbb      	ldr	r3, [pc, #748]	; (8001828 <MX_GPIO_Init+0x314>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4bb7      	ldr	r3, [pc, #732]	; (8001828 <MX_GPIO_Init+0x314>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	4ab6      	ldr	r2, [pc, #728]	; (8001828 <MX_GPIO_Init+0x314>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001558:	4bb3      	ldr	r3, [pc, #716]	; (8001828 <MX_GPIO_Init+0x314>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001566:	4bb0      	ldr	r3, [pc, #704]	; (8001828 <MX_GPIO_Init+0x314>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4aae      	ldr	r2, [pc, #696]	; (8001828 <MX_GPIO_Init+0x314>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4bac      	ldr	r3, [pc, #688]	; (8001828 <MX_GPIO_Init+0x314>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001584:	4ba8      	ldr	r3, [pc, #672]	; (8001828 <MX_GPIO_Init+0x314>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4aa7      	ldr	r2, [pc, #668]	; (8001828 <MX_GPIO_Init+0x314>)
 800158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4ba4      	ldr	r3, [pc, #656]	; (8001828 <MX_GPIO_Init+0x314>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4ba1      	ldr	r3, [pc, #644]	; (8001828 <MX_GPIO_Init+0x314>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4a9f      	ldr	r2, [pc, #636]	; (8001828 <MX_GPIO_Init+0x314>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4b9d      	ldr	r3, [pc, #628]	; (8001828 <MX_GPIO_Init+0x314>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b99      	ldr	r3, [pc, #612]	; (8001828 <MX_GPIO_Init+0x314>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	4a98      	ldr	r2, [pc, #608]	; (8001828 <MX_GPIO_Init+0x314>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d0:	4b95      	ldr	r3, [pc, #596]	; (8001828 <MX_GPIO_Init+0x314>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	4b92      	ldr	r3, [pc, #584]	; (8001828 <MX_GPIO_Init+0x314>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	4a90      	ldr	r2, [pc, #576]	; (8001828 <MX_GPIO_Init+0x314>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ee:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <MX_GPIO_Init+0x314>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015fc:	4b8a      	ldr	r3, [pc, #552]	; (8001828 <MX_GPIO_Init+0x314>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	4a89      	ldr	r2, [pc, #548]	; (8001828 <MX_GPIO_Init+0x314>)
 8001604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160c:	4b86      	ldr	r3, [pc, #536]	; (8001828 <MX_GPIO_Init+0x314>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b83      	ldr	r3, [pc, #524]	; (8001828 <MX_GPIO_Init+0x314>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a81      	ldr	r2, [pc, #516]	; (8001828 <MX_GPIO_Init+0x314>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <MX_GPIO_Init+0x314>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001638:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <MX_GPIO_Init+0x314>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <MX_GPIO_Init+0x314>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001648:	4b77      	ldr	r3, [pc, #476]	; (8001828 <MX_GPIO_Init+0x314>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4b74      	ldr	r3, [pc, #464]	; (8001828 <MX_GPIO_Init+0x314>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a72      	ldr	r2, [pc, #456]	; (8001828 <MX_GPIO_Init+0x314>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b70      	ldr	r3, [pc, #448]	; (8001828 <MX_GPIO_Init+0x314>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167a:	486c      	ldr	r0, [pc, #432]	; (800182c <MX_GPIO_Init+0x318>)
 800167c:	f003 fe46 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f241 0104 	movw	r1, #4100	; 0x1004
 8001686:	486a      	ldr	r0, [pc, #424]	; (8001830 <MX_GPIO_Init+0x31c>)
 8001688:	f003 fe40 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2104      	movs	r1, #4
 8001690:	4868      	ldr	r0, [pc, #416]	; (8001834 <MX_GPIO_Init+0x320>)
 8001692:	f003 fe3b 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016a8:	2303      	movs	r3, #3
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b0:	4619      	mov	r1, r3
 80016b2:	4861      	ldr	r0, [pc, #388]	; (8001838 <MX_GPIO_Init+0x324>)
 80016b4:	f003 fc62 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c8:	4619      	mov	r1, r3
 80016ca:	485c      	ldr	r0, [pc, #368]	; (800183c <MX_GPIO_Init+0x328>)
 80016cc:	f003 fc56 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016d0:	2330      	movs	r3, #48	; 0x30
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016e0:	230a      	movs	r3, #10
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4855      	ldr	r0, [pc, #340]	; (8001840 <MX_GPIO_Init+0x32c>)
 80016ec:	f003 fc46 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80016f0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	484f      	ldr	r0, [pc, #316]	; (8001844 <MX_GPIO_Init+0x330>)
 8001706:	f003 fc39 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	484a      	ldr	r0, [pc, #296]	; (8001848 <MX_GPIO_Init+0x334>)
 8001720:	f003 fc2c 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001736:	2301      	movs	r3, #1
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4840      	ldr	r0, [pc, #256]	; (8001844 <MX_GPIO_Init+0x330>)
 8001742:	f003 fc1b 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001756:	2306      	movs	r3, #6
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	483a      	ldr	r0, [pc, #232]	; (800184c <MX_GPIO_Init+0x338>)
 8001762:	f003 fc0b 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	482b      	ldr	r0, [pc, #172]	; (800182c <MX_GPIO_Init+0x318>)
 8001780:	f003 fbfc 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001784:	2304      	movs	r3, #4
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001788:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	482c      	ldr	r0, [pc, #176]	; (800184c <MX_GPIO_Init+0x338>)
 800179a:	f003 fbef 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800179e:	2301      	movs	r3, #1
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	4827      	ldr	r0, [pc, #156]	; (8001850 <MX_GPIO_Init+0x33c>)
 80017b2:	f003 fbe3 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80017b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <MX_GPIO_Init+0x324>)
 80017ce:	f003 fbd5 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80017e2:	2309      	movs	r3, #9
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4815      	ldr	r0, [pc, #84]	; (8001844 <MX_GPIO_Init+0x330>)
 80017ee:	f003 fbc5 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80017f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <MX_GPIO_Init+0x31c>)
 800180c:	f003 fbb6 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001810:	2304      	movs	r3, #4
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	e015      	b.n	8001854 <MX_GPIO_Init+0x340>
 8001828:	58024400 	.word	0x58024400
 800182c:	58022000 	.word	0x58022000
 8001830:	58020400 	.word	0x58020400
 8001834:	58022400 	.word	0x58022400
 8001838:	58021c00 	.word	0x58021c00
 800183c:	58020c00 	.word	0x58020c00
 8001840:	58021000 	.word	0x58021000
 8001844:	58020000 	.word	0x58020000
 8001848:	58020800 	.word	0x58020800
 800184c:	58021800 	.word	0x58021800
 8001850:	58022800 	.word	0x58022800
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <MX_GPIO_Init+0x350>)
 8001856:	f003 fb91 	bl	8004f7c <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	58022400 	.word	0x58022400

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_MspInit+0x30>)
 800187c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x30>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x30>)
 800188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58024400 	.word	0x58024400

080018a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b090      	sub	sp, #64	; 0x40
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a72      	ldr	r2, [pc, #456]	; (8001a90 <HAL_ADC_MspInit+0x1e8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d14e      	bne.n	8001968 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a70      	ldr	r2, [pc, #448]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 80018d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10e      	bne.n	80018fa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018dc:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018e2:	4a6d      	ldr	r2, [pc, #436]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018e4:	f043 0320 	orr.w	r3, r3, #32
 80018e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001928:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001936:	2301      	movs	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4854      	ldr	r0, [pc, #336]	; (8001a9c <HAL_ADC_MspInit+0x1f4>)
 800194a:	f003 fb17 	bl	8004f7c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800194e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001952:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001956:	f001 fa01 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800195a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800195e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001962:	f001 f9fb 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001966:	e08f      	b.n	8001a88 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_ADC_MspInit+0x1f8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d133      	bne.n	80019da <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001972:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 800197a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800197c:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <HAL_ADC_MspInit+0x1ec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10e      	bne.n	80019a2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001984:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198a:	4a43      	ldr	r2, [pc, #268]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001994:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019c0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019c8:	f001 f9c8 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019d0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019d4:	f001 f9c2 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
}
 80019d8:	e056      	b.n	8001a88 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <HAL_ADC_MspInit+0x1fc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d151      	bne.n	8001a88 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	4a2b      	ldr	r2, [pc, #172]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a0a:	f043 0320 	orr.w	r3, r3, #32
 8001a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0x1f0>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a44:	2303      	movs	r3, #3
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	4815      	ldr	r0, [pc, #84]	; (8001aa8 <HAL_ADC_MspInit+0x200>)
 8001a54:	f003 fa92 	bl	8004f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <HAL_ADC_MspInit+0x1f4>)
 8001a6c:	f003 fa86 	bl	8004f7c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a70:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a74:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a78:	f001 f970 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a80:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a84:	f001 f96a 	bl	8002d5c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a88:	bf00      	nop
 8001a8a:	3740      	adds	r7, #64	; 0x40
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40022000 	.word	0x40022000
 8001a94:	24000eb0 	.word	0x24000eb0
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020800 	.word	0x58020800
 8001aa0:	40022100 	.word	0x40022100
 8001aa4:	58026000 	.word	0x58026000
 8001aa8:	58021400 	.word	0x58021400

08001aac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b092      	sub	sp, #72	; 0x48
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a87      	ldr	r2, [pc, #540]	; (8001ce8 <HAL_ETH_MspInit+0x23c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	f040 8108 	bne.w	8001ce0 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ad0:	4b86      	ldr	r3, [pc, #536]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ad6:	4a85      	ldr	r2, [pc, #532]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001adc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ae0:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001aee:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af4:	4a7d      	ldr	r2, [pc, #500]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b0c:	4b77      	ldr	r3, [pc, #476]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b12:	4a76      	ldr	r2, [pc, #472]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2a:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b66:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	4a41      	ldr	r2, [pc, #260]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_ETH_MspInit+0x240>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c16:	4619      	mov	r1, r3
 8001c18:	4835      	ldr	r0, [pc, #212]	; (8001cf0 <HAL_ETH_MspInit+0x244>)
 8001c1a:	f003 f9af 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2e:	230b      	movs	r3, #11
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	4619      	mov	r1, r3
 8001c38:	482e      	ldr	r0, [pc, #184]	; (8001cf4 <HAL_ETH_MspInit+0x248>)
 8001c3a:	f003 f99f 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c50:	230b      	movs	r3, #11
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4827      	ldr	r0, [pc, #156]	; (8001cf8 <HAL_ETH_MspInit+0x24c>)
 8001c5c:	f003 f98e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001c60:	233e      	movs	r3, #62	; 0x3e
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c70:	230b      	movs	r3, #11
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4820      	ldr	r0, [pc, #128]	; (8001cfc <HAL_ETH_MspInit+0x250>)
 8001c7c:	f003 f97e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001c80:	230c      	movs	r3, #12
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c90:	230b      	movs	r3, #11
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4819      	ldr	r0, [pc, #100]	; (8001d00 <HAL_ETH_MspInit+0x254>)
 8001c9c:	f003 f96e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001ca0:	2386      	movs	r3, #134	; 0x86
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cb0:	230b      	movs	r3, #11
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <HAL_ETH_MspInit+0x258>)
 8001cbc:	f003 f95e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd0:	230b      	movs	r3, #11
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480b      	ldr	r0, [pc, #44]	; (8001d08 <HAL_ETH_MspInit+0x25c>)
 8001cdc:	f003 f94e 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3748      	adds	r7, #72	; 0x48
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40028000 	.word	0x40028000
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58021800 	.word	0x58021800
 8001cf4:	58021000 	.word	0x58021000
 8001cf8:	58022000 	.word	0x58022000
 8001cfc:	58020800 	.word	0x58020800
 8001d00:	58021c00 	.word	0x58021c00
 8001d04:	58020000 	.word	0x58020000
 8001d08:	58020400 	.word	0x58020400

08001d0c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0bc      	sub	sp, #240	; 0xf0
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	22c0      	movs	r2, #192	; 0xc0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00a fc7f 	bl	800c630 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_FDCAN_MspInit+0x188>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d151      	bne.n	8001de0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	4618      	mov	r0, r3
 8001d56:	f005 fc8d 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001d60:	f7ff fd82 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001d6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d7c:	4a47      	ldr	r2, [pc, #284]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001db2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dcc:	2309      	movs	r3, #9
 8001dce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4831      	ldr	r0, [pc, #196]	; (8001ea0 <HAL_FDCAN_MspInit+0x194>)
 8001dda:	f003 f8cf 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001dde:	e055      	b.n	8001e8c <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_FDCAN_MspInit+0x198>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d150      	bne.n	8001e8c <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001df6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fc36 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001e0e:	f7ff fd2b 	bl	8001868 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_FDCAN_MspInit+0x18c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10e      	bne.n	8001e42 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_FDCAN_MspInit+0x190>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001e60:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e84:	4619      	mov	r1, r3
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <HAL_FDCAN_MspInit+0x19c>)
 8001e88:	f003 f878 	bl	8004f7c <HAL_GPIO_Init>
}
 8001e8c:	bf00      	nop
 8001e8e:	37f0      	adds	r7, #240	; 0xf0
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	4000a000 	.word	0x4000a000
 8001e98:	24000eb4 	.word	0x24000eb4
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58021c00 	.word	0x58021c00
 8001ea4:	4000a400 	.word	0x4000a400
 8001ea8:	58020400 	.word	0x58020400

08001eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0ba      	sub	sp, #232	; 0xe8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	22c0      	movs	r2, #192	; 0xc0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00a fbaf 	bl	800c630 <memset>
  if(hi2c->Instance==I2C4)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_I2C_MspInit+0xc8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d146      	bne.n	8001f6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001edc:	f04f 0210 	mov.w	r2, #16
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 fbbe 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001efe:	f7ff fcb3 	bl	8001868 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <HAL_I2C_MspInit+0xd0>)
 8001f48:	f003 f818 	bl	8004f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_I2C_MspInit+0xcc>)
 8001f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	37e8      	adds	r7, #232	; 0xe8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58001c00 	.word	0x58001c00
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020c00 	.word	0x58020c00

08001f80 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0be      	sub	sp, #248	; 0xf8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	22c0      	movs	r2, #192	; 0xc0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00a fb45 	bl	800c630 <memset>
  if(hltdc->Instance==LTDC)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_LTDC_MspInit+0x1c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	f040 80c4 	bne.w	800213a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 fb44 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001ff2:	f7ff fc39 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ff6:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8001ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 800201c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002032:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a43      	ldr	r2, [pc, #268]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_LTDC_MspInit+0x1c8>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800208c:	23fc      	movs	r3, #252	; 0xfc
 800208e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a4:	230e      	movs	r3, #14
 80020a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_LTDC_MspInit+0x1cc>)
 80020b2:	f002 ff63 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020b6:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d0:	230e      	movs	r3, #14
 80020d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020da:	4619      	mov	r1, r3
 80020dc:	481c      	ldr	r0, [pc, #112]	; (8002150 <HAL_LTDC_MspInit+0x1d0>)
 80020de:	f002 ff4d 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80020e2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80020e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020fc:	230e      	movs	r3, #14
 80020fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002102:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002106:	4619      	mov	r1, r3
 8002108:	4812      	ldr	r0, [pc, #72]	; (8002154 <HAL_LTDC_MspInit+0x1d4>)
 800210a:	f002 ff37 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002128:	230e      	movs	r3, #14
 800212a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800212e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002132:	4619      	mov	r1, r3
 8002134:	4808      	ldr	r0, [pc, #32]	; (8002158 <HAL_LTDC_MspInit+0x1d8>)
 8002136:	f002 ff21 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	37f8      	adds	r7, #248	; 0xf8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	50001000 	.word	0x50001000
 8002148:	58024400 	.word	0x58024400
 800214c:	58022800 	.word	0x58022800
 8002150:	58022000 	.word	0x58022000
 8002154:	58022400 	.word	0x58022400
 8002158:	58021c00 	.word	0x58021c00

0800215c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0bc      	sub	sp, #240	; 0xf0
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	22c0      	movs	r2, #192	; 0xc0
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00a fa57 	bl	800c630 <memset>
  if(hqspi->Instance==QUADSPI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_QSPI_MspInit+0x184>)
 8002188:	4293      	cmp	r3, r2
 800218a:	f040 80a5 	bne.w	80022d8 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800218e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800219a:	2300      	movs	r3, #0
 800219c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 fa66 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80021ae:	f7ff fb5b 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021b8:	4a4a      	ldr	r2, [pc, #296]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021be:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 80021f6:	f043 0320 	orr.w	r3, r3, #32
 80021fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_QSPI_MspInit+0x188>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002242:	230a      	movs	r3, #10
 8002244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800224c:	4619      	mov	r1, r3
 800224e:	4826      	ldr	r0, [pc, #152]	; (80022e8 <HAL_QSPI_MspInit+0x18c>)
 8002250:	f002 fe94 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002254:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800226e:	2309      	movs	r3, #9
 8002270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002278:	4619      	mov	r1, r3
 800227a:	481c      	ldr	r0, [pc, #112]	; (80022ec <HAL_QSPI_MspInit+0x190>)
 800227c:	f002 fe7e 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800229a:	230a      	movs	r3, #10
 800229c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a4:	4619      	mov	r1, r3
 80022a6:	4811      	ldr	r0, [pc, #68]	; (80022ec <HAL_QSPI_MspInit+0x190>)
 80022a8:	f002 fe68 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022c6:	2309      	movs	r3, #9
 80022c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_QSPI_MspInit+0x194>)
 80022d4:	f002 fe52 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	37f0      	adds	r7, #240	; 0xf0
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	52005000 	.word	0x52005000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58020400 	.word	0x58020400
 80022ec:	58021400 	.word	0x58021400
 80022f0:	58020c00 	.word	0x58020c00

080022f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0b2      	sub	sp, #200	; 0xc8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	22c0      	movs	r2, #192	; 0xc0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f00a f993 	bl	800c630 <memset>
  if(hrtc->Instance==RTC)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_RTC_MspInit+0x5c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d119      	bne.n	8002348 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002314:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	4618      	mov	r0, r3
 800232e:	f005 f9a1 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002338:	f7ff fa96 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RTC_MspInit+0x60>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_RTC_MspInit+0x60>)
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	37c8      	adds	r7, #200	; 0xc8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	58004000 	.word	0x58004000
 8002354:	58024400 	.word	0x58024400

08002358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0bc      	sub	sp, #240	; 0xf0
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002370:	f107 0318 	add.w	r3, r7, #24
 8002374:	22c0      	movs	r2, #192	; 0xc0
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f00a f959 	bl	800c630 <memset>
  if(hspi->Instance==SPI2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a55      	ldr	r2, [pc, #340]	; (80024d8 <HAL_SPI_MspInit+0x180>)
 8002384:	4293      	cmp	r3, r2
 8002386:	f040 80a3 	bne.w	80024d0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800238a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002396:	2300      	movs	r3, #0
 8002398:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 f968 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80023aa:	f7ff fa5d 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023ae:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b4:	4a49      	ldr	r2, [pc, #292]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_SPI_MspInit+0x184>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_SPI_MspInit+0x184>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240e:	4a33      	ldr	r2, [pc, #204]	; (80024dc <HAL_SPI_MspInit+0x184>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_SPI_MspInit+0x184>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002426:	2310      	movs	r3, #16
 8002428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800243e:	2307      	movs	r3, #7
 8002440:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002448:	4619      	mov	r1, r3
 800244a:	4825      	ldr	r0, [pc, #148]	; (80024e0 <HAL_SPI_MspInit+0x188>)
 800244c:	f002 fd96 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002450:	2308      	movs	r3, #8
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002468:	2305      	movs	r3, #5
 800246a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002472:	4619      	mov	r1, r3
 8002474:	481b      	ldr	r0, [pc, #108]	; (80024e4 <HAL_SPI_MspInit+0x18c>)
 8002476:	f002 fd81 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800247a:	2304      	movs	r3, #4
 800247c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002492:	2305      	movs	r3, #5
 8002494:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002498:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800249c:	4619      	mov	r1, r3
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <HAL_SPI_MspInit+0x190>)
 80024a0:	f002 fd6c 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024be:	2305      	movs	r3, #5
 80024c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_SPI_MspInit+0x188>)
 80024cc:	f002 fd56 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	37f0      	adds	r7, #240	; 0xf0
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40003800 	.word	0x40003800
 80024dc:	58024400 	.word	0x58024400
 80024e0:	58020400 	.word	0x58020400
 80024e4:	58020c00 	.word	0x58020c00
 80024e8:	58022000 	.word	0x58022000

080024ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0ba      	sub	sp, #232	; 0xe8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	22c0      	movs	r2, #192	; 0xc0
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f00a f88f 	bl	800c630 <memset>
  if(huart->Instance==USART3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_UART_MspInit+0xc8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d146      	bne.n	80025aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800251c:	f04f 0202 	mov.w	r2, #2
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4618      	mov	r0, r3
 8002534:	f005 f89e 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800253e:	f7ff f993 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 800254a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_UART_MspInit+0xcc>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800257e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002598:	2307      	movs	r3, #7
 800259a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_UART_MspInit+0xd0>)
 80025a6:	f002 fce9 	bl	8004f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	37e8      	adds	r7, #232	; 0xe8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004800 	.word	0x40004800
 80025b8:	58024400 	.word	0x58024400
 80025bc:	58020400 	.word	0x58020400

080025c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0ba      	sub	sp, #232	; 0xe8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	22c0      	movs	r2, #192	; 0xc0
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00a f825 	bl	800c630 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_PCD_MspInit+0xec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d159      	bne.n	80026a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f005 f833 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002614:	f7ff f928 	bl	8001868 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002618:	f003 ff7c 	bl	8006514 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800263a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002652:	4619      	mov	r1, r3
 8002654:	4817      	ldr	r0, [pc, #92]	; (80026b4 <HAL_PCD_MspInit+0xf4>)
 8002656:	f002 fc91 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800265a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002674:	230a      	movs	r3, #10
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <HAL_PCD_MspInit+0xf4>)
 8002682:	f002 fc7b 	bl	8004f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 8002688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800268c:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 800268e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002692:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_PCD_MspInit+0xf0>)
 8002698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	37e8      	adds	r7, #232	; 0xe8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40080000 	.word	0x40080000
 80026b0:	58024400 	.word	0x58024400
 80026b4:	58020000 	.word	0x58020000

080026b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0b8      	sub	sp, #224	; 0xe0
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_FMC_MspInit+0x15c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 8099 	bne.w	800280a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80026d8:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <HAL_FMC_MspInit+0x15c>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	22c0      	movs	r2, #192	; 0xc0
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f009 ffa2 	bl	800c630 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80026ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4618      	mov	r0, r3
 8002702:	f004 ffb7 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800270c:	f7ff f8ac 	bl	8001868 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002710:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_FMC_MspInit+0x160>)
 8002712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <HAL_FMC_MspInit+0x160>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002720:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_FMC_MspInit+0x160>)
 8002722:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800272e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002732:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002748:	230c      	movs	r3, #12
 800274a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002752:	4619      	mov	r1, r3
 8002754:	4831      	ldr	r0, [pc, #196]	; (800281c <HAL_FMC_MspInit+0x164>)
 8002756:	f002 fc11 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800275a:	f248 1333 	movw	r3, #33075	; 0x8133
 800275e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002774:	230c      	movs	r3, #12
 8002776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800277a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800277e:	4619      	mov	r1, r3
 8002780:	4827      	ldr	r0, [pc, #156]	; (8002820 <HAL_FMC_MspInit+0x168>)
 8002782:	f002 fbfb 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002786:	f24c 7303 	movw	r3, #50947	; 0xc703
 800278a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a0:	230c      	movs	r3, #12
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027aa:	4619      	mov	r1, r3
 80027ac:	481d      	ldr	r0, [pc, #116]	; (8002824 <HAL_FMC_MspInit+0x16c>)
 80027ae:	f002 fbe5 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80027b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027cc:	230c      	movs	r3, #12
 80027ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027d6:	4619      	mov	r1, r3
 80027d8:	4813      	ldr	r0, [pc, #76]	; (8002828 <HAL_FMC_MspInit+0x170>)
 80027da:	f002 fbcf 	bl	8004f7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027de:	23e0      	movs	r3, #224	; 0xe0
 80027e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027f6:	230c      	movs	r3, #12
 80027f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002800:	4619      	mov	r1, r3
 8002802:	480a      	ldr	r0, [pc, #40]	; (800282c <HAL_FMC_MspInit+0x174>)
 8002804:	f002 fbba 	bl	8004f7c <HAL_GPIO_Init>
 8002808:	e000      	b.n	800280c <HAL_FMC_MspInit+0x154>
    return;
 800280a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800280c:	37e0      	adds	r7, #224	; 0xe0
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	24000eb8 	.word	0x24000eb8
 8002818:	58024400 	.word	0x58024400
 800281c:	58021000 	.word	0x58021000
 8002820:	58021800 	.word	0x58021800
 8002824:	58020c00 	.word	0x58020c00
 8002828:	58021400 	.word	0x58021400
 800282c:	58021c00 	.word	0x58021c00

08002830 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002838:	f7ff ff3e 	bl	80026b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0ba      	sub	sp, #232	; 0xe8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	22c0      	movs	r2, #192	; 0xc0
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f009 feeb 	bl	800c630 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a45      	ldr	r2, [pc, #276]	; (8002974 <HAL_SAI_MspInit+0x130>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d13e      	bne.n	80028e2 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002870:	2300      	movs	r3, #0
 8002872:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4618      	mov	r0, r3
 800287a:	f004 fefb 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002884:	f7fe fff0 	bl	8001868 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_SAI_MspInit+0x134>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_SAI_MspInit+0x138>)
 8002892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002896:	4a39      	ldr	r2, [pc, #228]	; (800297c <HAL_SAI_MspInit+0x138>)
 8002898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_SAI_MspInit+0x138>)
 80028a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80028ae:	4b32      	ldr	r3, [pc, #200]	; (8002978 <HAL_SAI_MspInit+0x134>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_SAI_MspInit+0x134>)
 80028b6:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80028b8:	23f0      	movs	r3, #240	; 0xf0
 80028ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028d0:	230a      	movs	r3, #10
 80028d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028da:	4619      	mov	r1, r3
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <HAL_SAI_MspInit+0x13c>)
 80028de:	f002 fb4d 	bl	8004f7c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a27      	ldr	r2, [pc, #156]	; (8002984 <HAL_SAI_MspInit+0x140>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d13f      	bne.n	800296c <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80028ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4618      	mov	r0, r3
 8002902:	f004 feb7 	bl	8007674 <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 800290c:	f7fe ffac 	bl	8001868 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_SAI_MspInit+0x134>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_SAI_MspInit+0x138>)
 800291a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_SAI_MspInit+0x138>)
 8002920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002924:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_SAI_MspInit+0x138>)
 800292a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800292e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_SAI_MspInit+0x134>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_SAI_MspInit+0x134>)
 800293e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800295a:	230a      	movs	r3, #10
 800295c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002964:	4619      	mov	r1, r3
 8002966:	4808      	ldr	r0, [pc, #32]	; (8002988 <HAL_SAI_MspInit+0x144>)
 8002968:	f002 fb08 	bl	8004f7c <HAL_GPIO_Init>

    }
}
 800296c:	bf00      	nop
 800296e:	37e8      	adds	r7, #232	; 0xe8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40015c04 	.word	0x40015c04
 8002978:	24000ebc 	.word	0x24000ebc
 800297c:	58024400 	.word	0x58024400
 8002980:	58022000 	.word	0x58022000
 8002984:	40015c24 	.word	0x40015c24
 8002988:	58021800 	.word	0x58021800

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <MemManage_Handler+0x4>

0800299e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <UsageFault_Handler+0x4>

080029aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d8:	f000 f95c 	bl	8002c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <_sbrk+0x5c>)
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <_sbrk+0x60>)
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <_sbrk+0x64>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <_sbrk+0x64>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <_sbrk+0x68>)
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d207      	bcs.n	8002a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a10:	f009 fe16 	bl	800c640 <__errno>
 8002a14:	4603      	mov	r3, r0
 8002a16:	220c      	movs	r2, #12
 8002a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e009      	b.n	8002a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <_sbrk+0x64>)
 8002a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	24080000 	.word	0x24080000
 8002a40:	00000400 	.word	0x00000400
 8002a44:	24000ec0 	.word	0x24000ec0
 8002a48:	24001010 	.word	0x24001010

08002a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <SystemInit+0xe4>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <SystemInit+0xe4>)
 8002a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <SystemInit+0xe8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d807      	bhi.n	8002a7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <SystemInit+0xe8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 030f 	bic.w	r3, r3, #15
 8002a74:	4a2f      	ldr	r2, [pc, #188]	; (8002b34 <SystemInit+0xe8>)
 8002a76:	f043 0307 	orr.w	r3, r3, #7
 8002a7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <SystemInit+0xec>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <SystemInit+0xec>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <SystemInit+0xec>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <SystemInit+0xec>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4929      	ldr	r1, [pc, #164]	; (8002b38 <SystemInit+0xec>)
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <SystemInit+0xf0>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <SystemInit+0xe8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <SystemInit+0xe8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 030f 	bic.w	r3, r3, #15
 8002aae:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <SystemInit+0xe8>)
 8002ab0:	f043 0307 	orr.w	r3, r3, #7
 8002ab4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <SystemInit+0xec>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <SystemInit+0xec>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <SystemInit+0xec>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <SystemInit+0xec>)
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <SystemInit+0xf4>)
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <SystemInit+0xec>)
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <SystemInit+0xf8>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <SystemInit+0xec>)
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <SystemInit+0xfc>)
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <SystemInit+0xec>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <SystemInit+0xec>)
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <SystemInit+0xfc>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <SystemInit+0xec>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <SystemInit+0xec>)
 8002aee:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <SystemInit+0xfc>)
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <SystemInit+0xec>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <SystemInit+0xec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <SystemInit+0xec>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <SystemInit+0xec>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <SystemInit+0x100>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <SystemInit+0x104>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b16:	d202      	bcs.n	8002b1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <SystemInit+0x108>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <SystemInit+0x10c>)
 8002b20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00
 8002b34:	52002000 	.word	0x52002000
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b40:	02020200 	.word	0x02020200
 8002b44:	01ff0000 	.word	0x01ff0000
 8002b48:	01010280 	.word	0x01010280
 8002b4c:	5c001000 	.word	0x5c001000
 8002b50:	ffff0000 	.word	0xffff0000
 8002b54:	51008108 	.word	0x51008108
 8002b58:	52004000 	.word	0x52004000

08002b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b60:	f7ff ff74 	bl	8002a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b8a:	f009 fd5f 	bl	800c64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8e:	f7fd fd7d 	bl	800068c <main>
  bx  lr
 8002b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b9c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002ba0:	0800d06c 	.word	0x0800d06c
  ldr r2, =_sbss
 8002ba4:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002ba8:	24001010 	.word	0x24001010

08002bac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC3_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	f001 fa26 	bl	8004008 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bbc:	f004 fb84 	bl	80072c8 <HAL_RCC_GetSysClockFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_Init+0x68>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	4913      	ldr	r1, [pc, #76]	; (8002c1c <HAL_Init+0x6c>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_Init+0x68>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_Init+0x6c>)
 8002be4:	5cd3      	ldrb	r3, [r2, r3]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <HAL_Init+0x70>)
 8002bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_Init+0x74>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f000 f814 	bl	8002c28 <HAL_InitTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e002      	b.n	8002c10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0a:	f7fe fe33 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	0800cff0 	.word	0x0800cff0
 8002c20:	24000004 	.word	0x24000004
 8002c24:	24000000 	.word	0x24000000

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_InitTick+0x60>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e021      	b.n	8002c80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_InitTick+0x64>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_InitTick+0x60>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f9fd 	bl	8004052 <HAL_SYSTICK_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00e      	b.n	8002c80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b0f      	cmp	r3, #15
 8002c66:	d80a      	bhi.n	8002c7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f001 f9d5 	bl	800401e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <HAL_InitTick+0x68>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2400000c 	.word	0x2400000c
 8002c8c:	24000000 	.word	0x24000000
 8002c90:	24000008 	.word	0x24000008

08002c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_IncTick+0x20>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x24>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_IncTick+0x24>)
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	2400000c 	.word	0x2400000c
 8002cb8:	24000ec4 	.word	0x24000ec4

08002cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_GetTick+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	24000ec4 	.word	0x24000ec4

08002cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7ff ffee 	bl	8002cbc <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d005      	beq.n	8002cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_Delay+0x44>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cfa:	bf00      	nop
 8002cfc:	f7ff ffde 	bl	8002cbc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d8f7      	bhi.n	8002cfc <HAL_Delay+0x28>
  {
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2400000c 	.word	0x2400000c

08002d1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_GetREVID+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0c1b      	lsrs	r3, r3, #16
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	5c001000 	.word	0x5c001000

08002d34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	58000400 	.word	0x58000400

08002d5c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	58000400 	.word	0x58000400

08002d88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	611a      	str	r2, [r3, #16]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3360      	adds	r3, #96	; 0x60
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3330      	adds	r3, #48	; 0x30
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	211f      	movs	r1, #31
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 011f 	and.w	r1, r3, #31
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3314      	adds	r3, #20
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0e5b      	lsrs	r3, r3, #25
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	0d1b      	lsrs	r3, r3, #20
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2107      	movs	r1, #7
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	401a      	ands	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0d1b      	lsrs	r3, r3, #20
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	431a      	orrs	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0318 	and.w	r3, r3, #24
 8002f6a:	4908      	ldr	r1, [pc, #32]	; (8002f8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f6c:	40d9      	lsrs	r1, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	400b      	ands	r3, r1
 8002f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	000fffff 	.word	0x000fffff

08002f90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6093      	str	r3, [r2, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	5fffffc0 	.word	0x5fffffc0

08002fb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	6fffffc0 	.word	0x6fffffc0

08003004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003018:	d101      	bne.n	800301e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <LL_ADC_IsEnabled+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_ADC_IsEnabled+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b04      	cmp	r3, #4
 8003064:	d101      	bne.n	800306a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d101      	bne.n	8003090 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e18f      	b.n	80033da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fe fbed 	bl	80018a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff67 	bl	8002fb4 <LL_ADC_IsDeepPowerDownEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff4d 	bl	8002f90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff82 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d114      	bne.n	8003130 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff66 	bl	8002fdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003110:	4b87      	ldr	r3, [pc, #540]	; (8003330 <HAL_ADC_Init+0x290>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_ADC_Init+0x294>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	3301      	adds	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003122:	e002      	b.n	800312a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f9      	bne.n	8003124 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff65 	bl	8003004 <LL_ADC_IsInternalRegulatorEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff76 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 8003166:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 8129 	bne.w	80033c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 8125 	bne.w	80033c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003186:	f043 0202 	orr.w	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff4a 	bl	800302c <LL_ADC_IsEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d136      	bne.n	800320c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a65      	ldr	r2, [pc, #404]	; (8003338 <HAL_ADC_Init+0x298>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_ADC_Init+0x112>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a63      	ldr	r2, [pc, #396]	; (800333c <HAL_ADC_Init+0x29c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10e      	bne.n	80031d0 <HAL_ADC_Init+0x130>
 80031b2:	4861      	ldr	r0, [pc, #388]	; (8003338 <HAL_ADC_Init+0x298>)
 80031b4:	f7ff ff3a 	bl	800302c <LL_ADC_IsEnabled>
 80031b8:	4604      	mov	r4, r0
 80031ba:	4860      	ldr	r0, [pc, #384]	; (800333c <HAL_ADC_Init+0x29c>)
 80031bc:	f7ff ff36 	bl	800302c <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4323      	orrs	r3, r4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_ADC_Init+0x142>
 80031d0:	485b      	ldr	r0, [pc, #364]	; (8003340 <HAL_ADC_Init+0x2a0>)
 80031d2:	f7ff ff2b 	bl	800302c <LL_ADC_IsEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_ADC_Init+0x298>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_ADC_Init+0x15a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_ADC_Init+0x29c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x15e>
 80031fa:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_ADC_Init+0x2a4>)
 80031fc:	e000      	b.n	8003200 <HAL_ADC_Init+0x160>
 80031fe:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_ADC_Init+0x2a8>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7ff fdbe 	bl	8002d88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800320c:	f7ff fd86 	bl	8002d1c <HAL_GetREVID>
 8003210:	4603      	mov	r3, r0
 8003212:	f241 0203 	movw	r2, #4099	; 0x1003
 8003216:	4293      	cmp	r3, r2
 8003218:	d914      	bls.n	8003244 <HAL_ADC_Init+0x1a4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d110      	bne.n	8003244 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7d5b      	ldrb	r3, [r3, #21]
 8003226:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800322c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003232:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7f1b      	ldrb	r3, [r3, #28]
 8003238:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800323a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800323c:	f043 030c 	orr.w	r3, r3, #12
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e00d      	b.n	8003260 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7d5b      	ldrb	r3, [r3, #21]
 8003248:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800324e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003254:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7f1b      	ldrb	r3, [r3, #28]
 800325a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7f1b      	ldrb	r3, [r3, #28]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	3b01      	subs	r3, #1
 800326e:	045b      	lsls	r3, r3, #17
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_ADC_Init+0x2ac>)
 800329a:	4013      	ands	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	69b9      	ldr	r1, [r7, #24]
 80032a2:	430b      	orrs	r3, r1
 80032a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fed1 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fede 	bl	8003078 <LL_ADC_INJ_IsConversionOngoing>
 80032bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d15f      	bne.n	8003384 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d15c      	bne.n	8003384 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7d1b      	ldrb	r3, [r3, #20]
 80032ce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_ADC_Init+0x2b0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d130      	bne.n	8003358 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_ADC_Init+0x2b4>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330a:	3a01      	subs	r2, #1
 800330c:	0411      	lsls	r1, r2, #16
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800331e:	430a      	orrs	r2, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	e01c      	b.n	8003368 <HAL_ADC_Init+0x2c8>
 800332e:	bf00      	nop
 8003330:	24000000 	.word	0x24000000
 8003334:	053e2d63 	.word	0x053e2d63
 8003338:	40022000 	.word	0x40022000
 800333c:	40022100 	.word	0x40022100
 8003340:	58026000 	.word	0x58026000
 8003344:	40022300 	.word	0x40022300
 8003348:	58026300 	.word	0x58026300
 800334c:	fff0c003 	.word	0xfff0c003
 8003350:	ffffbffc 	.word	0xffffbffc
 8003354:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fb80 	bl	8003a84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10c      	bne.n	80033a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f023 010f 	bic.w	r1, r3, #15
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	1e5a      	subs	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
 80033a4:	e007      	b.n	80033b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 020f 	bic.w	r2, r2, #15
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
 80033c6:	e007      	b.n	80033d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop

080033e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b0a1      	sub	sp, #132	; 0x84
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a9d      	ldr	r2, [pc, #628]	; (8003674 <HAL_ADC_ConfigChannel+0x290>)
 80033fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x2a>
 800340a:	2302      	movs	r3, #2
 800340c:	e321      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x66e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe19 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8306 	bne.w	8003a34 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x62>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	0e9b      	lsrs	r3, r3, #26
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2201      	movs	r2, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	e016      	b.n	8003474 <HAL_ADC_ConfigChannel+0x90>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003456:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e003      	b.n	800346a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2201      	movs	r2, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	69d1      	ldr	r1, [r2, #28]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	430b      	orrs	r3, r1
 8003480:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f7ff fd02 	bl	8002e98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fdda 	bl	8003052 <LL_ADC_REG_IsConversionOngoing>
 800349e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fde7 	bl	8003078 <LL_ADC_INJ_IsConversionOngoing>
 80034aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 80b3 	bne.w	800361a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 80af 	bne.w	800361a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f7ff fd11 	bl	8002ef0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034ce:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_ADC_ConfigChannel+0x294>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034da:	d10b      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x110>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	e01d      	b.n	8003530 <HAL_ADC_ConfigChannel+0x14c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_ADC_ConfigChannel+0x136>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	e00a      	b.n	8003530 <HAL_ADC_ConfigChannel+0x14c>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d027      	beq.n	800358a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6919      	ldr	r1, [r3, #16]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003548:	f7ff fc52 	bl	8002df0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6919      	ldr	r1, [r3, #16]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	7e5b      	ldrb	r3, [r3, #25]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x17e>
 800355c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003560:	e000      	b.n	8003564 <HAL_ADC_ConfigChannel+0x180>
 8003562:	2300      	movs	r3, #0
 8003564:	461a      	mov	r2, r3
 8003566:	f7ff fc7c 	bl	8002e62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	7e1b      	ldrb	r3, [r3, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x19c>
 800357a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800357e:	e000      	b.n	8003582 <HAL_ADC_ConfigChannel+0x19e>
 8003580:	2300      	movs	r3, #0
 8003582:	461a      	mov	r2, r3
 8003584:	f7ff fc54 	bl	8002e30 <LL_ADC_SetDataRightShift>
 8003588:	e047      	b.n	800361a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	429a      	cmp	r2, r3
 800359c:	d107      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	429a      	cmp	r2, r3
 80035c0:	d107      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	069b      	lsls	r3, r3, #26
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d107      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	069b      	lsls	r3, r3, #26
 8003606:	429a      	cmp	r2, r3
 8003608:	d107      	bne.n	800361a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003618:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fd04 	bl	800302c <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 820d 	bne.w	8003a46 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fc85 	bl	8002f48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_ADC_ConfigChannel+0x290>)
 8003644:	4293      	cmp	r3, r2
 8003646:	f040 8133 	bne.w	80038b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003656:	2b00      	cmp	r3, #0
 8003658:	d110      	bne.n	800367c <HAL_ADC_ConfigChannel+0x298>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2b09      	cmp	r3, #9
 8003668:	bf94      	ite	ls
 800366a:	2301      	movls	r3, #1
 800366c:	2300      	movhi	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e01e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x2cc>
 8003672:	bf00      	nop
 8003674:	47ff0000 	.word	0x47ff0000
 8003678:	5c001000 	.word	0x5c001000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e003      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	bf94      	ite	ls
 80036aa:	2301      	movls	r3, #1
 80036ac:	2300      	movhi	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d079      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x2ec>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ce:	e015      	b.n	80036fc <HAL_ADC_ConfigChannel+0x318>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_ADC_ConfigChannel+0x338>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	e017      	b.n	800374c <HAL_ADC_ConfigChannel+0x368>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800372e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x38e>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	3301      	adds	r3, #1
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	051b      	lsls	r3, r3, #20
 8003770:	e018      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x3c0>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800378a:	2320      	movs	r3, #32
 800378c:	e003      	b.n	8003796 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a4:	430b      	orrs	r3, r1
 80037a6:	e07e      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x3e0>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	3301      	adds	r3, #1
 80037bc:	069b      	lsls	r3, r3, #26
 80037be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c2:	e015      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x40c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x42c>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	3301      	adds	r3, #1
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	e017      	b.n	8003840 <HAL_ADC_ConfigChannel+0x45c>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	61bb      	str	r3, [r7, #24]
  return result;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_ADC_ConfigChannel+0x488>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	3301      	adds	r3, #1
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	3b1e      	subs	r3, #30
 8003864:	051b      	lsls	r3, r3, #20
 8003866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386a:	e01b      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x4c0>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	60fb      	str	r3, [r7, #12]
  return result;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e003      	b.n	8003890 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3301      	adds	r3, #1
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	3b1e      	subs	r3, #30
 800389e:	051b      	lsls	r3, r3, #20
 80038a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a4:	430b      	orrs	r3, r1
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7ff fb20 	bl	8002ef0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f280 80c6 	bge.w	8003a46 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_ConfigChannel+0x4ea>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x4ee>
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 80038d0:	e000      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x4f0>
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fa7d 	bl	8002dd4 <LL_ADC_GetCommonPathInternalCh>
 80038da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_ADC_ConfigChannel+0x50c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5d      	ldr	r2, [pc, #372]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10e      	bne.n	800390e <HAL_ADC_ConfigChannel+0x52a>
 80038f0:	485a      	ldr	r0, [pc, #360]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80038f2:	f7ff fb9b 	bl	800302c <LL_ADC_IsEnabled>
 80038f6:	4604      	mov	r4, r0
 80038f8:	4859      	ldr	r0, [pc, #356]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80038fa:	f7ff fb97 	bl	800302c <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	4323      	orrs	r3, r4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e008      	b.n	8003920 <HAL_ADC_ConfigChannel+0x53c>
 800390e:	4857      	ldr	r0, [pc, #348]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 8003910:	f7ff fb8c 	bl	800302c <LL_ADC_IsEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d07d      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a51      	ldr	r2, [pc, #324]	; (8003a70 <HAL_ADC_ConfigChannel+0x68c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d130      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x5ac>
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12b      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 800393e:	4293      	cmp	r3, r2
 8003940:	f040 8081 	bne.w	8003a46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a44      	ldr	r2, [pc, #272]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x574>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x578>
 8003958:	4a42      	ldr	r2, [pc, #264]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 800395a:	e000      	b.n	800395e <HAL_ADC_ConfigChannel+0x57a>
 800395c:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7ff fa21 	bl	8002dae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_ADC_ConfigChannel+0x690>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <HAL_ADC_ConfigChannel+0x694>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003980:	e002      	b.n	8003988 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3b01      	subs	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f9      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800398e:	e05a      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a39      	ldr	r2, [pc, #228]	; (8003a7c <HAL_ADC_ConfigChannel+0x698>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d11e      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x5f4>
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d119      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a30      	ldr	r2, [pc, #192]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d14b      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_ADC_ConfigChannel+0x5de>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x5e2>
 80039c2:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 80039c4:	e000      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x5e4>
 80039c6:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7ff f9ec 	bl	8002dae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d6:	e036      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <HAL_ADC_ConfigChannel+0x69c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d131      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d12c      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_ADC_ConfigChannel+0x688>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d127      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_ADC_ConfigChannel+0x678>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x626>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <HAL_ADC_ConfigChannel+0x67c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x62a>
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_ADC_ConfigChannel+0x680>)
 8003a0c:	e000      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x62c>
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_ADC_ConfigChannel+0x684>)
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7ff f9c8 	bl	8002dae <LL_ADC_SetCommonPathInternalCh>
 8003a1e:	e012      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a32:	e008      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3784      	adds	r7, #132	; 0x84
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40022100 	.word	0x40022100
 8003a64:	40022300 	.word	0x40022300
 8003a68:	58026300 	.word	0x58026300
 8003a6c:	58026000 	.word	0x58026000
 8003a70:	cb840000 	.word	0xcb840000
 8003a74:	24000000 	.word	0x24000000
 8003a78:	053e2d63 	.word	0x053e2d63
 8003a7c:	c7520000 	.word	0xc7520000
 8003a80:	cfb80000 	.word	0xcfb80000

08003a84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7a      	ldr	r2, [pc, #488]	; (8003c7c <ADC_ConfigureBoostMode+0x1f8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <ADC_ConfigureBoostMode+0x1c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a79      	ldr	r2, [pc, #484]	; (8003c80 <ADC_ConfigureBoostMode+0x1fc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <ADC_ConfigureBoostMode+0x30>
 8003aa0:	4b78      	ldr	r3, [pc, #480]	; (8003c84 <ADC_ConfigureBoostMode+0x200>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e008      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x42>
 8003ab4:	4b74      	ldr	r3, [pc, #464]	; (8003c88 <ADC_ConfigureBoostMode+0x204>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01c      	beq.n	8003b04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003aca:	f003 fd77 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8003ace:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad8:	d010      	beq.n	8003afc <ADC_ConfigureBoostMode+0x78>
 8003ada:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ade:	d873      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x144>
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d002      	beq.n	8003aec <ADC_ConfigureBoostMode+0x68>
 8003ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aea:	d16d      	bne.n	8003bc8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	60fb      	str	r3, [r7, #12]
        break;
 8003afa:	e068      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	60fb      	str	r3, [r7, #12]
        break;
 8003b02:	e064      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f004 ffbc 	bl	8008a88 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b1a:	d051      	beq.n	8003bc0 <ADC_ConfigureBoostMode+0x13c>
 8003b1c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b20:	d854      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b22:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b26:	d047      	beq.n	8003bb8 <ADC_ConfigureBoostMode+0x134>
 8003b28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b2c:	d84e      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b32:	d03d      	beq.n	8003bb0 <ADC_ConfigureBoostMode+0x12c>
 8003b34:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b38:	d848      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3e:	d033      	beq.n	8003ba8 <ADC_ConfigureBoostMode+0x124>
 8003b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b44:	d842      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b4a:	d029      	beq.n	8003ba0 <ADC_ConfigureBoostMode+0x11c>
 8003b4c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b50:	d83c      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b56:	d01a      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b5c:	d836      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b5e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b62:	d014      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b64:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b68:	d830      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6e:	d00e      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b74:	d82a      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b7a:	d008      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b80:	d824      	bhi.n	8003bcc <ADC_ConfigureBoostMode+0x148>
 8003b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b86:	d002      	beq.n	8003b8e <ADC_ConfigureBoostMode+0x10a>
 8003b88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b8c:	d11e      	bne.n	8003bcc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	60fb      	str	r3, [r7, #12]
        break;
 8003b9e:	e016      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]
        break;
 8003ba6:	e012      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	60fb      	str	r3, [r7, #12]
        break;
 8003bae:	e00e      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	60fb      	str	r3, [r7, #12]
        break;
 8003bb6:	e00a      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	09db      	lsrs	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
        break;
 8003bbe:	e006      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	60fb      	str	r3, [r7, #12]
        break;
 8003bc6:	e002      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
        break;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bcc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003bce:	f7ff f8a5 	bl	8002d1c <HAL_GetREVID>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d815      	bhi.n	8003c08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <ADC_ConfigureBoostMode+0x208>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d908      	bls.n	8003bf6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bf4:	e03e      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	e035      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <ADC_ConfigureBoostMode+0x20c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d808      	bhi.n	8003c28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	e025      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <ADC_ConfigureBoostMode+0x210>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d80a      	bhi.n	8003c46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	e016      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <ADC_ConfigureBoostMode+0x214>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d80a      	bhi.n	8003c64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	609a      	str	r2, [r3, #8]
}
 8003c62:	e007      	b.n	8003c74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	40022100 	.word	0x40022100
 8003c84:	40022300 	.word	0x40022300
 8003c88:	58026300 	.word	0x58026300
 8003c8c:	01312d00 	.word	0x01312d00
 8003c90:	005f5e10 	.word	0x005f5e10
 8003c94:	00bebc20 	.word	0x00bebc20
 8003c98:	017d7840 	.word	0x017d7840

08003c9c <LL_ADC_IsEnabled>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <LL_ADC_IsEnabled+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_ADC_IsEnabled+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d101      	bne.n	8003cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b09f      	sub	sp, #124	; 0x7c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0be      	b.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5c      	ldr	r2, [pc, #368]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d102      	bne.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d20:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	e001      	b.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e09d      	b.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ffb9 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003d50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ffb3 	bl	8003cc2 <LL_ADC_REG_IsConversionOngoing>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d17f      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d17c      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a47      	ldr	r2, [pc, #284]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a46      	ldr	r2, [pc, #280]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d7e:	e000      	b.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d80:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d039      	beq.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a38      	ldr	r2, [pc, #224]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10e      	bne.n	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003db2:	4836      	ldr	r0, [pc, #216]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003db4:	f7ff ff72 	bl	8003c9c <LL_ADC_IsEnabled>
 8003db8:	4604      	mov	r4, r0
 8003dba:	4835      	ldr	r0, [pc, #212]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dbc:	f7ff ff6e 	bl	8003c9c <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003dd0:	4832      	ldr	r0, [pc, #200]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dd2:	f7ff ff63 	bl	8003c9c <LL_ADC_IsEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d047      	beq.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfe:	e03a      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10e      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e20:	481a      	ldr	r0, [pc, #104]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e22:	f7ff ff3b 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e26:	4604      	mov	r4, r0
 8003e28:	4819      	ldr	r0, [pc, #100]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e2a:	f7ff ff37 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4323      	orrs	r3, r4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e008      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e3e:	4817      	ldr	r0, [pc, #92]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e40:	f7ff ff2c 	bl	8003c9c <LL_ADC_IsEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e60:	e009      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e74:	e000      	b.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	377c      	adds	r7, #124	; 0x7c
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd90      	pop	{r4, r7, pc}
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40022100 	.word	0x40022100
 8003e94:	40022300 	.word	0x40022300
 8003e98:	58026300 	.word	0x58026300
 8003e9c:	58026000 	.word	0x58026000
 8003ea0:	fffff0e0 	.word	0xfffff0e0

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed2:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	60d3      	str	r3, [r2, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	05fa0000 	.word	0x05fa0000

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db0a      	blt.n	8003f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	490c      	ldr	r1, [pc, #48]	; (8003f54 <__NVIC_SetPriority+0x4c>)
 8003f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f26:	0112      	lsls	r2, r2, #4
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f30:	e00a      	b.n	8003f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4908      	ldr	r1, [pc, #32]	; (8003f58 <__NVIC_SetPriority+0x50>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3b04      	subs	r3, #4
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	440b      	add	r3, r1
 8003f46:	761a      	strb	r2, [r3, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000e100 	.word	0xe000e100
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f1c3 0307 	rsb	r3, r3, #7
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf28      	it	cs
 8003f7a:	2304      	movcs	r3, #4
 8003f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d902      	bls.n	8003f8c <NVIC_EncodePriority+0x30>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3b03      	subs	r3, #3
 8003f8a:	e000      	b.n	8003f8e <NVIC_EncodePriority+0x32>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	43d9      	mvns	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	4313      	orrs	r3, r2
         );
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd4:	d301      	bcc.n	8003fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e00f      	b.n	8003ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <SysTick_Config+0x40>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fe2:	210f      	movs	r1, #15
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	f7ff ff8e 	bl	8003f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <SysTick_Config+0x40>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <SysTick_Config+0x40>)
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	e000e010 	.word	0xe000e010

08004008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff47 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af00      	add	r7, sp, #0
 8004024:	4603      	mov	r3, r0
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800402c:	f7ff ff5e 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff90 	bl	8003f5c <NVIC_EncodePriority>
 800403c:	4602      	mov	r2, r0
 800403e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff5f 	bl	8003f08 <__NVIC_SetPriority>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffb2 	bl	8003fc4 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0cf      	b.n	800421e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2223      	movs	r2, #35	; 0x23
 800408c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fd fd0b 	bl	8001aac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	4b64      	ldr	r3, [pc, #400]	; (8004228 <HAL_ETH_Init+0x1bc>)
 8004098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409c:	4a62      	ldr	r2, [pc, #392]	; (8004228 <HAL_ETH_Init+0x1bc>)
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040a6:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_ETH_Init+0x1bc>)
 80040a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7a1b      	ldrb	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80040bc:	2000      	movs	r0, #0
 80040be:	f7fe fe39 	bl	8002d34 <HAL_SYSCFG_ETHInterfaceSelect>
 80040c2:	e003      	b.n	80040cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80040c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80040c8:	f7fe fe34 	bl	8002d34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_ETH_Init+0x1c0>)
 80040ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7fe fde8 	bl	8002cbc <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ee:	e011      	b.n	8004114 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040f0:	f7fe fde4 	bl	8002cbc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040fe:	d909      	bls.n	8004114 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	22e0      	movs	r2, #224	; 0xe0
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e084      	b.n	800421e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e4      	bne.n	80040f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f886 	bl	8004238 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800412c:	f003 fa46 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8004130:	4603      	mov	r3, r0
 8004132:	4a3f      	ldr	r2, [pc, #252]	; (8004230 <HAL_ETH_Init+0x1c4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0c9a      	lsrs	r2, r3, #18
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3a01      	subs	r2, #1
 8004140:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa71 	bl	800462c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004156:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004166:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	22e0      	movs	r2, #224	; 0xe0
 8004182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e049      	b.n	800421e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_ETH_Init+0x1c8>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6952      	ldr	r2, [r2, #20]
 800419e:	0051      	lsls	r1, r2, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fad9 	bl	8004766 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb1f 	bl	80047f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	3305      	adds	r3, #5
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	3303      	adds	r3, #3
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	061a      	lsls	r2, r3, #24
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	3302      	adds	r3, #2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004206:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004208:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2210      	movs	r2, #16
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	58000400 	.word	0x58000400
 8004230:	431bde83 	.word	0x431bde83
 8004234:	ffff8001 	.word	0xffff8001

08004238 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004248:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004250:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004252:	f003 f9b3 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8004256:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d908      	bls.n	8004272 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d804      	bhi.n	8004272 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e027      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d908      	bls.n	800428c <HAL_ETH_SetMDIOClockRange+0x54>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d204      	bcs.n	800428c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e01a      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d303      	bcc.n	800429c <HAL_ETH_SetMDIOClockRange+0x64>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d911      	bls.n	80042c0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d908      	bls.n	80042b6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d804      	bhi.n	80042b6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e005      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e000      	b.n	80042c2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80042c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	01312cff 	.word	0x01312cff
 80042d8:	02160ebf 	.word	0x02160ebf
 80042dc:	03938700 	.word	0x03938700
 80042e0:	05f5e0ff 	.word	0x05f5e0ff
 80042e4:	08f0d17f 	.word	0x08f0d17f

080042e8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	791b      	ldrb	r3, [r3, #4]
 8004300:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7b1b      	ldrb	r3, [r3, #12]
 8004308:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800430a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	7b5b      	ldrb	r3, [r3, #13]
 8004310:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	7b9b      	ldrb	r3, [r3, #14]
 8004318:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800431a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	7bdb      	ldrb	r3, [r3, #15]
 8004320:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004322:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	7c12      	ldrb	r2, [r2, #16]
 8004328:	2a00      	cmp	r2, #0
 800432a:	d102      	bne.n	8004332 <ETH_SetMACConfig+0x4a>
 800432c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004330:	e000      	b.n	8004334 <ETH_SetMACConfig+0x4c>
 8004332:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004334:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	7c52      	ldrb	r2, [r2, #17]
 800433a:	2a00      	cmp	r2, #0
 800433c:	d102      	bne.n	8004344 <ETH_SetMACConfig+0x5c>
 800433e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004342:	e000      	b.n	8004346 <ETH_SetMACConfig+0x5e>
 8004344:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004346:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	7c9b      	ldrb	r3, [r3, #18]
 800434c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800434e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004354:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800435a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	7f1b      	ldrb	r3, [r3, #28]
 8004360:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	7f5b      	ldrb	r3, [r3, #29]
 8004368:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800436a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	7f92      	ldrb	r2, [r2, #30]
 8004370:	2a00      	cmp	r2, #0
 8004372:	d102      	bne.n	800437a <ETH_SetMACConfig+0x92>
 8004374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004378:	e000      	b.n	800437c <ETH_SetMACConfig+0x94>
 800437a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800437c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	7fdb      	ldrb	r3, [r3, #31]
 8004382:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004384:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	f892 2020 	ldrb.w	r2, [r2, #32]
 800438c:	2a00      	cmp	r2, #0
 800438e:	d102      	bne.n	8004396 <ETH_SetMACConfig+0xae>
 8004390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004394:	e000      	b.n	8004398 <ETH_SetMACConfig+0xb0>
 8004396:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004398:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800439e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80043a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <ETH_SetMACConfig+0x22c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	d102      	bne.n	80043fa <ETH_SetMACConfig+0x112>
 80043f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043f8:	e000      	b.n	80043fc <ETH_SetMACConfig+0x114>
 80043fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b42      	ldr	r3, [pc, #264]	; (8004518 <ETH_SetMACConfig+0x230>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	430b      	orrs	r3, r1
 8004418:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004420:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4b3a      	ldr	r3, [pc, #232]	; (800451c <ETH_SetMACConfig+0x234>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	430b      	orrs	r3, r1
 800443c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004444:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800444a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004452:	2a00      	cmp	r2, #0
 8004454:	d101      	bne.n	800445a <ETH_SetMACConfig+0x172>
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	e000      	b.n	800445c <ETH_SetMACConfig+0x174>
 800445a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800445c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800446e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	430b      	orrs	r3, r1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004484:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800448c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f023 0103 	bic.w	r1, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80044b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80044ce:	2a00      	cmp	r2, #0
 80044d0:	d101      	bne.n	80044d6 <ETH_SetMACConfig+0x1ee>
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	e000      	b.n	80044d8 <ETH_SetMACConfig+0x1f0>
 80044d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80044f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	430a      	orrs	r2, r1
 8004504:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	00048083 	.word	0x00048083
 8004518:	c0f88000 	.word	0xc0f88000
 800451c:	fffffef0 	.word	0xfffffef0

08004520 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b38      	ldr	r3, [pc, #224]	; (8004618 <ETH_SetDMAConfig+0xf8>)
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	6811      	ldr	r1, [r2, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004546:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	791b      	ldrb	r3, [r3, #4]
 800454c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004552:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	7b1b      	ldrb	r3, [r3, #12]
 8004558:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4b2c      	ldr	r3, [pc, #176]	; (800461c <ETH_SetDMAConfig+0xfc>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	430b      	orrs	r3, r1
 8004574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004578:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	7b5b      	ldrb	r3, [r3, #13]
 800457e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004590:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <ETH_SetDMAConfig+0x100>)
 8004596:	4013      	ands	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	430b      	orrs	r3, r1
 80045a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	7d1b      	ldrb	r3, [r3, #20]
 80045b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80045b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	7f5b      	ldrb	r3, [r3, #29]
 80045b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80045ca:	4b16      	ldr	r3, [pc, #88]	; (8004624 <ETH_SetDMAConfig+0x104>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	7f1b      	ldrb	r3, [r3, #28]
 80045e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <ETH_SetDMAConfig+0x108>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	430b      	orrs	r3, r1
 8004604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004608:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	ffff87fd 	.word	0xffff87fd
 800461c:	ffff2ffe 	.word	0xffff2ffe
 8004620:	fffec000 	.word	0xfffec000
 8004624:	ffc0efef 	.word	0xffc0efef
 8004628:	7fc0ffff 	.word	0x7fc0ffff

0800462c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0a4      	sub	sp, #144	; 0x90
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800463a:	2300      	movs	r3, #0
 800463c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800466c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004674:	2300      	movs	r3, #0
 8004676:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004684:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004688:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80046a6:	2300      	movs	r3, #0
 80046a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80046ae:	2300      	movs	r3, #0
 80046b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80046c4:	2320      	movs	r3, #32
 80046c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80046d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046e8:	2302      	movs	r3, #2
 80046ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004706:	2300      	movs	r3, #0
 8004708:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fde6 	bl	80042e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800471c:	2301      	movs	r3, #1
 800471e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004720:	2301      	movs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800472e:	2300      	movs	r3, #0
 8004730:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004736:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800473a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004744:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800474c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fee1 	bl	8004520 <ETH_SetDMAConfig>
}
 800475e:	bf00      	nop
 8004760:	3790      	adds	r7, #144	; 0x90
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e01d      	b.n	80047b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68d9      	ldr	r1, [r3, #12]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	440b      	add	r3, r1
 8004784:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	3206      	adds	r2, #6
 80047a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d9de      	bls.n	8004774 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	461a      	mov	r2, r3
 80047c6:	2303      	movs	r3, #3
 80047c8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e023      	b.n	800484e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6919      	ldr	r1, [r3, #16]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	440b      	add	r3, r1
 8004816:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	3212      	adds	r2, #18
 8004844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d9d8      	bls.n	8004806 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487a:	461a      	mov	r2, r3
 800487c:	2303      	movs	r3, #3
 800487e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b098      	sub	sp, #96	; 0x60
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80048bc:	4a84      	ldr	r2, [pc, #528]	; (8004ad0 <HAL_FDCAN_Init+0x21c>)
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	4611      	mov	r1, r2
 80048c4:	224c      	movs	r2, #76	; 0x4c
 80048c6:	4618      	mov	r0, r3
 80048c8:	f007 fee6 	bl	800c698 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e1c6      	b.n	8004c64 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7e      	ldr	r2, [pc, #504]	; (8004ad4 <HAL_FDCAN_Init+0x220>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d106      	bne.n	80048ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd fa02 	bl	8001d0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0210 	bic.w	r2, r2, #16
 8004916:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004918:	f7fe f9d0 	bl	8002cbc <HAL_GetTick>
 800491c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800491e:	e014      	b.n	800494a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004920:	f7fe f9cc 	bl	8002cbc <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b0a      	cmp	r3, #10
 800492c:	d90d      	bls.n	800494a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e18c      	b.n	8004c64 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d0e3      	beq.n	8004920 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004968:	f7fe f9a8 	bl	8002cbc <HAL_GetTick>
 800496c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800496e:	e014      	b.n	800499a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004970:	f7fe f9a4 	bl	8002cbc <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b0a      	cmp	r3, #10
 800497c:	d90d      	bls.n	800499a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004984:	f043 0201 	orr.w	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e164      	b.n	8004c64 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0e3      	beq.n	8004970 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0202 	orr.w	r2, r2, #2
 80049b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	7c1b      	ldrb	r3, [r3, #16]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d108      	bne.n	80049d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ce:	619a      	str	r2, [r3, #24]
 80049d0:	e007      	b.n	80049e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7c5b      	ldrb	r3, [r3, #17]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d108      	bne.n	80049fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699a      	ldr	r2, [r3, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f8:	619a      	str	r2, [r3, #24]
 80049fa:	e007      	b.n	8004a0c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a0a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7c9b      	ldrb	r3, [r3, #18]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d108      	bne.n	8004a26 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a22:	619a      	str	r2, [r3, #24]
 8004a24:	e007      	b.n	8004a36 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a34:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a5a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0210 	bic.w	r2, r2, #16
 8004a6a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d108      	bne.n	8004a86 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0204 	orr.w	r2, r2, #4
 8004a82:	619a      	str	r2, [r3, #24]
 8004a84:	e030      	b.n	8004ae8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d020      	beq.n	8004ad8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0210 	orr.w	r2, r2, #16
 8004ab4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d114      	bne.n	8004ae8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0220 	orr.w	r2, r2, #32
 8004acc:	619a      	str	r2, [r3, #24]
 8004ace:	e00b      	b.n	8004ae8 <HAL_FDCAN_Init+0x234>
 8004ad0:	0800cfa4 	.word	0x0800cfa4
 8004ad4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0220 	orr.w	r2, r2, #32
 8004ae6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004af8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b10:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b12:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1c:	d115      	bne.n	8004b4a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b2c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	3b01      	subs	r3, #1
 8004b34:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004b36:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004b46:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004b48:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b70:	4413      	add	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b7e:	f023 0107 	bic.w	r1, r3, #7
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	3360      	adds	r3, #96	; 0x60
 8004b8a:	443b      	add	r3, r7
 8004b8c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004baa:	f023 0107 	bic.w	r1, r3, #7
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3360      	adds	r3, #96	; 0x60
 8004bb6:	443b      	add	r3, r7
 8004bb8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004bd6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	3360      	adds	r3, #96	; 0x60
 8004be2:	443b      	add	r3, r7
 8004be4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c04:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3360      	adds	r3, #96	; 0x60
 8004c10:	443b      	add	r3, r7
 8004c12:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <HAL_FDCAN_Init+0x3b8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d107      	bne.n	8004c3c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f022 0203 	bic.w	r2, r2, #3
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f80b 	bl	8004c70 <FDCAN_CalcultateRamBlockAddresses>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004c60:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3760      	adds	r7, #96	; 0x60
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	4000a000 	.word	0x4000a000

08004c70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c86:	4ba7      	ldr	r3, [pc, #668]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0091      	lsls	r1, r2, #2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	430b      	orrs	r3, r1
 8004c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	041a      	lsls	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	4413      	add	r3, r2
 8004cbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cc6:	4b97      	ldr	r3, [pc, #604]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0091      	lsls	r1, r2, #2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	041a      	lsls	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004d08:	4b86      	ldr	r3, [pc, #536]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	0091      	lsls	r1, r2, #2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	041a      	lsls	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d50:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	0091      	lsls	r1, r2, #2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d72:	041a      	lsls	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004d98:	4b62      	ldr	r3, [pc, #392]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	0091      	lsls	r1, r2, #2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	430b      	orrs	r3, r1
 8004da6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	0091      	lsls	r1, r2, #2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	041a      	lsls	r2, r3, #16
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0091      	lsls	r1, r2, #2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	041a      	lsls	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	061a      	lsls	r2, r3, #24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e54:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e56:	4413      	add	r3, r2
 8004e58:	009a      	lsls	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d915      	bls.n	8004f4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004f20:	e006      	b.n	8004f30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004f22:	bf00      	nop
 8004f24:	ffff0003 	.word	0xffff0003
 8004f28:	10002b00 	.word	0x10002b00
 8004f2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e010      	b.n	8004f6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e005      	b.n	8004f60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3f3      	bcc.n	8004f54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f8a:	4b89      	ldr	r3, [pc, #548]	; (80051b0 <HAL_GPIO_Init+0x234>)
 8004f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f8e:	e194      	b.n	80052ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	2101      	movs	r1, #1
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8186 	beq.w	80052b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d005      	beq.n	8004fc0 <HAL_GPIO_Init+0x44>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d130      	bne.n	8005022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0201 	and.w	r2, r3, #1
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d017      	beq.n	800505e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	2203      	movs	r2, #3
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4013      	ands	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d123      	bne.n	80050b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	08da      	lsrs	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3208      	adds	r2, #8
 8005072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	220f      	movs	r2, #15
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	08da      	lsrs	r2, r3, #3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3208      	adds	r2, #8
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	2203      	movs	r2, #3
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0203 	and.w	r2, r3, #3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80e0 	beq.w	80052b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_GPIO_Init+0x238>)
 80050f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050fa:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <HAL_GPIO_Init+0x238>)
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_GPIO_Init+0x238>)
 8005106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005112:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <HAL_GPIO_Init+0x23c>)
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	220f      	movs	r2, #15
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <HAL_GPIO_Init+0x240>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d052      	beq.n	80051e4 <HAL_GPIO_Init+0x268>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_GPIO_Init+0x244>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d031      	beq.n	80051aa <HAL_GPIO_Init+0x22e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_GPIO_Init+0x248>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <HAL_GPIO_Init+0x22a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_GPIO_Init+0x24c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d025      	beq.n	80051a2 <HAL_GPIO_Init+0x226>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <HAL_GPIO_Init+0x250>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01f      	beq.n	800519e <HAL_GPIO_Init+0x222>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_GPIO_Init+0x254>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d019      	beq.n	800519a <HAL_GPIO_Init+0x21e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_GPIO_Init+0x258>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_GPIO_Init+0x21a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_GPIO_Init+0x25c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00d      	beq.n	8005192 <HAL_GPIO_Init+0x216>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a18      	ldr	r2, [pc, #96]	; (80051dc <HAL_GPIO_Init+0x260>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <HAL_GPIO_Init+0x212>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <HAL_GPIO_Init+0x264>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d101      	bne.n	800518a <HAL_GPIO_Init+0x20e>
 8005186:	2309      	movs	r3, #9
 8005188:	e02d      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800518a:	230a      	movs	r3, #10
 800518c:	e02b      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800518e:	2308      	movs	r3, #8
 8005190:	e029      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 8005192:	2307      	movs	r3, #7
 8005194:	e027      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 8005196:	2306      	movs	r3, #6
 8005198:	e025      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800519a:	2305      	movs	r3, #5
 800519c:	e023      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 800519e:	2304      	movs	r3, #4
 80051a0:	e021      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051a2:	2303      	movs	r3, #3
 80051a4:	e01f      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e01d      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e01b      	b.n	80051e6 <HAL_GPIO_Init+0x26a>
 80051ae:	bf00      	nop
 80051b0:	58000080 	.word	0x58000080
 80051b4:	58024400 	.word	0x58024400
 80051b8:	58000400 	.word	0x58000400
 80051bc:	58020000 	.word	0x58020000
 80051c0:	58020400 	.word	0x58020400
 80051c4:	58020800 	.word	0x58020800
 80051c8:	58020c00 	.word	0x58020c00
 80051cc:	58021000 	.word	0x58021000
 80051d0:	58021400 	.word	0x58021400
 80051d4:	58021800 	.word	0x58021800
 80051d8:	58021c00 	.word	0x58021c00
 80051dc:	58022000 	.word	0x58022000
 80051e0:	58022400 	.word	0x58022400
 80051e4:	2300      	movs	r3, #0
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	f002 0203 	and.w	r2, r2, #3
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	4093      	lsls	r3, r2
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f6:	4938      	ldr	r1, [pc, #224]	; (80052d8 <HAL_GPIO_Init+0x35c>)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	3302      	adds	r3, #2
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800522a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f ae63 	bne.w	8004f90 <HAL_GPIO_Init+0x14>
  }
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	3724      	adds	r7, #36	; 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	58000400 	.word	0x58000400

080052dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	887b      	ldrh	r3, [r7, #2]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e001      	b.n	80052fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
 8005318:	4613      	mov	r3, r2
 800531a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800531c:	787b      	ldrb	r3, [r7, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005328:	e003      	b.n	8005332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4013      	ands	r3, r2
 8005356:	041a      	lsls	r2, r3, #16
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	43d9      	mvns	r1, r3
 800535c:	887b      	ldrh	r3, [r7, #2]
 800535e:	400b      	ands	r3, r1
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07f      	b.n	8005486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc fd86 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	; 0x24
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	e006      	b.n	80053fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d104      	bne.n	800540e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800540c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <HAL_I2C_Init+0x11c>)
 800541a:	430b      	orrs	r3, r1
 800541c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800542c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	02008000 	.word	0x02008000

08005494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	f040 80fd 	bne.w	80056b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_I2C_Mem_Read+0x34>
 80054c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0f1      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x4e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ea      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054ea:	f7fd fbe7 	bl	8002cbc <HAL_GetTick>
 80054ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2319      	movs	r3, #25
 80054f6:	2201      	movs	r2, #1
 80054f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f95b 	bl	80057b8 <I2C_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0d5      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2222      	movs	r2, #34	; 0x22
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2240      	movs	r2, #64	; 0x40
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800552c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005534:	88f8      	ldrh	r0, [r7, #6]
 8005536:	893a      	ldrh	r2, [r7, #8]
 8005538:	8979      	ldrh	r1, [r7, #10]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4603      	mov	r3, r0
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f8bf 	bl	80056c8 <I2C_RequestMemoryRead>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0ad      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2bff      	cmp	r3, #255	; 0xff
 8005564:	d90e      	bls.n	8005584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	22ff      	movs	r2, #255	; 0xff
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	b2da      	uxtb	r2, r3
 8005572:	8979      	ldrh	r1, [r7, #10]
 8005574:	4b52      	ldr	r3, [pc, #328]	; (80056c0 <HAL_I2C_Mem_Read+0x22c>)
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fad5 	bl	8005b2c <I2C_TransferConfig>
 8005582:	e00f      	b.n	80055a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	b2da      	uxtb	r2, r3
 8005594:	8979      	ldrh	r1, [r7, #10]
 8005596:	4b4a      	ldr	r3, [pc, #296]	; (80056c0 <HAL_I2C_Mem_Read+0x22c>)
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fac4 	bl	8005b2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	2200      	movs	r2, #0
 80055ac:	2104      	movs	r1, #4
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f902 	bl	80057b8 <I2C_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e07c      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d034      	beq.n	8005664 <HAL_I2C_Mem_Read+0x1d0>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d130      	bne.n	8005664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2200      	movs	r2, #0
 800560a:	2180      	movs	r1, #128	; 0x80
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f8d3 	bl	80057b8 <I2C_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e04d      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2bff      	cmp	r3, #255	; 0xff
 8005624:	d90e      	bls.n	8005644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	22ff      	movs	r2, #255	; 0xff
 800562a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005630:	b2da      	uxtb	r2, r3
 8005632:	8979      	ldrh	r1, [r7, #10]
 8005634:	2300      	movs	r3, #0
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fa75 	bl	8005b2c <I2C_TransferConfig>
 8005642:	e00f      	b.n	8005664 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	b2da      	uxtb	r2, r3
 8005654:	8979      	ldrh	r1, [r7, #10]
 8005656:	2300      	movs	r3, #0
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa64 	bl	8005b2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d19a      	bne.n	80055a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f936 	bl	80058e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e01a      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2220      	movs	r2, #32
 8005688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_I2C_Mem_Read+0x230>)
 8005696:	400b      	ands	r3, r1
 8005698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	80002400 	.word	0x80002400
 80056c4:	fe00e800 	.word	0xfe00e800

080056c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	460b      	mov	r3, r1
 80056dc:	813b      	strh	r3, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	8979      	ldrh	r1, [r7, #10]
 80056e8:	4b20      	ldr	r3, [pc, #128]	; (800576c <I2C_RequestMemoryRead+0xa4>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2300      	movs	r3, #0
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fa1c 	bl	8005b2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	69b9      	ldr	r1, [r7, #24]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f8ac 	bl	8005856 <I2C_WaitOnTXISFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e02c      	b.n	8005762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800570e:	893b      	ldrh	r3, [r7, #8]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
 8005718:	e015      	b.n	8005746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800571a:	893b      	ldrh	r3, [r7, #8]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	b29b      	uxth	r3, r3
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	69b9      	ldr	r1, [r7, #24]
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f892 	bl	8005856 <I2C_WaitOnTXISFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e012      	b.n	8005762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800573c:	893b      	ldrh	r3, [r7, #8]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2200      	movs	r2, #0
 800574e:	2140      	movs	r1, #64	; 0x40
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f831 	bl	80057b8 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	80002000 	.word	0x80002000

08005770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d103      	bne.n	800578e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d007      	beq.n	80057ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	619a      	str	r2, [r3, #24]
  }
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c8:	e031      	b.n	800582e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d02d      	beq.n	800582e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fd fa73 	bl	8002cbc <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d122      	bne.n	800582e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4013      	ands	r3, r2
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	429a      	cmp	r2, r3
 8005804:	d113      	bne.n	800582e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e00f      	b.n	800584e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	429a      	cmp	r2, r3
 800584a:	d0be      	beq.n	80057ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005862:	e033      	b.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f87f 	bl	800596c <I2C_IsErrorOccurred>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e031      	b.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d025      	beq.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005880:	f7fd fa1c 	bl	8002cbc <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d302      	bcc.n	8005896 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d11a      	bne.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d013      	beq.n	80058cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e007      	b.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d1c4      	bne.n	8005864 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f0:	e02f      	b.n	8005952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f838 	bl	800596c <I2C_IsErrorOccurred>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e02d      	b.n	8005962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fd f9d9 	bl	8002cbc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11a      	bne.n	8005952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b20      	cmp	r3, #32
 8005928:	d013      	beq.n	8005952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e007      	b.n	8005962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b20      	cmp	r3, #32
 800595e:	d1c8      	bne.n	80058f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d068      	beq.n	8005a6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2210      	movs	r2, #16
 800599e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059a0:	e049      	b.n	8005a36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d045      	beq.n	8005a36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fd f987 	bl	8002cbc <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <I2C_IsErrorOccurred+0x54>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d13a      	bne.n	8005a36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e2:	d121      	bne.n	8005a28 <I2C_IsErrorOccurred+0xbc>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ea:	d01d      	beq.n	8005a28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80059ec:	7cfb      	ldrb	r3, [r7, #19]
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d01a      	beq.n	8005a28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a02:	f7fd f95b 	bl	8002cbc <HAL_GetTick>
 8005a06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a08:	e00e      	b.n	8005a28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a0a:	f7fd f957 	bl	8002cbc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b19      	cmp	r3, #25
 8005a16:	d907      	bls.n	8005a28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f043 0320 	orr.w	r3, r3, #32
 8005a1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005a26:	e006      	b.n	8005a36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d1e9      	bne.n	8005a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d003      	beq.n	8005a4c <I2C_IsErrorOccurred+0xe0>
 8005a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0aa      	beq.n	80059a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f043 0304 	orr.w	r3, r3, #4
 8005a62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f043 0308 	orr.w	r3, r3, #8
 8005aa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f043 0302 	orr.w	r3, r3, #2
 8005ac6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01c      	beq.n	8005b1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff fe45 	bl	8005770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <I2C_IsErrorOccurred+0x1bc>)
 8005af2:	400b      	ands	r3, r1
 8005af4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3728      	adds	r7, #40	; 0x28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	fe00e800 	.word	0xfe00e800

08005b2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	817b      	strh	r3, [r7, #10]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b3e:	897b      	ldrh	r3, [r7, #10]
 8005b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b44:	7a7b      	ldrb	r3, [r7, #9]
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	0d5b      	lsrs	r3, r3, #21
 8005b66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <I2C_TransferConfig+0x60>)
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	ea02 0103 	and.w	r1, r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	03ff63ff 	.word	0x03ff63ff

08005b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d138      	bne.n	8005c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e032      	b.n	8005c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6819      	ldr	r1, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e000      	b.n	8005c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d139      	bne.n	8005cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e033      	b.n	8005cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2224      	movs	r2, #36	; 0x24
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e0bf      	b.n	8005e52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc f94a 	bl	8001f80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <HAL_LTDC_Init+0x19c>)
 8005d34:	400b      	ands	r3, r1
 8005d36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6899      	ldr	r1, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68d9      	ldr	r1, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <HAL_LTDC_Init+0x19c>)
 8005d62:	400b      	ands	r3, r1
 8005d64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68d9      	ldr	r1, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6919      	ldr	r1, [r3, #16]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b33      	ldr	r3, [pc, #204]	; (8005e5c <HAL_LTDC_Init+0x19c>)
 8005d90:	400b      	ands	r3, r1
 8005d92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6919      	ldr	r1, [r3, #16]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6959      	ldr	r1, [r3, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b27      	ldr	r3, [pc, #156]	; (8005e5c <HAL_LTDC_Init+0x19c>)
 8005dbe:	400b      	ands	r3, r1
 8005dc0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6959      	ldr	r1, [r3, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0206 	orr.w	r2, r2, #6
 8005e2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	f000f800 	.word	0xf000f800

08005e60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e60:	b5b0      	push	{r4, r5, r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_LTDC_ConfigLayer+0x1a>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e02c      	b.n	8005ed4 <HAL_LTDC_ConfigLayer+0x74>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2134      	movs	r1, #52	; 0x34
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f811 	bl	8005edc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bdb0      	pop	{r4, r5, r7, pc}

08005edc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	; 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef8:	4413      	add	r3, r2
 8005efa:	041b      	lsls	r3, r3, #16
 8005efc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	4413      	add	r3, r2
 8005f0a:	3384      	adds	r3, #132	; 0x84
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	4611      	mov	r1, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	01d2      	lsls	r2, r2, #7
 8005f18:	440a      	add	r2, r1
 8005f1a:	3284      	adds	r2, #132	; 0x84
 8005f1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f32:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f34:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	01db      	lsls	r3, r3, #7
 8005f40:	440b      	add	r3, r1
 8005f42:	3384      	adds	r3, #132	; 0x84
 8005f44:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f5a:	4413      	add	r3, r2
 8005f5c:	041b      	lsls	r3, r3, #16
 8005f5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	01db      	lsls	r3, r3, #7
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3384      	adds	r3, #132	; 0x84
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	4611      	mov	r1, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	01d2      	lsls	r2, r2, #7
 8005f7a:	440a      	add	r2, r1
 8005f7c:	3284      	adds	r2, #132	; 0x84
 8005f7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f92:	4413      	add	r3, r2
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3384      	adds	r3, #132	; 0x84
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	01db      	lsls	r3, r3, #7
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3384      	adds	r3, #132	; 0x84
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	01d2      	lsls	r2, r2, #7
 8005fc6:	440a      	add	r2, r1
 8005fc8:	3284      	adds	r2, #132	; 0x84
 8005fca:	f023 0307 	bic.w	r3, r3, #7
 8005fce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	01db      	lsls	r3, r3, #7
 8005fda:	4413      	add	r3, r2
 8005fdc:	3384      	adds	r3, #132	; 0x84
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	061b      	lsls	r3, r3, #24
 8006000:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	01db      	lsls	r3, r3, #7
 800600c:	4413      	add	r3, r2
 800600e:	3384      	adds	r3, #132	; 0x84
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	01db      	lsls	r3, r3, #7
 800601c:	4413      	add	r3, r2
 800601e:	3384      	adds	r3, #132	; 0x84
 8006020:	461a      	mov	r2, r3
 8006022:	2300      	movs	r3, #0
 8006024:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800602c:	461a      	mov	r2, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	431a      	orrs	r2, r3
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	431a      	orrs	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	01db      	lsls	r3, r3, #7
 8006040:	440b      	add	r3, r1
 8006042:	3384      	adds	r3, #132	; 0x84
 8006044:	4619      	mov	r1, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	01db      	lsls	r3, r3, #7
 8006056:	4413      	add	r3, r2
 8006058:	3384      	adds	r3, #132	; 0x84
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	4611      	mov	r1, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	01d2      	lsls	r2, r2, #7
 8006066:	440a      	add	r2, r1
 8006068:	3284      	adds	r2, #132	; 0x84
 800606a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800606e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	01db      	lsls	r3, r3, #7
 800607a:	4413      	add	r3, r2
 800607c:	3384      	adds	r3, #132	; 0x84
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4413      	add	r3, r2
 8006092:	3384      	adds	r3, #132	; 0x84
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	01db      	lsls	r3, r3, #7
 80060a0:	440b      	add	r3, r1
 80060a2:	3384      	adds	r3, #132	; 0x84
 80060a4:	4619      	mov	r1, r3
 80060a6:	4b58      	ldr	r3, [pc, #352]	; (8006208 <LTDC_SetConfig+0x32c>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	6809      	ldr	r1, [r1, #0]
 80060b8:	4608      	mov	r0, r1
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	01c9      	lsls	r1, r1, #7
 80060be:	4401      	add	r1, r0
 80060c0:	3184      	adds	r1, #132	; 0x84
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	01db      	lsls	r3, r3, #7
 80060d0:	4413      	add	r3, r2
 80060d2:	3384      	adds	r3, #132	; 0x84
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	01db      	lsls	r3, r3, #7
 80060e0:	4413      	add	r3, r2
 80060e2:	3384      	adds	r3, #132	; 0x84
 80060e4:	461a      	mov	r2, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	01db      	lsls	r3, r3, #7
 80060f4:	4413      	add	r3, r2
 80060f6:	3384      	adds	r3, #132	; 0x84
 80060f8:	461a      	mov	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006108:	2304      	movs	r3, #4
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e01b      	b.n	8006146 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d102      	bne.n	800611c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006116:	2303      	movs	r3, #3
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e014      	b.n	8006146 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d00b      	beq.n	800613c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006128:	2b02      	cmp	r3, #2
 800612a:	d007      	beq.n	800613c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006130:	2b03      	cmp	r3, #3
 8006132:	d003      	beq.n	800613c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006138:	2b07      	cmp	r3, #7
 800613a:	d102      	bne.n	8006142 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800613c:	2302      	movs	r3, #2
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	e001      	b.n	8006146 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006142:	2301      	movs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	4413      	add	r3, r2
 8006152:	3384      	adds	r3, #132	; 0x84
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	4611      	mov	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	01d2      	lsls	r2, r2, #7
 8006160:	440a      	add	r2, r1
 8006162:	3284      	adds	r2, #132	; 0x84
 8006164:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006168:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	041a      	lsls	r2, r3, #16
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6859      	ldr	r1, [r3, #4]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1acb      	subs	r3, r1, r3
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	3307      	adds	r3, #7
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	6809      	ldr	r1, [r1, #0]
 800618c:	4608      	mov	r0, r1
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	01c9      	lsls	r1, r1, #7
 8006192:	4401      	add	r1, r0
 8006194:	3184      	adds	r1, #132	; 0x84
 8006196:	4313      	orrs	r3, r2
 8006198:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	3384      	adds	r3, #132	; 0x84
 80061a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	01db      	lsls	r3, r3, #7
 80061b4:	440b      	add	r3, r1
 80061b6:	3384      	adds	r3, #132	; 0x84
 80061b8:	4619      	mov	r1, r3
 80061ba:	4b14      	ldr	r3, [pc, #80]	; (800620c <LTDC_SetConfig+0x330>)
 80061bc:	4013      	ands	r3, r2
 80061be:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	01db      	lsls	r3, r3, #7
 80061ca:	4413      	add	r3, r2
 80061cc:	3384      	adds	r3, #132	; 0x84
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	4413      	add	r3, r2
 80061e2:	3384      	adds	r3, #132	; 0x84
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	4611      	mov	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	01d2      	lsls	r2, r2, #7
 80061f0:	440a      	add	r2, r1
 80061f2:	3284      	adds	r2, #132	; 0x84
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	6013      	str	r3, [r2, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3724      	adds	r7, #36	; 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	fffff8f8 	.word	0xfffff8f8
 800620c:	fffff800 	.word	0xfffff800

08006210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006212:	b08f      	sub	sp, #60	; 0x3c
 8006214:	af0a      	add	r7, sp, #40	; 0x28
 8006216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e116      	b.n	8006450 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fc f9bf 	bl	80025c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2203      	movs	r2, #3
 8006246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d102      	bne.n	800625c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f005 ff15 	bl	800c090 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	687e      	ldr	r6, [r7, #4]
 800626e:	466d      	mov	r5, sp
 8006270:	f106 0410 	add.w	r4, r6, #16
 8006274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800627a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800627c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006280:	e885 0003 	stmia.w	r5, {r0, r1}
 8006284:	1d33      	adds	r3, r6, #4
 8006286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006288:	6838      	ldr	r0, [r7, #0]
 800628a:	f005 fe93 	bl	800bfb4 <USB_CoreInit>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e0d7      	b.n	8006450 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f005 ff03 	bl	800c0b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e04a      	b.n	8006348 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	333d      	adds	r3, #61	; 0x3d
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062c6:	7bfa      	ldrb	r2, [r7, #15]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	333c      	adds	r3, #60	; 0x3c
 80062d6:	7bfa      	ldrb	r2, [r7, #15]
 80062d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062da:	7bfa      	ldrb	r2, [r7, #15]
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	b298      	uxth	r0, r3
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3356      	adds	r3, #86	; 0x56
 80062ee:	4602      	mov	r2, r0
 80062f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062f2:	7bfa      	ldrb	r2, [r7, #15]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	3340      	adds	r3, #64	; 0x40
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006306:	7bfa      	ldrb	r2, [r7, #15]
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3344      	adds	r3, #68	; 0x44
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800631a:	7bfa      	ldrb	r2, [r7, #15]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	3348      	adds	r3, #72	; 0x48
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800632e:	7bfa      	ldrb	r2, [r7, #15]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	334c      	adds	r3, #76	; 0x4c
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	3301      	adds	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3af      	bcc.n	80062b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
 8006356:	e044      	b.n	80063e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006358:	7bfa      	ldrb	r2, [r7, #15]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800636e:	7bfa      	ldrb	r2, [r7, #15]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006384:	7bfa      	ldrb	r2, [r7, #15]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063c6:	7bfa      	ldrb	r2, [r7, #15]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	3301      	adds	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3b5      	bcc.n	8006358 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	603b      	str	r3, [r7, #0]
 80063f2:	687e      	ldr	r6, [r7, #4]
 80063f4:	466d      	mov	r5, sp
 80063f6:	f106 0410 	add.w	r4, r6, #16
 80063fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006406:	e885 0003 	stmia.w	r5, {r0, r1}
 800640a:	1d33      	adds	r3, r6, #4
 800640c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800640e:	6838      	ldr	r0, [r7, #0]
 8006410:	f005 fe9c 	bl	800c14c <USB_DevInit>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e014      	b.n	8006450 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	2b01      	cmp	r3, #1
 800643c:	d102      	bne.n	8006444 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f80a 	bl	8006458 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f006 f85a 	bl	800c502 <USB_DevDisconnect>

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006458 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006486:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_PCDEx_ActivateLPM+0x44>)
 8006488:	4313      	orrs	r3, r2
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	10000003 	.word	0x10000003

080064a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064a8:	4b19      	ldr	r3, [pc, #100]	; (8006510 <HAL_PWREx_ConfigSupply+0x70>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d00a      	beq.n	80064ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064b4:	4b16      	ldr	r3, [pc, #88]	; (8006510 <HAL_PWREx_ConfigSupply+0x70>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d001      	beq.n	80064c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e01f      	b.n	8006506 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e01d      	b.n	8006506 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <HAL_PWREx_ConfigSupply+0x70>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f023 0207 	bic.w	r2, r3, #7
 80064d2:	490f      	ldr	r1, [pc, #60]	; (8006510 <HAL_PWREx_ConfigSupply+0x70>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064da:	f7fc fbef 	bl	8002cbc <HAL_GetTick>
 80064de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064e0:	e009      	b.n	80064f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064e2:	f7fc fbeb 	bl	8002cbc <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f0:	d901      	bls.n	80064f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e007      	b.n	8006506 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_PWREx_ConfigSupply+0x70>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006502:	d1ee      	bne.n	80064e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	58024800 	.word	0x58024800

08006514 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4a04      	ldr	r2, [pc, #16]	; (8006530 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800651e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006522:	60d3      	str	r3, [r2, #12]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	58024800 	.word	0x58024800

08006534 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800653c:	f7fc fbbe 	bl	8002cbc <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e05f      	b.n	800660c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d107      	bne.n	8006568 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fb fdff 	bl	800215c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800655e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f85a 	bl	800661c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	3b01      	subs	r3, #1
 8006578:	021a      	lsls	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	2120      	movs	r1, #32
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f852 	bl	8006638 <QSPI_WaitFlagStateUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d135      	bne.n	800660a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <HAL_QSPI_Init+0xe0>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6852      	ldr	r2, [r2, #4]
 80065ac:	0611      	lsls	r1, r2, #24
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	68d2      	ldr	r2, [r2, #12]
 80065b2:	4311      	orrs	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	69d2      	ldr	r2, [r2, #28]
 80065b8:	4311      	orrs	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6a12      	ldr	r2, [r2, #32]
 80065be:	4311      	orrs	r1, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <HAL_QSPI_Init+0xe4>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6912      	ldr	r2, [r2, #16]
 80065d6:	0411      	lsls	r1, r2, #16
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6952      	ldr	r2, [r2, #20]
 80065dc:	4311      	orrs	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6992      	ldr	r2, [r2, #24]
 80065e2:	4311      	orrs	r1, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800660a:	7afb      	ldrb	r3, [r7, #11]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	00ffff2f 	.word	0x00ffff2f
 8006618:	ffe0f8fe 	.word	0xffe0f8fe

0800661c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006648:	e01a      	b.n	8006680 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d016      	beq.n	8006680 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fc fb33 	bl	8002cbc <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2204      	movs	r2, #4
 800666c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006674:	f043 0201 	orr.w	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e00e      	b.n	800669e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	2b00      	cmp	r3, #0
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	429a      	cmp	r2, r3
 800669a:	d1d6      	bne.n	800664a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08c      	sub	sp, #48	; 0x30
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f000 bc48 	b.w	8006f4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8088 	beq.w	80067da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ca:	4b99      	ldr	r3, [pc, #612]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066d4:	4b96      	ldr	r3, [pc, #600]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d007      	beq.n	80066f0 <HAL_RCC_OscConfig+0x48>
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b18      	cmp	r3, #24
 80066e4:	d111      	bne.n	800670a <HAL_RCC_OscConfig+0x62>
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d10c      	bne.n	800670a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f0:	4b8f      	ldr	r3, [pc, #572]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d06d      	beq.n	80067d8 <HAL_RCC_OscConfig+0x130>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d169      	bne.n	80067d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f000 bc21 	b.w	8006f4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d106      	bne.n	8006722 <HAL_RCC_OscConfig+0x7a>
 8006714:	4b86      	ldr	r3, [pc, #536]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a85      	ldr	r2, [pc, #532]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800671a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e02e      	b.n	8006780 <HAL_RCC_OscConfig+0xd8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10c      	bne.n	8006744 <HAL_RCC_OscConfig+0x9c>
 800672a:	4b81      	ldr	r3, [pc, #516]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a80      	ldr	r2, [pc, #512]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4b7e      	ldr	r3, [pc, #504]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a7d      	ldr	r2, [pc, #500]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800673c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e01d      	b.n	8006780 <HAL_RCC_OscConfig+0xd8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800674c:	d10c      	bne.n	8006768 <HAL_RCC_OscConfig+0xc0>
 800674e:	4b78      	ldr	r3, [pc, #480]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a77      	ldr	r2, [pc, #476]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	4b75      	ldr	r3, [pc, #468]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a74      	ldr	r2, [pc, #464]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e00b      	b.n	8006780 <HAL_RCC_OscConfig+0xd8>
 8006768:	4b71      	ldr	r3, [pc, #452]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a70      	ldr	r2, [pc, #448]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	4b6e      	ldr	r3, [pc, #440]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a6d      	ldr	r2, [pc, #436]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800677a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800677e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fc fa98 	bl	8002cbc <HAL_GetTick>
 800678c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006790:	f7fc fa94 	bl	8002cbc <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e3d4      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067a2:	4b63      	ldr	r3, [pc, #396]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0f0      	beq.n	8006790 <HAL_RCC_OscConfig+0xe8>
 80067ae:	e014      	b.n	80067da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b0:	f7fc fa84 	bl	8002cbc <HAL_GetTick>
 80067b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b8:	f7fc fa80 	bl	8002cbc <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b64      	cmp	r3, #100	; 0x64
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e3c0      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067ca:	4b59      	ldr	r3, [pc, #356]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_OscConfig+0x110>
 80067d6:	e000      	b.n	80067da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80ca 	beq.w	800697c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e8:	4b51      	ldr	r3, [pc, #324]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067f2:	4b4f      	ldr	r3, [pc, #316]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <HAL_RCC_OscConfig+0x166>
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	2b18      	cmp	r3, #24
 8006802:	d156      	bne.n	80068b2 <HAL_RCC_OscConfig+0x20a>
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d151      	bne.n	80068b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800680e:	4b48      	ldr	r3, [pc, #288]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_RCC_OscConfig+0x17e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e392      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006826:	4b42      	ldr	r3, [pc, #264]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f023 0219 	bic.w	r2, r3, #25
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	493f      	ldr	r1, [pc, #252]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006834:	4313      	orrs	r3, r2
 8006836:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fc fa40 	bl	8002cbc <HAL_GetTick>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006840:	f7fc fa3c 	bl	8002cbc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e37c      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006852:	4b37      	ldr	r3, [pc, #220]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685e:	f7fc fa5d 	bl	8002d1c <HAL_GetREVID>
 8006862:	4603      	mov	r3, r0
 8006864:	f241 0203 	movw	r2, #4099	; 0x1003
 8006868:	4293      	cmp	r3, r2
 800686a:	d817      	bhi.n	800689c <HAL_RCC_OscConfig+0x1f4>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d108      	bne.n	8006886 <HAL_RCC_OscConfig+0x1de>
 8006874:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800687c:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800687e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006882:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006884:	e07a      	b.n	800697c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006886:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	031b      	lsls	r3, r3, #12
 8006894:	4926      	ldr	r1, [pc, #152]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006896:	4313      	orrs	r3, r2
 8006898:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800689a:	e06f      	b.n	800697c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	4921      	ldr	r1, [pc, #132]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068b0:	e064      	b.n	800697c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d047      	beq.n	800694a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f023 0219 	bic.w	r2, r3, #25
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	491a      	ldr	r1, [pc, #104]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fc f9f6 	bl	8002cbc <HAL_GetTick>
 80068d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d4:	f7fc f9f2 	bl	8002cbc <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e332      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	f7fc fa13 	bl	8002d1c <HAL_GetREVID>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d819      	bhi.n	8006934 <HAL_RCC_OscConfig+0x28c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d108      	bne.n	800691a <HAL_RCC_OscConfig+0x272>
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006910:	4a07      	ldr	r2, [pc, #28]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006916:	6053      	str	r3, [r2, #4]
 8006918:	e030      	b.n	800697c <HAL_RCC_OscConfig+0x2d4>
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	031b      	lsls	r3, r3, #12
 8006928:	4901      	ldr	r1, [pc, #4]	; (8006930 <HAL_RCC_OscConfig+0x288>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
 800692e:	e025      	b.n	800697c <HAL_RCC_OscConfig+0x2d4>
 8006930:	58024400 	.word	0x58024400
 8006934:	4b9a      	ldr	r3, [pc, #616]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	4997      	ldr	r1, [pc, #604]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006944:	4313      	orrs	r3, r2
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	e018      	b.n	800697c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800694a:	4b95      	ldr	r3, [pc, #596]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a94      	ldr	r2, [pc, #592]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fc f9b1 	bl	8002cbc <HAL_GetTick>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800695e:	f7fc f9ad 	bl	8002cbc <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e2ed      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006970:	4b8b      	ldr	r3, [pc, #556]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80a9 	beq.w	8006adc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800698a:	4b85      	ldr	r3, [pc, #532]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006992:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006994:	4b82      	ldr	r3, [pc, #520]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d007      	beq.n	80069b0 <HAL_RCC_OscConfig+0x308>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b18      	cmp	r3, #24
 80069a4:	d13a      	bne.n	8006a1c <HAL_RCC_OscConfig+0x374>
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d135      	bne.n	8006a1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069b0:	4b7b      	ldr	r3, [pc, #492]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_RCC_OscConfig+0x320>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e2c1      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069c8:	f7fc f9a8 	bl	8002d1c <HAL_GetREVID>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d817      	bhi.n	8006a06 <HAL_RCC_OscConfig+0x35e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d108      	bne.n	80069f0 <HAL_RCC_OscConfig+0x348>
 80069de:	4b70      	ldr	r3, [pc, #448]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80069e6:	4a6e      	ldr	r2, [pc, #440]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 80069e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069ee:	e075      	b.n	8006adc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069f0:	4b6b      	ldr	r3, [pc, #428]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	069b      	lsls	r3, r3, #26
 80069fe:	4968      	ldr	r1, [pc, #416]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a04:	e06a      	b.n	8006adc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a06:	4b66      	ldr	r3, [pc, #408]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	061b      	lsls	r3, r3, #24
 8006a14:	4962      	ldr	r1, [pc, #392]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a1a:	e05f      	b.n	8006adc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d042      	beq.n	8006aaa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a24:	4b5e      	ldr	r3, [pc, #376]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5d      	ldr	r2, [pc, #372]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fc f944 	bl	8002cbc <HAL_GetTick>
 8006a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a38:	f7fc f940 	bl	8002cbc <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e280      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a4a:	4b55      	ldr	r3, [pc, #340]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f0      	beq.n	8006a38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a56:	f7fc f961 	bl	8002d1c <HAL_GetREVID>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d817      	bhi.n	8006a94 <HAL_RCC_OscConfig+0x3ec>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d108      	bne.n	8006a7e <HAL_RCC_OscConfig+0x3d6>
 8006a6c:	4b4c      	ldr	r3, [pc, #304]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a74:	4a4a      	ldr	r2, [pc, #296]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7a:	6053      	str	r3, [r2, #4]
 8006a7c:	e02e      	b.n	8006adc <HAL_RCC_OscConfig+0x434>
 8006a7e:	4b48      	ldr	r3, [pc, #288]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	069b      	lsls	r3, r3, #26
 8006a8c:	4944      	ldr	r1, [pc, #272]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	604b      	str	r3, [r1, #4]
 8006a92:	e023      	b.n	8006adc <HAL_RCC_OscConfig+0x434>
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	493f      	ldr	r1, [pc, #252]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60cb      	str	r3, [r1, #12]
 8006aa8:	e018      	b.n	8006adc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006aaa:	4b3d      	ldr	r3, [pc, #244]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab6:	f7fc f901 	bl	8002cbc <HAL_GetTick>
 8006aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006abe:	f7fc f8fd 	bl	8002cbc <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e23d      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ad0:	4b33      	ldr	r3, [pc, #204]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d036      	beq.n	8006b56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d019      	beq.n	8006b24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006af0:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afc:	f7fc f8de 	bl	8002cbc <HAL_GetTick>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b04:	f7fc f8da 	bl	8002cbc <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e21a      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b16:	4b22      	ldr	r3, [pc, #136]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <HAL_RCC_OscConfig+0x45c>
 8006b22:	e018      	b.n	8006b56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b24:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b28:	4a1d      	ldr	r2, [pc, #116]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fc f8c4 	bl	8002cbc <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b38:	f7fc f8c0 	bl	8002cbc <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e200      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d039      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01c      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b76:	f7fc f8a1 	bl	8002cbc <HAL_GetTick>
 8006b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b7e:	f7fc f89d 	bl	8002cbc <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e1dd      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b90:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <HAL_RCC_OscConfig+0x4f8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f0      	beq.n	8006b7e <HAL_RCC_OscConfig+0x4d6>
 8006b9c:	e01b      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ba4:	4b9b      	ldr	r3, [pc, #620]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a9a      	ldr	r2, [pc, #616]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bb0:	f7fc f884 	bl	8002cbc <HAL_GetTick>
 8006bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb8:	f7fc f880 	bl	8002cbc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1c0      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bca:	4b92      	ldr	r3, [pc, #584]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8081 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006be4:	4b8c      	ldr	r3, [pc, #560]	; (8006e18 <HAL_RCC_OscConfig+0x770>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a8b      	ldr	r2, [pc, #556]	; (8006e18 <HAL_RCC_OscConfig+0x770>)
 8006bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf0:	f7fc f864 	bl	8002cbc <HAL_GetTick>
 8006bf4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf8:	f7fc f860 	bl	8002cbc <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	; 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e1a0      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c0a:	4b83      	ldr	r3, [pc, #524]	; (8006e18 <HAL_RCC_OscConfig+0x770>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d106      	bne.n	8006c2c <HAL_RCC_OscConfig+0x584>
 8006c1e:	4b7d      	ldr	r3, [pc, #500]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	6713      	str	r3, [r2, #112]	; 0x70
 8006c2a:	e02d      	b.n	8006c88 <HAL_RCC_OscConfig+0x5e0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10c      	bne.n	8006c4e <HAL_RCC_OscConfig+0x5a6>
 8006c34:	4b77      	ldr	r3, [pc, #476]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c38:	4a76      	ldr	r2, [pc, #472]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c40:	4b74      	ldr	r3, [pc, #464]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	4a73      	ldr	r2, [pc, #460]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c46:	f023 0304 	bic.w	r3, r3, #4
 8006c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c4c:	e01c      	b.n	8006c88 <HAL_RCC_OscConfig+0x5e0>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x5c8>
 8006c56:	4b6f      	ldr	r3, [pc, #444]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4a6e      	ldr	r2, [pc, #440]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c5c:	f043 0304 	orr.w	r3, r3, #4
 8006c60:	6713      	str	r3, [r2, #112]	; 0x70
 8006c62:	4b6c      	ldr	r3, [pc, #432]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4a6b      	ldr	r2, [pc, #428]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCC_OscConfig+0x5e0>
 8006c70:	4b68      	ldr	r3, [pc, #416]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	4a67      	ldr	r2, [pc, #412]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7c:	4b65      	ldr	r3, [pc, #404]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	4a64      	ldr	r2, [pc, #400]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006c82:	f023 0304 	bic.w	r3, r3, #4
 8006c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fc f814 	bl	8002cbc <HAL_GetTick>
 8006c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c98:	f7fc f810 	bl	8002cbc <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e14e      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cae:	4b59      	ldr	r3, [pc, #356]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0ee      	beq.n	8006c98 <HAL_RCC_OscConfig+0x5f0>
 8006cba:	e014      	b.n	8006ce6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbc:	f7fb fffe 	bl	8002cbc <HAL_GetTick>
 8006cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc4:	f7fb fffa 	bl	8002cbc <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e138      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cda:	4b4e      	ldr	r3, [pc, #312]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ee      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 812d 	beq.w	8006f4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006cf0:	4b48      	ldr	r3, [pc, #288]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf8:	2b18      	cmp	r3, #24
 8006cfa:	f000 80bd 	beq.w	8006e78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	f040 809e 	bne.w	8006e44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d08:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a41      	ldr	r2, [pc, #260]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fb ffd2 	bl	8002cbc <HAL_GetTick>
 8006d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1c:	f7fb ffce 	bl	8002cbc <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e10e      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d2e:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d3a:	4b36      	ldr	r3, [pc, #216]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3e:	4b37      	ldr	r3, [pc, #220]	; (8006e1c <HAL_RCC_OscConfig+0x774>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d4a:	0112      	lsls	r2, r2, #4
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	4931      	ldr	r1, [pc, #196]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	628b      	str	r3, [r1, #40]	; 0x28
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	3b01      	subs	r3, #1
 8006d64:	025b      	lsls	r3, r3, #9
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	061b      	lsls	r3, r3, #24
 8006d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d84:	4923      	ldr	r1, [pc, #140]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006d8a:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d96:	4b1f      	ldr	r3, [pc, #124]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9a:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <HAL_RCC_OscConfig+0x778>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006da2:	00d2      	lsls	r2, r2, #3
 8006da4:	491b      	ldr	r1, [pc, #108]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006daa:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	f023 020c 	bic.w	r2, r3, #12
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4917      	ldr	r1, [pc, #92]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006dbc:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	f023 0202 	bic.w	r2, r3, #2
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc8:	4912      	ldr	r1, [pc, #72]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006dce:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a04      	ldr	r2, [pc, #16]	; (8006e14 <HAL_RCC_OscConfig+0x76c>)
 8006e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0a:	f7fb ff57 	bl	8002cbc <HAL_GetTick>
 8006e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e10:	e011      	b.n	8006e36 <HAL_RCC_OscConfig+0x78e>
 8006e12:	bf00      	nop
 8006e14:	58024400 	.word	0x58024400
 8006e18:	58024800 	.word	0x58024800
 8006e1c:	fffffc0c 	.word	0xfffffc0c
 8006e20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e24:	f7fb ff4a 	bl	8002cbc <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e08a      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e36:	4b47      	ldr	r3, [pc, #284]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f0      	beq.n	8006e24 <HAL_RCC_OscConfig+0x77c>
 8006e42:	e082      	b.n	8006f4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e44:	4b43      	ldr	r3, [pc, #268]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a42      	ldr	r2, [pc, #264]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e50:	f7fb ff34 	bl	8002cbc <HAL_GetTick>
 8006e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e58:	f7fb ff30 	bl	8002cbc <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e070      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e6a:	4b3a      	ldr	r3, [pc, #232]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <HAL_RCC_OscConfig+0x7b0>
 8006e76:	e068      	b.n	8006f4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e78:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e7e:	4b35      	ldr	r3, [pc, #212]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d031      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f003 0203 	and.w	r2, r3, #3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d12a      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d122      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d11a      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	0a5b      	lsrs	r3, r3, #9
 8006ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d111      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d108      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	0e1b      	lsrs	r3, r3, #24
 8006ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e02b      	b.n	8006f4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ef4:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006efe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d01f      	beq.n	8006f4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4a11      	ldr	r2, [pc, #68]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006f10:	f023 0301 	bic.w	r3, r3, #1
 8006f14:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f16:	f7fb fed1 	bl	8002cbc <HAL_GetTick>
 8006f1a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f1c:	bf00      	nop
 8006f1e:	f7fb fecd 	bl	8002cbc <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d0f9      	beq.n	8006f1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <HAL_RCC_OscConfig+0x8b0>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f36:	00d2      	lsls	r2, r2, #3
 8006f38:	4906      	ldr	r1, [pc, #24]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <HAL_RCC_OscConfig+0x8ac>)
 8006f44:	f043 0301 	orr.w	r3, r3, #1
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3730      	adds	r7, #48	; 0x30
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	58024400 	.word	0x58024400
 8006f58:	ffff0007 	.word	0xffff0007

08006f5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e19c      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f70:	4b8a      	ldr	r3, [pc, #552]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d910      	bls.n	8006fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7e:	4b87      	ldr	r3, [pc, #540]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 020f 	bic.w	r2, r3, #15
 8006f86:	4985      	ldr	r1, [pc, #532]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8e:	4b83      	ldr	r3, [pc, #524]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e184      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d010      	beq.n	8006fce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	4b7b      	ldr	r3, [pc, #492]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d908      	bls.n	8006fce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fbc:	4b78      	ldr	r3, [pc, #480]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	4975      	ldr	r1, [pc, #468]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d010      	beq.n	8006ffc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	695a      	ldr	r2, [r3, #20]
 8006fde:	4b70      	ldr	r3, [pc, #448]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d908      	bls.n	8006ffc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fea:	4b6d      	ldr	r3, [pc, #436]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	496a      	ldr	r1, [pc, #424]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b00      	cmp	r3, #0
 8007006:	d010      	beq.n	800702a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	4b64      	ldr	r3, [pc, #400]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007014:	429a      	cmp	r2, r3
 8007016:	d908      	bls.n	800702a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007018:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	495e      	ldr	r1, [pc, #376]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007026:	4313      	orrs	r3, r2
 8007028:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d010      	beq.n	8007058 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69da      	ldr	r2, [r3, #28]
 800703a:	4b59      	ldr	r3, [pc, #356]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007042:	429a      	cmp	r2, r3
 8007044:	d908      	bls.n	8007058 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007046:	4b56      	ldr	r3, [pc, #344]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	4953      	ldr	r1, [pc, #332]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007054:	4313      	orrs	r3, r2
 8007056:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d010      	beq.n	8007086 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	4b4d      	ldr	r3, [pc, #308]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	429a      	cmp	r2, r3
 8007072:	d908      	bls.n	8007086 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007074:	4b4a      	ldr	r3, [pc, #296]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f023 020f 	bic.w	r2, r3, #15
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	4947      	ldr	r1, [pc, #284]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007082:	4313      	orrs	r3, r2
 8007084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d055      	beq.n	800713e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007092:	4b43      	ldr	r3, [pc, #268]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4940      	ldr	r1, [pc, #256]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d107      	bne.n	80070bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ac:	4b3c      	ldr	r3, [pc, #240]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d121      	bne.n	80070fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0f6      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d107      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070c4:	4b36      	ldr	r3, [pc, #216]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d115      	bne.n	80070fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0ea      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d107      	bne.n	80070ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070dc:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0de      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ec:	4b2c      	ldr	r3, [pc, #176]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0d6      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070fc:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f023 0207 	bic.w	r2, r3, #7
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4925      	ldr	r1, [pc, #148]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800710a:	4313      	orrs	r3, r2
 800710c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800710e:	f7fb fdd5 	bl	8002cbc <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007114:	e00a      	b.n	800712c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007116:	f7fb fdd1 	bl	8002cbc <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	f241 3288 	movw	r2, #5000	; 0x1388
 8007124:	4293      	cmp	r3, r2
 8007126:	d901      	bls.n	800712c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e0be      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712c:	4b1c      	ldr	r3, [pc, #112]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	429a      	cmp	r2, r3
 800713c:	d1eb      	bne.n	8007116 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d010      	beq.n	800716c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	4b14      	ldr	r3, [pc, #80]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	429a      	cmp	r2, r3
 8007158:	d208      	bcs.n	800716c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	f023 020f 	bic.w	r2, r3, #15
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	490e      	ldr	r1, [pc, #56]	; (80071a0 <HAL_RCC_ClockConfig+0x244>)
 8007168:	4313      	orrs	r3, r2
 800716a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d214      	bcs.n	80071a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f023 020f 	bic.w	r2, r3, #15
 8007182:	4906      	ldr	r1, [pc, #24]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4313      	orrs	r3, r2
 8007188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800718a:	4b04      	ldr	r3, [pc, #16]	; (800719c <HAL_RCC_ClockConfig+0x240>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d005      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e086      	b.n	80072aa <HAL_RCC_ClockConfig+0x34e>
 800719c:	52002000 	.word	0x52002000
 80071a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d010      	beq.n	80071d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	4b3f      	ldr	r3, [pc, #252]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071bc:	429a      	cmp	r2, r3
 80071be:	d208      	bcs.n	80071d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071c0:	4b3c      	ldr	r3, [pc, #240]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	4939      	ldr	r1, [pc, #228]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d010      	beq.n	8007200 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	695a      	ldr	r2, [r3, #20]
 80071e2:	4b34      	ldr	r3, [pc, #208]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d208      	bcs.n	8007200 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071ee:	4b31      	ldr	r3, [pc, #196]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	492e      	ldr	r1, [pc, #184]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	d010      	beq.n	800722e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	4b28      	ldr	r3, [pc, #160]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007218:	429a      	cmp	r2, r3
 800721a:	d208      	bcs.n	800722e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800721c:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	4922      	ldr	r1, [pc, #136]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 800722a:	4313      	orrs	r3, r2
 800722c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	4b1d      	ldr	r3, [pc, #116]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007246:	429a      	cmp	r2, r3
 8007248:	d208      	bcs.n	800725c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800724a:	4b1a      	ldr	r3, [pc, #104]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	4917      	ldr	r1, [pc, #92]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 8007258:	4313      	orrs	r3, r2
 800725a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800725c:	f000 f834 	bl	80072c8 <HAL_RCC_GetSysClockFreq>
 8007260:	4602      	mov	r2, r0
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	4912      	ldr	r1, [pc, #72]	; (80072b8 <HAL_RCC_ClockConfig+0x35c>)
 800726e:	5ccb      	ldrb	r3, [r1, r3]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
 8007278:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <HAL_RCC_ClockConfig+0x358>)
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	4a0d      	ldr	r2, [pc, #52]	; (80072b8 <HAL_RCC_ClockConfig+0x35c>)
 8007284:	5cd3      	ldrb	r3, [r2, r3]
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <HAL_RCC_ClockConfig+0x360>)
 8007292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007294:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <HAL_RCC_ClockConfig+0x364>)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <HAL_RCC_ClockConfig+0x368>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fb fcc2 	bl	8002c28 <HAL_InitTick>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
 80072b8:	0800cff0 	.word	0x0800cff0
 80072bc:	24000004 	.word	0x24000004
 80072c0:	24000000 	.word	0x24000000
 80072c4:	24000008 	.word	0x24000008

080072c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b089      	sub	sp, #36	; 0x24
 80072cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072ce:	4bb3      	ldr	r3, [pc, #716]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072d6:	2b18      	cmp	r3, #24
 80072d8:	f200 8155 	bhi.w	8007586 <HAL_RCC_GetSysClockFreq+0x2be>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	08007349 	.word	0x08007349
 80072e8:	08007587 	.word	0x08007587
 80072ec:	08007587 	.word	0x08007587
 80072f0:	08007587 	.word	0x08007587
 80072f4:	08007587 	.word	0x08007587
 80072f8:	08007587 	.word	0x08007587
 80072fc:	08007587 	.word	0x08007587
 8007300:	08007587 	.word	0x08007587
 8007304:	0800736f 	.word	0x0800736f
 8007308:	08007587 	.word	0x08007587
 800730c:	08007587 	.word	0x08007587
 8007310:	08007587 	.word	0x08007587
 8007314:	08007587 	.word	0x08007587
 8007318:	08007587 	.word	0x08007587
 800731c:	08007587 	.word	0x08007587
 8007320:	08007587 	.word	0x08007587
 8007324:	08007375 	.word	0x08007375
 8007328:	08007587 	.word	0x08007587
 800732c:	08007587 	.word	0x08007587
 8007330:	08007587 	.word	0x08007587
 8007334:	08007587 	.word	0x08007587
 8007338:	08007587 	.word	0x08007587
 800733c:	08007587 	.word	0x08007587
 8007340:	08007587 	.word	0x08007587
 8007344:	0800737b 	.word	0x0800737b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007348:	4b94      	ldr	r3, [pc, #592]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007354:	4b91      	ldr	r3, [pc, #580]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	08db      	lsrs	r3, r3, #3
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	4a90      	ldr	r2, [pc, #576]	; (80075a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
 8007364:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007366:	e111      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007368:	4b8d      	ldr	r3, [pc, #564]	; (80075a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800736a:	61bb      	str	r3, [r7, #24]
      break;
 800736c:	e10e      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800736e:	4b8d      	ldr	r3, [pc, #564]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007370:	61bb      	str	r3, [r7, #24]
      break;
 8007372:	e10b      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007374:	4b8c      	ldr	r3, [pc, #560]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007376:	61bb      	str	r3, [r7, #24]
      break;
 8007378:	e108      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800737a:	4b88      	ldr	r3, [pc, #544]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007384:	4b85      	ldr	r3, [pc, #532]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800738e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007390:	4b82      	ldr	r3, [pc, #520]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800739a:	4b80      	ldr	r3, [pc, #512]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800739c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80e1 	beq.w	8007580 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f000 8083 	beq.w	80074cc <HAL_RCC_GetSysClockFreq+0x204>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	f200 80a1 	bhi.w	8007510 <HAL_RCC_GetSysClockFreq+0x248>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x114>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d056      	beq.n	8007488 <HAL_RCC_GetSysClockFreq+0x1c0>
 80073da:	e099      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073dc:	4b6f      	ldr	r3, [pc, #444]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02d      	beq.n	8007444 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073e8:	4b6c      	ldr	r3, [pc, #432]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	08db      	lsrs	r3, r3, #3
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	4a6b      	ldr	r2, [pc, #428]	; (80075a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b62      	ldr	r3, [pc, #392]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a02 	vldr	s12, [r7, #8]
 8007426:	eddf 5a61 	vldr	s11, [pc, #388]	; 80075ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007442:	e087      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80075b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007456:	4b51      	ldr	r3, [pc, #324]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007466:	ed97 6a02 	vldr	s12, [r7, #8]
 800746a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80075ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800746e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007486:	e065      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eddf 6a48 	vldr	s13, [pc, #288]	; 80075b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b40      	ldr	r3, [pc, #256]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80075ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074ca:	e043      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80075b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b2f      	ldr	r3, [pc, #188]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80074f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80075ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800750e:	e021      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80075b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b1e      	ldr	r3, [pc, #120]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a02 	vldr	s12, [r7, #8]
 8007536:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80075ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007552:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007554:	4b11      	ldr	r3, [pc, #68]	; (800759c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	3301      	adds	r3, #1
 8007560:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800756c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007578:	ee17 3a90 	vmov	r3, s15
 800757c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800757e:	e005      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]
      break;
 8007584:	e002      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007586:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007588:	61bb      	str	r3, [r7, #24]
      break;
 800758a:	bf00      	nop
  }

  return sysclockfreq;
 800758c:	69bb      	ldr	r3, [r7, #24]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3724      	adds	r7, #36	; 0x24
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	58024400 	.word	0x58024400
 80075a0:	03d09000 	.word	0x03d09000
 80075a4:	003d0900 	.word	0x003d0900
 80075a8:	017d7840 	.word	0x017d7840
 80075ac:	46000000 	.word	0x46000000
 80075b0:	4c742400 	.word	0x4c742400
 80075b4:	4a742400 	.word	0x4a742400
 80075b8:	4bbebc20 	.word	0x4bbebc20

080075bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075c2:	f7ff fe81 	bl	80072c8 <HAL_RCC_GetSysClockFreq>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <HAL_RCC_GetHCLKFreq+0x50>)
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	490f      	ldr	r1, [pc, #60]	; (8007610 <HAL_RCC_GetHCLKFreq+0x54>)
 80075d4:	5ccb      	ldrb	r3, [r1, r3]
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	fa22 f303 	lsr.w	r3, r2, r3
 80075de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <HAL_RCC_GetHCLKFreq+0x50>)
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	4a09      	ldr	r2, [pc, #36]	; (8007610 <HAL_RCC_GetHCLKFreq+0x54>)
 80075ea:	5cd3      	ldrb	r3, [r2, r3]
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	fa22 f303 	lsr.w	r3, r2, r3
 80075f6:	4a07      	ldr	r2, [pc, #28]	; (8007614 <HAL_RCC_GetHCLKFreq+0x58>)
 80075f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075fa:	4a07      	ldr	r2, [pc, #28]	; (8007618 <HAL_RCC_GetHCLKFreq+0x5c>)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <HAL_RCC_GetHCLKFreq+0x58>)
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	58024400 	.word	0x58024400
 8007610:	0800cff0 	.word	0x0800cff0
 8007614:	24000004 	.word	0x24000004
 8007618:	24000000 	.word	0x24000000

0800761c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007620:	f7ff ffcc 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8007624:	4602      	mov	r2, r0
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007632:	5ccb      	ldrb	r3, [r1, r3]
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	58024400 	.word	0x58024400
 8007644:	0800cff0 	.word	0x0800cff0

08007648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800764c:	f7ff ffb6 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8007650:	4602      	mov	r2, r0
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	4904      	ldr	r1, [pc, #16]	; (8007670 <HAL_RCC_GetPCLK2Freq+0x28>)
 800765e:	5ccb      	ldrb	r3, [r1, r3]
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}
 800766c:	58024400 	.word	0x58024400
 8007670:	0800cff0 	.word	0x0800cff0

08007674 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007678:	b0ca      	sub	sp, #296	; 0x128
 800767a:	af00      	add	r7, sp, #0
 800767c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007680:	2300      	movs	r3, #0
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007686:	2300      	movs	r3, #0
 8007688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007698:	2500      	movs	r5, #0
 800769a:	ea54 0305 	orrs.w	r3, r4, r5
 800769e:	d049      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076aa:	d02f      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80076ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076b0:	d828      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076b6:	d01a      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80076b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076bc:	d822      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80076c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c6:	d007      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076c8:	e01c      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ca:	4bb8      	ldr	r3, [pc, #736]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	4ab7      	ldr	r2, [pc, #732]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80076d6:	e01a      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076dc:	3308      	adds	r3, #8
 80076de:	2102      	movs	r1, #2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 fb61 	bl	8009da8 <RCCEx_PLL2_Config>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80076ec:	e00f      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f2:	3328      	adds	r3, #40	; 0x28
 80076f4:	2102      	movs	r1, #2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 fc08 	bl	8009f0c <RCCEx_PLL3_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007702:	e004      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800770c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007716:	4ba5      	ldr	r3, [pc, #660]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007724:	4aa1      	ldr	r2, [pc, #644]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007726:	430b      	orrs	r3, r1
 8007728:	6513      	str	r3, [r2, #80]	; 0x50
 800772a:	e003      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007740:	f04f 0900 	mov.w	r9, #0
 8007744:	ea58 0309 	orrs.w	r3, r8, r9
 8007748:	d047      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007750:	2b04      	cmp	r3, #4
 8007752:	d82a      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	08007771 	.word	0x08007771
 8007760:	0800777f 	.word	0x0800777f
 8007764:	08007795 	.word	0x08007795
 8007768:	080077b3 	.word	0x080077b3
 800776c:	080077b3 	.word	0x080077b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007770:	4b8e      	ldr	r3, [pc, #568]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	4a8d      	ldr	r2, [pc, #564]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800777c:	e01a      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007782:	3308      	adds	r3, #8
 8007784:	2100      	movs	r1, #0
 8007786:	4618      	mov	r0, r3
 8007788:	f002 fb0e 	bl	8009da8 <RCCEx_PLL2_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007792:	e00f      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007798:	3328      	adds	r3, #40	; 0x28
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f002 fbb5 	bl	8009f0c <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077a8:	e004      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077b0:	e000      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80077b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077bc:	4b7b      	ldr	r3, [pc, #492]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	f023 0107 	bic.w	r1, r3, #7
 80077c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ca:	4a78      	ldr	r2, [pc, #480]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077cc:	430b      	orrs	r3, r1
 80077ce:	6513      	str	r3, [r2, #80]	; 0x50
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80077e6:	f04f 0b00 	mov.w	fp, #0
 80077ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80077ee:	d04c      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80077f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077fa:	d030      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80077fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007800:	d829      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007802:	2bc0      	cmp	r3, #192	; 0xc0
 8007804:	d02d      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007806:	2bc0      	cmp	r3, #192	; 0xc0
 8007808:	d825      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800780a:	2b80      	cmp	r3, #128	; 0x80
 800780c:	d018      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800780e:	2b80      	cmp	r3, #128	; 0x80
 8007810:	d821      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d007      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800781a:	e01c      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781c:	4b63      	ldr	r3, [pc, #396]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	4a62      	ldr	r2, [pc, #392]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007828:	e01c      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782e:	3308      	adds	r3, #8
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f002 fab8 	bl	8009da8 <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800783e:	e011      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007844:	3328      	adds	r3, #40	; 0x28
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f002 fb5f 	bl	8009f0c <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007854:	e006      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800786c:	4b4f      	ldr	r3, [pc, #316]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787a:	4a4c      	ldr	r2, [pc, #304]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800787c:	430b      	orrs	r3, r1
 800787e:	6513      	str	r3, [r2, #80]	; 0x50
 8007880:	e003      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007896:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800789a:	2300      	movs	r3, #0
 800789c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d053      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078b6:	d035      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80078b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078bc:	d82e      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078c2:	d031      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80078c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078c8:	d828      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ce:	d01a      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80078d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d4:	d822      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80078da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078de:	d007      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80078e0:	e01c      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e2:	4b32      	ldr	r3, [pc, #200]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a31      	ldr	r2, [pc, #196]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078ee:	e01c      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	3308      	adds	r3, #8
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f002 fa55 	bl	8009da8 <RCCEx_PLL2_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007904:	e011      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790a:	3328      	adds	r3, #40	; 0x28
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f002 fafc 	bl	8009f0c <RCCEx_PLL3_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800791a:	e006      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007922:	e002      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007924:	bf00      	nop
 8007926:	e000      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10b      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007932:	4b1e      	ldr	r3, [pc, #120]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007936:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007942:	4a1a      	ldr	r2, [pc, #104]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007944:	430b      	orrs	r3, r1
 8007946:	6593      	str	r3, [r2, #88]	; 0x58
 8007948:	e003      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800794e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800795e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007962:	2300      	movs	r3, #0
 8007964:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007968:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d056      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007976:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800797a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800797e:	d038      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007984:	d831      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800798a:	d034      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800798c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007990:	d82b      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007996:	d01d      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800799c:	d825      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d006      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80079a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079a6:	d00a      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80079a8:	e01f      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079aa:	bf00      	nop
 80079ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4ba2      	ldr	r3, [pc, #648]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4aa1      	ldr	r2, [pc, #644]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079bc:	e01c      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 f9ee 	bl	8009da8 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079d2:	e011      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	3328      	adds	r3, #40	; 0x28
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 fa95 	bl	8009f0c <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079e8:	e006      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079f0:	e002      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80079f2:	bf00      	nop
 80079f4:	e000      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80079f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a00:	4b8e      	ldr	r3, [pc, #568]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a04:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a10:	4a8a      	ldr	r2, [pc, #552]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a12:	430b      	orrs	r3, r1
 8007a14:	6593      	str	r3, [r2, #88]	; 0x58
 8007a16:	e003      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007a2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a30:	2300      	movs	r3, #0
 8007a32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d03a      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	2b30      	cmp	r3, #48	; 0x30
 8007a48:	d01f      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007a4a:	2b30      	cmp	r3, #48	; 0x30
 8007a4c:	d819      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d00c      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d815      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d019      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d111      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5e:	4b77      	ldr	r3, [pc, #476]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	4a76      	ldr	r2, [pc, #472]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a6a:	e011      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a70:	3308      	adds	r3, #8
 8007a72:	2102      	movs	r1, #2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f002 f997 	bl	8009da8 <RCCEx_PLL2_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a80:	e006      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a88:	e002      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a98:	4b68      	ldr	r3, [pc, #416]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa6:	4a65      	ldr	r2, [pc, #404]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007aac:	e003      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007ac2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007acc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	d051      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae0:	d035      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae6:	d82e      	bhi.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aec:	d031      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007aee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007af2:	d828      	bhi.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af8:	d01a      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afe:	d822      	bhi.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b08:	d007      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007b0a:	e01c      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0c:	4b4b      	ldr	r3, [pc, #300]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a4a      	ldr	r2, [pc, #296]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b18:	e01c      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1e:	3308      	adds	r3, #8
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f002 f940 	bl	8009da8 <RCCEx_PLL2_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b2e:	e011      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b34:	3328      	adds	r3, #40	; 0x28
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f002 f9e7 	bl	8009f0c <RCCEx_PLL3_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b5c:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6a:	4a34      	ldr	r2, [pc, #208]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6513      	str	r3, [r2, #80]	; 0x50
 8007b70:	e003      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007b94:	460b      	mov	r3, r1
 8007b96:	4313      	orrs	r3, r2
 8007b98:	d056      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba4:	d033      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007baa:	d82c      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bb0:	d02f      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bb6:	d826      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bbc:	d02b      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bc2:	d820      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bc8:	d012      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bce:	d81a      	bhi.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d022      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d115      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bde:	3308      	adds	r3, #8
 8007be0:	2101      	movs	r1, #1
 8007be2:	4618      	mov	r0, r3
 8007be4:	f002 f8e0 	bl	8009da8 <RCCEx_PLL2_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007bee:	e015      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf4:	3328      	adds	r3, #40	; 0x28
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f002 f987 	bl	8009f0c <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c04:	e00a      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c0c:	e006      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c0e:	bf00      	nop
 8007c10:	e004      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c12:	bf00      	nop
 8007c14:	e002      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c16:	bf00      	nop
 8007c18:	e000      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10d      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c28:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c32:	4a02      	ldr	r2, [pc, #8]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6513      	str	r3, [r2, #80]	; 0x50
 8007c38:	e006      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c3a:	bf00      	nop
 8007c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4313      	orrs	r3, r2
 8007c66:	d055      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c74:	d033      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c7a:	d82c      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d02f      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c86:	d826      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c8c:	d02b      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007c8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c92:	d820      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c98:	d012      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9e:	d81a      	bhi.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d022      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca8:	d115      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cae:	3308      	adds	r3, #8
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f002 f878 	bl	8009da8 <RCCEx_PLL2_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cbe:	e015      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc4:	3328      	adds	r3, #40	; 0x28
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f002 f91f 	bl	8009f0c <RCCEx_PLL3_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cd4:	e00a      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cdc:	e006      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007cde:	bf00      	nop
 8007ce0:	e004      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ce2:	bf00      	nop
 8007ce4:	e002      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ce6:	bf00      	nop
 8007ce8:	e000      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007cf4:	4ba3      	ldr	r3, [pc, #652]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d04:	4a9f      	ldr	r2, [pc, #636]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d06:	430b      	orrs	r3, r1
 8007d08:	6593      	str	r3, [r2, #88]	; 0x58
 8007d0a:	e003      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d24:	2300      	movs	r3, #0
 8007d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4313      	orrs	r3, r2
 8007d32:	d037      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3e:	d00e      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d44:	d816      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4e:	d111      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d50:	4b8c      	ldr	r3, [pc, #560]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	4a8b      	ldr	r2, [pc, #556]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d5c:	e00f      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d62:	3308      	adds	r3, #8
 8007d64:	2101      	movs	r1, #1
 8007d66:	4618      	mov	r0, r3
 8007d68:	f002 f81e 	bl	8009da8 <RCCEx_PLL2_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d72:	e004      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d7a:	e000      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d86:	4b7f      	ldr	r3, [pc, #508]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d94:	4a7b      	ldr	r2, [pc, #492]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d96:	430b      	orrs	r3, r1
 8007d98:	6513      	str	r3, [r2, #80]	; 0x50
 8007d9a:	e003      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007db4:	2300      	movs	r3, #0
 8007db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d039      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d81c      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007e11 	.word	0x08007e11
 8007dd8:	08007de5 	.word	0x08007de5
 8007ddc:	08007df3 	.word	0x08007df3
 8007de0:	08007e11 	.word	0x08007e11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de4:	4b67      	ldr	r3, [pc, #412]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	4a66      	ldr	r2, [pc, #408]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007df0:	e00f      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df6:	3308      	adds	r3, #8
 8007df8:	2102      	movs	r1, #2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 ffd4 	bl	8009da8 <RCCEx_PLL2_Config>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e06:	e004      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e0e:	e000      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e1a:	4b5a      	ldr	r3, [pc, #360]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	f023 0103 	bic.w	r1, r3, #3
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e28:	4a56      	ldr	r2, [pc, #344]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e2e:	e003      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f000 809f 	beq.w	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e5a:	4b4b      	ldr	r3, [pc, #300]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4a      	ldr	r2, [pc, #296]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e66:	f7fa ff29 	bl	8002cbc <HAL_GetTick>
 8007e6a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e6e:	e00b      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e70:	f7fa ff24 	bl	8002cbc <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b64      	cmp	r3, #100	; 0x64
 8007e7e:	d903      	bls.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e86:	e005      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e88:	4b3f      	ldr	r3, [pc, #252]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0ed      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d179      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e9c:	4b39      	ldr	r3, [pc, #228]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ea8:	4053      	eors	r3, r2
 8007eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d015      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007eb2:	4b34      	ldr	r3, [pc, #208]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ebe:	4b31      	ldr	r3, [pc, #196]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	4a30      	ldr	r2, [pc, #192]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007eca:	4b2e      	ldr	r3, [pc, #184]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	4a2d      	ldr	r2, [pc, #180]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ed4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ed6:	4a2b      	ldr	r2, [pc, #172]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007edc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eea:	d118      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fa fee6 	bl	8002cbc <HAL_GetTick>
 8007ef0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ef4:	e00d      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef6:	f7fa fee1 	bl	8002cbc <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f00:	1ad2      	subs	r2, r2, r3
 8007f02:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d903      	bls.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007f10:	e005      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0eb      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d129      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f36:	d10e      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f48:	091a      	lsrs	r2, r3, #4
 8007f4a:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	4a0d      	ldr	r2, [pc, #52]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f50:	430b      	orrs	r3, r1
 8007f52:	6113      	str	r3, [r2, #16]
 8007f54:	e005      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007f56:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f60:	6113      	str	r3, [r2, #16]
 8007f62:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f64:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f72:	4a04      	ldr	r2, [pc, #16]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6713      	str	r3, [r2, #112]	; 0x70
 8007f78:	e00e      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007f82:	e009      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007f84:	58024400 	.word	0x58024400
 8007f88:	58024800 	.word	0x58024800
 8007f8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f002 0301 	and.w	r3, r2, #1
 8007fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	f000 8089 	beq.w	80080cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fc0:	2b28      	cmp	r3, #40	; 0x28
 8007fc2:	d86b      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	080080a5 	.word	0x080080a5
 8007fd0:	0800809d 	.word	0x0800809d
 8007fd4:	0800809d 	.word	0x0800809d
 8007fd8:	0800809d 	.word	0x0800809d
 8007fdc:	0800809d 	.word	0x0800809d
 8007fe0:	0800809d 	.word	0x0800809d
 8007fe4:	0800809d 	.word	0x0800809d
 8007fe8:	0800809d 	.word	0x0800809d
 8007fec:	08008071 	.word	0x08008071
 8007ff0:	0800809d 	.word	0x0800809d
 8007ff4:	0800809d 	.word	0x0800809d
 8007ff8:	0800809d 	.word	0x0800809d
 8007ffc:	0800809d 	.word	0x0800809d
 8008000:	0800809d 	.word	0x0800809d
 8008004:	0800809d 	.word	0x0800809d
 8008008:	0800809d 	.word	0x0800809d
 800800c:	08008087 	.word	0x08008087
 8008010:	0800809d 	.word	0x0800809d
 8008014:	0800809d 	.word	0x0800809d
 8008018:	0800809d 	.word	0x0800809d
 800801c:	0800809d 	.word	0x0800809d
 8008020:	0800809d 	.word	0x0800809d
 8008024:	0800809d 	.word	0x0800809d
 8008028:	0800809d 	.word	0x0800809d
 800802c:	080080a5 	.word	0x080080a5
 8008030:	0800809d 	.word	0x0800809d
 8008034:	0800809d 	.word	0x0800809d
 8008038:	0800809d 	.word	0x0800809d
 800803c:	0800809d 	.word	0x0800809d
 8008040:	0800809d 	.word	0x0800809d
 8008044:	0800809d 	.word	0x0800809d
 8008048:	0800809d 	.word	0x0800809d
 800804c:	080080a5 	.word	0x080080a5
 8008050:	0800809d 	.word	0x0800809d
 8008054:	0800809d 	.word	0x0800809d
 8008058:	0800809d 	.word	0x0800809d
 800805c:	0800809d 	.word	0x0800809d
 8008060:	0800809d 	.word	0x0800809d
 8008064:	0800809d 	.word	0x0800809d
 8008068:	0800809d 	.word	0x0800809d
 800806c:	080080a5 	.word	0x080080a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008074:	3308      	adds	r3, #8
 8008076:	2101      	movs	r1, #1
 8008078:	4618      	mov	r0, r3
 800807a:	f001 fe95 	bl	8009da8 <RCCEx_PLL2_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008084:	e00f      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800808a:	3328      	adds	r3, #40	; 0x28
 800808c:	2101      	movs	r1, #1
 800808e:	4618      	mov	r0, r3
 8008090:	f001 ff3c 	bl	8009f0c <RCCEx_PLL3_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800809a:	e004      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080a2:	e000      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80080a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80080ae:	4bbf      	ldr	r3, [pc, #764]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080bc:	4abb      	ldr	r2, [pc, #748]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080be:	430b      	orrs	r3, r1
 80080c0:	6553      	str	r3, [r2, #84]	; 0x54
 80080c2:	e003      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	f002 0302 	and.w	r3, r2, #2
 80080d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080dc:	2300      	movs	r3, #0
 80080de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80080e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80080e6:	460b      	mov	r3, r1
 80080e8:	4313      	orrs	r3, r2
 80080ea:	d041      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080f2:	2b05      	cmp	r3, #5
 80080f4:	d824      	bhi.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	08008149 	.word	0x08008149
 8008100:	08008115 	.word	0x08008115
 8008104:	0800812b 	.word	0x0800812b
 8008108:	08008149 	.word	0x08008149
 800810c:	08008149 	.word	0x08008149
 8008110:	08008149 	.word	0x08008149
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008118:	3308      	adds	r3, #8
 800811a:	2101      	movs	r1, #1
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fe43 	bl	8009da8 <RCCEx_PLL2_Config>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008128:	e00f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812e:	3328      	adds	r3, #40	; 0x28
 8008130:	2101      	movs	r1, #1
 8008132:	4618      	mov	r0, r3
 8008134:	f001 feea 	bl	8009f0c <RCCEx_PLL3_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008146:	e000      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008152:	4b96      	ldr	r3, [pc, #600]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008156:	f023 0107 	bic.w	r1, r3, #7
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008160:	4a92      	ldr	r2, [pc, #584]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008162:	430b      	orrs	r3, r1
 8008164:	6553      	str	r3, [r2, #84]	; 0x54
 8008166:	e003      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f002 0304 	and.w	r3, r2, #4
 800817c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008186:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	d044      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008198:	2b05      	cmp	r3, #5
 800819a:	d825      	bhi.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081f1 	.word	0x080081f1
 80081a8:	080081bd 	.word	0x080081bd
 80081ac:	080081d3 	.word	0x080081d3
 80081b0:	080081f1 	.word	0x080081f1
 80081b4:	080081f1 	.word	0x080081f1
 80081b8:	080081f1 	.word	0x080081f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c0:	3308      	adds	r3, #8
 80081c2:	2101      	movs	r1, #1
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fdef 	bl	8009da8 <RCCEx_PLL2_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80081d0:	e00f      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d6:	3328      	adds	r3, #40	; 0x28
 80081d8:	2101      	movs	r1, #1
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fe96 	bl	8009f0c <RCCEx_PLL3_Config>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80081e6:	e004      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081ee:	e000      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80081f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081fa:	4b6c      	ldr	r3, [pc, #432]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fe:	f023 0107 	bic.w	r1, r3, #7
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800820a:	4a68      	ldr	r2, [pc, #416]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800820c:	430b      	orrs	r3, r1
 800820e:	6593      	str	r3, [r2, #88]	; 0x58
 8008210:	e003      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f002 0320 	and.w	r3, r2, #32
 8008226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800822a:	2300      	movs	r3, #0
 800822c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d055      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008246:	d033      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800824c:	d82c      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800824e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008252:	d02f      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008258:	d826      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800825a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800825e:	d02b      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008264:	d820      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800826a:	d012      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800826c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008270:	d81a      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d022      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800827a:	d115      	bne.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008280:	3308      	adds	r3, #8
 8008282:	2100      	movs	r1, #0
 8008284:	4618      	mov	r0, r3
 8008286:	f001 fd8f 	bl	8009da8 <RCCEx_PLL2_Config>
 800828a:	4603      	mov	r3, r0
 800828c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008290:	e015      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008296:	3328      	adds	r3, #40	; 0x28
 8008298:	2102      	movs	r1, #2
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fe36 	bl	8009f0c <RCCEx_PLL3_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80082a6:	e00a      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082ae:	e006      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082b0:	bf00      	nop
 80082b2:	e004      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082b4:	bf00      	nop
 80082b6:	e002      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082b8:	bf00      	nop
 80082ba:	e000      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082c6:	4b39      	ldr	r3, [pc, #228]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d6:	4a35      	ldr	r2, [pc, #212]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082d8:	430b      	orrs	r3, r1
 80082da:	6553      	str	r3, [r2, #84]	; 0x54
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80082f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082f6:	2300      	movs	r3, #0
 80082f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d058      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800830e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008312:	d033      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008314:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008318:	d82c      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800831a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831e:	d02f      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008324:	d826      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800832a:	d02b      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800832c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008330:	d820      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008336:	d012      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800833c:	d81a      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d022      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008346:	d115      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800834c:	3308      	adds	r3, #8
 800834e:	2100      	movs	r1, #0
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fd29 	bl	8009da8 <RCCEx_PLL2_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800835c:	e015      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008362:	3328      	adds	r3, #40	; 0x28
 8008364:	2102      	movs	r1, #2
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fdd0 	bl	8009f0c <RCCEx_PLL3_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008372:	e00a      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800837a:	e006      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800837c:	bf00      	nop
 800837e:	e004      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008380:	bf00      	nop
 8008382:	e002      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008384:	bf00      	nop
 8008386:	e000      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10e      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008392:	4b06      	ldr	r3, [pc, #24]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008396:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800839a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083a2:	4a02      	ldr	r2, [pc, #8]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083a4:	430b      	orrs	r3, r1
 80083a6:	6593      	str	r3, [r2, #88]	; 0x58
 80083a8:	e006      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80083aa:	bf00      	nop
 80083ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80083c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083c8:	2300      	movs	r3, #0
 80083ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80083d2:	460b      	mov	r3, r1
 80083d4:	4313      	orrs	r3, r2
 80083d6:	d055      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083e4:	d033      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80083e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083ea:	d82c      	bhi.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80083ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f0:	d02f      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80083f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f6:	d826      	bhi.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80083f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083fc:	d02b      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80083fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008402:	d820      	bhi.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008408:	d012      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800840a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800840e:	d81a      	bhi.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d022      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008418:	d115      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841e:	3308      	adds	r3, #8
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f001 fcc0 	bl	8009da8 <RCCEx_PLL2_Config>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800842e:	e015      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008434:	3328      	adds	r3, #40	; 0x28
 8008436:	2102      	movs	r1, #2
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fd67 	bl	8009f0c <RCCEx_PLL3_Config>
 800843e:	4603      	mov	r3, r0
 8008440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008444:	e00a      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800844c:	e006      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800844e:	bf00      	nop
 8008450:	e004      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800845a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008464:	4ba1      	ldr	r3, [pc, #644]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008468:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008470:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008474:	4a9d      	ldr	r2, [pc, #628]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008476:	430b      	orrs	r3, r1
 8008478:	6593      	str	r3, [r2, #88]	; 0x58
 800847a:	e003      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008480:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f002 0308 	and.w	r3, r2, #8
 8008490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008494:	2300      	movs	r3, #0
 8008496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800849a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d01e      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d10c      	bne.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b6:	3328      	adds	r3, #40	; 0x28
 80084b8:	2102      	movs	r1, #2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fd26 	bl	8009f0c <RCCEx_PLL3_Config>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80084cc:	4b87      	ldr	r3, [pc, #540]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084dc:	4a83      	ldr	r2, [pc, #524]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084de:	430b      	orrs	r3, r1
 80084e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f002 0310 	and.w	r3, r2, #16
 80084ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084f2:	2300      	movs	r3, #0
 80084f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80084f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80084fc:	460b      	mov	r3, r1
 80084fe:	4313      	orrs	r3, r2
 8008500:	d01e      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800850a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850e:	d10c      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008514:	3328      	adds	r3, #40	; 0x28
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fcf7 	bl	8009f0c <RCCEx_PLL3_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800852a:	4b70      	ldr	r3, [pc, #448]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800853a:	4a6c      	ldr	r2, [pc, #432]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800853c:	430b      	orrs	r3, r1
 800853e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800854c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008550:	2300      	movs	r3, #0
 8008552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008556:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	d03e      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800856c:	d022      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800856e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008572:	d81b      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800857c:	d00b      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800857e:	e015      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008584:	3308      	adds	r3, #8
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fc0d 	bl	8009da8 <RCCEx_PLL2_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008594:	e00f      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859a:	3328      	adds	r3, #40	; 0x28
 800859c:	2102      	movs	r1, #2
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fcb4 	bl	8009f0c <RCCEx_PLL3_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80085aa:	e004      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085b2:	e000      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80085b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085be:	4b4b      	ldr	r3, [pc, #300]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085ce:	4a47      	ldr	r2, [pc, #284]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085d0:	430b      	orrs	r3, r1
 80085d2:	6593      	str	r3, [r2, #88]	; 0x58
 80085d4:	e003      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80085ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80085ec:	2300      	movs	r3, #0
 80085ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80085f4:	460b      	mov	r3, r1
 80085f6:	4313      	orrs	r3, r2
 80085f8:	d03b      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008602:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008606:	d01f      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800860c:	d818      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800860e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008612:	d003      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008618:	d007      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800861a:	e011      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861c:	4b33      	ldr	r3, [pc, #204]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	4a32      	ldr	r2, [pc, #200]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008628:	e00f      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862e:	3328      	adds	r3, #40	; 0x28
 8008630:	2101      	movs	r1, #1
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fc6a 	bl	8009f0c <RCCEx_PLL3_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800863e:	e004      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008646:	e000      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800864a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008652:	4b26      	ldr	r3, [pc, #152]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008662:	4a22      	ldr	r2, [pc, #136]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008664:	430b      	orrs	r3, r1
 8008666:	6553      	str	r3, [r2, #84]	; 0x54
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800866e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800867e:	673b      	str	r3, [r7, #112]	; 0x70
 8008680:	2300      	movs	r3, #0
 8008682:	677b      	str	r3, [r7, #116]	; 0x74
 8008684:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d034      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869c:	d007      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800869e:	e011      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a0:	4b12      	ldr	r3, [pc, #72]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4a11      	ldr	r2, [pc, #68]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086ac:	e00e      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	3308      	adds	r3, #8
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fb76 	bl	8009da8 <RCCEx_PLL2_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086c2:	e003      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10d      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	4a02      	ldr	r2, [pc, #8]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086e4:	430b      	orrs	r3, r1
 80086e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086e8:	e006      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008704:	66bb      	str	r3, [r7, #104]	; 0x68
 8008706:	2300      	movs	r3, #0
 8008708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800870a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800870e:	460b      	mov	r3, r1
 8008710:	4313      	orrs	r3, r2
 8008712:	d00c      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008718:	3328      	adds	r3, #40	; 0x28
 800871a:	2102      	movs	r1, #2
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fbf5 	bl	8009f0c <RCCEx_PLL3_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800872e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800873a:	663b      	str	r3, [r7, #96]	; 0x60
 800873c:	2300      	movs	r3, #0
 800873e:	667b      	str	r3, [r7, #100]	; 0x64
 8008740:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008744:	460b      	mov	r3, r1
 8008746:	4313      	orrs	r3, r2
 8008748:	d038      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008756:	d018      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875c:	d811      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800875e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008762:	d014      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008768:	d80b      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d011      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800876e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008772:	d106      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008774:	4bc3      	ldr	r3, [pc, #780]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	4ac2      	ldr	r2, [pc, #776]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800877a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800877e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008780:	e008      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008788:	e004      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800878a:	bf00      	nop
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800879c:	4bb9      	ldr	r3, [pc, #740]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ac:	4ab5      	ldr	r2, [pc, #724]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087ae:	430b      	orrs	r3, r1
 80087b0:	6553      	str	r3, [r2, #84]	; 0x54
 80087b2:	e003      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80087c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ca:	2300      	movs	r3, #0
 80087cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80087d2:	460b      	mov	r3, r1
 80087d4:	4313      	orrs	r3, r2
 80087d6:	d009      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087d8:	4baa      	ldr	r3, [pc, #680]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e6:	4aa7      	ldr	r2, [pc, #668]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80087f8:	653b      	str	r3, [r7, #80]	; 0x50
 80087fa:	2300      	movs	r3, #0
 80087fc:	657b      	str	r3, [r7, #84]	; 0x54
 80087fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008802:	460b      	mov	r3, r1
 8008804:	4313      	orrs	r3, r2
 8008806:	d00a      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008808:	4b9e      	ldr	r3, [pc, #632]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008818:	4a9a      	ldr	r2, [pc, #616]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881a:	430b      	orrs	r3, r1
 800881c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800882a:	64bb      	str	r3, [r7, #72]	; 0x48
 800882c:	2300      	movs	r3, #0
 800882e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008830:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008834:	460b      	mov	r3, r1
 8008836:	4313      	orrs	r3, r2
 8008838:	d009      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800883a:	4b92      	ldr	r3, [pc, #584]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800883c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008848:	4a8e      	ldr	r2, [pc, #568]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800884a:	430b      	orrs	r3, r1
 800884c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800885a:	643b      	str	r3, [r7, #64]	; 0x40
 800885c:	2300      	movs	r3, #0
 800885e:	647b      	str	r3, [r7, #68]	; 0x44
 8008860:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008864:	460b      	mov	r3, r1
 8008866:	4313      	orrs	r3, r2
 8008868:	d00e      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800886a:	4b86      	ldr	r3, [pc, #536]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	4a85      	ldr	r2, [pc, #532]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008874:	6113      	str	r3, [r2, #16]
 8008876:	4b83      	ldr	r3, [pc, #524]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008878:	6919      	ldr	r1, [r3, #16]
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008882:	4a80      	ldr	r2, [pc, #512]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008884:	430b      	orrs	r3, r1
 8008886:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800889a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800889e:	460b      	mov	r3, r1
 80088a0:	4313      	orrs	r3, r2
 80088a2:	d009      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088a4:	4b77      	ldr	r3, [pc, #476]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b2:	4a74      	ldr	r2, [pc, #464]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088b4:	430b      	orrs	r3, r1
 80088b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80088c4:	633b      	str	r3, [r7, #48]	; 0x30
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
 80088ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80088ce:	460b      	mov	r3, r1
 80088d0:	4313      	orrs	r3, r2
 80088d2:	d00a      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088d4:	4b6b      	ldr	r3, [pc, #428]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80088dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e4:	4a67      	ldr	r2, [pc, #412]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e6:	430b      	orrs	r3, r1
 80088e8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	2100      	movs	r1, #0
 80088f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008900:	460b      	mov	r3, r1
 8008902:	4313      	orrs	r3, r2
 8008904:	d011      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890a:	3308      	adds	r3, #8
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fa4a 	bl	8009da8 <RCCEx_PLL2_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800891a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	2100      	movs	r1, #0
 8008934:	6239      	str	r1, [r7, #32]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
 800893c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008940:	460b      	mov	r3, r1
 8008942:	4313      	orrs	r3, r2
 8008944:	d011      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894a:	3308      	adds	r3, #8
 800894c:	2101      	movs	r1, #1
 800894e:	4618      	mov	r0, r3
 8008950:	f001 fa2a 	bl	8009da8 <RCCEx_PLL2_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800895a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	2100      	movs	r1, #0
 8008974:	61b9      	str	r1, [r7, #24]
 8008976:	f003 0304 	and.w	r3, r3, #4
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008980:	460b      	mov	r3, r1
 8008982:	4313      	orrs	r3, r2
 8008984:	d011      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898a:	3308      	adds	r3, #8
 800898c:	2102      	movs	r1, #2
 800898e:	4618      	mov	r0, r3
 8008990:	f001 fa0a 	bl	8009da8 <RCCEx_PLL2_Config>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800899a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	2100      	movs	r1, #0
 80089b4:	6139      	str	r1, [r7, #16]
 80089b6:	f003 0308 	and.w	r3, r3, #8
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80089c0:	460b      	mov	r3, r1
 80089c2:	4313      	orrs	r3, r2
 80089c4:	d011      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ca:	3328      	adds	r3, #40	; 0x28
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fa9c 	bl	8009f0c <RCCEx_PLL3_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80089da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	2100      	movs	r1, #0
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a00:	460b      	mov	r3, r1
 8008a02:	4313      	orrs	r3, r2
 8008a04:	d011      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	3328      	adds	r3, #40	; 0x28
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa7c 	bl	8009f0c <RCCEx_PLL3_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	2100      	movs	r1, #0
 8008a34:	6039      	str	r1, [r7, #0]
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d011      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	3328      	adds	r3, #40	; 0x28
 8008a4c:	2102      	movs	r1, #2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fa5c 	bl	8009f0c <RCCEx_PLL3_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008a6a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e000      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a84:	58024400 	.word	0x58024400

08008a88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b090      	sub	sp, #64	; 0x40
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	f040 8094 	bne.w	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008aa0:	4b9e      	ldr	r3, [pc, #632]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	f200 8087 	bhi.w	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008ab2:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008acd 	.word	0x08008acd
 8008abc:	08008af5 	.word	0x08008af5
 8008ac0:	08008b1d 	.word	0x08008b1d
 8008ac4:	08008bb9 	.word	0x08008bb9
 8008ac8:	08008b45 	.word	0x08008b45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008acc:	4b93      	ldr	r3, [pc, #588]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ad8:	d108      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 f810 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae8:	f000 bd45 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af0:	f000 bd41 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008af4:	4b89      	ldr	r3, [pc, #548]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b00:	d108      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b02:	f107 0318 	add.w	r3, r7, #24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fd54 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b10:	f000 bd31 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b18:	f000 bd2d 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b1c:	4b7f      	ldr	r3, [pc, #508]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b28:	d108      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fe94 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b38:	f000 bd1d 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b40:	f000 bd19 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b44:	4b75      	ldr	r3, [pc, #468]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b4e:	4b73      	ldr	r3, [pc, #460]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0304 	and.w	r3, r3, #4
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b60:	4b6e      	ldr	r3, [pc, #440]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	4a6d      	ldr	r2, [pc, #436]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b72:	e01f      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b74:	4b69      	ldr	r3, [pc, #420]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b80:	d106      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b88:	d102      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b8a:	4b66      	ldr	r3, [pc, #408]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b8e:	e011      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b90:	4b62      	ldr	r3, [pc, #392]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b9c:	d106      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba4:	d102      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ba6:	4b60      	ldr	r3, [pc, #384]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008baa:	e003      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008bb0:	f000 bce1 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008bb4:	f000 bcdf 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bb8:	4b5c      	ldr	r3, [pc, #368]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bbc:	f000 bcdb 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc4:	f000 bcd7 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bcc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	f040 80ad 	bne.w	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008bd6:	4b51      	ldr	r3, [pc, #324]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008bde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be6:	d056      	beq.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bee:	f200 8090 	bhi.w	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	2bc0      	cmp	r3, #192	; 0xc0
 8008bf6:	f000 8088 	beq.w	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8008bfe:	f200 8088 	bhi.w	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	2b80      	cmp	r3, #128	; 0x80
 8008c06:	d032      	beq.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	2b80      	cmp	r3, #128	; 0x80
 8008c0c:	f200 8081 	bhi.w	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	2b40      	cmp	r3, #64	; 0x40
 8008c1a:	d014      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008c1c:	e079      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c1e:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c2a:	d108      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 ff67 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3a:	f000 bc9c 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c42:	f000 bc98 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c46:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c52:	d108      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c54:	f107 0318 	add.w	r3, r7, #24
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fcab 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c62:	f000 bc88 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c6a:	f000 bc84 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c6e:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c7a:	d108      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7c:	f107 030c 	add.w	r3, r7, #12
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 fdeb 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c8a:	f000 bc74 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c92:	f000 bc70 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c96:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ca0:	4b1e      	ldr	r3, [pc, #120]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d10c      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	08db      	lsrs	r3, r3, #3
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	4a18      	ldr	r2, [pc, #96]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc4:	e01f      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cc6:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cd2:	d106      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cda:	d102      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cdc:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce0:	e011      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ce2:	4b0e      	ldr	r3, [pc, #56]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cee:	d106      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf6:	d102      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d02:	f000 bc38 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d06:	f000 bc36 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d0a:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d0e:	f000 bc32 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d16:	f000 bc2e 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d1a:	bf00      	nop
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	03d09000 	.word	0x03d09000
 8008d24:	003d0900 	.word	0x003d0900
 8008d28:	017d7840 	.word	0x017d7840
 8008d2c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d34:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008d38:	430b      	orrs	r3, r1
 8008d3a:	f040 809c 	bne.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008d3e:	4b9e      	ldr	r3, [pc, #632]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d42:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008d46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d4e:	d054      	beq.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d56:	f200 808b 	bhi.w	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d60:	f000 8083 	beq.w	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d6a:	f200 8081 	bhi.w	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d74:	d02f      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d7c:	d878      	bhi.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d004      	beq.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d8a:	d012      	beq.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008d8c:	e070      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d8e:	4b8a      	ldr	r3, [pc, #552]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d9a:	d107      	bne.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 feaf 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008daa:	e3e4      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008db0:	e3e1      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008db2:	4b81      	ldr	r3, [pc, #516]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc0:	f107 0318 	add.w	r3, r7, #24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fbf5 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dce:	e3d2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd4:	e3cf      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dd6:	4b78      	ldr	r3, [pc, #480]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de2:	d107      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de4:	f107 030c 	add.w	r3, r7, #12
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fd37 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df2:	e3c0      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df8:	e3bd      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dfa:	4b6f      	ldr	r3, [pc, #444]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e04:	4b6c      	ldr	r3, [pc, #432]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d10c      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d109      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e16:	4b68      	ldr	r3, [pc, #416]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	08db      	lsrs	r3, r3, #3
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	4a66      	ldr	r2, [pc, #408]	; (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008e22:	fa22 f303 	lsr.w	r3, r2, r3
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e28:	e01e      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e2a:	4b63      	ldr	r3, [pc, #396]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e36:	d106      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e3e:	d102      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e40:	4b5f      	ldr	r3, [pc, #380]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e44:	e010      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e46:	4b5c      	ldr	r3, [pc, #368]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e52:	d106      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5a:	d102      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e5c:	4b59      	ldr	r3, [pc, #356]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e60:	e002      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008e66:	e386      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e68:	e385      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e6a:	4b57      	ldr	r3, [pc, #348]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6e:	e382      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e37f      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	f040 80a7 	bne.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008e84:	4b4c      	ldr	r3, [pc, #304]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e88:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008e8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e94:	d055      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e9c:	f200 8096 	bhi.w	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ea6:	f000 8084 	beq.w	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008eb0:	f200 808c 	bhi.w	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eba:	d030      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ec2:	f200 8083 	bhi.w	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ed2:	d012      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008ed4:	e07a      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ed6:	4b38      	ldr	r3, [pc, #224]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fe0b 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef2:	e340      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef8:	e33d      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008efa:	4b2f      	ldr	r3, [pc, #188]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f08:	f107 0318 	add.w	r3, r7, #24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fb51 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f16:	e32e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1c:	e32b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1e:	4b26      	ldr	r3, [pc, #152]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f2a:	d107      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2c:	f107 030c 	add.w	r3, r7, #12
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fc93 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3a:	e31c      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f40:	e319      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f42:	4b1d      	ldr	r3, [pc, #116]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d10c      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f5e:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f70:	e01e      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f7e:	d106      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f86:	d102      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f88:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8c:	e010      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa2:	d102      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fa4:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e002      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fae:	e2e2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fb0:	e2e1      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb6:	e2de      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	03d09000 	.word	0x03d09000
 8008fc0:	003d0900 	.word	0x003d0900
 8008fc4:	017d7840 	.word	0x017d7840
 8008fc8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fd0:	e2d1      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	f040 809c 	bne.w	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008fe0:	4b93      	ldr	r3, [pc, #588]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008fe8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff0:	d054      	beq.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff8:	f200 808b 	bhi.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009002:	f000 8083 	beq.w	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800900c:	f200 8081 	bhi.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009016:	d02f      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800901e:	d878      	bhi.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800902c:	d012      	beq.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800902e:	e070      	b.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009030:	4b7f      	ldr	r3, [pc, #508]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800903c:	d107      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800903e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fd5e 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904c:	e293      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009052:	e290      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009054:	4b76      	ldr	r3, [pc, #472]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800905c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009060:	d107      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009062:	f107 0318 	add.w	r3, r7, #24
 8009066:	4618      	mov	r0, r3
 8009068:	f000 faa4 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009070:	e281      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009076:	e27e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009078:	4b6d      	ldr	r3, [pc, #436]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009084:	d107      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009086:	f107 030c 	add.w	r3, r7, #12
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fbe6 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009094:	e26f      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800909a:	e26c      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800909c:	4b64      	ldr	r3, [pc, #400]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800909e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090a6:	4b62      	ldr	r3, [pc, #392]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d10c      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80090b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d109      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b8:	4b5d      	ldr	r3, [pc, #372]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	08db      	lsrs	r3, r3, #3
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	4a5c      	ldr	r2, [pc, #368]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ca:	e01e      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090cc:	4b58      	ldr	r3, [pc, #352]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d8:	d106      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090e0:	d102      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090e2:	4b55      	ldr	r3, [pc, #340]	; (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e6:	e010      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e8:	4b51      	ldr	r3, [pc, #324]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f4:	d106      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fc:	d102      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090fe:	4b4f      	ldr	r3, [pc, #316]	; (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009102:	e002      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009108:	e235      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800910a:	e234      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800910c:	4b4c      	ldr	r3, [pc, #304]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009110:	e231      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009116:	e22e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009120:	430b      	orrs	r3, r1
 8009122:	f040 808f 	bne.w	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009126:	4b42      	ldr	r3, [pc, #264]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800912e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009136:	d06b      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800913e:	d874      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009146:	d056      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800914e:	d86c      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009156:	d03b      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800915e:	d864      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009166:	d021      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916e:	d85c      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	2b00      	cmp	r3, #0
 8009174:	d004      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917c:	d004      	beq.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800917e:	e054      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009180:	f7fe fa4c 	bl	800761c <HAL_RCC_GetPCLK1Freq>
 8009184:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009186:	e1f6      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009188:	4b29      	ldr	r3, [pc, #164]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009194:	d107      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009196:	f107 0318 	add.w	r3, r7, #24
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fa0a 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a4:	e1e7      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091aa:	e1e4      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ac:	4b20      	ldr	r3, [pc, #128]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fb4c 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c8:	e1d5      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ce:	e1d2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091d0:	4b17      	ldr	r3, [pc, #92]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d109      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091dc:	4b14      	ldr	r3, [pc, #80]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	08db      	lsrs	r3, r3, #3
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ee:	e1c2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f4:	e1bf      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80091f6:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009202:	d102      	bne.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009208:	e1b5      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800920e:	e1b2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800921c:	d102      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800921e:	4b07      	ldr	r3, [pc, #28]	; (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009222:	e1a8      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009228:	e1a5      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800922e:	e1a2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	003d0900 	.word	0x003d0900
 800923c:	017d7840 	.word	0x017d7840
 8009240:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009248:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800924c:	430b      	orrs	r3, r1
 800924e:	d173      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009250:	4b9c      	ldr	r3, [pc, #624]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009258:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009260:	d02f      	beq.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009268:	d863      	bhi.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009276:	d012      	beq.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009278:	e05b      	b.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800927a:	4b92      	ldr	r3, [pc, #584]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009286:	d107      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009288:	f107 0318 	add.w	r3, r7, #24
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f991 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009296:	e16e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800929c:	e16b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800929e:	4b89      	ldr	r3, [pc, #548]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092aa:	d107      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ac:	f107 030c 	add.w	r3, r7, #12
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fad3 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ba:	e15c      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c0:	e159      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092c2:	4b80      	ldr	r3, [pc, #512]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092cc:	4b7d      	ldr	r3, [pc, #500]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d10c      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092de:	4b79      	ldr	r3, [pc, #484]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	08db      	lsrs	r3, r3, #3
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	4a77      	ldr	r2, [pc, #476]	; (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80092ea:	fa22 f303 	lsr.w	r3, r2, r3
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f0:	e01e      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092f2:	4b74      	ldr	r3, [pc, #464]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fe:	d106      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009306:	d102      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009308:	4b70      	ldr	r3, [pc, #448]	; (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800930c:	e010      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800930e:	4b6d      	ldr	r3, [pc, #436]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800931a:	d106      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009322:	d102      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009324:	4b6a      	ldr	r3, [pc, #424]	; (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009328:	e002      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800932e:	e122      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009330:	e121      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009336:	e11e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009340:	430b      	orrs	r3, r1
 8009342:	d133      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009344:	4b5f      	ldr	r3, [pc, #380]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800934c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935a:	d012      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800935c:	e023      	b.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800935e:	4b59      	ldr	r3, [pc, #356]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936a:	d107      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800936c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fbc7 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937a:	e0fc      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009380:	e0f9      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009382:	4b50      	ldr	r3, [pc, #320]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800938e:	d107      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009390:	f107 0318 	add.w	r3, r7, #24
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f90d 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800939e:	e0ea      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093a4:	e0e7      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093aa:	e0e4      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80093b4:	430b      	orrs	r3, r1
 80093b6:	f040 808d 	bne.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80093ba:	4b42      	ldr	r3, [pc, #264]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80093c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ca:	d06b      	beq.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093d2:	d874      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093da:	d056      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e2:	d86c      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ea:	d03b      	beq.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093f2:	d864      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093fa:	d021      	beq.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009402:	d85c      	bhi.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009410:	d004      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009412:	e054      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009414:	f000 f8b8 	bl	8009588 <HAL_RCCEx_GetD3PCLK1Freq>
 8009418:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800941a:	e0ac      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800941c:	4b29      	ldr	r3, [pc, #164]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009428:	d107      	bne.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942a:	f107 0318 	add.w	r3, r7, #24
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f8c0 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009438:	e09d      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800943e:	e09a      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009440:	4b20      	ldr	r3, [pc, #128]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800944c:	d107      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944e:	f107 030c 	add.w	r3, r7, #12
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fa02 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800945c:	e08b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009462:	e088      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009464:	4b17      	ldr	r3, [pc, #92]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b04      	cmp	r3, #4
 800946e:	d109      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009470:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	08db      	lsrs	r3, r3, #3
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	4a13      	ldr	r2, [pc, #76]	; (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009482:	e078      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009488:	e075      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800948a:	4b0e      	ldr	r3, [pc, #56]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009496:	d102      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949c:	e06b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a2:	e068      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094b0:	d102      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80094b2:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b6:	e05e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094bc:	e05b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c2:	e058      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094c4:	58024400 	.word	0x58024400
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	003d0900 	.word	0x003d0900
 80094d0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80094d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80094dc:	430b      	orrs	r3, r1
 80094de:	d148      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80094e0:	4b27      	ldr	r3, [pc, #156]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f0:	d02a      	beq.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f8:	d838      	bhi.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009506:	d00d      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009508:	e030      	b.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800950a:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951c:	e02b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009522:	e028      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009524:	4b16      	ldr	r3, [pc, #88]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009530:	d107      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fae4 	bl	8009b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009540:	e019      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009546:	e016      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009554:	d107      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009556:	f107 0318 	add.w	r3, r7, #24
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f82a 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009564:	e007      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800956a:	e004      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009570:	e001      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009578:	4618      	mov	r0, r3
 800957a:	3740      	adds	r7, #64	; 0x40
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	58024400 	.word	0x58024400
 8009584:	017d7840 	.word	0x017d7840

08009588 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800958c:	f7fe f816 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8009590:	4602      	mov	r2, r0
 8009592:	4b06      	ldr	r3, [pc, #24]	; (80095ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	091b      	lsrs	r3, r3, #4
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	4904      	ldr	r1, [pc, #16]	; (80095b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800959e:	5ccb      	ldrb	r3, [r1, r3]
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	58024400 	.word	0x58024400
 80095b0:	0800cff0 	.word	0x0800cff0

080095b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b089      	sub	sp, #36	; 0x24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095bc:	4ba1      	ldr	r3, [pc, #644]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80095c6:	4b9f      	ldr	r3, [pc, #636]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	0b1b      	lsrs	r3, r3, #12
 80095cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095d2:	4b9c      	ldr	r3, [pc, #624]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	091b      	lsrs	r3, r3, #4
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80095de:	4b99      	ldr	r3, [pc, #612]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e2:	08db      	lsrs	r3, r3, #3
 80095e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	fb02 f303 	mul.w	r3, r2, r3
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 8111 	beq.w	8009824 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b02      	cmp	r3, #2
 8009606:	f000 8083 	beq.w	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b02      	cmp	r3, #2
 800960e:	f200 80a1 	bhi.w	8009754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d056      	beq.n	80096cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800961e:	e099      	b.n	8009754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009620:	4b88      	ldr	r3, [pc, #544]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d02d      	beq.n	8009688 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800962c:	4b85      	ldr	r3, [pc, #532]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	4a84      	ldr	r2, [pc, #528]	; (8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009638:	fa22 f303 	lsr.w	r3, r2, r3
 800963c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	ee07 3a90 	vmov	s15, r3
 8009644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009656:	4b7b      	ldr	r3, [pc, #492]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009666:	ed97 6a03 	vldr	s12, [r7, #12]
 800966a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800966e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009686:	e087      	b.n	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969a:	4b6a      	ldr	r3, [pc, #424]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ca:	e065      	b.n	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096de:	4b59      	ldr	r3, [pc, #356]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970e:	e043      	b.n	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800971e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009722:	4b48      	ldr	r3, [pc, #288]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009732:	ed97 6a03 	vldr	s12, [r7, #12]
 8009736:	eddf 5a45 	vldr	s11, [pc, #276]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800973a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009752:	e021      	b.n	8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	ee07 3a90 	vmov	s15, r3
 800975a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009766:	4b37      	ldr	r3, [pc, #220]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009776:	ed97 6a03 	vldr	s12, [r7, #12]
 800977a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800984c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800977e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800978a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009796:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009798:	4b2a      	ldr	r3, [pc, #168]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	0a5b      	lsrs	r3, r3, #9
 800979e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097be:	ee17 2a90 	vmov	r2, s15
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80097c6:	4b1f      	ldr	r3, [pc, #124]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ec:	ee17 2a90 	vmov	r2, s15
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80097f4:	4b13      	ldr	r3, [pc, #76]	; (8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	0e1b      	lsrs	r3, r3, #24
 80097fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800980a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800980e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800981a:	ee17 2a90 	vmov	r2, s15
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009822:	e008      	b.n	8009836 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	609a      	str	r2, [r3, #8]
}
 8009836:	bf00      	nop
 8009838:	3724      	adds	r7, #36	; 0x24
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	58024400 	.word	0x58024400
 8009848:	03d09000 	.word	0x03d09000
 800984c:	46000000 	.word	0x46000000
 8009850:	4c742400 	.word	0x4c742400
 8009854:	4a742400 	.word	0x4a742400
 8009858:	4bbebc20 	.word	0x4bbebc20

0800985c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800985c:	b480      	push	{r7}
 800985e:	b089      	sub	sp, #36	; 0x24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009864:	4ba1      	ldr	r3, [pc, #644]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009868:	f003 0303 	and.w	r3, r3, #3
 800986c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800986e:	4b9f      	ldr	r3, [pc, #636]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009872:	0d1b      	lsrs	r3, r3, #20
 8009874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800987a:	4b9c      	ldr	r3, [pc, #624]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009886:	4b99      	ldr	r3, [pc, #612]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988a:	08db      	lsrs	r3, r3, #3
 800988c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	fb02 f303 	mul.w	r3, r2, r3
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8111 	beq.w	8009acc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	f000 8083 	beq.w	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	f200 80a1 	bhi.w	80099fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d056      	beq.n	8009974 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098c6:	e099      	b.n	80099fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098c8:	4b88      	ldr	r3, [pc, #544]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02d      	beq.n	8009930 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098d4:	4b85      	ldr	r3, [pc, #532]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	08db      	lsrs	r3, r3, #3
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	4a84      	ldr	r2, [pc, #528]	; (8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098e0:	fa22 f303 	lsr.w	r3, r2, r3
 80098e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fe:	4b7b      	ldr	r3, [pc, #492]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009912:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800992e:	e087      	b.n	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800993e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009942:	4b6a      	ldr	r3, [pc, #424]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009952:	ed97 6a03 	vldr	s12, [r7, #12]
 8009956:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800995a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009972:	e065      	b.n	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009986:	4b59      	ldr	r3, [pc, #356]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009996:	ed97 6a03 	vldr	s12, [r7, #12]
 800999a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800999e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b6:	e043      	b.n	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ca:	4b48      	ldr	r3, [pc, #288]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099da:	ed97 6a03 	vldr	s12, [r7, #12]
 80099de:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099fa:	e021      	b.n	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a0e:	4b37      	ldr	r3, [pc, #220]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a40:	4b2a      	ldr	r3, [pc, #168]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	0a5b      	lsrs	r3, r3, #9
 8009a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a66:	ee17 2a90 	vmov	r2, s15
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a6e:	4b1f      	ldr	r3, [pc, #124]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	0c1b      	lsrs	r3, r3, #16
 8009a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a78:	ee07 3a90 	vmov	s15, r3
 8009a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a94:	ee17 2a90 	vmov	r2, s15
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009a9c:	4b13      	ldr	r3, [pc, #76]	; (8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	0e1b      	lsrs	r3, r3, #24
 8009aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac2:	ee17 2a90 	vmov	r2, s15
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009aca:	e008      	b.n	8009ade <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	609a      	str	r2, [r3, #8]
}
 8009ade:	bf00      	nop
 8009ae0:	3724      	adds	r7, #36	; 0x24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	58024400 	.word	0x58024400
 8009af0:	03d09000 	.word	0x03d09000
 8009af4:	46000000 	.word	0x46000000
 8009af8:	4c742400 	.word	0x4c742400
 8009afc:	4a742400 	.word	0x4a742400
 8009b00:	4bbebc20 	.word	0x4bbebc20

08009b04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b089      	sub	sp, #36	; 0x24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b0c:	4ba0      	ldr	r3, [pc, #640]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009b16:	4b9e      	ldr	r3, [pc, #632]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1a:	091b      	lsrs	r3, r3, #4
 8009b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b22:	4b9b      	ldr	r3, [pc, #620]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b2c:	4b98      	ldr	r3, [pc, #608]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b30:	08db      	lsrs	r3, r3, #3
 8009b32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	fb02 f303 	mul.w	r3, r2, r3
 8009b3c:	ee07 3a90 	vmov	s15, r3
 8009b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8111 	beq.w	8009d72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	f000 8083 	beq.w	8009c5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	f200 80a1 	bhi.w	8009ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d056      	beq.n	8009c1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b6c:	e099      	b.n	8009ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b6e:	4b88      	ldr	r3, [pc, #544]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d02d      	beq.n	8009bd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b7a:	4b85      	ldr	r3, [pc, #532]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	08db      	lsrs	r3, r3, #3
 8009b80:	f003 0303 	and.w	r3, r3, #3
 8009b84:	4a83      	ldr	r2, [pc, #524]	; (8009d94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b86:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	ee07 3a90 	vmov	s15, r3
 8009b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba4:	4b7a      	ldr	r3, [pc, #488]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bac:	ee07 3a90 	vmov	s15, r3
 8009bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bd4:	e087      	b.n	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be8:	4b69      	ldr	r3, [pc, #420]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf0:	ee07 3a90 	vmov	s15, r3
 8009bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c18:	e065      	b.n	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2c:	4b58      	ldr	r3, [pc, #352]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c5c:	e043      	b.n	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c70:	4b47      	ldr	r3, [pc, #284]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ca0:	e021      	b.n	8009ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	ee07 3a90 	vmov	s15, r3
 8009ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb4:	4b36      	ldr	r3, [pc, #216]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ce4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ce6:	4b2a      	ldr	r3, [pc, #168]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	0a5b      	lsrs	r3, r3, #9
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d0c:	ee17 2a90 	vmov	r2, s15
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009d14:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	0c1b      	lsrs	r3, r3, #16
 8009d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d3a:	ee17 2a90 	vmov	r2, s15
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009d42:	4b13      	ldr	r3, [pc, #76]	; (8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	0e1b      	lsrs	r3, r3, #24
 8009d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4c:	ee07 3a90 	vmov	s15, r3
 8009d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d68:	ee17 2a90 	vmov	r2, s15
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d70:	e008      	b.n	8009d84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	609a      	str	r2, [r3, #8]
}
 8009d84:	bf00      	nop
 8009d86:	3724      	adds	r7, #36	; 0x24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	58024400 	.word	0x58024400
 8009d94:	03d09000 	.word	0x03d09000
 8009d98:	46000000 	.word	0x46000000
 8009d9c:	4c742400 	.word	0x4c742400
 8009da0:	4a742400 	.word	0x4a742400
 8009da4:	4bbebc20 	.word	0x4bbebc20

08009da8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009db6:	4b53      	ldr	r3, [pc, #332]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d101      	bne.n	8009dc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e099      	b.n	8009efa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dc6:	4b4f      	ldr	r3, [pc, #316]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a4e      	ldr	r2, [pc, #312]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009dcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dd2:	f7f8 ff73 	bl	8002cbc <HAL_GetTick>
 8009dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd8:	e008      	b.n	8009dec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dda:	f7f8 ff6f 	bl	8002cbc <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d901      	bls.n	8009dec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e086      	b.n	8009efa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dec:	4b45      	ldr	r3, [pc, #276]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1f0      	bne.n	8009dda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009df8:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	031b      	lsls	r3, r3, #12
 8009e06:	493f      	ldr	r1, [pc, #252]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	025b      	lsls	r3, r3, #9
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	431a      	orrs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	041b      	lsls	r3, r3, #16
 8009e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	061b      	lsls	r3, r3, #24
 8009e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e3c:	4931      	ldr	r1, [pc, #196]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e42:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	492d      	ldr	r1, [pc, #180]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e54:	4b2b      	ldr	r3, [pc, #172]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f023 0220 	bic.w	r2, r3, #32
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	4928      	ldr	r1, [pc, #160]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e66:	4b27      	ldr	r3, [pc, #156]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6a:	4a26      	ldr	r2, [pc, #152]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	f023 0310 	bic.w	r3, r3, #16
 8009e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e72:	4b24      	ldr	r3, [pc, #144]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e76:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <RCCEx_PLL2_Config+0x160>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	69d2      	ldr	r2, [r2, #28]
 8009e7e:	00d2      	lsls	r2, r2, #3
 8009e80:	4920      	ldr	r1, [pc, #128]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e86:	4b1f      	ldr	r3, [pc, #124]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	4a1e      	ldr	r2, [pc, #120]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e8c:	f043 0310 	orr.w	r3, r3, #16
 8009e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d106      	bne.n	8009ea6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e98:	4b1a      	ldr	r3, [pc, #104]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a19      	ldr	r2, [pc, #100]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ea4:	e00f      	b.n	8009ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d106      	bne.n	8009eba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009eac:	4b15      	ldr	r3, [pc, #84]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a14      	ldr	r2, [pc, #80]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eb8:	e005      	b.n	8009ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009eba:	4b12      	ldr	r3, [pc, #72]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	4a11      	ldr	r2, [pc, #68]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a0e      	ldr	r2, [pc, #56]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ed2:	f7f8 fef3 	bl	8002cbc <HAL_GetTick>
 8009ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed8:	e008      	b.n	8009eec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eda:	f7f8 feef 	bl	8002cbc <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e006      	b.n	8009efa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <RCCEx_PLL2_Config+0x15c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0f0      	beq.n	8009eda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	58024400 	.word	0x58024400
 8009f08:	ffff0007 	.word	0xffff0007

08009f0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f1a:	4b53      	ldr	r3, [pc, #332]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1e:	f003 0303 	and.w	r3, r3, #3
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d101      	bne.n	8009f2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e099      	b.n	800a05e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f2a:	4b4f      	ldr	r3, [pc, #316]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a4e      	ldr	r2, [pc, #312]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f36:	f7f8 fec1 	bl	8002cbc <HAL_GetTick>
 8009f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f3c:	e008      	b.n	8009f50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f3e:	f7f8 febd 	bl	8002cbc <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d901      	bls.n	8009f50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e086      	b.n	800a05e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f50:	4b45      	ldr	r3, [pc, #276]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f0      	bne.n	8009f3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f5c:	4b42      	ldr	r3, [pc, #264]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	051b      	lsls	r3, r3, #20
 8009f6a:	493f      	ldr	r1, [pc, #252]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	025b      	lsls	r3, r3, #9
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	431a      	orrs	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	041b      	lsls	r3, r3, #16
 8009f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f92:	431a      	orrs	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	061b      	lsls	r3, r3, #24
 8009f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fa0:	4931      	ldr	r1, [pc, #196]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fa6:	4b30      	ldr	r3, [pc, #192]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	492d      	ldr	r1, [pc, #180]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fb8:	4b2b      	ldr	r3, [pc, #172]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	4928      	ldr	r1, [pc, #160]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fca:	4b27      	ldr	r3, [pc, #156]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	4a26      	ldr	r2, [pc, #152]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fd6:	4b24      	ldr	r3, [pc, #144]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <RCCEx_PLL3_Config+0x160>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	69d2      	ldr	r2, [r2, #28]
 8009fe2:	00d2      	lsls	r2, r2, #3
 8009fe4:	4920      	ldr	r1, [pc, #128]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fea:	4b1f      	ldr	r3, [pc, #124]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	4a1e      	ldr	r2, [pc, #120]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d106      	bne.n	800a00a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ffc:	4b1a      	ldr	r3, [pc, #104]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4a19      	ldr	r2, [pc, #100]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a006:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a008:	e00f      	b.n	800a02a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d106      	bne.n	800a01e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a010:	4b15      	ldr	r3, [pc, #84]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	4a14      	ldr	r2, [pc, #80]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a01a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a01c:	e005      	b.n	800a02a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a01e:	4b12      	ldr	r3, [pc, #72]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	4a11      	ldr	r2, [pc, #68]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a02a:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a0e      	ldr	r2, [pc, #56]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a036:	f7f8 fe41 	bl	8002cbc <HAL_GetTick>
 800a03a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a03c:	e008      	b.n	800a050 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a03e:	f7f8 fe3d 	bl	8002cbc <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d901      	bls.n	800a050 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e006      	b.n	800a05e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a050:	4b05      	ldr	r3, [pc, #20]	; (800a068 <RCCEx_PLL3_Config+0x15c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d0f0      	beq.n	800a03e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	58024400 	.word	0x58024400
 800a06c:	ffff0007 	.word	0xffff0007

0800a070 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d071      	beq.n	800a166 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7f8 f92c 	bl	80022f4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b10      	cmp	r3, #16
 800a0b0:	d050      	beq.n	800a154 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	22ca      	movs	r2, #202	; 0xca
 800a0b8:	625a      	str	r2, [r3, #36]	; 0x24
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2253      	movs	r2, #83	; 0x53
 800a0c0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f87a 	bl	800a1bc <RTC_EnterInitMode>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d124      	bne.n	800a11c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6899      	ldr	r1, [r3, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4b24      	ldr	r3, [pc, #144]	; (800a170 <HAL_RTC_Init+0x100>)
 800a0de:	400b      	ands	r3, r1
 800a0e0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6899      	ldr	r1, [r3, #8]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	0419      	lsls	r1, r3, #16
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f886 	bl	800a224 <RTC_ExitInitMode>
 800a118:	4603      	mov	r3, r0
 800a11a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d113      	bne.n	800a14a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0203 	bic.w	r2, r2, #3
 800a130:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	431a      	orrs	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	22ff      	movs	r2, #255	; 0xff
 800a150:	625a      	str	r2, [r3, #36]	; 0x24
 800a152:	e001      	b.n	800a158 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d103      	bne.n	800a166 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	ff8fffbf 	.word	0xff8fffbf

0800a174 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a0d      	ldr	r2, [pc, #52]	; (800a1b8 <HAL_RTC_WaitForSynchro+0x44>)
 800a182:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a184:	f7f8 fd9a 	bl	8002cbc <HAL_GetTick>
 800a188:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a18a:	e009      	b.n	800a1a0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a18c:	f7f8 fd96 	bl	8002cbc <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a19a:	d901      	bls.n	800a1a0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e007      	b.n	800a1b0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f003 0320 	and.w	r3, r3, #32
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0ee      	beq.n	800a18c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	0003ff5f 	.word	0x0003ff5f

0800a1bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d120      	bne.n	800a218 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a1e0:	f7f8 fd6c 	bl	8002cbc <HAL_GetTick>
 800a1e4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a1e6:	e00d      	b.n	800a204 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a1e8:	f7f8 fd68 	bl	8002cbc <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1f6:	d905      	bls.n	800a204 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2203      	movs	r2, #3
 800a200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <RTC_EnterInitMode+0x5c>
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	2b03      	cmp	r3, #3
 800a216:	d1e7      	bne.n	800a1e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	4a19      	ldr	r2, [pc, #100]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a23a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a23c:	4b17      	ldr	r3, [pc, #92]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10c      	bne.n	800a262 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff ff93 	bl	800a174 <HAL_RTC_WaitForSynchro>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01e      	beq.n	800a292 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2203      	movs	r2, #3
 800a258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	73fb      	strb	r3, [r7, #15]
 800a260:	e017      	b.n	800a292 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a268:	f023 0320 	bic.w	r3, r3, #32
 800a26c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff ff80 	bl	800a174 <HAL_RTC_WaitForSynchro>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2203      	movs	r2, #3
 800a27e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a286:	4b05      	ldr	r3, [pc, #20]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4a04      	ldr	r2, [pc, #16]	; (800a29c <RTC_ExitInitMode+0x78>)
 800a28c:	f043 0320 	orr.w	r3, r3, #32
 800a290:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a292:	7bfb      	ldrb	r3, [r7, #15]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	58004000 	.word	0x58004000

0800a2a0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08a      	sub	sp, #40	; 0x28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e28e      	b.n	800a7d0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a2b2:	f7f8 fd33 	bl	8002d1c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d113      	bne.n	800a2e8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a96      	ldr	r2, [pc, #600]	; (800a520 <HAL_SAI_Init+0x280>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d004      	beq.n	800a2d4 <HAL_SAI_Init+0x34>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a95      	ldr	r2, [pc, #596]	; (800a524 <HAL_SAI_Init+0x284>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d107      	bne.n	800a2e4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d103      	bne.n	800a2e4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e273      	b.n	800a7d0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a8c      	ldr	r2, [pc, #560]	; (800a520 <HAL_SAI_Init+0x280>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d004      	beq.n	800a2fc <HAL_SAI_Init+0x5c>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a8c      	ldr	r2, [pc, #560]	; (800a528 <HAL_SAI_Init+0x288>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d102      	bne.n	800a302 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a2fc:	4b8b      	ldr	r3, [pc, #556]	; (800a52c <HAL_SAI_Init+0x28c>)
 800a2fe:	61bb      	str	r3, [r7, #24]
 800a300:	e028      	b.n	800a354 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a8a      	ldr	r2, [pc, #552]	; (800a530 <HAL_SAI_Init+0x290>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d004      	beq.n	800a316 <HAL_SAI_Init+0x76>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a88      	ldr	r2, [pc, #544]	; (800a534 <HAL_SAI_Init+0x294>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d102      	bne.n	800a31c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a316:	4b88      	ldr	r3, [pc, #544]	; (800a538 <HAL_SAI_Init+0x298>)
 800a318:	61bb      	str	r3, [r7, #24]
 800a31a:	e01b      	b.n	800a354 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a86      	ldr	r2, [pc, #536]	; (800a53c <HAL_SAI_Init+0x29c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d004      	beq.n	800a330 <HAL_SAI_Init+0x90>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a85      	ldr	r2, [pc, #532]	; (800a540 <HAL_SAI_Init+0x2a0>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d102      	bne.n	800a336 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a330:	4b84      	ldr	r3, [pc, #528]	; (800a544 <HAL_SAI_Init+0x2a4>)
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	e00e      	b.n	800a354 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a7a      	ldr	r2, [pc, #488]	; (800a524 <HAL_SAI_Init+0x284>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d004      	beq.n	800a34a <HAL_SAI_Init+0xaa>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a80      	ldr	r2, [pc, #512]	; (800a548 <HAL_SAI_Init+0x2a8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d102      	bne.n	800a350 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a34a:	4b80      	ldr	r3, [pc, #512]	; (800a54c <HAL_SAI_Init+0x2ac>)
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	e001      	b.n	800a354 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e23d      	b.n	800a7d0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d106      	bne.n	800a36e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f8 fa6b 	bl	8002844 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa40 	bl	800a7f4 <SAI_Disable>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e228      	b.n	800a7d0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2202      	movs	r2, #2
 800a382:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d00c      	beq.n	800a3a8 <HAL_SAI_Init+0x108>
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d80d      	bhi.n	800a3ae <HAL_SAI_Init+0x10e>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <HAL_SAI_Init+0xfc>
 800a396:	2b01      	cmp	r3, #1
 800a398:	d003      	beq.n	800a3a2 <HAL_SAI_Init+0x102>
 800a39a:	e008      	b.n	800a3ae <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3a0:	e008      	b.n	800a3b4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a3a2:	2310      	movs	r3, #16
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3a6:	e005      	b.n	800a3b4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3ac:	e002      	b.n	800a3b4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a3b2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	2b05      	cmp	r3, #5
 800a3ba:	d832      	bhi.n	800a422 <HAL_SAI_Init+0x182>
 800a3bc:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <HAL_SAI_Init+0x124>)
 800a3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c2:	bf00      	nop
 800a3c4:	0800a3dd 	.word	0x0800a3dd
 800a3c8:	0800a3e3 	.word	0x0800a3e3
 800a3cc:	0800a3eb 	.word	0x0800a3eb
 800a3d0:	0800a3f3 	.word	0x0800a3f3
 800a3d4:	0800a403 	.word	0x0800a403
 800a3d8:	0800a413 	.word	0x0800a413
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	61fb      	str	r3, [r7, #28]
      break;
 800a3e0:	e022      	b.n	800a428 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e6:	61fb      	str	r3, [r7, #28]
      break;
 800a3e8:	e01e      	b.n	800a428 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a3ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3ee:	61fb      	str	r3, [r7, #28]
      break;
 800a3f0:	e01a      	b.n	800a428 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a3f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3f6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a400:	e012      	b.n	800a428 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a406:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	f043 0302 	orr.w	r3, r3, #2
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a410:	e00a      	b.n	800a428 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a416:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	f043 0303 	orr.w	r3, r3, #3
 800a41e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a420:	e002      	b.n	800a428 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	61fb      	str	r3, [r7, #28]
      break;
 800a426:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 80c5 	beq.w	800a5c2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a37      	ldr	r2, [pc, #220]	; (800a520 <HAL_SAI_Init+0x280>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d004      	beq.n	800a450 <HAL_SAI_Init+0x1b0>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a37      	ldr	r2, [pc, #220]	; (800a528 <HAL_SAI_Init+0x288>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d106      	bne.n	800a45e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a450:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a454:	f04f 0100 	mov.w	r1, #0
 800a458:	f7fe fb16 	bl	8008a88 <HAL_RCCEx_GetPeriphCLKFreq>
 800a45c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a33      	ldr	r2, [pc, #204]	; (800a530 <HAL_SAI_Init+0x290>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d004      	beq.n	800a472 <HAL_SAI_Init+0x1d2>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a31      	ldr	r2, [pc, #196]	; (800a534 <HAL_SAI_Init+0x294>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d106      	bne.n	800a480 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a472:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a476:	f04f 0100 	mov.w	r1, #0
 800a47a:	f7fe fb05 	bl	8008a88 <HAL_RCCEx_GetPeriphCLKFreq>
 800a47e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a2d      	ldr	r2, [pc, #180]	; (800a53c <HAL_SAI_Init+0x29c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d004      	beq.n	800a494 <HAL_SAI_Init+0x1f4>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a2c      	ldr	r2, [pc, #176]	; (800a540 <HAL_SAI_Init+0x2a0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d106      	bne.n	800a4a2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a494:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a498:	f04f 0100 	mov.w	r1, #0
 800a49c:	f7fe faf4 	bl	8008a88 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4a0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <HAL_SAI_Init+0x284>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d106      	bne.n	800a4ba <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a4ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a4b0:	f04f 0100 	mov.w	r1, #0
 800a4b4:	f7fe fae8 	bl	8008a88 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4b8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a22      	ldr	r2, [pc, #136]	; (800a548 <HAL_SAI_Init+0x2a8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d106      	bne.n	800a4d2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a4c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a4c8:	f04f 0100 	mov.w	r1, #0
 800a4cc:	f7fe fadc 	bl	8008a88 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4d0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a4da:	d139      	bne.n	800a550 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d102      	bne.n	800a4ea <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	e00a      	b.n	800a500 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ee:	2b08      	cmp	r3, #8
 800a4f0:	d103      	bne.n	800a4fa <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a4f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	e002      	b.n	800a500 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	005b      	lsls	r3, r3, #1
 800a50a:	4619      	mov	r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	fbb1 f3f3 	udiv	r3, r1, r3
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	e030      	b.n	800a580 <HAL_SAI_Init+0x2e0>
 800a51e:	bf00      	nop
 800a520:	40015804 	.word	0x40015804
 800a524:	58005404 	.word	0x58005404
 800a528:	40015824 	.word	0x40015824
 800a52c:	40015800 	.word	0x40015800
 800a530:	40015c04 	.word	0x40015c04
 800a534:	40015c24 	.word	0x40015c24
 800a538:	40015c00 	.word	0x40015c00
 800a53c:	40016004 	.word	0x40016004
 800a540:	40016024 	.word	0x40016024
 800a544:	40016000 	.word	0x40016000
 800a548:	58005424 	.word	0x58005424
 800a54c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a558:	d101      	bne.n	800a55e <HAL_SAI_Init+0x2be>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e000      	b.n	800a560 <HAL_SAI_Init+0x2c0>
 800a55e:	2301      	movs	r3, #1
 800a560:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	4619      	mov	r1, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	fb02 f303 	mul.w	r3, r2, r3
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a57e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	4a95      	ldr	r2, [pc, #596]	; (800a7d8 <HAL_SAI_Init+0x538>)
 800a584:	fba2 2303 	umull	r2, r3, r2, r3
 800a588:	08da      	lsrs	r2, r3, #3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a58e:	6939      	ldr	r1, [r7, #16]
 800a590:	4b91      	ldr	r3, [pc, #580]	; (800a7d8 <HAL_SAI_Init+0x538>)
 800a592:	fba3 2301 	umull	r2, r3, r3, r1
 800a596:	08da      	lsrs	r2, r3, #3
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	1aca      	subs	r2, r1, r3
 800a5a2:	2a08      	cmp	r2, #8
 800a5a4:	d904      	bls.n	800a5b0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d104      	bne.n	800a5c2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	085a      	lsrs	r2, r3, #1
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <HAL_SAI_Init+0x332>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d109      	bne.n	800a5e6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d101      	bne.n	800a5de <HAL_SAI_Init+0x33e>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e001      	b.n	800a5e2 <HAL_SAI_Init+0x342>
 800a5de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e2:	623b      	str	r3, [r7, #32]
 800a5e4:	e008      	b.n	800a5f8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d102      	bne.n	800a5f4 <HAL_SAI_Init+0x354>
 800a5ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f2:	e000      	b.n	800a5f6 <HAL_SAI_Init+0x356>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a5f8:	f7f8 fb90 	bl	8002d1c <HAL_GetREVID>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a602:	d331      	bcc.n	800a668 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6819      	ldr	r1, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b73      	ldr	r3, [pc, #460]	; (800a7dc <HAL_SAI_Init+0x53c>)
 800a610:	400b      	ands	r3, r1
 800a612:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6819      	ldr	r1, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a622:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a628:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62e:	431a      	orrs	r2, r3
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a63c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a648:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	051b      	lsls	r3, r3, #20
 800a650:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a656:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e02d      	b.n	800a6c4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b5b      	ldr	r3, [pc, #364]	; (800a7e0 <HAL_SAI_Init+0x540>)
 800a674:	400b      	ands	r3, r1
 800a676:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6819      	ldr	r1, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a686:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a68c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a692:	431a      	orrs	r2, r3
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a6a0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6ac:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	051b      	lsls	r3, r3, #20
 800a6b4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6ba:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6859      	ldr	r1, [r3, #4]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	4b45      	ldr	r3, [pc, #276]	; (800a7e4 <HAL_SAI_Init+0x544>)
 800a6d0:	400b      	ands	r3, r1
 800a6d2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6859      	ldr	r1, [r3, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6899      	ldr	r1, [r3, #8]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	4b3a      	ldr	r3, [pc, #232]	; (800a7e8 <HAL_SAI_Init+0x548>)
 800a6fe:	400b      	ands	r3, r1
 800a700:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6899      	ldr	r1, [r3, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a712:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a718:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a71e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a724:	3b01      	subs	r3, #1
 800a726:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a728:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68d9      	ldr	r1, [r3, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a740:	400b      	ands	r3, r1
 800a742:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68d9      	ldr	r1, [r3, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a752:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a758:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a75a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a760:	3b01      	subs	r3, #1
 800a762:	021b      	lsls	r3, r3, #8
 800a764:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a1e      	ldr	r2, [pc, #120]	; (800a7ec <HAL_SAI_Init+0x54c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d004      	beq.n	800a782 <HAL_SAI_Init+0x4e2>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a1c      	ldr	r2, [pc, #112]	; (800a7f0 <HAL_SAI_Init+0x550>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d119      	bne.n	800a7b6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a786:	f023 0201 	bic.w	r2, r3, #1
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a794:	2b01      	cmp	r3, #1
 800a796:	d10e      	bne.n	800a7b6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ae:	f043 0201 	orr.w	r2, r3, #1
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3728      	adds	r7, #40	; 0x28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	cccccccd 	.word	0xcccccccd
 800a7dc:	f005c010 	.word	0xf005c010
 800a7e0:	f805c010 	.word	0xf805c010
 800a7e4:	ffff1ff0 	.word	0xffff1ff0
 800a7e8:	fff88000 	.word	0xfff88000
 800a7ec:	40015804 	.word	0x40015804
 800a7f0:	58005404 	.word	0x58005404

0800a7f4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a7fc:	4b18      	ldr	r3, [pc, #96]	; (800a860 <SAI_Disable+0x6c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a18      	ldr	r2, [pc, #96]	; (800a864 <SAI_Disable+0x70>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	0b1b      	lsrs	r3, r3, #12
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a81e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10a      	bne.n	800a83c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a82c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	72fb      	strb	r3, [r7, #11]
      break;
 800a83a:	e009      	b.n	800a850 <SAI_Disable+0x5c>
    }
    count--;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3b01      	subs	r3, #1
 800a840:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e7      	bne.n	800a820 <SAI_Disable+0x2c>

  return status;
 800a850:	7afb      	ldrb	r3, [r7, #11]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	24000000 	.word	0x24000000
 800a864:	95cbec1b 	.word	0x95cbec1b

0800a868 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e02b      	b.n	800a8d4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f7 ffcd 	bl	8002830 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2202      	movs	r2, #2
 800a89a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f001 fabd 	bl	800be28 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	f001 fb11 	bl	800bee0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a8be:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <HAL_SDRAM_Init+0x74>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a06      	ldr	r2, [pc, #24]	; (800a8dc <HAL_SDRAM_Init+0x74>)
 800a8c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8c8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	52004000 	.word	0x52004000

0800a8e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e10f      	b.n	800ab12 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a87      	ldr	r2, [pc, #540]	; (800ab1c <HAL_SPI_Init+0x23c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00f      	beq.n	800a922 <HAL_SPI_Init+0x42>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a86      	ldr	r2, [pc, #536]	; (800ab20 <HAL_SPI_Init+0x240>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00a      	beq.n	800a922 <HAL_SPI_Init+0x42>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a84      	ldr	r2, [pc, #528]	; (800ab24 <HAL_SPI_Init+0x244>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d005      	beq.n	800a922 <HAL_SPI_Init+0x42>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b0f      	cmp	r3, #15
 800a91c:	d901      	bls.n	800a922 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e0f7      	b.n	800ab12 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f900 	bl	800ab28 <SPI_GetPacketSize>
 800a928:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a7b      	ldr	r2, [pc, #492]	; (800ab1c <HAL_SPI_Init+0x23c>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d00c      	beq.n	800a94e <HAL_SPI_Init+0x6e>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a79      	ldr	r2, [pc, #484]	; (800ab20 <HAL_SPI_Init+0x240>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d007      	beq.n	800a94e <HAL_SPI_Init+0x6e>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a78      	ldr	r2, [pc, #480]	; (800ab24 <HAL_SPI_Init+0x244>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d002      	beq.n	800a94e <HAL_SPI_Init+0x6e>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d811      	bhi.n	800a972 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a952:	4a72      	ldr	r2, [pc, #456]	; (800ab1c <HAL_SPI_Init+0x23c>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d009      	beq.n	800a96c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a70      	ldr	r2, [pc, #448]	; (800ab20 <HAL_SPI_Init+0x240>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d004      	beq.n	800a96c <HAL_SPI_Init+0x8c>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a6f      	ldr	r2, [pc, #444]	; (800ab24 <HAL_SPI_Init+0x244>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d104      	bne.n	800a976 <HAL_SPI_Init+0x96>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d901      	bls.n	800a976 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e0cd      	b.n	800ab12 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7f7 fce4 	bl	8002358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 0201 	bic.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a9b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9bc:	d119      	bne.n	800a9f2 <HAL_SPI_Init+0x112>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9c6:	d103      	bne.n	800a9d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10c      	bne.n	800a9f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a9dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9e0:	d107      	bne.n	800a9f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00f      	beq.n	800aa1e <HAL_SPI_Init+0x13e>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	2b06      	cmp	r3, #6
 800aa04:	d90b      	bls.n	800aa1e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	e007      	b.n	800aa2e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69da      	ldr	r2, [r3, #28]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	431a      	orrs	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	431a      	orrs	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa40:	ea42 0103 	orr.w	r1, r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	431a      	orrs	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	431a      	orrs	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa82:	431a      	orrs	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa8e:	ea42 0103 	orr.w	r1, r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d113      	bne.n	800aace <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aab8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aacc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0201 	bic.w	r2, r2, #1
 800aadc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	40013000 	.word	0x40013000
 800ab20:	40003800 	.word	0x40003800
 800ab24:	40003c00 	.word	0x40003c00

0800ab28 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab34:	095b      	lsrs	r3, r3, #5
 800ab36:	3301      	adds	r3, #1
 800ab38:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	3307      	adds	r3, #7
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b082      	sub	sp, #8
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e042      	b.n	800abf6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7f7 fcb2 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2224      	movs	r2, #36	; 0x24
 800ab8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f022 0201 	bic.w	r2, r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8bb 	bl	800ad1c <UART_SetConfig>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e022      	b.n	800abf6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fe17 	bl	800b7ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0201 	orr.w	r2, r2, #1
 800abec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fe9e 	bl	800b930 <UART_CheckIdleState>
 800abf4:	4603      	mov	r3, r0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b08a      	sub	sp, #40	; 0x28
 800ac02:	af02      	add	r7, sp, #8
 800ac04:	60f8      	str	r0, [r7, #12]
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	603b      	str	r3, [r7, #0]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac14:	2b20      	cmp	r3, #32
 800ac16:	d17b      	bne.n	800ad10 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <HAL_UART_Transmit+0x26>
 800ac1e:	88fb      	ldrh	r3, [r7, #6]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e074      	b.n	800ad12 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2221      	movs	r2, #33	; 0x21
 800ac34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac38:	f7f8 f840 	bl	8002cbc <HAL_GetTick>
 800ac3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	88fa      	ldrh	r2, [r7, #6]
 800ac42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	88fa      	ldrh	r2, [r7, #6]
 800ac4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac56:	d108      	bne.n	800ac6a <HAL_UART_Transmit+0x6c>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	e003      	b.n	800ac72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac72:	e030      	b.n	800acd6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2180      	movs	r1, #128	; 0x80
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 ff00 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d005      	beq.n	800ac96 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e03d      	b.n	800ad12 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10b      	bne.n	800acb4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	3302      	adds	r3, #2
 800acb0:	61bb      	str	r3, [r7, #24]
 800acb2:	e007      	b.n	800acc4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	781a      	ldrb	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	3301      	adds	r3, #1
 800acc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800acca:	b29b      	uxth	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800acdc:	b29b      	uxth	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1c8      	bne.n	800ac74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2200      	movs	r2, #0
 800acea:	2140      	movs	r1, #64	; 0x40
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fec9 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d005      	beq.n	800ad04 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e006      	b.n	800ad12 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e000      	b.n	800ad12 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ad10:	2302      	movs	r3, #2
  }
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
	...

0800ad1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad20:	b092      	sub	sp, #72	; 0x48
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	4bbe      	ldr	r3, [pc, #760]	; (800b044 <UART_SetConfig+0x328>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	6812      	ldr	r2, [r2, #0]
 800ad52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad54:	430b      	orrs	r3, r1
 800ad56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	430a      	orrs	r2, r1
 800ad6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4ab3      	ldr	r2, [pc, #716]	; (800b048 <UART_SetConfig+0x32c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d004      	beq.n	800ad88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad84:	4313      	orrs	r3, r2
 800ad86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	4baf      	ldr	r3, [pc, #700]	; (800b04c <UART_SetConfig+0x330>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada2:	f023 010f 	bic.w	r1, r3, #15
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4aa6      	ldr	r2, [pc, #664]	; (800b050 <UART_SetConfig+0x334>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d177      	bne.n	800aeac <UART_SetConfig+0x190>
 800adbc:	4ba5      	ldr	r3, [pc, #660]	; (800b054 <UART_SetConfig+0x338>)
 800adbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adc4:	2b28      	cmp	r3, #40	; 0x28
 800adc6:	d86d      	bhi.n	800aea4 <UART_SetConfig+0x188>
 800adc8:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <UART_SetConfig+0xb4>)
 800adca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adce:	bf00      	nop
 800add0:	0800ae75 	.word	0x0800ae75
 800add4:	0800aea5 	.word	0x0800aea5
 800add8:	0800aea5 	.word	0x0800aea5
 800addc:	0800aea5 	.word	0x0800aea5
 800ade0:	0800aea5 	.word	0x0800aea5
 800ade4:	0800aea5 	.word	0x0800aea5
 800ade8:	0800aea5 	.word	0x0800aea5
 800adec:	0800aea5 	.word	0x0800aea5
 800adf0:	0800ae7d 	.word	0x0800ae7d
 800adf4:	0800aea5 	.word	0x0800aea5
 800adf8:	0800aea5 	.word	0x0800aea5
 800adfc:	0800aea5 	.word	0x0800aea5
 800ae00:	0800aea5 	.word	0x0800aea5
 800ae04:	0800aea5 	.word	0x0800aea5
 800ae08:	0800aea5 	.word	0x0800aea5
 800ae0c:	0800aea5 	.word	0x0800aea5
 800ae10:	0800ae85 	.word	0x0800ae85
 800ae14:	0800aea5 	.word	0x0800aea5
 800ae18:	0800aea5 	.word	0x0800aea5
 800ae1c:	0800aea5 	.word	0x0800aea5
 800ae20:	0800aea5 	.word	0x0800aea5
 800ae24:	0800aea5 	.word	0x0800aea5
 800ae28:	0800aea5 	.word	0x0800aea5
 800ae2c:	0800aea5 	.word	0x0800aea5
 800ae30:	0800ae8d 	.word	0x0800ae8d
 800ae34:	0800aea5 	.word	0x0800aea5
 800ae38:	0800aea5 	.word	0x0800aea5
 800ae3c:	0800aea5 	.word	0x0800aea5
 800ae40:	0800aea5 	.word	0x0800aea5
 800ae44:	0800aea5 	.word	0x0800aea5
 800ae48:	0800aea5 	.word	0x0800aea5
 800ae4c:	0800aea5 	.word	0x0800aea5
 800ae50:	0800ae95 	.word	0x0800ae95
 800ae54:	0800aea5 	.word	0x0800aea5
 800ae58:	0800aea5 	.word	0x0800aea5
 800ae5c:	0800aea5 	.word	0x0800aea5
 800ae60:	0800aea5 	.word	0x0800aea5
 800ae64:	0800aea5 	.word	0x0800aea5
 800ae68:	0800aea5 	.word	0x0800aea5
 800ae6c:	0800aea5 	.word	0x0800aea5
 800ae70:	0800ae9d 	.word	0x0800ae9d
 800ae74:	2301      	movs	r3, #1
 800ae76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae7a:	e222      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800ae7c:	2304      	movs	r3, #4
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae82:	e21e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800ae84:	2308      	movs	r3, #8
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae8a:	e21a      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800ae8c:	2310      	movs	r3, #16
 800ae8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae92:	e216      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800ae94:	2320      	movs	r3, #32
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae9a:	e212      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea2:	e20e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800aea4:	2380      	movs	r3, #128	; 0x80
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e20a      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a69      	ldr	r2, [pc, #420]	; (800b058 <UART_SetConfig+0x33c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d130      	bne.n	800af18 <UART_SetConfig+0x1fc>
 800aeb6:	4b67      	ldr	r3, [pc, #412]	; (800b054 <UART_SetConfig+0x338>)
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	d826      	bhi.n	800af10 <UART_SetConfig+0x1f4>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0x1ac>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800aee1 	.word	0x0800aee1
 800aecc:	0800aee9 	.word	0x0800aee9
 800aed0:	0800aef1 	.word	0x0800aef1
 800aed4:	0800aef9 	.word	0x0800aef9
 800aed8:	0800af01 	.word	0x0800af01
 800aedc:	0800af09 	.word	0x0800af09
 800aee0:	2300      	movs	r3, #0
 800aee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aee6:	e1ec      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800aee8:	2304      	movs	r3, #4
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeee:	e1e8      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800aef0:	2308      	movs	r3, #8
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aef6:	e1e4      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800aef8:	2310      	movs	r3, #16
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aefe:	e1e0      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af00:	2320      	movs	r3, #32
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af06:	e1dc      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af0e:	e1d8      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af10:	2380      	movs	r3, #128	; 0x80
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e1d4      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a4f      	ldr	r2, [pc, #316]	; (800b05c <UART_SetConfig+0x340>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d130      	bne.n	800af84 <UART_SetConfig+0x268>
 800af22:	4b4c      	ldr	r3, [pc, #304]	; (800b054 <UART_SetConfig+0x338>)
 800af24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b05      	cmp	r3, #5
 800af2c:	d826      	bhi.n	800af7c <UART_SetConfig+0x260>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <UART_SetConfig+0x218>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af4d 	.word	0x0800af4d
 800af38:	0800af55 	.word	0x0800af55
 800af3c:	0800af5d 	.word	0x0800af5d
 800af40:	0800af65 	.word	0x0800af65
 800af44:	0800af6d 	.word	0x0800af6d
 800af48:	0800af75 	.word	0x0800af75
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af52:	e1b6      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af54:	2304      	movs	r3, #4
 800af56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af5a:	e1b2      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af5c:	2308      	movs	r3, #8
 800af5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af62:	e1ae      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af64:	2310      	movs	r3, #16
 800af66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af6a:	e1aa      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af6c:	2320      	movs	r3, #32
 800af6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af72:	e1a6      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7a:	e1a2      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af7c:	2380      	movs	r3, #128	; 0x80
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af82:	e19e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a35      	ldr	r2, [pc, #212]	; (800b060 <UART_SetConfig+0x344>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d130      	bne.n	800aff0 <UART_SetConfig+0x2d4>
 800af8e:	4b31      	ldr	r3, [pc, #196]	; (800b054 <UART_SetConfig+0x338>)
 800af90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b05      	cmp	r3, #5
 800af98:	d826      	bhi.n	800afe8 <UART_SetConfig+0x2cc>
 800af9a:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <UART_SetConfig+0x284>)
 800af9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa0:	0800afb9 	.word	0x0800afb9
 800afa4:	0800afc1 	.word	0x0800afc1
 800afa8:	0800afc9 	.word	0x0800afc9
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afd9 	.word	0x0800afd9
 800afb4:	0800afe1 	.word	0x0800afe1
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afbe:	e180      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800afc0:	2304      	movs	r3, #4
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afc6:	e17c      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800afc8:	2308      	movs	r3, #8
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afce:	e178      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800afd0:	2310      	movs	r3, #16
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afd6:	e174      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800afd8:	2320      	movs	r3, #32
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afde:	e170      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afe6:	e16c      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800afe8:	2380      	movs	r3, #128	; 0x80
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afee:	e168      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a1b      	ldr	r2, [pc, #108]	; (800b064 <UART_SetConfig+0x348>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d142      	bne.n	800b080 <UART_SetConfig+0x364>
 800affa:	4b16      	ldr	r3, [pc, #88]	; (800b054 <UART_SetConfig+0x338>)
 800affc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800affe:	f003 0307 	and.w	r3, r3, #7
 800b002:	2b05      	cmp	r3, #5
 800b004:	d838      	bhi.n	800b078 <UART_SetConfig+0x35c>
 800b006:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <UART_SetConfig+0x2f0>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b025 	.word	0x0800b025
 800b010:	0800b02d 	.word	0x0800b02d
 800b014:	0800b035 	.word	0x0800b035
 800b018:	0800b03d 	.word	0x0800b03d
 800b01c:	0800b069 	.word	0x0800b069
 800b020:	0800b071 	.word	0x0800b071
 800b024:	2300      	movs	r3, #0
 800b026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b02a:	e14a      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b02c:	2304      	movs	r3, #4
 800b02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b032:	e146      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b034:	2308      	movs	r3, #8
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b03a:	e142      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b03c:	2310      	movs	r3, #16
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b042:	e13e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b044:	cfff69f3 	.word	0xcfff69f3
 800b048:	58000c00 	.word	0x58000c00
 800b04c:	11fff4ff 	.word	0x11fff4ff
 800b050:	40011000 	.word	0x40011000
 800b054:	58024400 	.word	0x58024400
 800b058:	40004400 	.word	0x40004400
 800b05c:	40004800 	.word	0x40004800
 800b060:	40004c00 	.word	0x40004c00
 800b064:	40005000 	.word	0x40005000
 800b068:	2320      	movs	r3, #32
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e128      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b076:	e124      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b078:	2380      	movs	r3, #128	; 0x80
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07e:	e120      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4acb      	ldr	r2, [pc, #812]	; (800b3b4 <UART_SetConfig+0x698>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d176      	bne.n	800b178 <UART_SetConfig+0x45c>
 800b08a:	4bcb      	ldr	r3, [pc, #812]	; (800b3b8 <UART_SetConfig+0x69c>)
 800b08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b092:	2b28      	cmp	r3, #40	; 0x28
 800b094:	d86c      	bhi.n	800b170 <UART_SetConfig+0x454>
 800b096:	a201      	add	r2, pc, #4	; (adr r2, 800b09c <UART_SetConfig+0x380>)
 800b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09c:	0800b141 	.word	0x0800b141
 800b0a0:	0800b171 	.word	0x0800b171
 800b0a4:	0800b171 	.word	0x0800b171
 800b0a8:	0800b171 	.word	0x0800b171
 800b0ac:	0800b171 	.word	0x0800b171
 800b0b0:	0800b171 	.word	0x0800b171
 800b0b4:	0800b171 	.word	0x0800b171
 800b0b8:	0800b171 	.word	0x0800b171
 800b0bc:	0800b149 	.word	0x0800b149
 800b0c0:	0800b171 	.word	0x0800b171
 800b0c4:	0800b171 	.word	0x0800b171
 800b0c8:	0800b171 	.word	0x0800b171
 800b0cc:	0800b171 	.word	0x0800b171
 800b0d0:	0800b171 	.word	0x0800b171
 800b0d4:	0800b171 	.word	0x0800b171
 800b0d8:	0800b171 	.word	0x0800b171
 800b0dc:	0800b151 	.word	0x0800b151
 800b0e0:	0800b171 	.word	0x0800b171
 800b0e4:	0800b171 	.word	0x0800b171
 800b0e8:	0800b171 	.word	0x0800b171
 800b0ec:	0800b171 	.word	0x0800b171
 800b0f0:	0800b171 	.word	0x0800b171
 800b0f4:	0800b171 	.word	0x0800b171
 800b0f8:	0800b171 	.word	0x0800b171
 800b0fc:	0800b159 	.word	0x0800b159
 800b100:	0800b171 	.word	0x0800b171
 800b104:	0800b171 	.word	0x0800b171
 800b108:	0800b171 	.word	0x0800b171
 800b10c:	0800b171 	.word	0x0800b171
 800b110:	0800b171 	.word	0x0800b171
 800b114:	0800b171 	.word	0x0800b171
 800b118:	0800b171 	.word	0x0800b171
 800b11c:	0800b161 	.word	0x0800b161
 800b120:	0800b171 	.word	0x0800b171
 800b124:	0800b171 	.word	0x0800b171
 800b128:	0800b171 	.word	0x0800b171
 800b12c:	0800b171 	.word	0x0800b171
 800b130:	0800b171 	.word	0x0800b171
 800b134:	0800b171 	.word	0x0800b171
 800b138:	0800b171 	.word	0x0800b171
 800b13c:	0800b169 	.word	0x0800b169
 800b140:	2301      	movs	r3, #1
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b146:	e0bc      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b148:	2304      	movs	r3, #4
 800b14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14e:	e0b8      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b150:	2308      	movs	r3, #8
 800b152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b156:	e0b4      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b158:	2310      	movs	r3, #16
 800b15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b15e:	e0b0      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b160:	2320      	movs	r3, #32
 800b162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b166:	e0ac      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b16e:	e0a8      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b176:	e0a4      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a8f      	ldr	r2, [pc, #572]	; (800b3bc <UART_SetConfig+0x6a0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d130      	bne.n	800b1e4 <UART_SetConfig+0x4c8>
 800b182:	4b8d      	ldr	r3, [pc, #564]	; (800b3b8 <UART_SetConfig+0x69c>)
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d826      	bhi.n	800b1dc <UART_SetConfig+0x4c0>
 800b18e:	a201      	add	r2, pc, #4	; (adr r2, 800b194 <UART_SetConfig+0x478>)
 800b190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b194:	0800b1ad 	.word	0x0800b1ad
 800b198:	0800b1b5 	.word	0x0800b1b5
 800b19c:	0800b1bd 	.word	0x0800b1bd
 800b1a0:	0800b1c5 	.word	0x0800b1c5
 800b1a4:	0800b1cd 	.word	0x0800b1cd
 800b1a8:	0800b1d5 	.word	0x0800b1d5
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1b2:	e086      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1b4:	2304      	movs	r3, #4
 800b1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ba:	e082      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1bc:	2308      	movs	r3, #8
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1c2:	e07e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1c4:	2310      	movs	r3, #16
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ca:	e07a      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1cc:	2320      	movs	r3, #32
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d2:	e076      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1d4:	2340      	movs	r3, #64	; 0x40
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1da:	e072      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1dc:	2380      	movs	r3, #128	; 0x80
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e2:	e06e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a75      	ldr	r2, [pc, #468]	; (800b3c0 <UART_SetConfig+0x6a4>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d130      	bne.n	800b250 <UART_SetConfig+0x534>
 800b1ee:	4b72      	ldr	r3, [pc, #456]	; (800b3b8 <UART_SetConfig+0x69c>)
 800b1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d826      	bhi.n	800b248 <UART_SetConfig+0x52c>
 800b1fa:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <UART_SetConfig+0x4e4>)
 800b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b200:	0800b219 	.word	0x0800b219
 800b204:	0800b221 	.word	0x0800b221
 800b208:	0800b229 	.word	0x0800b229
 800b20c:	0800b231 	.word	0x0800b231
 800b210:	0800b239 	.word	0x0800b239
 800b214:	0800b241 	.word	0x0800b241
 800b218:	2300      	movs	r3, #0
 800b21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21e:	e050      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b220:	2304      	movs	r3, #4
 800b222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b226:	e04c      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b228:	2308      	movs	r3, #8
 800b22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22e:	e048      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b230:	2310      	movs	r3, #16
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b236:	e044      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b238:	2320      	movs	r3, #32
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23e:	e040      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b240:	2340      	movs	r3, #64	; 0x40
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b246:	e03c      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b248:	2380      	movs	r3, #128	; 0x80
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24e:	e038      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a5b      	ldr	r2, [pc, #364]	; (800b3c4 <UART_SetConfig+0x6a8>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d130      	bne.n	800b2bc <UART_SetConfig+0x5a0>
 800b25a:	4b57      	ldr	r3, [pc, #348]	; (800b3b8 <UART_SetConfig+0x69c>)
 800b25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b25e:	f003 0307 	and.w	r3, r3, #7
 800b262:	2b05      	cmp	r3, #5
 800b264:	d826      	bhi.n	800b2b4 <UART_SetConfig+0x598>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <UART_SetConfig+0x550>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b285 	.word	0x0800b285
 800b270:	0800b28d 	.word	0x0800b28d
 800b274:	0800b295 	.word	0x0800b295
 800b278:	0800b29d 	.word	0x0800b29d
 800b27c:	0800b2a5 	.word	0x0800b2a5
 800b280:	0800b2ad 	.word	0x0800b2ad
 800b284:	2302      	movs	r3, #2
 800b286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28a:	e01a      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b28c:	2304      	movs	r3, #4
 800b28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b292:	e016      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b294:	2308      	movs	r3, #8
 800b296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b29a:	e012      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b29c:	2310      	movs	r3, #16
 800b29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2a2:	e00e      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b2a4:	2320      	movs	r3, #32
 800b2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2aa:	e00a      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b2ac:	2340      	movs	r3, #64	; 0x40
 800b2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2b2:	e006      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b2b4:	2380      	movs	r3, #128	; 0x80
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ba:	e002      	b.n	800b2c2 <UART_SetConfig+0x5a6>
 800b2bc:	2380      	movs	r3, #128	; 0x80
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a3f      	ldr	r2, [pc, #252]	; (800b3c4 <UART_SetConfig+0x6a8>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	f040 80f8 	bne.w	800b4be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b2ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b2d2:	2b20      	cmp	r3, #32
 800b2d4:	dc46      	bgt.n	800b364 <UART_SetConfig+0x648>
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	f2c0 8082 	blt.w	800b3e0 <UART_SetConfig+0x6c4>
 800b2dc:	3b02      	subs	r3, #2
 800b2de:	2b1e      	cmp	r3, #30
 800b2e0:	d87e      	bhi.n	800b3e0 <UART_SetConfig+0x6c4>
 800b2e2:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <UART_SetConfig+0x5cc>)
 800b2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e8:	0800b36b 	.word	0x0800b36b
 800b2ec:	0800b3e1 	.word	0x0800b3e1
 800b2f0:	0800b373 	.word	0x0800b373
 800b2f4:	0800b3e1 	.word	0x0800b3e1
 800b2f8:	0800b3e1 	.word	0x0800b3e1
 800b2fc:	0800b3e1 	.word	0x0800b3e1
 800b300:	0800b383 	.word	0x0800b383
 800b304:	0800b3e1 	.word	0x0800b3e1
 800b308:	0800b3e1 	.word	0x0800b3e1
 800b30c:	0800b3e1 	.word	0x0800b3e1
 800b310:	0800b3e1 	.word	0x0800b3e1
 800b314:	0800b3e1 	.word	0x0800b3e1
 800b318:	0800b3e1 	.word	0x0800b3e1
 800b31c:	0800b3e1 	.word	0x0800b3e1
 800b320:	0800b393 	.word	0x0800b393
 800b324:	0800b3e1 	.word	0x0800b3e1
 800b328:	0800b3e1 	.word	0x0800b3e1
 800b32c:	0800b3e1 	.word	0x0800b3e1
 800b330:	0800b3e1 	.word	0x0800b3e1
 800b334:	0800b3e1 	.word	0x0800b3e1
 800b338:	0800b3e1 	.word	0x0800b3e1
 800b33c:	0800b3e1 	.word	0x0800b3e1
 800b340:	0800b3e1 	.word	0x0800b3e1
 800b344:	0800b3e1 	.word	0x0800b3e1
 800b348:	0800b3e1 	.word	0x0800b3e1
 800b34c:	0800b3e1 	.word	0x0800b3e1
 800b350:	0800b3e1 	.word	0x0800b3e1
 800b354:	0800b3e1 	.word	0x0800b3e1
 800b358:	0800b3e1 	.word	0x0800b3e1
 800b35c:	0800b3e1 	.word	0x0800b3e1
 800b360:	0800b3d3 	.word	0x0800b3d3
 800b364:	2b40      	cmp	r3, #64	; 0x40
 800b366:	d037      	beq.n	800b3d8 <UART_SetConfig+0x6bc>
 800b368:	e03a      	b.n	800b3e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b36a:	f7fe f90d 	bl	8009588 <HAL_RCCEx_GetD3PCLK1Freq>
 800b36e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b370:	e03c      	b.n	800b3ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe f91c 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b380:	e034      	b.n	800b3ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b382:	f107 0318 	add.w	r3, r7, #24
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe fa68 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b390:	e02c      	b.n	800b3ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b392:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <UART_SetConfig+0x69c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d016      	beq.n	800b3cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b39e:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <UART_SetConfig+0x69c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	08db      	lsrs	r3, r3, #3
 800b3a4:	f003 0303 	and.w	r3, r3, #3
 800b3a8:	4a07      	ldr	r2, [pc, #28]	; (800b3c8 <UART_SetConfig+0x6ac>)
 800b3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3b0:	e01c      	b.n	800b3ec <UART_SetConfig+0x6d0>
 800b3b2:	bf00      	nop
 800b3b4:	40011400 	.word	0x40011400
 800b3b8:	58024400 	.word	0x58024400
 800b3bc:	40007800 	.word	0x40007800
 800b3c0:	40007c00 	.word	0x40007c00
 800b3c4:	58000c00 	.word	0x58000c00
 800b3c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b3cc:	4b9d      	ldr	r3, [pc, #628]	; (800b644 <UART_SetConfig+0x928>)
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d0:	e00c      	b.n	800b3ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3d2:	4b9d      	ldr	r3, [pc, #628]	; (800b648 <UART_SetConfig+0x92c>)
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d6:	e009      	b.n	800b3ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3de:	e005      	b.n	800b3ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b3ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 81de 	beq.w	800b7b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	4a94      	ldr	r2, [pc, #592]	; (800b64c <UART_SetConfig+0x930>)
 800b3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3fe:	461a      	mov	r2, r3
 800b400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b402:	fbb3 f3f2 	udiv	r3, r3, r2
 800b406:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b414:	429a      	cmp	r2, r3
 800b416:	d305      	bcc.n	800b424 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b420:	429a      	cmp	r2, r3
 800b422:	d903      	bls.n	800b42c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b42a:	e1c1      	b.n	800b7b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42e:	2200      	movs	r2, #0
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	60fa      	str	r2, [r7, #12]
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	4a84      	ldr	r2, [pc, #528]	; (800b64c <UART_SetConfig+0x930>)
 800b43a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	2200      	movs	r2, #0
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	607a      	str	r2, [r7, #4]
 800b446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b44a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b44e:	f7f4 ff9f 	bl	8000390 <__aeabi_uldivmod>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4610      	mov	r0, r2
 800b458:	4619      	mov	r1, r3
 800b45a:	f04f 0200 	mov.w	r2, #0
 800b45e:	f04f 0300 	mov.w	r3, #0
 800b462:	020b      	lsls	r3, r1, #8
 800b464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b468:	0202      	lsls	r2, r0, #8
 800b46a:	6979      	ldr	r1, [r7, #20]
 800b46c:	6849      	ldr	r1, [r1, #4]
 800b46e:	0849      	lsrs	r1, r1, #1
 800b470:	2000      	movs	r0, #0
 800b472:	460c      	mov	r4, r1
 800b474:	4605      	mov	r5, r0
 800b476:	eb12 0804 	adds.w	r8, r2, r4
 800b47a:	eb43 0905 	adc.w	r9, r3, r5
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	469a      	mov	sl, r3
 800b486:	4693      	mov	fp, r2
 800b488:	4652      	mov	r2, sl
 800b48a:	465b      	mov	r3, fp
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f4 ff7e 	bl	8000390 <__aeabi_uldivmod>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4613      	mov	r3, r2
 800b49a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4a2:	d308      	bcc.n	800b4b6 <UART_SetConfig+0x79a>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4aa:	d204      	bcs.n	800b4b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b2:	60da      	str	r2, [r3, #12]
 800b4b4:	e17c      	b.n	800b7b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b4bc:	e178      	b.n	800b7b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c6:	f040 80c5 	bne.w	800b654 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b4ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4ce:	2b20      	cmp	r3, #32
 800b4d0:	dc48      	bgt.n	800b564 <UART_SetConfig+0x848>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	db7b      	blt.n	800b5ce <UART_SetConfig+0x8b2>
 800b4d6:	2b20      	cmp	r3, #32
 800b4d8:	d879      	bhi.n	800b5ce <UART_SetConfig+0x8b2>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <UART_SetConfig+0x7c4>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b56b 	.word	0x0800b56b
 800b4e4:	0800b573 	.word	0x0800b573
 800b4e8:	0800b5cf 	.word	0x0800b5cf
 800b4ec:	0800b5cf 	.word	0x0800b5cf
 800b4f0:	0800b57b 	.word	0x0800b57b
 800b4f4:	0800b5cf 	.word	0x0800b5cf
 800b4f8:	0800b5cf 	.word	0x0800b5cf
 800b4fc:	0800b5cf 	.word	0x0800b5cf
 800b500:	0800b58b 	.word	0x0800b58b
 800b504:	0800b5cf 	.word	0x0800b5cf
 800b508:	0800b5cf 	.word	0x0800b5cf
 800b50c:	0800b5cf 	.word	0x0800b5cf
 800b510:	0800b5cf 	.word	0x0800b5cf
 800b514:	0800b5cf 	.word	0x0800b5cf
 800b518:	0800b5cf 	.word	0x0800b5cf
 800b51c:	0800b5cf 	.word	0x0800b5cf
 800b520:	0800b59b 	.word	0x0800b59b
 800b524:	0800b5cf 	.word	0x0800b5cf
 800b528:	0800b5cf 	.word	0x0800b5cf
 800b52c:	0800b5cf 	.word	0x0800b5cf
 800b530:	0800b5cf 	.word	0x0800b5cf
 800b534:	0800b5cf 	.word	0x0800b5cf
 800b538:	0800b5cf 	.word	0x0800b5cf
 800b53c:	0800b5cf 	.word	0x0800b5cf
 800b540:	0800b5cf 	.word	0x0800b5cf
 800b544:	0800b5cf 	.word	0x0800b5cf
 800b548:	0800b5cf 	.word	0x0800b5cf
 800b54c:	0800b5cf 	.word	0x0800b5cf
 800b550:	0800b5cf 	.word	0x0800b5cf
 800b554:	0800b5cf 	.word	0x0800b5cf
 800b558:	0800b5cf 	.word	0x0800b5cf
 800b55c:	0800b5cf 	.word	0x0800b5cf
 800b560:	0800b5c1 	.word	0x0800b5c1
 800b564:	2b40      	cmp	r3, #64	; 0x40
 800b566:	d02e      	beq.n	800b5c6 <UART_SetConfig+0x8aa>
 800b568:	e031      	b.n	800b5ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b56a:	f7fc f857 	bl	800761c <HAL_RCC_GetPCLK1Freq>
 800b56e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b570:	e033      	b.n	800b5da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b572:	f7fc f869 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 800b576:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b578:	e02f      	b.n	800b5da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b57a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe f818 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b588:	e027      	b.n	800b5da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58a:	f107 0318 	add.w	r3, r7, #24
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe f964 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b598:	e01f      	b.n	800b5da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b59a:	4b2d      	ldr	r3, [pc, #180]	; (800b650 <UART_SetConfig+0x934>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0320 	and.w	r3, r3, #32
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d009      	beq.n	800b5ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5a6:	4b2a      	ldr	r3, [pc, #168]	; (800b650 <UART_SetConfig+0x934>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	08db      	lsrs	r3, r3, #3
 800b5ac:	f003 0303 	and.w	r3, r3, #3
 800b5b0:	4a24      	ldr	r2, [pc, #144]	; (800b644 <UART_SetConfig+0x928>)
 800b5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5b8:	e00f      	b.n	800b5da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b5ba:	4b22      	ldr	r3, [pc, #136]	; (800b644 <UART_SetConfig+0x928>)
 800b5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5be:	e00c      	b.n	800b5da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5c0:	4b21      	ldr	r3, [pc, #132]	; (800b648 <UART_SetConfig+0x92c>)
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c4:	e009      	b.n	800b5da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5cc:	e005      	b.n	800b5da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 80e7 	beq.w	800b7b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	4a19      	ldr	r2, [pc, #100]	; (800b64c <UART_SetConfig+0x930>)
 800b5e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5f4:	005a      	lsls	r2, r3, #1
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	085b      	lsrs	r3, r3, #1
 800b5fc:	441a      	add	r2, r3
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	fbb2 f3f3 	udiv	r3, r2, r3
 800b606:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	2b0f      	cmp	r3, #15
 800b60c:	d916      	bls.n	800b63c <UART_SetConfig+0x920>
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b614:	d212      	bcs.n	800b63c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f023 030f 	bic.w	r3, r3, #15
 800b61e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	085b      	lsrs	r3, r3, #1
 800b624:	b29b      	uxth	r3, r3
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b62e:	4313      	orrs	r3, r2
 800b630:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b638:	60da      	str	r2, [r3, #12]
 800b63a:	e0b9      	b.n	800b7b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b642:	e0b5      	b.n	800b7b0 <UART_SetConfig+0xa94>
 800b644:	03d09000 	.word	0x03d09000
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	0800d000 	.word	0x0800d000
 800b650:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b654:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b658:	2b20      	cmp	r3, #32
 800b65a:	dc49      	bgt.n	800b6f0 <UART_SetConfig+0x9d4>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	db7c      	blt.n	800b75a <UART_SetConfig+0xa3e>
 800b660:	2b20      	cmp	r3, #32
 800b662:	d87a      	bhi.n	800b75a <UART_SetConfig+0xa3e>
 800b664:	a201      	add	r2, pc, #4	; (adr r2, 800b66c <UART_SetConfig+0x950>)
 800b666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66a:	bf00      	nop
 800b66c:	0800b6f7 	.word	0x0800b6f7
 800b670:	0800b6ff 	.word	0x0800b6ff
 800b674:	0800b75b 	.word	0x0800b75b
 800b678:	0800b75b 	.word	0x0800b75b
 800b67c:	0800b707 	.word	0x0800b707
 800b680:	0800b75b 	.word	0x0800b75b
 800b684:	0800b75b 	.word	0x0800b75b
 800b688:	0800b75b 	.word	0x0800b75b
 800b68c:	0800b717 	.word	0x0800b717
 800b690:	0800b75b 	.word	0x0800b75b
 800b694:	0800b75b 	.word	0x0800b75b
 800b698:	0800b75b 	.word	0x0800b75b
 800b69c:	0800b75b 	.word	0x0800b75b
 800b6a0:	0800b75b 	.word	0x0800b75b
 800b6a4:	0800b75b 	.word	0x0800b75b
 800b6a8:	0800b75b 	.word	0x0800b75b
 800b6ac:	0800b727 	.word	0x0800b727
 800b6b0:	0800b75b 	.word	0x0800b75b
 800b6b4:	0800b75b 	.word	0x0800b75b
 800b6b8:	0800b75b 	.word	0x0800b75b
 800b6bc:	0800b75b 	.word	0x0800b75b
 800b6c0:	0800b75b 	.word	0x0800b75b
 800b6c4:	0800b75b 	.word	0x0800b75b
 800b6c8:	0800b75b 	.word	0x0800b75b
 800b6cc:	0800b75b 	.word	0x0800b75b
 800b6d0:	0800b75b 	.word	0x0800b75b
 800b6d4:	0800b75b 	.word	0x0800b75b
 800b6d8:	0800b75b 	.word	0x0800b75b
 800b6dc:	0800b75b 	.word	0x0800b75b
 800b6e0:	0800b75b 	.word	0x0800b75b
 800b6e4:	0800b75b 	.word	0x0800b75b
 800b6e8:	0800b75b 	.word	0x0800b75b
 800b6ec:	0800b74d 	.word	0x0800b74d
 800b6f0:	2b40      	cmp	r3, #64	; 0x40
 800b6f2:	d02e      	beq.n	800b752 <UART_SetConfig+0xa36>
 800b6f4:	e031      	b.n	800b75a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6f6:	f7fb ff91 	bl	800761c <HAL_RCC_GetPCLK1Freq>
 800b6fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b6fc:	e033      	b.n	800b766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6fe:	f7fb ffa3 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 800b702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b704:	e02f      	b.n	800b766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd ff52 	bl	80095b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b714:	e027      	b.n	800b766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b716:	f107 0318 	add.w	r3, r7, #24
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe f89e 	bl	800985c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b724:	e01f      	b.n	800b766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b726:	4b2d      	ldr	r3, [pc, #180]	; (800b7dc <UART_SetConfig+0xac0>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d009      	beq.n	800b746 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b732:	4b2a      	ldr	r3, [pc, #168]	; (800b7dc <UART_SetConfig+0xac0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	08db      	lsrs	r3, r3, #3
 800b738:	f003 0303 	and.w	r3, r3, #3
 800b73c:	4a28      	ldr	r2, [pc, #160]	; (800b7e0 <UART_SetConfig+0xac4>)
 800b73e:	fa22 f303 	lsr.w	r3, r2, r3
 800b742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b744:	e00f      	b.n	800b766 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b746:	4b26      	ldr	r3, [pc, #152]	; (800b7e0 <UART_SetConfig+0xac4>)
 800b748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b74a:	e00c      	b.n	800b766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b74c:	4b25      	ldr	r3, [pc, #148]	; (800b7e4 <UART_SetConfig+0xac8>)
 800b74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b750:	e009      	b.n	800b766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b758:	e005      	b.n	800b766 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b764:	bf00      	nop
    }

    if (pclk != 0U)
 800b766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d021      	beq.n	800b7b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	4a1d      	ldr	r2, [pc, #116]	; (800b7e8 <UART_SetConfig+0xacc>)
 800b772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b776:	461a      	mov	r2, r3
 800b778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b77a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	085b      	lsrs	r3, r3, #1
 800b784:	441a      	add	r2, r3
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	2b0f      	cmp	r3, #15
 800b794:	d909      	bls.n	800b7aa <UART_SetConfig+0xa8e>
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b79c:	d205      	bcs.n	800b7aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	60da      	str	r2, [r3, #12]
 800b7a8:	e002      	b.n	800b7b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b7cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3748      	adds	r7, #72	; 0x48
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7da:	bf00      	nop
 800b7dc:	58024400 	.word	0x58024400
 800b7e0:	03d09000 	.word	0x03d09000
 800b7e4:	003d0900 	.word	0x003d0900
 800b7e8:	0800d000 	.word	0x0800d000

0800b7ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00a      	beq.n	800b816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	430a      	orrs	r2, r1
 800b814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00a      	beq.n	800b838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	430a      	orrs	r2, r1
 800b836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83c:	f003 0304 	and.w	r3, r3, #4
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00a      	beq.n	800b85a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	f003 0308 	and.w	r3, r3, #8
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00a      	beq.n	800b87c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	430a      	orrs	r2, r1
 800b87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b880:	f003 0310 	and.w	r3, r3, #16
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a2:	f003 0320 	and.w	r3, r3, #32
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01a      	beq.n	800b902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ea:	d10a      	bne.n	800b902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	605a      	str	r2, [r3, #4]
  }
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b098      	sub	sp, #96	; 0x60
 800b934:	af02      	add	r7, sp, #8
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b940:	f7f7 f9bc 	bl	8002cbc <HAL_GetTick>
 800b944:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0308 	and.w	r3, r3, #8
 800b950:	2b08      	cmp	r3, #8
 800b952:	d12f      	bne.n	800b9b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b95c:	2200      	movs	r2, #0
 800b95e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f88e 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d022      	beq.n	800b9b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b982:	653b      	str	r3, [r7, #80]	; 0x50
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98c:	647b      	str	r3, [r7, #68]	; 0x44
 800b98e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e6      	bne.n	800b96e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2220      	movs	r2, #32
 800b9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e063      	b.n	800ba7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d149      	bne.n	800ba56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f857 	bl	800ba84 <UART_WaitOnFlagUntilTimeout>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d03c      	beq.n	800ba56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	e853 3f00 	ldrex	r3, [r3]
 800b9e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b9fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba02:	e841 2300 	strex	r3, r2, [r1]
 800ba06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1e6      	bne.n	800b9dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3308      	adds	r3, #8
 800ba14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f023 0301 	bic.w	r3, r3, #1
 800ba24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba2e:	61fa      	str	r2, [r7, #28]
 800ba30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	69b9      	ldr	r1, [r7, #24]
 800ba34:	69fa      	ldr	r2, [r7, #28]
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e5      	bne.n	800ba0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2220      	movs	r2, #32
 800ba46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e012      	b.n	800ba7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2220      	movs	r2, #32
 800ba62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3758      	adds	r7, #88	; 0x58
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba94:	e049      	b.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d045      	beq.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba9e:	f7f7 f90d 	bl	8002cbc <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d302      	bcc.n	800bab4 <UART_WaitOnFlagUntilTimeout+0x30>
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e048      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0304 	and.w	r3, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d031      	beq.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	69db      	ldr	r3, [r3, #28]
 800bacc:	f003 0308 	and.w	r3, r3, #8
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d110      	bne.n	800baf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2208      	movs	r2, #8
 800bada:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 f839 	bl	800bb54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2208      	movs	r2, #8
 800bae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e029      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb04:	d111      	bne.n	800bb2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f81f 	bl	800bb54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bb26:	2303      	movs	r3, #3
 800bb28:	e00f      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69da      	ldr	r2, [r3, #28]
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4013      	ands	r3, r2
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	bf0c      	ite	eq
 800bb3a:	2301      	moveq	r3, #1
 800bb3c:	2300      	movne	r3, #0
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	461a      	mov	r2, r3
 800bb42:	79fb      	ldrb	r3, [r7, #7]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d0a6      	beq.n	800ba96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
	...

0800bb54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b095      	sub	sp, #84	; 0x54
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb82:	e841 2300 	strex	r3, r2, [r1]
 800bb86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e6      	bne.n	800bb5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3308      	adds	r3, #8
 800bb94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	e853 3f00 	ldrex	r3, [r3]
 800bb9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb9e:	69fa      	ldr	r2, [r7, #28]
 800bba0:	4b1e      	ldr	r3, [pc, #120]	; (800bc1c <UART_EndRxTransfer+0xc8>)
 800bba2:	4013      	ands	r3, r2
 800bba4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3308      	adds	r3, #8
 800bbac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e5      	bne.n	800bb8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d118      	bne.n	800bbfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	e853 3f00 	ldrex	r3, [r3]
 800bbd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f023 0310 	bic.w	r3, r3, #16
 800bbde:	647b      	str	r3, [r7, #68]	; 0x44
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe8:	61bb      	str	r3, [r7, #24]
 800bbea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	6979      	ldr	r1, [r7, #20]
 800bbee:	69ba      	ldr	r2, [r7, #24]
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e6      	bne.n	800bbca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bc10:	bf00      	nop
 800bc12:	3754      	adds	r7, #84	; 0x54
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	effffffe 	.word	0xeffffffe

0800bc20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d101      	bne.n	800bc36 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc32:	2302      	movs	r3, #2
 800bc34:	e027      	b.n	800bc86 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2224      	movs	r2, #36	; 0x24
 800bc42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0201 	bic.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e02d      	b.n	800bd06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2224      	movs	r2, #36	; 0x24
 800bcb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 0201 	bic.w	r2, r2, #1
 800bcd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f850 	bl	800bd8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d101      	bne.n	800bd26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd22:	2302      	movs	r3, #2
 800bd24:	e02d      	b.n	800bd82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2224      	movs	r2, #36	; 0x24
 800bd32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f022 0201 	bic.w	r2, r2, #1
 800bd4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f812 	bl	800bd8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d108      	bne.n	800bdae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdac:	e031      	b.n	800be12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdae:	2310      	movs	r3, #16
 800bdb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdb2:	2310      	movs	r3, #16
 800bdb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	0e5b      	lsrs	r3, r3, #25
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	f003 0307 	and.w	r3, r3, #7
 800bdc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	0f5b      	lsrs	r3, r3, #29
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 0307 	and.w	r3, r3, #7
 800bdd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
 800bdd8:	7b3a      	ldrb	r2, [r7, #12]
 800bdda:	4911      	ldr	r1, [pc, #68]	; (800be20 <UARTEx_SetNbDataToProcess+0x94>)
 800bddc:	5c8a      	ldrb	r2, [r1, r2]
 800bdde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bde2:	7b3a      	ldrb	r2, [r7, #12]
 800bde4:	490f      	ldr	r1, [pc, #60]	; (800be24 <UARTEx_SetNbDataToProcess+0x98>)
 800bde6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bde8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	7b7a      	ldrb	r2, [r7, #13]
 800bdf8:	4909      	ldr	r1, [pc, #36]	; (800be20 <UARTEx_SetNbDataToProcess+0x94>)
 800bdfa:	5c8a      	ldrb	r2, [r1, r2]
 800bdfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be00:	7b7a      	ldrb	r2, [r7, #13]
 800be02:	4908      	ldr	r1, [pc, #32]	; (800be24 <UARTEx_SetNbDataToProcess+0x98>)
 800be04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be06:	fb93 f3f2 	sdiv	r3, r3, r2
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	0800d018 	.word	0x0800d018
 800be24:	0800d020 	.word	0x0800d020

0800be28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d121      	bne.n	800be7e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	4b27      	ldr	r3, [pc, #156]	; (800bedc <FMC_SDRAM_Init+0xb4>)
 800be40:	4013      	ands	r3, r2
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	6851      	ldr	r1, [r2, #4]
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	6892      	ldr	r2, [r2, #8]
 800be4a:	4311      	orrs	r1, r2
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	68d2      	ldr	r2, [r2, #12]
 800be50:	4311      	orrs	r1, r2
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	6912      	ldr	r2, [r2, #16]
 800be56:	4311      	orrs	r1, r2
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	6952      	ldr	r2, [r2, #20]
 800be5c:	4311      	orrs	r1, r2
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	6992      	ldr	r2, [r2, #24]
 800be62:	4311      	orrs	r1, r2
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	69d2      	ldr	r2, [r2, #28]
 800be68:	4311      	orrs	r1, r2
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	6a12      	ldr	r2, [r2, #32]
 800be6e:	4311      	orrs	r1, r2
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be74:	430a      	orrs	r2, r1
 800be76:	431a      	orrs	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	e026      	b.n	800becc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	69d9      	ldr	r1, [r3, #28]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	4319      	orrs	r1, r3
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be94:	430b      	orrs	r3, r1
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <FMC_SDRAM_Init+0xb4>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	6851      	ldr	r1, [r2, #4]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	6892      	ldr	r2, [r2, #8]
 800beac:	4311      	orrs	r1, r2
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	68d2      	ldr	r2, [r2, #12]
 800beb2:	4311      	orrs	r1, r2
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	6912      	ldr	r2, [r2, #16]
 800beb8:	4311      	orrs	r1, r2
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	6952      	ldr	r2, [r2, #20]
 800bebe:	4311      	orrs	r1, r2
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	6992      	ldr	r2, [r2, #24]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	431a      	orrs	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	ffff8000 	.word	0xffff8000

0800bee0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d128      	bne.n	800bf44 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	1e59      	subs	r1, r3, #1
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	4319      	orrs	r1, r3
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	021b      	lsls	r3, r3, #8
 800bf12:	4319      	orrs	r1, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	031b      	lsls	r3, r3, #12
 800bf1c:	4319      	orrs	r1, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	041b      	lsls	r3, r3, #16
 800bf26:	4319      	orrs	r1, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	051b      	lsls	r3, r3, #20
 800bf30:	4319      	orrs	r1, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	3b01      	subs	r3, #1
 800bf38:	061b      	lsls	r3, r3, #24
 800bf3a:	430b      	orrs	r3, r1
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	609a      	str	r2, [r3, #8]
 800bf42:	e02d      	b.n	800bfa0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <FMC_SDRAM_Timing_Init+0xd0>)
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	68d2      	ldr	r2, [r2, #12]
 800bf50:	3a01      	subs	r2, #1
 800bf52:	0311      	lsls	r1, r2, #12
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	6952      	ldr	r2, [r2, #20]
 800bf58:	3a01      	subs	r2, #1
 800bf5a:	0512      	lsls	r2, r2, #20
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	1e59      	subs	r1, r3, #1
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	4319      	orrs	r1, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	4319      	orrs	r1, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	041b      	lsls	r3, r3, #16
 800bf8e:	4319      	orrs	r1, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	061b      	lsls	r3, r3, #24
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	ff0f0fff 	.word	0xff0f0fff

0800bfb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	f107 001c 	add.w	r0, r7, #28
 800bfc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d120      	bne.n	800c00e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	4b2a      	ldr	r3, [pc, #168]	; (800c088 <USB_CoreInit+0xd4>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d105      	bne.n	800c002 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 faac 	bl	800c560 <USB_CoreReset>
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]
 800c00c:	e01a      	b.n	800c044 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 faa0 	bl	800c560 <USB_CoreReset>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	639a      	str	r2, [r3, #56]	; 0x38
 800c036:	e005      	b.n	800c044 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	2b01      	cmp	r3, #1
 800c048:	d116      	bne.n	800c078 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c04e:	b29a      	uxth	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c058:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <USB_CoreInit+0xd8>)
 800c05a:	4313      	orrs	r3, r2
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f043 0206 	orr.w	r2, r3, #6
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	f043 0220 	orr.w	r2, r3, #32
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c084:	b004      	add	sp, #16
 800c086:	4770      	bx	lr
 800c088:	ffbdffbf 	.word	0xffbdffbf
 800c08c:	03ee0000 	.word	0x03ee0000

0800c090 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f023 0201 	bic.w	r2, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d115      	bne.n	800c100 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	f7f6 fdf7 	bl	8002cd4 <HAL_Delay>
      ms++;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fa29 	bl	800c544 <USB_GetMode>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d01e      	beq.n	800c136 <USB_SetCurrentMode+0x84>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b31      	cmp	r3, #49	; 0x31
 800c0fc:	d9f0      	bls.n	800c0e0 <USB_SetCurrentMode+0x2e>
 800c0fe:	e01a      	b.n	800c136 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d115      	bne.n	800c132 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c112:	2001      	movs	r0, #1
 800c114:	f7f6 fdde 	bl	8002cd4 <HAL_Delay>
      ms++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fa10 	bl	800c544 <USB_GetMode>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d005      	beq.n	800c136 <USB_SetCurrentMode+0x84>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b31      	cmp	r3, #49	; 0x31
 800c12e:	d9f0      	bls.n	800c112 <USB_SetCurrentMode+0x60>
 800c130:	e001      	b.n	800c136 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e005      	b.n	800c142 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2b32      	cmp	r3, #50	; 0x32
 800c13a:	d101      	bne.n	800c140 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	e000      	b.n	800c142 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
	...

0800c14c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c14c:	b084      	sub	sp, #16
 800c14e:	b580      	push	{r7, lr}
 800c150:	b086      	sub	sp, #24
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c15a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c166:	2300      	movs	r3, #0
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	e009      	b.n	800c180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	3340      	adds	r3, #64	; 0x40
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	2200      	movs	r2, #0
 800c178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	3301      	adds	r3, #1
 800c17e:	613b      	str	r3, [r7, #16]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	2b0e      	cmp	r3, #14
 800c184:	d9f2      	bls.n	800c16c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d11c      	bne.n	800c1c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c19a:	f043 0302 	orr.w	r3, r3, #2
 800c19e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	e005      	b.n	800c1d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1d8:	461a      	mov	r2, r3
 800c1da:	2300      	movs	r3, #0
 800c1dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	680b      	ldr	r3, [r1, #0]
 800c1f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d10c      	bne.n	800c212 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d104      	bne.n	800c208 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c1fe:	2100      	movs	r1, #0
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f965 	bl	800c4d0 <USB_SetDevSpeed>
 800c206:	e008      	b.n	800c21a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c208:	2101      	movs	r1, #1
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f960 	bl	800c4d0 <USB_SetDevSpeed>
 800c210:	e003      	b.n	800c21a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c212:	2103      	movs	r1, #3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f95b 	bl	800c4d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c21a:	2110      	movs	r1, #16
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f8f3 	bl	800c408 <USB_FlushTxFifo>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f91f 	bl	800c470 <USB_FlushRxFifo>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c242:	461a      	mov	r2, r3
 800c244:	2300      	movs	r3, #0
 800c246:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c24e:	461a      	mov	r2, r3
 800c250:	2300      	movs	r3, #0
 800c252:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25a:	461a      	mov	r2, r3
 800c25c:	2300      	movs	r3, #0
 800c25e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c260:	2300      	movs	r3, #0
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	e043      	b.n	800c2ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	015a      	lsls	r2, r3, #5
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	4413      	add	r3, r2
 800c26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c27c:	d118      	bne.n	800c2b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10a      	bne.n	800c29a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c290:	461a      	mov	r2, r3
 800c292:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	e013      	b.n	800c2c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	e008      	b.n	800c2c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	461a      	mov	r2, r3
 800c2be:	2300      	movs	r3, #0
 800c2c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	613b      	str	r3, [r7, #16]
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d3b7      	bcc.n	800c266 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	613b      	str	r3, [r7, #16]
 800c2fa:	e043      	b.n	800c384 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c30e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c312:	d118      	bne.n	800c346 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10a      	bne.n	800c330 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	015a      	lsls	r2, r3, #5
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c326:	461a      	mov	r2, r3
 800c328:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	e013      	b.n	800c358 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	015a      	lsls	r2, r3, #5
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4413      	add	r3, r2
 800c338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33c:	461a      	mov	r2, r3
 800c33e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	e008      	b.n	800c358 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c352:	461a      	mov	r2, r3
 800c354:	2300      	movs	r3, #0
 800c356:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c364:	461a      	mov	r2, r3
 800c366:	2300      	movs	r3, #0
 800c368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c376:	461a      	mov	r2, r3
 800c378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c37c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	3301      	adds	r3, #1
 800c382:	613b      	str	r3, [r7, #16]
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d3b7      	bcc.n	800c2fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c39a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c39e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c3ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d105      	bne.n	800c3c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	f043 0210 	orr.w	r2, r3, #16
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	699a      	ldr	r2, [r3, #24]
 800c3c4:	4b0e      	ldr	r3, [pc, #56]	; (800c400 <USB_DevInit+0x2b4>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d005      	beq.n	800c3de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	f043 0208 	orr.w	r2, r3, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d105      	bne.n	800c3f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699a      	ldr	r2, [r3, #24]
 800c3e8:	4b06      	ldr	r3, [pc, #24]	; (800c404 <USB_DevInit+0x2b8>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3fc:	b004      	add	sp, #16
 800c3fe:	4770      	bx	lr
 800c400:	803c3800 	.word	0x803c3800
 800c404:	40000004 	.word	0x40000004

0800c408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3301      	adds	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	4a13      	ldr	r2, [pc, #76]	; (800c46c <USB_FlushTxFifo+0x64>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d901      	bls.n	800c428 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e01b      	b.n	800c460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	daf2      	bge.n	800c416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	019b      	lsls	r3, r3, #6
 800c438:	f043 0220 	orr.w	r2, r3, #32
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3301      	adds	r3, #1
 800c444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	4a08      	ldr	r2, [pc, #32]	; (800c46c <USB_FlushTxFifo+0x64>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d901      	bls.n	800c452 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e006      	b.n	800c460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	f003 0320 	and.w	r3, r3, #32
 800c45a:	2b20      	cmp	r3, #32
 800c45c:	d0f0      	beq.n	800c440 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3714      	adds	r7, #20
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	00030d40 	.word	0x00030d40

0800c470 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c478:	2300      	movs	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	3301      	adds	r3, #1
 800c480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4a11      	ldr	r2, [pc, #68]	; (800c4cc <USB_FlushRxFifo+0x5c>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d901      	bls.n	800c48e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e018      	b.n	800c4c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	2b00      	cmp	r3, #0
 800c494:	daf2      	bge.n	800c47c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c496:	2300      	movs	r3, #0
 800c498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2210      	movs	r2, #16
 800c49e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4a08      	ldr	r2, [pc, #32]	; (800c4cc <USB_FlushRxFifo+0x5c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d901      	bls.n	800c4b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e006      	b.n	800c4c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	f003 0310 	and.w	r3, r3, #16
 800c4ba:	2b10      	cmp	r3, #16
 800c4bc:	d0f0      	beq.n	800c4a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	00030d40 	.word	0x00030d40

0800c4d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	68f9      	ldr	r1, [r7, #12]
 800c4ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c502:	b480      	push	{r7}
 800c504:	b085      	sub	sp, #20
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c51c:	f023 0303 	bic.w	r3, r3, #3
 800c520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c530:	f043 0302 	orr.w	r3, r3, #2
 800c534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	f003 0301 	and.w	r3, r3, #1
}
 800c554:	4618      	mov	r0, r3
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3301      	adds	r3, #1
 800c570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	4a13      	ldr	r2, [pc, #76]	; (800c5c4 <USB_CoreReset+0x64>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d901      	bls.n	800c57e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e01b      	b.n	800c5b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	daf2      	bge.n	800c56c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f043 0201 	orr.w	r2, r3, #1
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3301      	adds	r3, #1
 800c59a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4a09      	ldr	r2, [pc, #36]	; (800c5c4 <USB_CoreReset+0x64>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d901      	bls.n	800c5a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e006      	b.n	800c5b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d0f0      	beq.n	800c596 <USB_CoreReset+0x36>

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	00030d40 	.word	0x00030d40

0800c5c8 <sniprintf>:
 800c5c8:	b40c      	push	{r2, r3}
 800c5ca:	b530      	push	{r4, r5, lr}
 800c5cc:	4b17      	ldr	r3, [pc, #92]	; (800c62c <sniprintf+0x64>)
 800c5ce:	1e0c      	subs	r4, r1, #0
 800c5d0:	681d      	ldr	r5, [r3, #0]
 800c5d2:	b09d      	sub	sp, #116	; 0x74
 800c5d4:	da08      	bge.n	800c5e8 <sniprintf+0x20>
 800c5d6:	238b      	movs	r3, #139	; 0x8b
 800c5d8:	602b      	str	r3, [r5, #0]
 800c5da:	f04f 30ff 	mov.w	r0, #4294967295
 800c5de:	b01d      	add	sp, #116	; 0x74
 800c5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5e4:	b002      	add	sp, #8
 800c5e6:	4770      	bx	lr
 800c5e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c5ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c5f0:	bf14      	ite	ne
 800c5f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c5f6:	4623      	moveq	r3, r4
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	9307      	str	r3, [sp, #28]
 800c5fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c600:	9002      	str	r0, [sp, #8]
 800c602:	9006      	str	r0, [sp, #24]
 800c604:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c608:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c60a:	ab21      	add	r3, sp, #132	; 0x84
 800c60c:	a902      	add	r1, sp, #8
 800c60e:	4628      	mov	r0, r5
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	f000 f9a1 	bl	800c958 <_svfiprintf_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	bfbc      	itt	lt
 800c61a:	238b      	movlt	r3, #139	; 0x8b
 800c61c:	602b      	strlt	r3, [r5, #0]
 800c61e:	2c00      	cmp	r4, #0
 800c620:	d0dd      	beq.n	800c5de <sniprintf+0x16>
 800c622:	9b02      	ldr	r3, [sp, #8]
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
 800c628:	e7d9      	b.n	800c5de <sniprintf+0x16>
 800c62a:	bf00      	nop
 800c62c:	2400005c 	.word	0x2400005c

0800c630 <memset>:
 800c630:	4402      	add	r2, r0
 800c632:	4603      	mov	r3, r0
 800c634:	4293      	cmp	r3, r2
 800c636:	d100      	bne.n	800c63a <memset+0xa>
 800c638:	4770      	bx	lr
 800c63a:	f803 1b01 	strb.w	r1, [r3], #1
 800c63e:	e7f9      	b.n	800c634 <memset+0x4>

0800c640 <__errno>:
 800c640:	4b01      	ldr	r3, [pc, #4]	; (800c648 <__errno+0x8>)
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	2400005c 	.word	0x2400005c

0800c64c <__libc_init_array>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	4d0d      	ldr	r5, [pc, #52]	; (800c684 <__libc_init_array+0x38>)
 800c650:	4c0d      	ldr	r4, [pc, #52]	; (800c688 <__libc_init_array+0x3c>)
 800c652:	1b64      	subs	r4, r4, r5
 800c654:	10a4      	asrs	r4, r4, #2
 800c656:	2600      	movs	r6, #0
 800c658:	42a6      	cmp	r6, r4
 800c65a:	d109      	bne.n	800c670 <__libc_init_array+0x24>
 800c65c:	4d0b      	ldr	r5, [pc, #44]	; (800c68c <__libc_init_array+0x40>)
 800c65e:	4c0c      	ldr	r4, [pc, #48]	; (800c690 <__libc_init_array+0x44>)
 800c660:	f000 fc6a 	bl	800cf38 <_init>
 800c664:	1b64      	subs	r4, r4, r5
 800c666:	10a4      	asrs	r4, r4, #2
 800c668:	2600      	movs	r6, #0
 800c66a:	42a6      	cmp	r6, r4
 800c66c:	d105      	bne.n	800c67a <__libc_init_array+0x2e>
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	f855 3b04 	ldr.w	r3, [r5], #4
 800c674:	4798      	blx	r3
 800c676:	3601      	adds	r6, #1
 800c678:	e7ee      	b.n	800c658 <__libc_init_array+0xc>
 800c67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67e:	4798      	blx	r3
 800c680:	3601      	adds	r6, #1
 800c682:	e7f2      	b.n	800c66a <__libc_init_array+0x1e>
 800c684:	0800d064 	.word	0x0800d064
 800c688:	0800d064 	.word	0x0800d064
 800c68c:	0800d064 	.word	0x0800d064
 800c690:	0800d068 	.word	0x0800d068

0800c694 <__retarget_lock_acquire_recursive>:
 800c694:	4770      	bx	lr

0800c696 <__retarget_lock_release_recursive>:
 800c696:	4770      	bx	lr

0800c698 <memcpy>:
 800c698:	440a      	add	r2, r1
 800c69a:	4291      	cmp	r1, r2
 800c69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6a0:	d100      	bne.n	800c6a4 <memcpy+0xc>
 800c6a2:	4770      	bx	lr
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6ae:	4291      	cmp	r1, r2
 800c6b0:	d1f9      	bne.n	800c6a6 <memcpy+0xe>
 800c6b2:	bd10      	pop	{r4, pc}

0800c6b4 <_free_r>:
 800c6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6b6:	2900      	cmp	r1, #0
 800c6b8:	d044      	beq.n	800c744 <_free_r+0x90>
 800c6ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6be:	9001      	str	r0, [sp, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6c6:	bfb8      	it	lt
 800c6c8:	18e4      	addlt	r4, r4, r3
 800c6ca:	f000 f8df 	bl	800c88c <__malloc_lock>
 800c6ce:	4a1e      	ldr	r2, [pc, #120]	; (800c748 <_free_r+0x94>)
 800c6d0:	9801      	ldr	r0, [sp, #4]
 800c6d2:	6813      	ldr	r3, [r2, #0]
 800c6d4:	b933      	cbnz	r3, 800c6e4 <_free_r+0x30>
 800c6d6:	6063      	str	r3, [r4, #4]
 800c6d8:	6014      	str	r4, [r2, #0]
 800c6da:	b003      	add	sp, #12
 800c6dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e0:	f000 b8da 	b.w	800c898 <__malloc_unlock>
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	d908      	bls.n	800c6fa <_free_r+0x46>
 800c6e8:	6825      	ldr	r5, [r4, #0]
 800c6ea:	1961      	adds	r1, r4, r5
 800c6ec:	428b      	cmp	r3, r1
 800c6ee:	bf01      	itttt	eq
 800c6f0:	6819      	ldreq	r1, [r3, #0]
 800c6f2:	685b      	ldreq	r3, [r3, #4]
 800c6f4:	1949      	addeq	r1, r1, r5
 800c6f6:	6021      	streq	r1, [r4, #0]
 800c6f8:	e7ed      	b.n	800c6d6 <_free_r+0x22>
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	b10b      	cbz	r3, 800c704 <_free_r+0x50>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d9fa      	bls.n	800c6fa <_free_r+0x46>
 800c704:	6811      	ldr	r1, [r2, #0]
 800c706:	1855      	adds	r5, r2, r1
 800c708:	42a5      	cmp	r5, r4
 800c70a:	d10b      	bne.n	800c724 <_free_r+0x70>
 800c70c:	6824      	ldr	r4, [r4, #0]
 800c70e:	4421      	add	r1, r4
 800c710:	1854      	adds	r4, r2, r1
 800c712:	42a3      	cmp	r3, r4
 800c714:	6011      	str	r1, [r2, #0]
 800c716:	d1e0      	bne.n	800c6da <_free_r+0x26>
 800c718:	681c      	ldr	r4, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	6053      	str	r3, [r2, #4]
 800c71e:	440c      	add	r4, r1
 800c720:	6014      	str	r4, [r2, #0]
 800c722:	e7da      	b.n	800c6da <_free_r+0x26>
 800c724:	d902      	bls.n	800c72c <_free_r+0x78>
 800c726:	230c      	movs	r3, #12
 800c728:	6003      	str	r3, [r0, #0]
 800c72a:	e7d6      	b.n	800c6da <_free_r+0x26>
 800c72c:	6825      	ldr	r5, [r4, #0]
 800c72e:	1961      	adds	r1, r4, r5
 800c730:	428b      	cmp	r3, r1
 800c732:	bf04      	itt	eq
 800c734:	6819      	ldreq	r1, [r3, #0]
 800c736:	685b      	ldreq	r3, [r3, #4]
 800c738:	6063      	str	r3, [r4, #4]
 800c73a:	bf04      	itt	eq
 800c73c:	1949      	addeq	r1, r1, r5
 800c73e:	6021      	streq	r1, [r4, #0]
 800c740:	6054      	str	r4, [r2, #4]
 800c742:	e7ca      	b.n	800c6da <_free_r+0x26>
 800c744:	b003      	add	sp, #12
 800c746:	bd30      	pop	{r4, r5, pc}
 800c748:	24001008 	.word	0x24001008

0800c74c <sbrk_aligned>:
 800c74c:	b570      	push	{r4, r5, r6, lr}
 800c74e:	4e0e      	ldr	r6, [pc, #56]	; (800c788 <sbrk_aligned+0x3c>)
 800c750:	460c      	mov	r4, r1
 800c752:	6831      	ldr	r1, [r6, #0]
 800c754:	4605      	mov	r5, r0
 800c756:	b911      	cbnz	r1, 800c75e <sbrk_aligned+0x12>
 800c758:	f000 fba6 	bl	800cea8 <_sbrk_r>
 800c75c:	6030      	str	r0, [r6, #0]
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	f000 fba1 	bl	800cea8 <_sbrk_r>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	d00a      	beq.n	800c780 <sbrk_aligned+0x34>
 800c76a:	1cc4      	adds	r4, r0, #3
 800c76c:	f024 0403 	bic.w	r4, r4, #3
 800c770:	42a0      	cmp	r0, r4
 800c772:	d007      	beq.n	800c784 <sbrk_aligned+0x38>
 800c774:	1a21      	subs	r1, r4, r0
 800c776:	4628      	mov	r0, r5
 800c778:	f000 fb96 	bl	800cea8 <_sbrk_r>
 800c77c:	3001      	adds	r0, #1
 800c77e:	d101      	bne.n	800c784 <sbrk_aligned+0x38>
 800c780:	f04f 34ff 	mov.w	r4, #4294967295
 800c784:	4620      	mov	r0, r4
 800c786:	bd70      	pop	{r4, r5, r6, pc}
 800c788:	2400100c 	.word	0x2400100c

0800c78c <_malloc_r>:
 800c78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c790:	1ccd      	adds	r5, r1, #3
 800c792:	f025 0503 	bic.w	r5, r5, #3
 800c796:	3508      	adds	r5, #8
 800c798:	2d0c      	cmp	r5, #12
 800c79a:	bf38      	it	cc
 800c79c:	250c      	movcc	r5, #12
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	db01      	blt.n	800c7a8 <_malloc_r+0x1c>
 800c7a4:	42a9      	cmp	r1, r5
 800c7a6:	d905      	bls.n	800c7b4 <_malloc_r+0x28>
 800c7a8:	230c      	movs	r3, #12
 800c7aa:	603b      	str	r3, [r7, #0]
 800c7ac:	2600      	movs	r6, #0
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c888 <_malloc_r+0xfc>
 800c7b8:	f000 f868 	bl	800c88c <__malloc_lock>
 800c7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c0:	461c      	mov	r4, r3
 800c7c2:	bb5c      	cbnz	r4, 800c81c <_malloc_r+0x90>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	f7ff ffc0 	bl	800c74c <sbrk_aligned>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	d155      	bne.n	800c87e <_malloc_r+0xf2>
 800c7d2:	f8d8 4000 	ldr.w	r4, [r8]
 800c7d6:	4626      	mov	r6, r4
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	d145      	bne.n	800c868 <_malloc_r+0xdc>
 800c7dc:	2c00      	cmp	r4, #0
 800c7de:	d048      	beq.n	800c872 <_malloc_r+0xe6>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	eb04 0903 	add.w	r9, r4, r3
 800c7ea:	f000 fb5d 	bl	800cea8 <_sbrk_r>
 800c7ee:	4581      	cmp	r9, r0
 800c7f0:	d13f      	bne.n	800c872 <_malloc_r+0xe6>
 800c7f2:	6821      	ldr	r1, [r4, #0]
 800c7f4:	1a6d      	subs	r5, r5, r1
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7ff ffa7 	bl	800c74c <sbrk_aligned>
 800c7fe:	3001      	adds	r0, #1
 800c800:	d037      	beq.n	800c872 <_malloc_r+0xe6>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	442b      	add	r3, r5
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	f8d8 3000 	ldr.w	r3, [r8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d038      	beq.n	800c882 <_malloc_r+0xf6>
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	42a2      	cmp	r2, r4
 800c814:	d12b      	bne.n	800c86e <_malloc_r+0xe2>
 800c816:	2200      	movs	r2, #0
 800c818:	605a      	str	r2, [r3, #4]
 800c81a:	e00f      	b.n	800c83c <_malloc_r+0xb0>
 800c81c:	6822      	ldr	r2, [r4, #0]
 800c81e:	1b52      	subs	r2, r2, r5
 800c820:	d41f      	bmi.n	800c862 <_malloc_r+0xd6>
 800c822:	2a0b      	cmp	r2, #11
 800c824:	d917      	bls.n	800c856 <_malloc_r+0xca>
 800c826:	1961      	adds	r1, r4, r5
 800c828:	42a3      	cmp	r3, r4
 800c82a:	6025      	str	r5, [r4, #0]
 800c82c:	bf18      	it	ne
 800c82e:	6059      	strne	r1, [r3, #4]
 800c830:	6863      	ldr	r3, [r4, #4]
 800c832:	bf08      	it	eq
 800c834:	f8c8 1000 	streq.w	r1, [r8]
 800c838:	5162      	str	r2, [r4, r5]
 800c83a:	604b      	str	r3, [r1, #4]
 800c83c:	4638      	mov	r0, r7
 800c83e:	f104 060b 	add.w	r6, r4, #11
 800c842:	f000 f829 	bl	800c898 <__malloc_unlock>
 800c846:	f026 0607 	bic.w	r6, r6, #7
 800c84a:	1d23      	adds	r3, r4, #4
 800c84c:	1af2      	subs	r2, r6, r3
 800c84e:	d0ae      	beq.n	800c7ae <_malloc_r+0x22>
 800c850:	1b9b      	subs	r3, r3, r6
 800c852:	50a3      	str	r3, [r4, r2]
 800c854:	e7ab      	b.n	800c7ae <_malloc_r+0x22>
 800c856:	42a3      	cmp	r3, r4
 800c858:	6862      	ldr	r2, [r4, #4]
 800c85a:	d1dd      	bne.n	800c818 <_malloc_r+0x8c>
 800c85c:	f8c8 2000 	str.w	r2, [r8]
 800c860:	e7ec      	b.n	800c83c <_malloc_r+0xb0>
 800c862:	4623      	mov	r3, r4
 800c864:	6864      	ldr	r4, [r4, #4]
 800c866:	e7ac      	b.n	800c7c2 <_malloc_r+0x36>
 800c868:	4634      	mov	r4, r6
 800c86a:	6876      	ldr	r6, [r6, #4]
 800c86c:	e7b4      	b.n	800c7d8 <_malloc_r+0x4c>
 800c86e:	4613      	mov	r3, r2
 800c870:	e7cc      	b.n	800c80c <_malloc_r+0x80>
 800c872:	230c      	movs	r3, #12
 800c874:	603b      	str	r3, [r7, #0]
 800c876:	4638      	mov	r0, r7
 800c878:	f000 f80e 	bl	800c898 <__malloc_unlock>
 800c87c:	e797      	b.n	800c7ae <_malloc_r+0x22>
 800c87e:	6025      	str	r5, [r4, #0]
 800c880:	e7dc      	b.n	800c83c <_malloc_r+0xb0>
 800c882:	605b      	str	r3, [r3, #4]
 800c884:	deff      	udf	#255	; 0xff
 800c886:	bf00      	nop
 800c888:	24001008 	.word	0x24001008

0800c88c <__malloc_lock>:
 800c88c:	4801      	ldr	r0, [pc, #4]	; (800c894 <__malloc_lock+0x8>)
 800c88e:	f7ff bf01 	b.w	800c694 <__retarget_lock_acquire_recursive>
 800c892:	bf00      	nop
 800c894:	24001004 	.word	0x24001004

0800c898 <__malloc_unlock>:
 800c898:	4801      	ldr	r0, [pc, #4]	; (800c8a0 <__malloc_unlock+0x8>)
 800c89a:	f7ff befc 	b.w	800c696 <__retarget_lock_release_recursive>
 800c89e:	bf00      	nop
 800c8a0:	24001004 	.word	0x24001004

0800c8a4 <__ssputs_r>:
 800c8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a8:	688e      	ldr	r6, [r1, #8]
 800c8aa:	461f      	mov	r7, r3
 800c8ac:	42be      	cmp	r6, r7
 800c8ae:	680b      	ldr	r3, [r1, #0]
 800c8b0:	4682      	mov	sl, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	4690      	mov	r8, r2
 800c8b6:	d82c      	bhi.n	800c912 <__ssputs_r+0x6e>
 800c8b8:	898a      	ldrh	r2, [r1, #12]
 800c8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8be:	d026      	beq.n	800c90e <__ssputs_r+0x6a>
 800c8c0:	6965      	ldr	r5, [r4, #20]
 800c8c2:	6909      	ldr	r1, [r1, #16]
 800c8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8c8:	eba3 0901 	sub.w	r9, r3, r1
 800c8cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8d0:	1c7b      	adds	r3, r7, #1
 800c8d2:	444b      	add	r3, r9
 800c8d4:	106d      	asrs	r5, r5, #1
 800c8d6:	429d      	cmp	r5, r3
 800c8d8:	bf38      	it	cc
 800c8da:	461d      	movcc	r5, r3
 800c8dc:	0553      	lsls	r3, r2, #21
 800c8de:	d527      	bpl.n	800c930 <__ssputs_r+0x8c>
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	f7ff ff53 	bl	800c78c <_malloc_r>
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	b360      	cbz	r0, 800c944 <__ssputs_r+0xa0>
 800c8ea:	6921      	ldr	r1, [r4, #16]
 800c8ec:	464a      	mov	r2, r9
 800c8ee:	f7ff fed3 	bl	800c698 <memcpy>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8fc:	81a3      	strh	r3, [r4, #12]
 800c8fe:	6126      	str	r6, [r4, #16]
 800c900:	6165      	str	r5, [r4, #20]
 800c902:	444e      	add	r6, r9
 800c904:	eba5 0509 	sub.w	r5, r5, r9
 800c908:	6026      	str	r6, [r4, #0]
 800c90a:	60a5      	str	r5, [r4, #8]
 800c90c:	463e      	mov	r6, r7
 800c90e:	42be      	cmp	r6, r7
 800c910:	d900      	bls.n	800c914 <__ssputs_r+0x70>
 800c912:	463e      	mov	r6, r7
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	4632      	mov	r2, r6
 800c918:	4641      	mov	r1, r8
 800c91a:	f000 faab 	bl	800ce74 <memmove>
 800c91e:	68a3      	ldr	r3, [r4, #8]
 800c920:	1b9b      	subs	r3, r3, r6
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	4433      	add	r3, r6
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	2000      	movs	r0, #0
 800c92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c930:	462a      	mov	r2, r5
 800c932:	f000 fac9 	bl	800cec8 <_realloc_r>
 800c936:	4606      	mov	r6, r0
 800c938:	2800      	cmp	r0, #0
 800c93a:	d1e0      	bne.n	800c8fe <__ssputs_r+0x5a>
 800c93c:	6921      	ldr	r1, [r4, #16]
 800c93e:	4650      	mov	r0, sl
 800c940:	f7ff feb8 	bl	800c6b4 <_free_r>
 800c944:	230c      	movs	r3, #12
 800c946:	f8ca 3000 	str.w	r3, [sl]
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c950:	81a3      	strh	r3, [r4, #12]
 800c952:	f04f 30ff 	mov.w	r0, #4294967295
 800c956:	e7e9      	b.n	800c92c <__ssputs_r+0x88>

0800c958 <_svfiprintf_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	4698      	mov	r8, r3
 800c95e:	898b      	ldrh	r3, [r1, #12]
 800c960:	061b      	lsls	r3, r3, #24
 800c962:	b09d      	sub	sp, #116	; 0x74
 800c964:	4607      	mov	r7, r0
 800c966:	460d      	mov	r5, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	d50e      	bpl.n	800c98a <_svfiprintf_r+0x32>
 800c96c:	690b      	ldr	r3, [r1, #16]
 800c96e:	b963      	cbnz	r3, 800c98a <_svfiprintf_r+0x32>
 800c970:	2140      	movs	r1, #64	; 0x40
 800c972:	f7ff ff0b 	bl	800c78c <_malloc_r>
 800c976:	6028      	str	r0, [r5, #0]
 800c978:	6128      	str	r0, [r5, #16]
 800c97a:	b920      	cbnz	r0, 800c986 <_svfiprintf_r+0x2e>
 800c97c:	230c      	movs	r3, #12
 800c97e:	603b      	str	r3, [r7, #0]
 800c980:	f04f 30ff 	mov.w	r0, #4294967295
 800c984:	e0d0      	b.n	800cb28 <_svfiprintf_r+0x1d0>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	616b      	str	r3, [r5, #20]
 800c98a:	2300      	movs	r3, #0
 800c98c:	9309      	str	r3, [sp, #36]	; 0x24
 800c98e:	2320      	movs	r3, #32
 800c990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c994:	f8cd 800c 	str.w	r8, [sp, #12]
 800c998:	2330      	movs	r3, #48	; 0x30
 800c99a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb40 <_svfiprintf_r+0x1e8>
 800c99e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9a2:	f04f 0901 	mov.w	r9, #1
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	469a      	mov	sl, r3
 800c9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ae:	b10a      	cbz	r2, 800c9b4 <_svfiprintf_r+0x5c>
 800c9b0:	2a25      	cmp	r2, #37	; 0x25
 800c9b2:	d1f9      	bne.n	800c9a8 <_svfiprintf_r+0x50>
 800c9b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b8:	d00b      	beq.n	800c9d2 <_svfiprintf_r+0x7a>
 800c9ba:	465b      	mov	r3, fp
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7ff ff6f 	bl	800c8a4 <__ssputs_r>
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	f000 80a9 	beq.w	800cb1e <_svfiprintf_r+0x1c6>
 800c9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ce:	445a      	add	r2, fp
 800c9d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80a1 	beq.w	800cb1e <_svfiprintf_r+0x1c6>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e6:	f10a 0a01 	add.w	sl, sl, #1
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9f4:	4654      	mov	r4, sl
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9fc:	4850      	ldr	r0, [pc, #320]	; (800cb40 <_svfiprintf_r+0x1e8>)
 800c9fe:	f7f3 fc77 	bl	80002f0 <memchr>
 800ca02:	9a04      	ldr	r2, [sp, #16]
 800ca04:	b9d8      	cbnz	r0, 800ca3e <_svfiprintf_r+0xe6>
 800ca06:	06d0      	lsls	r0, r2, #27
 800ca08:	bf44      	itt	mi
 800ca0a:	2320      	movmi	r3, #32
 800ca0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca10:	0711      	lsls	r1, r2, #28
 800ca12:	bf44      	itt	mi
 800ca14:	232b      	movmi	r3, #43	; 0x2b
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca20:	d015      	beq.n	800ca4e <_svfiprintf_r+0xf6>
 800ca22:	9a07      	ldr	r2, [sp, #28]
 800ca24:	4654      	mov	r4, sl
 800ca26:	2000      	movs	r0, #0
 800ca28:	f04f 0c0a 	mov.w	ip, #10
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca32:	3b30      	subs	r3, #48	; 0x30
 800ca34:	2b09      	cmp	r3, #9
 800ca36:	d94d      	bls.n	800cad4 <_svfiprintf_r+0x17c>
 800ca38:	b1b0      	cbz	r0, 800ca68 <_svfiprintf_r+0x110>
 800ca3a:	9207      	str	r2, [sp, #28]
 800ca3c:	e014      	b.n	800ca68 <_svfiprintf_r+0x110>
 800ca3e:	eba0 0308 	sub.w	r3, r0, r8
 800ca42:	fa09 f303 	lsl.w	r3, r9, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	46a2      	mov	sl, r4
 800ca4c:	e7d2      	b.n	800c9f4 <_svfiprintf_r+0x9c>
 800ca4e:	9b03      	ldr	r3, [sp, #12]
 800ca50:	1d19      	adds	r1, r3, #4
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	9103      	str	r1, [sp, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	bfbb      	ittet	lt
 800ca5a:	425b      	neglt	r3, r3
 800ca5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca60:	9307      	strge	r3, [sp, #28]
 800ca62:	9307      	strlt	r3, [sp, #28]
 800ca64:	bfb8      	it	lt
 800ca66:	9204      	strlt	r2, [sp, #16]
 800ca68:	7823      	ldrb	r3, [r4, #0]
 800ca6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca6c:	d10c      	bne.n	800ca88 <_svfiprintf_r+0x130>
 800ca6e:	7863      	ldrb	r3, [r4, #1]
 800ca70:	2b2a      	cmp	r3, #42	; 0x2a
 800ca72:	d134      	bne.n	800cade <_svfiprintf_r+0x186>
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	1d1a      	adds	r2, r3, #4
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	9203      	str	r2, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bfb8      	it	lt
 800ca80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca84:	3402      	adds	r4, #2
 800ca86:	9305      	str	r3, [sp, #20]
 800ca88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb50 <_svfiprintf_r+0x1f8>
 800ca8c:	7821      	ldrb	r1, [r4, #0]
 800ca8e:	2203      	movs	r2, #3
 800ca90:	4650      	mov	r0, sl
 800ca92:	f7f3 fc2d 	bl	80002f0 <memchr>
 800ca96:	b138      	cbz	r0, 800caa8 <_svfiprintf_r+0x150>
 800ca98:	9b04      	ldr	r3, [sp, #16]
 800ca9a:	eba0 000a 	sub.w	r0, r0, sl
 800ca9e:	2240      	movs	r2, #64	; 0x40
 800caa0:	4082      	lsls	r2, r0
 800caa2:	4313      	orrs	r3, r2
 800caa4:	3401      	adds	r4, #1
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caac:	4825      	ldr	r0, [pc, #148]	; (800cb44 <_svfiprintf_r+0x1ec>)
 800caae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cab2:	2206      	movs	r2, #6
 800cab4:	f7f3 fc1c 	bl	80002f0 <memchr>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d038      	beq.n	800cb2e <_svfiprintf_r+0x1d6>
 800cabc:	4b22      	ldr	r3, [pc, #136]	; (800cb48 <_svfiprintf_r+0x1f0>)
 800cabe:	bb1b      	cbnz	r3, 800cb08 <_svfiprintf_r+0x1b0>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	3307      	adds	r3, #7
 800cac4:	f023 0307 	bic.w	r3, r3, #7
 800cac8:	3308      	adds	r3, #8
 800caca:	9303      	str	r3, [sp, #12]
 800cacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cace:	4433      	add	r3, r6
 800cad0:	9309      	str	r3, [sp, #36]	; 0x24
 800cad2:	e768      	b.n	800c9a6 <_svfiprintf_r+0x4e>
 800cad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad8:	460c      	mov	r4, r1
 800cada:	2001      	movs	r0, #1
 800cadc:	e7a6      	b.n	800ca2c <_svfiprintf_r+0xd4>
 800cade:	2300      	movs	r3, #0
 800cae0:	3401      	adds	r4, #1
 800cae2:	9305      	str	r3, [sp, #20]
 800cae4:	4619      	mov	r1, r3
 800cae6:	f04f 0c0a 	mov.w	ip, #10
 800caea:	4620      	mov	r0, r4
 800caec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caf0:	3a30      	subs	r2, #48	; 0x30
 800caf2:	2a09      	cmp	r2, #9
 800caf4:	d903      	bls.n	800cafe <_svfiprintf_r+0x1a6>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0c6      	beq.n	800ca88 <_svfiprintf_r+0x130>
 800cafa:	9105      	str	r1, [sp, #20]
 800cafc:	e7c4      	b.n	800ca88 <_svfiprintf_r+0x130>
 800cafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb02:	4604      	mov	r4, r0
 800cb04:	2301      	movs	r3, #1
 800cb06:	e7f0      	b.n	800caea <_svfiprintf_r+0x192>
 800cb08:	ab03      	add	r3, sp, #12
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <_svfiprintf_r+0x1f4>)
 800cb10:	a904      	add	r1, sp, #16
 800cb12:	4638      	mov	r0, r7
 800cb14:	f3af 8000 	nop.w
 800cb18:	1c42      	adds	r2, r0, #1
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	d1d6      	bne.n	800cacc <_svfiprintf_r+0x174>
 800cb1e:	89ab      	ldrh	r3, [r5, #12]
 800cb20:	065b      	lsls	r3, r3, #25
 800cb22:	f53f af2d 	bmi.w	800c980 <_svfiprintf_r+0x28>
 800cb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb28:	b01d      	add	sp, #116	; 0x74
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	ab03      	add	r3, sp, #12
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	462a      	mov	r2, r5
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <_svfiprintf_r+0x1f4>)
 800cb36:	a904      	add	r1, sp, #16
 800cb38:	4638      	mov	r0, r7
 800cb3a:	f000 f879 	bl	800cc30 <_printf_i>
 800cb3e:	e7eb      	b.n	800cb18 <_svfiprintf_r+0x1c0>
 800cb40:	0800d028 	.word	0x0800d028
 800cb44:	0800d032 	.word	0x0800d032
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	0800c8a5 	.word	0x0800c8a5
 800cb50:	0800d02e 	.word	0x0800d02e

0800cb54 <_printf_common>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	4616      	mov	r6, r2
 800cb5a:	4699      	mov	r9, r3
 800cb5c:	688a      	ldr	r2, [r1, #8]
 800cb5e:	690b      	ldr	r3, [r1, #16]
 800cb60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb64:	4293      	cmp	r3, r2
 800cb66:	bfb8      	it	lt
 800cb68:	4613      	movlt	r3, r2
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb70:	4607      	mov	r7, r0
 800cb72:	460c      	mov	r4, r1
 800cb74:	b10a      	cbz	r2, 800cb7a <_printf_common+0x26>
 800cb76:	3301      	adds	r3, #1
 800cb78:	6033      	str	r3, [r6, #0]
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	0699      	lsls	r1, r3, #26
 800cb7e:	bf42      	ittt	mi
 800cb80:	6833      	ldrmi	r3, [r6, #0]
 800cb82:	3302      	addmi	r3, #2
 800cb84:	6033      	strmi	r3, [r6, #0]
 800cb86:	6825      	ldr	r5, [r4, #0]
 800cb88:	f015 0506 	ands.w	r5, r5, #6
 800cb8c:	d106      	bne.n	800cb9c <_printf_common+0x48>
 800cb8e:	f104 0a19 	add.w	sl, r4, #25
 800cb92:	68e3      	ldr	r3, [r4, #12]
 800cb94:	6832      	ldr	r2, [r6, #0]
 800cb96:	1a9b      	subs	r3, r3, r2
 800cb98:	42ab      	cmp	r3, r5
 800cb9a:	dc26      	bgt.n	800cbea <_printf_common+0x96>
 800cb9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cba0:	1e13      	subs	r3, r2, #0
 800cba2:	6822      	ldr	r2, [r4, #0]
 800cba4:	bf18      	it	ne
 800cba6:	2301      	movne	r3, #1
 800cba8:	0692      	lsls	r2, r2, #26
 800cbaa:	d42b      	bmi.n	800cc04 <_printf_common+0xb0>
 800cbac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	47c0      	blx	r8
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d01e      	beq.n	800cbf8 <_printf_common+0xa4>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	6922      	ldr	r2, [r4, #16]
 800cbbe:	f003 0306 	and.w	r3, r3, #6
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	bf02      	ittt	eq
 800cbc6:	68e5      	ldreq	r5, [r4, #12]
 800cbc8:	6833      	ldreq	r3, [r6, #0]
 800cbca:	1aed      	subeq	r5, r5, r3
 800cbcc:	68a3      	ldr	r3, [r4, #8]
 800cbce:	bf0c      	ite	eq
 800cbd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbd4:	2500      	movne	r5, #0
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	bfc4      	itt	gt
 800cbda:	1a9b      	subgt	r3, r3, r2
 800cbdc:	18ed      	addgt	r5, r5, r3
 800cbde:	2600      	movs	r6, #0
 800cbe0:	341a      	adds	r4, #26
 800cbe2:	42b5      	cmp	r5, r6
 800cbe4:	d11a      	bne.n	800cc1c <_printf_common+0xc8>
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	e008      	b.n	800cbfc <_printf_common+0xa8>
 800cbea:	2301      	movs	r3, #1
 800cbec:	4652      	mov	r2, sl
 800cbee:	4649      	mov	r1, r9
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	47c0      	blx	r8
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d103      	bne.n	800cc00 <_printf_common+0xac>
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc00:	3501      	adds	r5, #1
 800cc02:	e7c6      	b.n	800cb92 <_printf_common+0x3e>
 800cc04:	18e1      	adds	r1, r4, r3
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	2030      	movs	r0, #48	; 0x30
 800cc0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc0e:	4422      	add	r2, r4
 800cc10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc18:	3302      	adds	r3, #2
 800cc1a:	e7c7      	b.n	800cbac <_printf_common+0x58>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	4622      	mov	r2, r4
 800cc20:	4649      	mov	r1, r9
 800cc22:	4638      	mov	r0, r7
 800cc24:	47c0      	blx	r8
 800cc26:	3001      	adds	r0, #1
 800cc28:	d0e6      	beq.n	800cbf8 <_printf_common+0xa4>
 800cc2a:	3601      	adds	r6, #1
 800cc2c:	e7d9      	b.n	800cbe2 <_printf_common+0x8e>
	...

0800cc30 <_printf_i>:
 800cc30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc34:	7e0f      	ldrb	r7, [r1, #24]
 800cc36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc38:	2f78      	cmp	r7, #120	; 0x78
 800cc3a:	4691      	mov	r9, r2
 800cc3c:	4680      	mov	r8, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	469a      	mov	sl, r3
 800cc42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc46:	d807      	bhi.n	800cc58 <_printf_i+0x28>
 800cc48:	2f62      	cmp	r7, #98	; 0x62
 800cc4a:	d80a      	bhi.n	800cc62 <_printf_i+0x32>
 800cc4c:	2f00      	cmp	r7, #0
 800cc4e:	f000 80d4 	beq.w	800cdfa <_printf_i+0x1ca>
 800cc52:	2f58      	cmp	r7, #88	; 0x58
 800cc54:	f000 80c0 	beq.w	800cdd8 <_printf_i+0x1a8>
 800cc58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc60:	e03a      	b.n	800ccd8 <_printf_i+0xa8>
 800cc62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc66:	2b15      	cmp	r3, #21
 800cc68:	d8f6      	bhi.n	800cc58 <_printf_i+0x28>
 800cc6a:	a101      	add	r1, pc, #4	; (adr r1, 800cc70 <_printf_i+0x40>)
 800cc6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc70:	0800ccc9 	.word	0x0800ccc9
 800cc74:	0800ccdd 	.word	0x0800ccdd
 800cc78:	0800cc59 	.word	0x0800cc59
 800cc7c:	0800cc59 	.word	0x0800cc59
 800cc80:	0800cc59 	.word	0x0800cc59
 800cc84:	0800cc59 	.word	0x0800cc59
 800cc88:	0800ccdd 	.word	0x0800ccdd
 800cc8c:	0800cc59 	.word	0x0800cc59
 800cc90:	0800cc59 	.word	0x0800cc59
 800cc94:	0800cc59 	.word	0x0800cc59
 800cc98:	0800cc59 	.word	0x0800cc59
 800cc9c:	0800cde1 	.word	0x0800cde1
 800cca0:	0800cd09 	.word	0x0800cd09
 800cca4:	0800cd9b 	.word	0x0800cd9b
 800cca8:	0800cc59 	.word	0x0800cc59
 800ccac:	0800cc59 	.word	0x0800cc59
 800ccb0:	0800ce03 	.word	0x0800ce03
 800ccb4:	0800cc59 	.word	0x0800cc59
 800ccb8:	0800cd09 	.word	0x0800cd09
 800ccbc:	0800cc59 	.word	0x0800cc59
 800ccc0:	0800cc59 	.word	0x0800cc59
 800ccc4:	0800cda3 	.word	0x0800cda3
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	1d1a      	adds	r2, r3, #4
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	602a      	str	r2, [r5, #0]
 800ccd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e09f      	b.n	800ce1c <_printf_i+0x1ec>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	0607      	lsls	r7, r0, #24
 800cce2:	f103 0104 	add.w	r1, r3, #4
 800cce6:	6029      	str	r1, [r5, #0]
 800cce8:	d501      	bpl.n	800ccee <_printf_i+0xbe>
 800ccea:	681e      	ldr	r6, [r3, #0]
 800ccec:	e003      	b.n	800ccf6 <_printf_i+0xc6>
 800ccee:	0646      	lsls	r6, r0, #25
 800ccf0:	d5fb      	bpl.n	800ccea <_printf_i+0xba>
 800ccf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ccf6:	2e00      	cmp	r6, #0
 800ccf8:	da03      	bge.n	800cd02 <_printf_i+0xd2>
 800ccfa:	232d      	movs	r3, #45	; 0x2d
 800ccfc:	4276      	negs	r6, r6
 800ccfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd02:	485a      	ldr	r0, [pc, #360]	; (800ce6c <_printf_i+0x23c>)
 800cd04:	230a      	movs	r3, #10
 800cd06:	e012      	b.n	800cd2e <_printf_i+0xfe>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	6820      	ldr	r0, [r4, #0]
 800cd0c:	1d19      	adds	r1, r3, #4
 800cd0e:	6029      	str	r1, [r5, #0]
 800cd10:	0605      	lsls	r5, r0, #24
 800cd12:	d501      	bpl.n	800cd18 <_printf_i+0xe8>
 800cd14:	681e      	ldr	r6, [r3, #0]
 800cd16:	e002      	b.n	800cd1e <_printf_i+0xee>
 800cd18:	0641      	lsls	r1, r0, #25
 800cd1a:	d5fb      	bpl.n	800cd14 <_printf_i+0xe4>
 800cd1c:	881e      	ldrh	r6, [r3, #0]
 800cd1e:	4853      	ldr	r0, [pc, #332]	; (800ce6c <_printf_i+0x23c>)
 800cd20:	2f6f      	cmp	r7, #111	; 0x6f
 800cd22:	bf0c      	ite	eq
 800cd24:	2308      	moveq	r3, #8
 800cd26:	230a      	movne	r3, #10
 800cd28:	2100      	movs	r1, #0
 800cd2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd2e:	6865      	ldr	r5, [r4, #4]
 800cd30:	60a5      	str	r5, [r4, #8]
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	bfa2      	ittt	ge
 800cd36:	6821      	ldrge	r1, [r4, #0]
 800cd38:	f021 0104 	bicge.w	r1, r1, #4
 800cd3c:	6021      	strge	r1, [r4, #0]
 800cd3e:	b90e      	cbnz	r6, 800cd44 <_printf_i+0x114>
 800cd40:	2d00      	cmp	r5, #0
 800cd42:	d04b      	beq.n	800cddc <_printf_i+0x1ac>
 800cd44:	4615      	mov	r5, r2
 800cd46:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd4a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd4e:	5dc7      	ldrb	r7, [r0, r7]
 800cd50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd54:	4637      	mov	r7, r6
 800cd56:	42bb      	cmp	r3, r7
 800cd58:	460e      	mov	r6, r1
 800cd5a:	d9f4      	bls.n	800cd46 <_printf_i+0x116>
 800cd5c:	2b08      	cmp	r3, #8
 800cd5e:	d10b      	bne.n	800cd78 <_printf_i+0x148>
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	07de      	lsls	r6, r3, #31
 800cd64:	d508      	bpl.n	800cd78 <_printf_i+0x148>
 800cd66:	6923      	ldr	r3, [r4, #16]
 800cd68:	6861      	ldr	r1, [r4, #4]
 800cd6a:	4299      	cmp	r1, r3
 800cd6c:	bfde      	ittt	le
 800cd6e:	2330      	movle	r3, #48	; 0x30
 800cd70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd78:	1b52      	subs	r2, r2, r5
 800cd7a:	6122      	str	r2, [r4, #16]
 800cd7c:	f8cd a000 	str.w	sl, [sp]
 800cd80:	464b      	mov	r3, r9
 800cd82:	aa03      	add	r2, sp, #12
 800cd84:	4621      	mov	r1, r4
 800cd86:	4640      	mov	r0, r8
 800cd88:	f7ff fee4 	bl	800cb54 <_printf_common>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d14a      	bne.n	800ce26 <_printf_i+0x1f6>
 800cd90:	f04f 30ff 	mov.w	r0, #4294967295
 800cd94:	b004      	add	sp, #16
 800cd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	f043 0320 	orr.w	r3, r3, #32
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	4833      	ldr	r0, [pc, #204]	; (800ce70 <_printf_i+0x240>)
 800cda4:	2778      	movs	r7, #120	; 0x78
 800cda6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	6829      	ldr	r1, [r5, #0]
 800cdae:	061f      	lsls	r7, r3, #24
 800cdb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdb4:	d402      	bmi.n	800cdbc <_printf_i+0x18c>
 800cdb6:	065f      	lsls	r7, r3, #25
 800cdb8:	bf48      	it	mi
 800cdba:	b2b6      	uxthmi	r6, r6
 800cdbc:	07df      	lsls	r7, r3, #31
 800cdbe:	bf48      	it	mi
 800cdc0:	f043 0320 	orrmi.w	r3, r3, #32
 800cdc4:	6029      	str	r1, [r5, #0]
 800cdc6:	bf48      	it	mi
 800cdc8:	6023      	strmi	r3, [r4, #0]
 800cdca:	b91e      	cbnz	r6, 800cdd4 <_printf_i+0x1a4>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	f023 0320 	bic.w	r3, r3, #32
 800cdd2:	6023      	str	r3, [r4, #0]
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	e7a7      	b.n	800cd28 <_printf_i+0xf8>
 800cdd8:	4824      	ldr	r0, [pc, #144]	; (800ce6c <_printf_i+0x23c>)
 800cdda:	e7e4      	b.n	800cda6 <_printf_i+0x176>
 800cddc:	4615      	mov	r5, r2
 800cdde:	e7bd      	b.n	800cd5c <_printf_i+0x12c>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	6826      	ldr	r6, [r4, #0]
 800cde4:	6961      	ldr	r1, [r4, #20]
 800cde6:	1d18      	adds	r0, r3, #4
 800cde8:	6028      	str	r0, [r5, #0]
 800cdea:	0635      	lsls	r5, r6, #24
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	d501      	bpl.n	800cdf4 <_printf_i+0x1c4>
 800cdf0:	6019      	str	r1, [r3, #0]
 800cdf2:	e002      	b.n	800cdfa <_printf_i+0x1ca>
 800cdf4:	0670      	lsls	r0, r6, #25
 800cdf6:	d5fb      	bpl.n	800cdf0 <_printf_i+0x1c0>
 800cdf8:	8019      	strh	r1, [r3, #0]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	6123      	str	r3, [r4, #16]
 800cdfe:	4615      	mov	r5, r2
 800ce00:	e7bc      	b.n	800cd7c <_printf_i+0x14c>
 800ce02:	682b      	ldr	r3, [r5, #0]
 800ce04:	1d1a      	adds	r2, r3, #4
 800ce06:	602a      	str	r2, [r5, #0]
 800ce08:	681d      	ldr	r5, [r3, #0]
 800ce0a:	6862      	ldr	r2, [r4, #4]
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f7f3 fa6e 	bl	80002f0 <memchr>
 800ce14:	b108      	cbz	r0, 800ce1a <_printf_i+0x1ea>
 800ce16:	1b40      	subs	r0, r0, r5
 800ce18:	6060      	str	r0, [r4, #4]
 800ce1a:	6863      	ldr	r3, [r4, #4]
 800ce1c:	6123      	str	r3, [r4, #16]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce24:	e7aa      	b.n	800cd7c <_printf_i+0x14c>
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	462a      	mov	r2, r5
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	47d0      	blx	sl
 800ce30:	3001      	adds	r0, #1
 800ce32:	d0ad      	beq.n	800cd90 <_printf_i+0x160>
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	079b      	lsls	r3, r3, #30
 800ce38:	d413      	bmi.n	800ce62 <_printf_i+0x232>
 800ce3a:	68e0      	ldr	r0, [r4, #12]
 800ce3c:	9b03      	ldr	r3, [sp, #12]
 800ce3e:	4298      	cmp	r0, r3
 800ce40:	bfb8      	it	lt
 800ce42:	4618      	movlt	r0, r3
 800ce44:	e7a6      	b.n	800cd94 <_printf_i+0x164>
 800ce46:	2301      	movs	r3, #1
 800ce48:	4632      	mov	r2, r6
 800ce4a:	4649      	mov	r1, r9
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	47d0      	blx	sl
 800ce50:	3001      	adds	r0, #1
 800ce52:	d09d      	beq.n	800cd90 <_printf_i+0x160>
 800ce54:	3501      	adds	r5, #1
 800ce56:	68e3      	ldr	r3, [r4, #12]
 800ce58:	9903      	ldr	r1, [sp, #12]
 800ce5a:	1a5b      	subs	r3, r3, r1
 800ce5c:	42ab      	cmp	r3, r5
 800ce5e:	dcf2      	bgt.n	800ce46 <_printf_i+0x216>
 800ce60:	e7eb      	b.n	800ce3a <_printf_i+0x20a>
 800ce62:	2500      	movs	r5, #0
 800ce64:	f104 0619 	add.w	r6, r4, #25
 800ce68:	e7f5      	b.n	800ce56 <_printf_i+0x226>
 800ce6a:	bf00      	nop
 800ce6c:	0800d039 	.word	0x0800d039
 800ce70:	0800d04a 	.word	0x0800d04a

0800ce74 <memmove>:
 800ce74:	4288      	cmp	r0, r1
 800ce76:	b510      	push	{r4, lr}
 800ce78:	eb01 0402 	add.w	r4, r1, r2
 800ce7c:	d902      	bls.n	800ce84 <memmove+0x10>
 800ce7e:	4284      	cmp	r4, r0
 800ce80:	4623      	mov	r3, r4
 800ce82:	d807      	bhi.n	800ce94 <memmove+0x20>
 800ce84:	1e43      	subs	r3, r0, #1
 800ce86:	42a1      	cmp	r1, r4
 800ce88:	d008      	beq.n	800ce9c <memmove+0x28>
 800ce8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce92:	e7f8      	b.n	800ce86 <memmove+0x12>
 800ce94:	4402      	add	r2, r0
 800ce96:	4601      	mov	r1, r0
 800ce98:	428a      	cmp	r2, r1
 800ce9a:	d100      	bne.n	800ce9e <memmove+0x2a>
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cea6:	e7f7      	b.n	800ce98 <memmove+0x24>

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	; (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f5 fd94 	bl	80029e0 <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	24001000 	.word	0x24001000

0800cec8 <_realloc_r>:
 800cec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cecc:	4680      	mov	r8, r0
 800cece:	4614      	mov	r4, r2
 800ced0:	460e      	mov	r6, r1
 800ced2:	b921      	cbnz	r1, 800cede <_realloc_r+0x16>
 800ced4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ced8:	4611      	mov	r1, r2
 800ceda:	f7ff bc57 	b.w	800c78c <_malloc_r>
 800cede:	b92a      	cbnz	r2, 800ceec <_realloc_r+0x24>
 800cee0:	f7ff fbe8 	bl	800c6b4 <_free_r>
 800cee4:	4625      	mov	r5, r4
 800cee6:	4628      	mov	r0, r5
 800cee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceec:	f000 f81b 	bl	800cf26 <_malloc_usable_size_r>
 800cef0:	4284      	cmp	r4, r0
 800cef2:	4607      	mov	r7, r0
 800cef4:	d802      	bhi.n	800cefc <_realloc_r+0x34>
 800cef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cefa:	d812      	bhi.n	800cf22 <_realloc_r+0x5a>
 800cefc:	4621      	mov	r1, r4
 800cefe:	4640      	mov	r0, r8
 800cf00:	f7ff fc44 	bl	800c78c <_malloc_r>
 800cf04:	4605      	mov	r5, r0
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d0ed      	beq.n	800cee6 <_realloc_r+0x1e>
 800cf0a:	42bc      	cmp	r4, r7
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	4631      	mov	r1, r6
 800cf10:	bf28      	it	cs
 800cf12:	463a      	movcs	r2, r7
 800cf14:	f7ff fbc0 	bl	800c698 <memcpy>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	f7ff fbca 	bl	800c6b4 <_free_r>
 800cf20:	e7e1      	b.n	800cee6 <_realloc_r+0x1e>
 800cf22:	4635      	mov	r5, r6
 800cf24:	e7df      	b.n	800cee6 <_realloc_r+0x1e>

0800cf26 <_malloc_usable_size_r>:
 800cf26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf2a:	1f18      	subs	r0, r3, #4
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	bfbc      	itt	lt
 800cf30:	580b      	ldrlt	r3, [r1, r0]
 800cf32:	18c0      	addlt	r0, r0, r3
 800cf34:	4770      	bx	lr
	...

0800cf38 <_init>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	bf00      	nop
 800cf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3e:	bc08      	pop	{r3}
 800cf40:	469e      	mov	lr, r3
 800cf42:	4770      	bx	lr

0800cf44 <_fini>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	bf00      	nop
 800cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4a:	bc08      	pop	{r3}
 800cf4c:	469e      	mov	lr, r3
 800cf4e:	4770      	bx	lr

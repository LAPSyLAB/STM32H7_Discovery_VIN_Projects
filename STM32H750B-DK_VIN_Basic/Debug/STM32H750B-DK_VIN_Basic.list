
STM32H750B-DK_VIN_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800c360  0800c360  0001c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c43c  0800c43c  0001c43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c440  0800c440  0001c440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800c444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800c4a4  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800c504  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e84  24000120  0800c564  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000fa4  0800c564  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b6cb  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f3  00000000  00000000  0004b85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fd0  00000000  00000000  0004f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c0  00000000  00000000  00051920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040536  00000000  00000000  000531e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028798  00000000  00000000  00093716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019ab22  00000000  00000000  000bbeae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009214  00000000  00000000  002569d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0025fbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c348 	.word	0x0800c348

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800c348 	.word	0x0800c348

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f002 f93b 	bl	800290c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f863 	bl	8000760 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800069a:	f000 f8ed 	bl	8000878 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fe51 	bl	8001344 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a2:	f000 f919 	bl	80008d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006a6:	f000 f98f 	bl	80009c8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006aa:	f000 f9f1 	bl	8000a90 <MX_ADC3_Init>
  MX_ETH_Init();
 80006ae:	f000 fa51 	bl	8000b54 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006b2:	f000 fa9b 	bl	8000bec <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006b6:	f000 fafd 	bl	8000cb4 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006ba:	f000 fdf5 	bl	80012a8 <MX_FMC_Init>
  MX_LTDC_Init();
 80006be:	f000 fb5d 	bl	8000d7c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006c2:	f000 fc0d 	bl	8000ee0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006c6:	f000 fc37 	bl	8000f38 <MX_RTC_Init>
  MX_SAI2_Init();
 80006ca:	f000 fc5d 	bl	8000f88 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006ce:	f000 fd19 	bl	8001104 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006d2:	f000 fd6b 	bl	80011ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d6:	f000 fdb5 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <main+0xb4>)
 80006e0:	f004 fcdb 	bl	800509a <HAL_GPIO_TogglePin>

	    KeyState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0xb8>)
 80006ea:	f004 fca5 	bl	8005038 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <main+0xbc>)
 80006f4:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, KeyState);
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <main+0xbc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	2104      	movs	r1, #4
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <main+0xc0>)
 8000702:	f004 fcb1 	bl	8005068 <HAL_GPIO_WritePin>


	    snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d\n\r",Counter++,KeyState);
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <main+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	4910      	ldr	r1, [pc, #64]	; (8000750 <main+0xc4>)
 800070e:	600a      	str	r2, [r1, #0]
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <main+0xbc>)
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <main+0xc8>)
 8000718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071c:	480e      	ldr	r0, [pc, #56]	; (8000758 <main+0xcc>)
 800071e:	f00b f95b 	bl	800b9d8 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <main+0xcc>)
 8000724:	f7ff fddc 	bl	80002e0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	490a      	ldr	r1, [pc, #40]	; (8000758 <main+0xcc>)
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0xd0>)
 8000732:	f009 fc6c 	bl	800a00e <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f002 f979 	bl	8002a30 <HAL_Delay>
  {
 800073e:	e7cc      	b.n	80006da <main+0x4e>
 8000740:	58022000 	.word	0x58022000
 8000744:	58020800 	.word	0x58020800
 8000748:	24000e38 	.word	0x24000e38
 800074c:	58022400 	.word	0x58022400
 8000750:	24000e34 	.word	0x24000e34
 8000754:	0800c360 	.word	0x0800c360
 8000758:	24000d34 	.word	0x24000d34
 800075c:	24000760 	.word	0x24000760

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b09c      	sub	sp, #112	; 0x70
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	224c      	movs	r2, #76	; 0x4c
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f00b f966 	bl	800ba40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2220      	movs	r2, #32
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00b f960 	bl	800ba40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000780:	2002      	movs	r0, #2
 8000782:	f005 f895 	bl	80058b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <SystemClock_Config+0x10c>)
 800078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <SystemClock_Config+0x10c>)
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <SystemClock_Config+0x10c>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b33      	ldr	r3, [pc, #204]	; (8000870 <SystemClock_Config+0x110>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a8:	4a31      	ldr	r2, [pc, #196]	; (8000870 <SystemClock_Config+0x110>)
 80007aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <SystemClock_Config+0x110>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007bc:	bf00      	nop
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <SystemClock_Config+0x110>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ca:	d1f8      	bne.n	80007be <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemClock_Config+0x114>)
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	f023 0303 	bic.w	r3, r3, #3
 80007d4:	4a27      	ldr	r2, [pc, #156]	; (8000874 <SystemClock_Config+0x114>)
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80007dc:	230b      	movs	r3, #11
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ea:	2340      	movs	r3, #64	; 0x40
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 80007fa:	2316      	movs	r3, #22
 80007fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80007fe:	23a9      	movs	r3, #169	; 0xa9
 8000800:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000806:	2304      	movs	r3, #4
 8000808:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800080e:	2300      	movs	r3, #0
 8000810:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000812:	2300      	movs	r3, #0
 8000814:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4618      	mov	r0, r3
 8000820:	f005 f94a 	bl	8005ab8 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800082a:	f000 ff35 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	233f      	movs	r3, #63	; 0x3f
 8000830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2101      	movs	r1, #1
 8000852:	4618      	mov	r0, r3
 8000854:	f005 fd8a 	bl	800636c <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x102>
  {
    Error_Handler();
 800085e:	f000 ff1b 	bl	8001698 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3770      	adds	r7, #112	; 0x70
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	58000400 	.word	0x58000400
 8000870:	58024800 	.word	0x58024800
 8000874:	58024400 	.word	0x58024400

08000878 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0b0      	sub	sp, #192	; 0xc0
 800087c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	22c0      	movs	r2, #192	; 0xc0
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f00b f8db 	bl	800ba40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800088a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800089a:	230c      	movs	r3, #12
 800089c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800089e:	2305      	movs	r3, #5
 80008a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008aa:	23c0      	movs	r3, #192	; 0xc0
 80008ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008ae:	2320      	movs	r3, #32
 80008b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 f8e0 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008ca:	f000 fee5 	bl	8001698 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	37c0      	adds	r7, #192	; 0xc0
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fc:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <MX_ADC1_Init+0xe8>)
 80008fe:	4a31      	ldr	r2, [pc, #196]	; (80009c4 <MX_ADC1_Init+0xec>)
 8000900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000904:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_ADC1_Init+0xe8>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000918:	2204      	movs	r2, #4
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_ADC1_Init+0xe8>)
 800091e:	2200      	movs	r2, #0
 8000920:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_ADC1_Init+0xe8>)
 800092a:	2201      	movs	r2, #1
 800092c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000930:	2200      	movs	r2, #0
 8000932:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_ADC1_Init+0xe8>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_ADC1_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095a:	4819      	ldr	r0, [pc, #100]	; (80009c0 <MX_ADC1_Init+0xe8>)
 800095c:	f002 fa4e 	bl	8002dfc <HAL_ADC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000966:	f000 fe97 	bl	8001698 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_ADC1_Init+0xe8>)
 8000976:	f003 f865 	bl	8003a44 <HAL_ADCEx_MultiModeConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000980:	f000 fe8a 	bl	8001698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000984:	2301      	movs	r3, #1
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000988:	2306      	movs	r3, #6
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000990:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000994:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000996:	2304      	movs	r3, #4
 8000998:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_ADC1_Init+0xe8>)
 80009a8:	f002 fbca 	bl	8003140 <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009b2:	f000 fe71 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	24000174 	.word	0x24000174
 80009c4:	40022000 	.word	0x40022000

080009c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_ADC2_Init+0xc0>)
 80009e2:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <MX_ADC2_Init+0xc4>)
 80009e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_ADC2_Init+0xc0>)
 80009e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_ADC2_Init+0xc0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_ADC2_Init+0xc0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_ADC2_Init+0xc0>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a40:	f002 f9dc 	bl	8002dfc <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000a4a:	f000 fe25 	bl	8001698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2306      	movs	r3, #6
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a60:	2304      	movs	r3, #4
 8000a62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_ADC2_Init+0xc0>)
 8000a72:	f002 fb65 	bl	8003140 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000a7c:	f000 fe0c 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240001d8 	.word	0x240001d8
 8000a8c:	40022100 	.word	0x40022100

08000a90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]
 8000aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_ADC3_Init+0xbc>)
 8000aac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000abc:	2204      	movs	r2, #4
 8000abe:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000b00:	f002 f97c 	bl	8002dfc <HAL_ADC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000b0a:	f000 fdc5 	bl	8001698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_ADC3_Init+0xc0>)
 8000b10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b12:	2306      	movs	r3, #6
 8000b14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b1e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b20:	2304      	movs	r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_ADC3_Init+0xb8>)
 8000b32:	f002 fb05 	bl	8003140 <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000b3c:	f000 fdac 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2400023c 	.word	0x2400023c
 8000b4c:	58026000 	.word	0x58026000
 8000b50:	1d500080 	.word	0x1d500080

08000b54 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <MX_ETH_Init+0x84>)
 8000b5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b6c:	22e1      	movs	r2, #225	; 0xe1
 8000b6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <MX_ETH_Init+0x88>)
 8000b86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_ETH_Init+0x8c>)
 8000b92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_ETH_Init+0x90>)
 8000b98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000b9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ba0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_ETH_Init+0x80>)
 8000ba4:	f003 f910 	bl	8003dc8 <HAL_ETH_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bae:	f000 fd73 	bl	8001698 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bb2:	2238      	movs	r2, #56	; 0x38
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_ETH_Init+0x94>)
 8000bb8:	f00a ff42 	bl	800ba40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_ETH_Init+0x94>)
 8000bbe:	2221      	movs	r2, #33	; 0x21
 8000bc0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_ETH_Init+0x94>)
 8000bc4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bc8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_ETH_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240002a0 	.word	0x240002a0
 8000bd8:	40028000 	.word	0x40028000
 8000bdc:	24000e3c 	.word	0x24000e3c
 8000be0:	240000c0 	.word	0x240000c0
 8000be4:	24000060 	.word	0x24000060
 8000be8:	2400013c 	.word	0x2400013c

08000bec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <MX_FDCAN1_Init+0xc4>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c16:	2210      	movs	r2, #16
 8000c18:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c94:	2204      	movs	r2, #4
 8000c96:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_FDCAN1_Init+0xc0>)
 8000c9a:	f003 fcb9 	bl	8004610 <HAL_FDCAN_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ca4:	f000 fcf8 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	24000350 	.word	0x24000350
 8000cb0:	4000a000 	.word	0x4000a000

08000cb4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <MX_FDCAN2_Init+0xc4>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d26:	2204      	movs	r2, #4
 8000d28:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_FDCAN2_Init+0xc0>)
 8000d62:	f003 fc55 	bl	8004610 <HAL_FDCAN_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d6c:	f000 fc94 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	240003f0 	.word	0x240003f0
 8000d78:	4000a400 	.word	0x4000a400

08000d7c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09a      	sub	sp, #104	; 0x68
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f00a fe58 	bl	800ba40 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2234      	movs	r2, #52	; 0x34
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00a fe52 	bl	800ba40 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d9c:	4b4e      	ldr	r3, [pc, #312]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000d9e:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <MX_LTDC_Init+0x160>)
 8000da0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000da8:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dae:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000db4:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000dc6:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dc8:	220e      	movs	r2, #14
 8000dca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dce:	2205      	movs	r2, #5
 8000dd0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dd4:	f240 228e 	movw	r2, #654	; 0x28e
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000ddc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000de4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dec:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e02:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e0a:	4833      	ldr	r0, [pc, #204]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000e0c:	f004 f960 	bl	80050d0 <HAL_LTDC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000e16:	f000 fc3f 	bl	8001698 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	481c      	ldr	r0, [pc, #112]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000e68:	f004 fa02 	bl	8005270 <HAL_LTDC_ConfigLayer>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000e72:	f000 fc11 	bl	8001698 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_LTDC_Init+0x15c>)
 8000ec2:	f004 f9d5 	bl	8005270 <HAL_LTDC_ConfigLayer>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ecc:	f000 fbe4 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3768      	adds	r7, #104	; 0x68
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	24000490 	.word	0x24000490
 8000edc:	50001000 	.word	0x50001000

08000ee0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <MX_QUADSPI_Init+0x54>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_QUADSPI_Init+0x50>)
 8000f1c:	f004 fd12 	bl	8005944 <HAL_QSPI_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f26:	f000 fbb7 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	24000538 	.word	0x24000538
 8000f34:	52005000 	.word	0x52005000

08000f38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <MX_RTC_Init+0x4c>)
 8000f40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f4a:	227f      	movs	r2, #127	; 0x7f
 8000f4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f50:	22ff      	movs	r2, #255	; 0xff
 8000f52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_RTC_Init+0x48>)
 8000f6e:	f008 fa87 	bl	8009480 <HAL_RTC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f78:	f000 fb8e 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	24000584 	.word	0x24000584
 8000f84:	58004000 	.word	0x58004000

08000f88 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000f8e:	4a59      	ldr	r2, [pc, #356]	; (80010f4 <MX_SAI2_Init+0x16c>)
 8000f90:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f92:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f98:	4b55      	ldr	r3, [pc, #340]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f9e:	4b54      	ldr	r3, [pc, #336]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fa0:	2240      	movs	r2, #64	; 0x40
 8000fa2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fa4:	4b52      	ldr	r3, [pc, #328]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000faa:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fb6:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fc8:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fca:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <MX_SAI2_Init+0x170>)
 8000fcc:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fd4:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000ffc:	4b3c      	ldr	r3, [pc, #240]	; (80010f0 <MX_SAI2_Init+0x168>)
 8000ffe:	2208      	movs	r2, #8
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001002:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <MX_SAI2_Init+0x168>)
 8001004:	2201      	movs	r2, #1
 8001006:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001008:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <MX_SAI2_Init+0x168>)
 800100a:	2200      	movs	r2, #0
 800100c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <MX_SAI2_Init+0x168>)
 8001010:	2200      	movs	r2, #0
 8001012:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <MX_SAI2_Init+0x168>)
 8001016:	2200      	movs	r2, #0
 8001018:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800101a:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <MX_SAI2_Init+0x168>)
 800101c:	2200      	movs	r2, #0
 800101e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <MX_SAI2_Init+0x168>)
 8001022:	2200      	movs	r2, #0
 8001024:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <MX_SAI2_Init+0x168>)
 8001028:	2201      	movs	r2, #1
 800102a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <MX_SAI2_Init+0x168>)
 800102e:	2200      	movs	r2, #0
 8001030:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001032:	482f      	ldr	r0, [pc, #188]	; (80010f0 <MX_SAI2_Init+0x168>)
 8001034:	f008 fb3c 	bl	80096b0 <HAL_SAI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800103e:	f000 fb2b 	bl	8001698 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <MX_SAI2_Init+0x174>)
 8001044:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <MX_SAI2_Init+0x178>)
 8001046:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <MX_SAI2_Init+0x174>)
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <MX_SAI2_Init+0x174>)
 8001050:	2203      	movs	r2, #3
 8001052:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_SAI2_Init+0x174>)
 8001056:	2240      	movs	r2, #64	; 0x40
 8001058:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <MX_SAI2_Init+0x174>)
 800105c:	2200      	movs	r2, #0
 800105e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_SAI2_Init+0x174>)
 8001062:	2200      	movs	r2, #0
 8001064:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_SAI2_Init+0x174>)
 8001068:	2201      	movs	r2, #1
 800106a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_SAI2_Init+0x174>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_SAI2_Init+0x174>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_SAI2_Init+0x174>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_SAI2_Init+0x174>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_SAI2_Init+0x174>)
 8001086:	2200      	movs	r2, #0
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_SAI2_Init+0x174>)
 800108c:	2200      	movs	r2, #0
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_SAI2_Init+0x174>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_SAI2_Init+0x174>)
 800109a:	2201      	movs	r2, #1
 800109c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SAI2_Init+0x174>)
 80010a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_SAI2_Init+0x174>)
 80010a8:	2208      	movs	r2, #8
 80010aa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_SAI2_Init+0x174>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SAI2_Init+0x174>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_SAI2_Init+0x174>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SAI2_Init+0x174>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_SAI2_Init+0x174>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SAI2_Init+0x174>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SAI2_Init+0x174>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SAI2_Init+0x174>)
 80010d8:	2200      	movs	r2, #0
 80010da:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_SAI2_Init+0x174>)
 80010de:	f008 fae7 	bl	80096b0 <HAL_SAI_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80010e8:	f000 fad6 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	240005a8 	.word	0x240005a8
 80010f4:	40015c04 	.word	0x40015c04
 80010f8:	0002ee00 	.word	0x0002ee00
 80010fc:	24000640 	.word	0x24000640
 8001100:	40015c24 	.word	0x40015c24

08001104 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <MX_SPI2_Init+0xa4>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001110:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001114:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800111e:	2203      	movs	r2, #3
 8001120:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001148:	2200      	movs	r2, #0
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_SPI2_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_SPI2_Init+0xa0>)
 8001192:	f008 fdad 	bl	8009cf0 <HAL_SPI_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 800119c:	f000 fa7c 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	240006d8 	.word	0x240006d8
 80011a8:	40003800 	.word	0x40003800

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART3_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART3_UART_Init+0x90>)
 80011f6:	f008 feba 	bl	8009f6e <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 fa4a 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART3_UART_Init+0x90>)
 8001208:	f009 ff4b 	bl	800b0a2 <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 fa41 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART3_UART_Init+0x90>)
 800121a:	f009 ff80 	bl	800b11e <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 fa38 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART3_UART_Init+0x90>)
 800122a:	f009 ff01 	bl	800b030 <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 fa30 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24000760 	.word	0x24000760
 8001240:	40004800 	.word	0x40004800

08001244 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800124c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001250:	2209      	movs	r2, #9
 8001252:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001256:	2202      	movs	r2, #2
 8001258:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001262:	2202      	movs	r2, #2
 8001264:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800127a:	2201      	movs	r2, #1
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001280:	2201      	movs	r2, #1
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128c:	f004 f9c8 	bl	8005620 <HAL_PCD_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001296:	f000 f9ff 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	240007f4 	.word	0x240007f4
 80012a4:	40080000 	.word	0x40080000

080012a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_FMC_Init+0x94>)
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <MX_FMC_Init+0x98>)
 80012c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_FMC_Init+0x94>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_FMC_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_FMC_Init+0x94>)
 80012d4:	2204      	movs	r2, #4
 80012d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_FMC_Init+0x94>)
 80012da:	2210      	movs	r2, #16
 80012dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_FMC_Init+0x94>)
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_FMC_Init+0x94>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_FMC_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_FMC_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_FMC_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_FMC_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001302:	2310      	movs	r3, #16
 8001304:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001306:	2310      	movs	r3, #16
 8001308:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800130a:	2310      	movs	r3, #16
 800130c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800130e:	2310      	movs	r3, #16
 8001310:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001312:	2310      	movs	r3, #16
 8001314:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001316:	2310      	movs	r3, #16
 8001318:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800131a:	2310      	movs	r3, #16
 800131c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_FMC_Init+0x94>)
 8001324:	f008 fca8 	bl	8009c78 <HAL_SDRAM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800132e:	f000 f9b3 	bl	8001698 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24000d00 	.word	0x24000d00
 8001340:	52004140 	.word	0x52004140

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800135a:	4bbf      	ldr	r3, [pc, #764]	; (8001658 <MX_GPIO_Init+0x314>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	4abd      	ldr	r2, [pc, #756]	; (8001658 <MX_GPIO_Init+0x314>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136a:	4bbb      	ldr	r3, [pc, #748]	; (8001658 <MX_GPIO_Init+0x314>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4bb7      	ldr	r3, [pc, #732]	; (8001658 <MX_GPIO_Init+0x314>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	4ab6      	ldr	r2, [pc, #728]	; (8001658 <MX_GPIO_Init+0x314>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001388:	4bb3      	ldr	r3, [pc, #716]	; (8001658 <MX_GPIO_Init+0x314>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001396:	4bb0      	ldr	r3, [pc, #704]	; (8001658 <MX_GPIO_Init+0x314>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	4aae      	ldr	r2, [pc, #696]	; (8001658 <MX_GPIO_Init+0x314>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a6:	4bac      	ldr	r3, [pc, #688]	; (8001658 <MX_GPIO_Init+0x314>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b4:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <MX_GPIO_Init+0x314>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4aa7      	ldr	r2, [pc, #668]	; (8001658 <MX_GPIO_Init+0x314>)
 80013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4ba4      	ldr	r3, [pc, #656]	; (8001658 <MX_GPIO_Init+0x314>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4ba1      	ldr	r3, [pc, #644]	; (8001658 <MX_GPIO_Init+0x314>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a9f      	ldr	r2, [pc, #636]	; (8001658 <MX_GPIO_Init+0x314>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <MX_GPIO_Init+0x314>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b99      	ldr	r3, [pc, #612]	; (8001658 <MX_GPIO_Init+0x314>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a98      	ldr	r2, [pc, #608]	; (8001658 <MX_GPIO_Init+0x314>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b95      	ldr	r3, [pc, #596]	; (8001658 <MX_GPIO_Init+0x314>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	4b92      	ldr	r3, [pc, #584]	; (8001658 <MX_GPIO_Init+0x314>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a90      	ldr	r2, [pc, #576]	; (8001658 <MX_GPIO_Init+0x314>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b8e      	ldr	r3, [pc, #568]	; (8001658 <MX_GPIO_Init+0x314>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800142c:	4b8a      	ldr	r3, [pc, #552]	; (8001658 <MX_GPIO_Init+0x314>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a89      	ldr	r2, [pc, #548]	; (8001658 <MX_GPIO_Init+0x314>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b86      	ldr	r3, [pc, #536]	; (8001658 <MX_GPIO_Init+0x314>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	4b83      	ldr	r3, [pc, #524]	; (8001658 <MX_GPIO_Init+0x314>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a81      	ldr	r2, [pc, #516]	; (8001658 <MX_GPIO_Init+0x314>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <MX_GPIO_Init+0x314>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <MX_GPIO_Init+0x314>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <MX_GPIO_Init+0x314>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b77      	ldr	r3, [pc, #476]	; (8001658 <MX_GPIO_Init+0x314>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b74      	ldr	r3, [pc, #464]	; (8001658 <MX_GPIO_Init+0x314>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a72      	ldr	r2, [pc, #456]	; (8001658 <MX_GPIO_Init+0x314>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b70      	ldr	r3, [pc, #448]	; (8001658 <MX_GPIO_Init+0x314>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	486c      	ldr	r0, [pc, #432]	; (800165c <MX_GPIO_Init+0x318>)
 80014ac:	f003 fddc 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f241 0104 	movw	r1, #4100	; 0x1004
 80014b6:	486a      	ldr	r0, [pc, #424]	; (8001660 <MX_GPIO_Init+0x31c>)
 80014b8:	f003 fdd6 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2104      	movs	r1, #4
 80014c0:	4868      	ldr	r0, [pc, #416]	; (8001664 <MX_GPIO_Init+0x320>)
 80014c2:	f003 fdd1 	bl	8005068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014d8:	2303      	movs	r3, #3
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	4861      	ldr	r0, [pc, #388]	; (8001668 <MX_GPIO_Init+0x324>)
 80014e4:	f003 fbf8 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	485c      	ldr	r0, [pc, #368]	; (800166c <MX_GPIO_Init+0x328>)
 80014fc:	f003 fbec 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001500:	2330      	movs	r3, #48	; 0x30
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001510:	230a      	movs	r3, #10
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	4855      	ldr	r0, [pc, #340]	; (8001670 <MX_GPIO_Init+0x32c>)
 800151c:	f003 fbdc 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001520:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001532:	4619      	mov	r1, r3
 8001534:	484f      	ldr	r0, [pc, #316]	; (8001674 <MX_GPIO_Init+0x330>)
 8001536:	f003 fbcf 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	484a      	ldr	r0, [pc, #296]	; (8001678 <MX_GPIO_Init+0x334>)
 8001550:	f003 fbc2 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001566:	2301      	movs	r3, #1
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	4619      	mov	r1, r3
 8001570:	4840      	ldr	r0, [pc, #256]	; (8001674 <MX_GPIO_Init+0x330>)
 8001572:	f003 fbb1 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001586:	2306      	movs	r3, #6
 8001588:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158e:	4619      	mov	r1, r3
 8001590:	483a      	ldr	r0, [pc, #232]	; (800167c <MX_GPIO_Init+0x338>)
 8001592:	f003 fba1 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ac:	4619      	mov	r1, r3
 80015ae:	482b      	ldr	r0, [pc, #172]	; (800165c <MX_GPIO_Init+0x318>)
 80015b0:	f003 fb92 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80015b4:	2304      	movs	r3, #4
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c6:	4619      	mov	r1, r3
 80015c8:	482c      	ldr	r0, [pc, #176]	; (800167c <MX_GPIO_Init+0x338>)
 80015ca:	f003 fb85 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015ce:	2301      	movs	r3, #1
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015de:	4619      	mov	r1, r3
 80015e0:	4827      	ldr	r0, [pc, #156]	; (8001680 <MX_GPIO_Init+0x33c>)
 80015e2:	f003 fb79 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80015e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	4619      	mov	r1, r3
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <MX_GPIO_Init+0x324>)
 80015fe:	f003 fb6b 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001612:	2309      	movs	r3, #9
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	4815      	ldr	r0, [pc, #84]	; (8001674 <MX_GPIO_Init+0x330>)
 800161e:	f003 fb5b 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001622:	f241 0304 	movw	r3, #4100	; 0x1004
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <MX_GPIO_Init+0x31c>)
 800163c:	f003 fb4c 	bl	8004cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001640:	2304      	movs	r3, #4
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001654:	4619      	mov	r1, r3
 8001656:	e015      	b.n	8001684 <MX_GPIO_Init+0x340>
 8001658:	58024400 	.word	0x58024400
 800165c:	58022000 	.word	0x58022000
 8001660:	58020400 	.word	0x58020400
 8001664:	58022400 	.word	0x58022400
 8001668:	58021c00 	.word	0x58021c00
 800166c:	58020c00 	.word	0x58020c00
 8001670:	58021000 	.word	0x58021000
 8001674:	58020000 	.word	0x58020000
 8001678:	58020800 	.word	0x58020800
 800167c:	58021800 	.word	0x58021800
 8001680:	58022800 	.word	0x58022800
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_GPIO_Init+0x350>)
 8001686:	f003 fb27 	bl	8004cd8 <HAL_GPIO_Init>

}
 800168a:	bf00      	nop
 800168c:	3740      	adds	r7, #64	; 0x40
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	58022400 	.word	0x58022400

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>
	...

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_MspInit+0x30>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x30>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x30>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	58024400 	.word	0x58024400

080016d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <HAL_ADC_MspInit+0x1e8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d14e      	bne.n	8001798 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016fa:	4b72      	ldr	r3, [pc, #456]	; (80018c4 <HAL_ADC_MspInit+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a70      	ldr	r2, [pc, #448]	; (80018c4 <HAL_ADC_MspInit+0x1ec>)
 8001702:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_ADC_MspInit+0x1ec>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10e      	bne.n	800172a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800170c:	4b6e      	ldr	r3, [pc, #440]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800170e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001712:	4a6d      	ldr	r2, [pc, #436]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800171e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	4a5e      	ldr	r2, [pc, #376]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001766:	2301      	movs	r3, #1
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	2303      	movs	r3, #3
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	4854      	ldr	r0, [pc, #336]	; (80018cc <HAL_ADC_MspInit+0x1f4>)
 800177a:	f003 faad 	bl	8004cd8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800177e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001782:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001786:	f001 f997 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800178a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800178e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001792:	f001 f991 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001796:	e08f      	b.n	80018b8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_ADC_MspInit+0x1f8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d133      	bne.n	800180a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017a2:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <HAL_ADC_MspInit+0x1ec>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <HAL_ADC_MspInit+0x1ec>)
 80017aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017ac:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <HAL_ADC_MspInit+0x1ec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10e      	bne.n	80017d2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 80017b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ba:	4a43      	ldr	r2, [pc, #268]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017c4:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 80017c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	4a3b      	ldr	r2, [pc, #236]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80017f0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80017f4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80017f8:	f001 f95e 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80017fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001800:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001804:	f001 f958 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001808:	e056      	b.n	80018b8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a31      	ldr	r2, [pc, #196]	; (80018d4 <HAL_ADC_MspInit+0x1fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d151      	bne.n	80018b8 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800181c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001838:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 800183a:	f043 0320 	orr.w	r3, r3, #32
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_ADC_MspInit+0x1f0>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001874:	2303      	movs	r3, #3
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	4619      	mov	r1, r3
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <HAL_ADC_MspInit+0x200>)
 8001884:	f003 fa28 	bl	8004cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001888:	2301      	movs	r3, #1
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <HAL_ADC_MspInit+0x1f4>)
 800189c:	f003 fa1c 	bl	8004cd8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80018a0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80018a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018a8:	f001 f906 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80018ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80018b0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80018b4:	f001 f900 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80018b8:	bf00      	nop
 80018ba:	3740      	adds	r7, #64	; 0x40
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40022000 	.word	0x40022000
 80018c4:	24000e44 	.word	0x24000e44
 80018c8:	58024400 	.word	0x58024400
 80018cc:	58020800 	.word	0x58020800
 80018d0:	40022100 	.word	0x40022100
 80018d4:	58026000 	.word	0x58026000
 80018d8:	58021400 	.word	0x58021400

080018dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b092      	sub	sp, #72	; 0x48
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a87      	ldr	r2, [pc, #540]	; (8001b18 <HAL_ETH_MspInit+0x23c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f040 8108 	bne.w	8001b10 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001900:	4b86      	ldr	r3, [pc, #536]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001906:	4a85      	ldr	r2, [pc, #532]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001910:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
 800191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800191e:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001924:	4a7d      	ldr	r2, [pc, #500]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800192e:	4b7b      	ldr	r3, [pc, #492]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800193c:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800193e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001942:	4a76      	ldr	r2, [pc, #472]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800194c:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800194e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	4a6e      	ldr	r2, [pc, #440]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196a:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197e:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001988:	4b64      	ldr	r3, [pc, #400]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001996:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	4a5f      	ldr	r2, [pc, #380]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a6:	4b5d      	ldr	r3, [pc, #372]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b4:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c4:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	4b52      	ldr	r3, [pc, #328]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_ETH_MspInit+0x240>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001a2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a3e:	230b      	movs	r3, #11
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a46:	4619      	mov	r1, r3
 8001a48:	4835      	ldr	r0, [pc, #212]	; (8001b20 <HAL_ETH_MspInit+0x244>)
 8001a4a:	f003 f945 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a5e:	230b      	movs	r3, #11
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a66:	4619      	mov	r1, r3
 8001a68:	482e      	ldr	r0, [pc, #184]	; (8001b24 <HAL_ETH_MspInit+0x248>)
 8001a6a:	f003 f935 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a80:	230b      	movs	r3, #11
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4827      	ldr	r0, [pc, #156]	; (8001b28 <HAL_ETH_MspInit+0x24c>)
 8001a8c:	f003 f924 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001a90:	233e      	movs	r3, #62	; 0x3e
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <HAL_ETH_MspInit+0x250>)
 8001aac:	f003 f914 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac0:	230b      	movs	r3, #11
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <HAL_ETH_MspInit+0x254>)
 8001acc:	f003 f904 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001ad0:	2386      	movs	r3, #134	; 0x86
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4812      	ldr	r0, [pc, #72]	; (8001b34 <HAL_ETH_MspInit+0x258>)
 8001aec:	f003 f8f4 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001af0:	2303      	movs	r3, #3
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b00:	230b      	movs	r3, #11
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <HAL_ETH_MspInit+0x25c>)
 8001b0c:	f003 f8e4 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3748      	adds	r7, #72	; 0x48
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40028000 	.word	0x40028000
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	58021800 	.word	0x58021800
 8001b24:	58021000 	.word	0x58021000
 8001b28:	58022000 	.word	0x58022000
 8001b2c:	58020800 	.word	0x58020800
 8001b30:	58021c00 	.word	0x58021c00
 8001b34:	58020000 	.word	0x58020000
 8001b38:	58020400 	.word	0x58020400

08001b3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0bc      	sub	sp, #240	; 0xf0
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	22c0      	movs	r2, #192	; 0xc0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 ff6f 	bl	800ba40 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a57      	ldr	r2, [pc, #348]	; (8001cc4 <HAL_FDCAN_MspInit+0x188>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d151      	bne.n	8001c10 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 ff7d 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001b90:	f7ff fd82 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b94:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001b9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001ba8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bac:	4a47      	ldr	r2, [pc, #284]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001bb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001be2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c06:	4619      	mov	r1, r3
 8001c08:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <HAL_FDCAN_MspInit+0x194>)
 8001c0a:	f003 f865 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001c0e:	e055      	b.n	8001cbc <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2f      	ldr	r2, [pc, #188]	; (8001cd4 <HAL_FDCAN_MspInit+0x198>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d150      	bne.n	8001cbc <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 ff26 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001c3e:	f7ff fd2b 	bl	8001698 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001c4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_FDCAN_MspInit+0x18c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10e      	bne.n	8001c72 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001c56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001c66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_FDCAN_MspInit+0x190>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001c90:	f242 0320 	movw	r3, #8224	; 0x2020
 8001c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001caa:	2309      	movs	r3, #9
 8001cac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <HAL_FDCAN_MspInit+0x19c>)
 8001cb8:	f003 f80e 	bl	8004cd8 <HAL_GPIO_Init>
}
 8001cbc:	bf00      	nop
 8001cbe:	37f0      	adds	r7, #240	; 0xf0
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	4000a000 	.word	0x4000a000
 8001cc8:	24000e48 	.word	0x24000e48
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58021c00 	.word	0x58021c00
 8001cd4:	4000a400 	.word	0x4000a400
 8001cd8:	58020400 	.word	0x58020400

08001cdc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0be      	sub	sp, #248	; 0xf8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	22c0      	movs	r2, #192	; 0xc0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f009 fe9f 	bl	800ba40 <memset>
  if(hltdc->Instance==LTDC)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_LTDC_MspInit+0x1c4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f040 80c4 	bne.w	8001e96 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d22:	2302      	movs	r3, #2
 8001d24:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001d26:	2302      	movs	r3, #2
 8001d28:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d32:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fe9e 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001d4e:	f7ff fca3 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d58:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d80:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d8e:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dac:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	4a3c      	ldr	r2, [pc, #240]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dca:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <HAL_LTDC_MspInit+0x1c8>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001de8:	23fc      	movs	r3, #252	; 0xfc
 8001dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e00:	230e      	movs	r3, #14
 8001e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4826      	ldr	r0, [pc, #152]	; (8001ea8 <HAL_LTDC_MspInit+0x1cc>)
 8001e0e:	f002 ff63 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001e12:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e2c:	230e      	movs	r3, #14
 8001e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e36:	4619      	mov	r1, r3
 8001e38:	481c      	ldr	r0, [pc, #112]	; (8001eac <HAL_LTDC_MspInit+0x1d0>)
 8001e3a:	f002 ff4d 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001e3e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e58:	230e      	movs	r3, #14
 8001e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <HAL_LTDC_MspInit+0x1d4>)
 8001e66:	f002 ff37 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e84:	230e      	movs	r3, #14
 8001e86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <HAL_LTDC_MspInit+0x1d8>)
 8001e92:	f002 ff21 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	37f8      	adds	r7, #248	; 0xf8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	50001000 	.word	0x50001000
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	58022800 	.word	0x58022800
 8001eac:	58022000 	.word	0x58022000
 8001eb0:	58022400 	.word	0x58022400
 8001eb4:	58021c00 	.word	0x58021c00

08001eb8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0bc      	sub	sp, #240	; 0xf0
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	22c0      	movs	r2, #192	; 0xc0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f009 fdb1 	bl	800ba40 <memset>
  if(hqspi->Instance==QUADSPI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a56      	ldr	r2, [pc, #344]	; (800203c <HAL_QSPI_MspInit+0x184>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f040 80a5 	bne.w	8002034 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fdc0 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001f0a:	f7ff fbc5 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f14:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001f1e:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	4b44      	ldr	r3, [pc, #272]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f32:	4a43      	ldr	r2, [pc, #268]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3c:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f52:	f043 0320 	orr.w	r3, r3, #32
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f68:	4b35      	ldr	r3, [pc, #212]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_QSPI_MspInit+0x188>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4826      	ldr	r0, [pc, #152]	; (8002044 <HAL_QSPI_MspInit+0x18c>)
 8001fac:	f002 fe94 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001fb0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fca:	2309      	movs	r3, #9
 8001fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481c      	ldr	r0, [pc, #112]	; (8002048 <HAL_QSPI_MspInit+0x190>)
 8001fd8:	f002 fe7e 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002000:	4619      	mov	r1, r3
 8002002:	4811      	ldr	r0, [pc, #68]	; (8002048 <HAL_QSPI_MspInit+0x190>)
 8002004:	f002 fe68 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002022:	2309      	movs	r3, #9
 8002024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002028:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800202c:	4619      	mov	r1, r3
 800202e:	4807      	ldr	r0, [pc, #28]	; (800204c <HAL_QSPI_MspInit+0x194>)
 8002030:	f002 fe52 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002034:	bf00      	nop
 8002036:	37f0      	adds	r7, #240	; 0xf0
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	52005000 	.word	0x52005000
 8002040:	58024400 	.word	0x58024400
 8002044:	58020400 	.word	0x58020400
 8002048:	58021400 	.word	0x58021400
 800204c:	58020c00 	.word	0x58020c00

08002050 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0b2      	sub	sp, #200	; 0xc8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	22c0      	movs	r2, #192	; 0xc0
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f009 fced 	bl	800ba40 <memset>
  if(hrtc->Instance==RTC)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_RTC_MspInit+0x5c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d119      	bne.n	80020a4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002070:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800207c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fcfb 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002094:	f7ff fb00 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RTC_MspInit+0x60>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_RTC_MspInit+0x60>)
 800209e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	37c8      	adds	r7, #200	; 0xc8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	58004000 	.word	0x58004000
 80020b0:	58024400 	.word	0x58024400

080020b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0bc      	sub	sp, #240	; 0xf0
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	22c0      	movs	r2, #192	; 0xc0
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f009 fcb3 	bl	800ba40 <memset>
  if(hspi->Instance==SPI2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a55      	ldr	r2, [pc, #340]	; (8002234 <HAL_SPI_MspInit+0x180>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	f040 80a3 	bne.w	800222c <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 fcc2 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002106:	f7ff fac7 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800210a:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_SPI_MspInit+0x184>)
 800210c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_SPI_MspInit+0x184>)
 8002112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002116:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_SPI_MspInit+0x184>)
 800211c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_SPI_MspInit+0x184>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	4a42      	ldr	r2, [pc, #264]	; (8002238 <HAL_SPI_MspInit+0x184>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_SPI_MspInit+0x184>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <HAL_SPI_MspInit+0x184>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <HAL_SPI_MspInit+0x184>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_SPI_MspInit+0x184>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_SPI_MspInit+0x184>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	4a33      	ldr	r2, [pc, #204]	; (8002238 <HAL_SPI_MspInit+0x184>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_SPI_MspInit+0x184>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002182:	2310      	movs	r3, #16
 8002184:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800219a:	2307      	movs	r3, #7
 800219c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021a4:	4619      	mov	r1, r3
 80021a6:	4825      	ldr	r0, [pc, #148]	; (800223c <HAL_SPI_MspInit+0x188>)
 80021a8:	f002 fd96 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ac:	2308      	movs	r3, #8
 80021ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021c4:	2305      	movs	r3, #5
 80021c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ce:	4619      	mov	r1, r3
 80021d0:	481b      	ldr	r0, [pc, #108]	; (8002240 <HAL_SPI_MspInit+0x18c>)
 80021d2:	f002 fd81 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d6:	2304      	movs	r3, #4
 80021d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ee:	2305      	movs	r3, #5
 80021f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021f8:	4619      	mov	r1, r3
 80021fa:	4812      	ldr	r0, [pc, #72]	; (8002244 <HAL_SPI_MspInit+0x190>)
 80021fc:	f002 fd6c 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800221a:	2305      	movs	r3, #5
 800221c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <HAL_SPI_MspInit+0x188>)
 8002228:	f002 fd56 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	37f0      	adds	r7, #240	; 0xf0
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40003800 	.word	0x40003800
 8002238:	58024400 	.word	0x58024400
 800223c:	58020400 	.word	0x58020400
 8002240:	58020c00 	.word	0x58020c00
 8002244:	58022000 	.word	0x58022000

08002248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0ba      	sub	sp, #232	; 0xe8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	22c0      	movs	r2, #192	; 0xc0
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f009 fbe9 	bl	800ba40 <memset>
  if(huart->Instance==USART3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_UART_MspInit+0xc8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d146      	bne.n	8002306 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002278:	f04f 0202 	mov.w	r2, #2
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4618      	mov	r0, r3
 8002290:	f004 fbf8 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800229a:	f7ff f9fd 	bl	8001698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_UART_MspInit+0xcc>)
 80022a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_UART_MspInit+0xcc>)
 80022a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_UART_MspInit+0xcc>)
 80022b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_UART_MspInit+0xcc>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c2:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_UART_MspInit+0xcc>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_UART_MspInit+0xcc>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80022da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f4:	2307      	movs	r3, #7
 80022f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <HAL_UART_MspInit+0xd0>)
 8002302:	f002 fce9 	bl	8004cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	37e8      	adds	r7, #232	; 0xe8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40004800 	.word	0x40004800
 8002314:	58024400 	.word	0x58024400
 8002318:	58020400 	.word	0x58020400

0800231c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0ba      	sub	sp, #232	; 0xe8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	22c0      	movs	r2, #192	; 0xc0
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f009 fb7f 	bl	800ba40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a30      	ldr	r2, [pc, #192]	; (8002408 <HAL_PCD_MspInit+0xec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d159      	bne.n	8002400 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800234c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800235c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fb8d 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002370:	f7ff f992 	bl	8001698 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002374:	f003 fad6 	bl	8005924 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_PCD_MspInit+0xf0>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237e:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_PCD_MspInit+0xf0>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_PCD_MspInit+0xf0>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <HAL_PCD_MspInit+0xf4>)
 80023b2:	f002 fc91 	bl	8004cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80023b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80023d0:	230a      	movs	r3, #10
 80023d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023da:	4619      	mov	r1, r3
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <HAL_PCD_MspInit+0xf4>)
 80023de:	f002 fc7b 	bl	8004cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_PCD_MspInit+0xf0>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_PCD_MspInit+0xf0>)
 80023ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_PCD_MspInit+0xf0>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	37e8      	adds	r7, #232	; 0xe8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40080000 	.word	0x40080000
 800240c:	58024400 	.word	0x58024400
 8002410:	58020000 	.word	0x58020000

08002414 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b8      	sub	sp, #224	; 0xe0
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800241a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800242a:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_FMC_MspInit+0x15c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8099 	bne.w	8002566 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002434:	4b4e      	ldr	r3, [pc, #312]	; (8002570 <HAL_FMC_MspInit+0x15c>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	22c0      	movs	r2, #192	; 0xc0
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f009 fafc 	bl	800ba40 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002454:	2300      	movs	r3, #0
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fb11 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002468:	f7ff f916 	bl	8001698 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <HAL_FMC_MspInit+0x160>)
 800246e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002472:	4a40      	ldr	r2, [pc, #256]	; (8002574 <HAL_FMC_MspInit+0x160>)
 8002474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002478:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_FMC_MspInit+0x160>)
 800247e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800248a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800248e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024a4:	230c      	movs	r3, #12
 80024a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ae:	4619      	mov	r1, r3
 80024b0:	4831      	ldr	r0, [pc, #196]	; (8002578 <HAL_FMC_MspInit+0x164>)
 80024b2:	f002 fc11 	bl	8004cd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80024b6:	f248 1333 	movw	r3, #33075	; 0x8133
 80024ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024d0:	230c      	movs	r3, #12
 80024d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024da:	4619      	mov	r1, r3
 80024dc:	4827      	ldr	r0, [pc, #156]	; (800257c <HAL_FMC_MspInit+0x168>)
 80024de:	f002 fbfb 	bl	8004cd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80024e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024fc:	230c      	movs	r3, #12
 80024fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002502:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002506:	4619      	mov	r1, r3
 8002508:	481d      	ldr	r0, [pc, #116]	; (8002580 <HAL_FMC_MspInit+0x16c>)
 800250a:	f002 fbe5 	bl	8004cd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800250e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002528:	230c      	movs	r3, #12
 800252a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800252e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002532:	4619      	mov	r1, r3
 8002534:	4813      	ldr	r0, [pc, #76]	; (8002584 <HAL_FMC_MspInit+0x170>)
 8002536:	f002 fbcf 	bl	8004cd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800253a:	23e0      	movs	r3, #224	; 0xe0
 800253c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002552:	230c      	movs	r3, #12
 8002554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002558:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800255c:	4619      	mov	r1, r3
 800255e:	480a      	ldr	r0, [pc, #40]	; (8002588 <HAL_FMC_MspInit+0x174>)
 8002560:	f002 fbba 	bl	8004cd8 <HAL_GPIO_Init>
 8002564:	e000      	b.n	8002568 <HAL_FMC_MspInit+0x154>
    return;
 8002566:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002568:	37e0      	adds	r7, #224	; 0xe0
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000e4c 	.word	0x24000e4c
 8002574:	58024400 	.word	0x58024400
 8002578:	58021000 	.word	0x58021000
 800257c:	58021800 	.word	0x58021800
 8002580:	58020c00 	.word	0x58020c00
 8002584:	58021400 	.word	0x58021400
 8002588:	58021c00 	.word	0x58021c00

0800258c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002594:	f7ff ff3e 	bl	8002414 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0ba      	sub	sp, #232	; 0xe8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	22c0      	movs	r2, #192	; 0xc0
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 fa45 	bl	800ba40 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a45      	ldr	r2, [pc, #276]	; (80026d0 <HAL_SAI_MspInit+0x130>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d13e      	bne.n	800263e <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80025c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 fa55 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80025e0:	f7ff f85a 	bl	8001698 <Error_Handler>
    }

    if (SAI2_client == 0)
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_SAI_MspInit+0x134>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10e      	bne.n	800260a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HAL_SAI_MspInit+0x138>)
 80025ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025f2:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <HAL_SAI_MspInit+0x138>)
 80025f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_SAI_MspInit+0x138>)
 80025fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800260a:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <HAL_SAI_MspInit+0x134>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a30      	ldr	r2, [pc, #192]	; (80026d4 <HAL_SAI_MspInit+0x134>)
 8002612:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002614:	23f0      	movs	r3, #240	; 0xf0
 8002616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800262c:	230a      	movs	r3, #10
 800262e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002632:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002636:	4619      	mov	r1, r3
 8002638:	4828      	ldr	r0, [pc, #160]	; (80026dc <HAL_SAI_MspInit+0x13c>)
 800263a:	f002 fb4d 	bl	8004cd8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_SAI_MspInit+0x140>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d13f      	bne.n	80026c8 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002654:	2300      	movs	r3, #0
 8002656:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4618      	mov	r0, r3
 800265e:	f004 fa11 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002668:	f7ff f816 	bl	8001698 <Error_Handler>
    }

      if (SAI2_client == 0)
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_SAI_MspInit+0x134>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10e      	bne.n	8002692 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_SAI_MspInit+0x138>)
 8002676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_SAI_MspInit+0x138>)
 800267c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002680:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_SAI_MspInit+0x138>)
 8002686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800268a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_SAI_MspInit+0x134>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_SAI_MspInit+0x134>)
 800269a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800269c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026b6:	230a      	movs	r3, #10
 80026b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4808      	ldr	r0, [pc, #32]	; (80026e4 <HAL_SAI_MspInit+0x144>)
 80026c4:	f002 fb08 	bl	8004cd8 <HAL_GPIO_Init>

    }
}
 80026c8:	bf00      	nop
 80026ca:	37e8      	adds	r7, #232	; 0xe8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40015c04 	.word	0x40015c04
 80026d4:	24000e50 	.word	0x24000e50
 80026d8:	58024400 	.word	0x58024400
 80026dc:	58022000 	.word	0x58022000
 80026e0:	40015c24 	.word	0x40015c24
 80026e4:	58021800 	.word	0x58021800

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <NMI_Handler+0x4>

080026ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <MemManage_Handler+0x4>

080026fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <UsageFault_Handler+0x4>

08002706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002734:	f000 f95c 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800276c:	f009 f970 	bl	800ba50 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24080000 	.word	0x24080000
 800279c:	00000400 	.word	0x00000400
 80027a0:	24000e54 	.word	0x24000e54
 80027a4:	24000fa8 	.word	0x24000fa8

080027a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027ac:	4b37      	ldr	r3, [pc, #220]	; (800288c <SystemInit+0xe4>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	4a36      	ldr	r2, [pc, #216]	; (800288c <SystemInit+0xe4>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027bc:	4b34      	ldr	r3, [pc, #208]	; (8002890 <SystemInit+0xe8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	2b06      	cmp	r3, #6
 80027c6:	d807      	bhi.n	80027d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <SystemInit+0xe8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 030f 	bic.w	r3, r3, #15
 80027d0:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <SystemInit+0xe8>)
 80027d2:	f043 0307 	orr.w	r3, r3, #7
 80027d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027d8:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <SystemInit+0xec>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <SystemInit+0xec>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <SystemInit+0xec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <SystemInit+0xec>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4929      	ldr	r1, [pc, #164]	; (8002894 <SystemInit+0xec>)
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <SystemInit+0xf0>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <SystemInit+0xe8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <SystemInit+0xe8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 030f 	bic.w	r3, r3, #15
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <SystemInit+0xe8>)
 800280c:	f043 0307 	orr.w	r3, r3, #7
 8002810:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <SystemInit+0xec>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <SystemInit+0xec>)
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <SystemInit+0xec>)
 8002820:	2200      	movs	r2, #0
 8002822:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <SystemInit+0xec>)
 8002826:	4a1d      	ldr	r2, [pc, #116]	; (800289c <SystemInit+0xf4>)
 8002828:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <SystemInit+0xec>)
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <SystemInit+0xf8>)
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <SystemInit+0xec>)
 8002832:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <SystemInit+0xfc>)
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <SystemInit+0xec>)
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <SystemInit+0xec>)
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <SystemInit+0xfc>)
 8002840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <SystemInit+0xec>)
 8002844:	2200      	movs	r2, #0
 8002846:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <SystemInit+0xec>)
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <SystemInit+0xfc>)
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <SystemInit+0xec>)
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <SystemInit+0xec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <SystemInit+0xec>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <SystemInit+0xec>)
 8002862:	2200      	movs	r2, #0
 8002864:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <SystemInit+0x100>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <SystemInit+0x104>)
 800286c:	4013      	ands	r3, r2
 800286e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002872:	d202      	bcs.n	800287a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <SystemInit+0x108>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <SystemInit+0x10c>)
 800287c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002880:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	52002000 	.word	0x52002000
 8002894:	58024400 	.word	0x58024400
 8002898:	eaf6ed7f 	.word	0xeaf6ed7f
 800289c:	02020200 	.word	0x02020200
 80028a0:	01ff0000 	.word	0x01ff0000
 80028a4:	01010280 	.word	0x01010280
 80028a8:	5c001000 	.word	0x5c001000
 80028ac:	ffff0000 	.word	0xffff0000
 80028b0:	51008108 	.word	0x51008108
 80028b4:	52004000 	.word	0x52004000

080028b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028bc:	f7ff ff74 	bl	80027a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028c2:	490d      	ldr	r1, [pc, #52]	; (80028f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c8:	e002      	b.n	80028d0 <LoopCopyDataInit>

080028ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ce:	3304      	adds	r3, #4

080028d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d4:	d3f9      	bcc.n	80028ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d8:	4c0a      	ldr	r4, [pc, #40]	; (8002904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028dc:	e001      	b.n	80028e2 <LoopFillZerobss>

080028de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e0:	3204      	adds	r2, #4

080028e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e4:	d3fb      	bcc.n	80028de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028e6:	f009 f8b9 	bl	800ba5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ea:	f7fd fecf 	bl	800068c <main>
  bx  lr
 80028ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028f8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80028fc:	0800c444 	.word	0x0800c444
  ldr r2, =_sbss
 8002900:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002904:	24000fa4 	.word	0x24000fa4

08002908 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <ADC3_IRQHandler>
	...

0800290c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002912:	2003      	movs	r0, #3
 8002914:	f001 fa26 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002918:	f003 fede 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_Init+0x68>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	4913      	ldr	r1, [pc, #76]	; (8002978 <HAL_Init+0x6c>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_Init+0x68>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_Init+0x6c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_Init+0x70>)
 800294e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_Init+0x74>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002956:	2000      	movs	r0, #0
 8002958:	f000 f814 	bl	8002984 <HAL_InitTick>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e002      	b.n	800296c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002966:	f7fe fe9d 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	58024400 	.word	0x58024400
 8002978:	0800c3c8 	.word	0x0800c3c8
 800297c:	24000004 	.word	0x24000004
 8002980:	24000000 	.word	0x24000000

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_InitTick+0x60>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e021      	b.n	80029dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_InitTick+0x64>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_InitTick+0x60>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 f9fd 	bl	8003dae <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f001 f9d5 	bl	8003d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x68>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2400000c 	.word	0x2400000c
 80029e8:	24000000 	.word	0x24000000
 80029ec:	24000008 	.word	0x24000008

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2400000c 	.word	0x2400000c
 8002a14:	24000e58 	.word	0x24000e58

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	24000e58 	.word	0x24000e58

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2400000c 	.word	0x2400000c

08002a78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_GetREVID+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0c1b      	lsrs	r3, r3, #16
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	5c001000 	.word	0x5c001000

08002a90 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002aa0:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	58000400 	.word	0x58000400

08002ab8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	58000400 	.word	0x58000400

08002ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	611a      	str	r2, [r3, #16]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b087      	sub	sp, #28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3360      	adds	r3, #96	; 0x60
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]
  }
}
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3330      	adds	r3, #48	; 0x30
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	211f      	movs	r1, #31
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	f003 011f 	and.w	r1, r3, #31
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0e5b      	lsrs	r3, r3, #25
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0d1b      	lsrs	r3, r3, #20
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2107      	movs	r1, #7
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	401a      	ands	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0318 	and.w	r3, r3, #24
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc8:	40d9      	lsrs	r1, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	400b      	ands	r3, r1
 8002cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	000fffff 	.word	0x000fffff

08002cec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6093      	str	r3, [r2, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	5fffffc0 	.word	0x5fffffc0

08002d10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <LL_ADC_EnableInternalRegulator+0x24>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	6fffffc0 	.word	0x6fffffc0

08002d60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <LL_ADC_IsEnabled+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_ADC_IsEnabled+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d101      	bne.n	8002dec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e18f      	b.n	8003136 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fe fc57 	bl	80016d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff67 	bl	8002d10 <LL_ADC_IsDeepPowerDownEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff4d 	bl	8002cec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff82 	bl	8002d60 <LL_ADC_IsInternalRegulatorEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d114      	bne.n	8002e8c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff66 	bl	8002d38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e6c:	4b87      	ldr	r3, [pc, #540]	; (800308c <HAL_ADC_Init+0x290>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_ADC_Init+0x294>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e7e:	e002      	b.n	8002e86 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f9      	bne.n	8002e80 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff65 	bl	8002d60 <LL_ADC_IsInternalRegulatorEnabled>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f043 0210 	orr.w	r2, r3, #16
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff76 	bl	8002dae <LL_ADC_REG_IsConversionOngoing>
 8002ec2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 8129 	bne.w	8003124 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 8125 	bne.w	8003124 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff4a 	bl	8002d88 <LL_ADC_IsEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d136      	bne.n	8002f68 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_ADC_Init+0x298>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_ADC_Init+0x112>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_ADC_Init+0x29c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10e      	bne.n	8002f2c <HAL_ADC_Init+0x130>
 8002f0e:	4861      	ldr	r0, [pc, #388]	; (8003094 <HAL_ADC_Init+0x298>)
 8002f10:	f7ff ff3a 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f14:	4604      	mov	r4, r0
 8002f16:	4860      	ldr	r0, [pc, #384]	; (8003098 <HAL_ADC_Init+0x29c>)
 8002f18:	f7ff ff36 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4323      	orrs	r3, r4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e008      	b.n	8002f3e <HAL_ADC_Init+0x142>
 8002f2c:	485b      	ldr	r0, [pc, #364]	; (800309c <HAL_ADC_Init+0x2a0>)
 8002f2e:	f7ff ff2b 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a53      	ldr	r2, [pc, #332]	; (8003094 <HAL_ADC_Init+0x298>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_ADC_Init+0x15a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a51      	ldr	r2, [pc, #324]	; (8003098 <HAL_ADC_Init+0x29c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_Init+0x15e>
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_ADC_Init+0x2a4>)
 8002f58:	e000      	b.n	8002f5c <HAL_ADC_Init+0x160>
 8002f5a:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_ADC_Init+0x2a8>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f7ff fdbe 	bl	8002ae4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f68:	f7ff fd86 	bl	8002a78 <HAL_GetREVID>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d914      	bls.n	8002fa0 <HAL_ADC_Init+0x1a4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d110      	bne.n	8002fa0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7d5b      	ldrb	r3, [r3, #21]
 8002f82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7f1b      	ldrb	r3, [r3, #28]
 8002f94:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f96:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f98:	f043 030c 	orr.w	r3, r3, #12
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e00d      	b.n	8002fbc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7d5b      	ldrb	r3, [r3, #21]
 8002fa4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002faa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fb0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7f1b      	ldrb	r3, [r3, #28]
 8002fb6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7f1b      	ldrb	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	045b      	lsls	r3, r3, #17
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_ADC_Init+0x2ac>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	69b9      	ldr	r1, [r7, #24]
 8002ffe:	430b      	orrs	r3, r1
 8003000:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fed1 	bl	8002dae <LL_ADC_REG_IsConversionOngoing>
 800300c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fede 	bl	8002dd4 <LL_ADC_INJ_IsConversionOngoing>
 8003018:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d15f      	bne.n	80030e0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d15c      	bne.n	80030e0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7d1b      	ldrb	r3, [r3, #20]
 800302a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_ADC_Init+0x2b0>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	430b      	orrs	r3, r1
 8003046:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800304e:	2b01      	cmp	r3, #1
 8003050:	d130      	bne.n	80030b4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_ADC_Init+0x2b4>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003066:	3a01      	subs	r2, #1
 8003068:	0411      	lsls	r1, r2, #16
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800307a:	430a      	orrs	r2, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	611a      	str	r2, [r3, #16]
 8003088:	e01c      	b.n	80030c4 <HAL_ADC_Init+0x2c8>
 800308a:	bf00      	nop
 800308c:	24000000 	.word	0x24000000
 8003090:	053e2d63 	.word	0x053e2d63
 8003094:	40022000 	.word	0x40022000
 8003098:	40022100 	.word	0x40022100
 800309c:	58026000 	.word	0x58026000
 80030a0:	40022300 	.word	0x40022300
 80030a4:	58026300 	.word	0x58026300
 80030a8:	fff0c003 	.word	0xfff0c003
 80030ac:	ffffbffc 	.word	0xffffbffc
 80030b0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fb80 	bl	80037e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10c      	bne.n	8003102 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f023 010f 	bic.w	r1, r3, #15
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003100:	e007      	b.n	8003112 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 020f 	bic.w	r2, r2, #15
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
 8003122:	e007      	b.n	8003134 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	f043 0210 	orr.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003134:	7ffb      	ldrb	r3, [r7, #31]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop

08003140 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b0a1      	sub	sp, #132	; 0x84
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a9d      	ldr	r2, [pc, #628]	; (80033d0 <HAL_ADC_ConfigChannel+0x290>)
 800315a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x2a>
 8003166:	2302      	movs	r3, #2
 8003168:	e321      	b.n	80037ae <HAL_ADC_ConfigChannel+0x66e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fe19 	bl	8002dae <LL_ADC_REG_IsConversionOngoing>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8306 	bne.w	8003790 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x62>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2201      	movs	r2, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	e016      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x90>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80031be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2201      	movs	r2, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	69d1      	ldr	r1, [r2, #28]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	430b      	orrs	r3, r1
 80031dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f7ff fd02 	bl	8002bf4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fdda 	bl	8002dae <LL_ADC_REG_IsConversionOngoing>
 80031fa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fde7 	bl	8002dd4 <LL_ADC_INJ_IsConversionOngoing>
 8003206:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80b3 	bne.w	8003376 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80af 	bne.w	8003376 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	461a      	mov	r2, r3
 8003226:	f7ff fd11 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800322a:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <HAL_ADC_ConfigChannel+0x294>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003236:	d10b      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x110>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	e01d      	b.n	800328c <HAL_ADC_ConfigChannel+0x14c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x136>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	e00a      	b.n	800328c <HAL_ADC_ConfigChannel+0x14c>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d027      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a4:	f7ff fc52 	bl	8002b4c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6919      	ldr	r1, [r3, #16]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	7e5b      	ldrb	r3, [r3, #25]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d102      	bne.n	80032be <HAL_ADC_ConfigChannel+0x17e>
 80032b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032bc:	e000      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x180>
 80032be:	2300      	movs	r3, #0
 80032c0:	461a      	mov	r2, r3
 80032c2:	f7ff fc7c 	bl	8002bbe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	7e1b      	ldrb	r3, [r3, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x19c>
 80032d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032da:	e000      	b.n	80032de <HAL_ADC_ConfigChannel+0x19e>
 80032dc:	2300      	movs	r3, #0
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fc54 	bl	8002b8c <LL_ADC_SetDataRightShift>
 80032e4:	e047      	b.n	8003376 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	069b      	lsls	r3, r3, #26
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d107      	bne.n	800330a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003308:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003310:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	069b      	lsls	r3, r3, #26
 800331a:	429a      	cmp	r2, r3
 800331c:	d107      	bne.n	800332e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800332c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003334:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	069b      	lsls	r3, r3, #26
 800333e:	429a      	cmp	r2, r3
 8003340:	d107      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003350:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	429a      	cmp	r2, r3
 8003364:	d107      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003374:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fd04 	bl	8002d88 <LL_ADC_IsEnabled>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 820d 	bne.w	80037a2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	461a      	mov	r2, r3
 8003396:	f7ff fc85 	bl	8002ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <HAL_ADC_ConfigChannel+0x290>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 8133 	bne.w	800360c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d110      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x298>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2b09      	cmp	r3, #9
 80033c4:	bf94      	ite	ls
 80033c6:	2301      	movls	r3, #1
 80033c8:	2300      	movhi	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e01e      	b.n	800340c <HAL_ADC_ConfigChannel+0x2cc>
 80033ce:	bf00      	nop
 80033d0:	47ff0000 	.word	0x47ff0000
 80033d4:	5c001000 	.word	0x5c001000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80033e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80033f0:	2320      	movs	r3, #32
 80033f2:	e003      	b.n	80033fc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80033f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2b09      	cmp	r3, #9
 8003404:	bf94      	ite	ls
 8003406:	2301      	movls	r3, #1
 8003408:	2300      	movhi	r3, #0
 800340a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800340c:	2b00      	cmp	r3, #0
 800340e:	d079      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2ec>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	3301      	adds	r3, #1
 8003424:	069b      	lsls	r3, r3, #26
 8003426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342a:	e015      	b.n	8003458 <HAL_ADC_ConfigChannel+0x318>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800343a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800343e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	069b      	lsls	r3, r3, #26
 8003454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x338>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	3301      	adds	r3, #1
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	e017      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x368>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800348a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	ea42 0103 	orr.w	r1, r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x38e>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	051b      	lsls	r3, r3, #20
 80034cc:	e018      	b.n	8003500 <HAL_ADC_ConfigChannel+0x3c0>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80034e6:	2320      	movs	r3, #32
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003500:	430b      	orrs	r3, r1
 8003502:	e07e      	b.n	8003602 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x3e0>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	3301      	adds	r3, #1
 8003518:	069b      	lsls	r3, r3, #26
 800351a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351e:	e015      	b.n	800354c <HAL_ADC_ConfigChannel+0x40c>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	069b      	lsls	r3, r3, #26
 8003548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x42c>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	e017      	b.n	800359c <HAL_ADC_ConfigChannel+0x45c>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	61bb      	str	r3, [r7, #24]
  return result;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	ea42 0103 	orr.w	r1, r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x488>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	3b1e      	subs	r3, #30
 80035c0:	051b      	lsls	r3, r3, #20
 80035c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035c6:	e01b      	b.n	8003600 <HAL_ADC_ConfigChannel+0x4c0>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	60fb      	str	r3, [r7, #12]
  return result;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e003      	b.n	80035ec <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f003 021f 	and.w	r2, r3, #31
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	3b1e      	subs	r3, #30
 80035fa:	051b      	lsls	r3, r3, #20
 80035fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003600:	430b      	orrs	r3, r1
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	4619      	mov	r1, r3
 8003608:	f7ff fb20 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f280 80c6 	bge.w	80037a2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <HAL_ADC_ConfigChannel+0x678>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_ADC_ConfigChannel+0x4ea>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a65      	ldr	r2, [pc, #404]	; (80037bc <HAL_ADC_ConfigChannel+0x67c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x4ee>
 800362a:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_ADC_ConfigChannel+0x680>)
 800362c:	e000      	b.n	8003630 <HAL_ADC_ConfigChannel+0x4f0>
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_ADC_ConfigChannel+0x684>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fa7d 	bl	8002b30 <LL_ADC_GetCommonPathInternalCh>
 8003636:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5e      	ldr	r2, [pc, #376]	; (80037b8 <HAL_ADC_ConfigChannel+0x678>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_ADC_ConfigChannel+0x50c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <HAL_ADC_ConfigChannel+0x67c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10e      	bne.n	800366a <HAL_ADC_ConfigChannel+0x52a>
 800364c:	485a      	ldr	r0, [pc, #360]	; (80037b8 <HAL_ADC_ConfigChannel+0x678>)
 800364e:	f7ff fb9b 	bl	8002d88 <LL_ADC_IsEnabled>
 8003652:	4604      	mov	r4, r0
 8003654:	4859      	ldr	r0, [pc, #356]	; (80037bc <HAL_ADC_ConfigChannel+0x67c>)
 8003656:	f7ff fb97 	bl	8002d88 <LL_ADC_IsEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	4323      	orrs	r3, r4
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	e008      	b.n	800367c <HAL_ADC_ConfigChannel+0x53c>
 800366a:	4857      	ldr	r0, [pc, #348]	; (80037c8 <HAL_ADC_ConfigChannel+0x688>)
 800366c:	f7ff fb8c 	bl	8002d88 <LL_ADC_IsEnabled>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf0c      	ite	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	2300      	movne	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d07d      	beq.n	800377c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a51      	ldr	r2, [pc, #324]	; (80037cc <HAL_ADC_ConfigChannel+0x68c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d130      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x5ac>
 800368a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d12b      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a4b      	ldr	r2, [pc, #300]	; (80037c8 <HAL_ADC_ConfigChannel+0x688>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f040 8081 	bne.w	80037a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a44      	ldr	r2, [pc, #272]	; (80037b8 <HAL_ADC_ConfigChannel+0x678>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x574>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a43      	ldr	r2, [pc, #268]	; (80037bc <HAL_ADC_ConfigChannel+0x67c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x578>
 80036b4:	4a42      	ldr	r2, [pc, #264]	; (80037c0 <HAL_ADC_ConfigChannel+0x680>)
 80036b6:	e000      	b.n	80036ba <HAL_ADC_ConfigChannel+0x57a>
 80036b8:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <HAL_ADC_ConfigChannel+0x684>)
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7ff fa21 	bl	8002b0a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c8:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_ADC_ConfigChannel+0x690>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	4a41      	ldr	r2, [pc, #260]	; (80037d4 <HAL_ADC_ConfigChannel+0x694>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ea:	e05a      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a39      	ldr	r2, [pc, #228]	; (80037d8 <HAL_ADC_ConfigChannel+0x698>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d11e      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x5f4>
 80036f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d119      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <HAL_ADC_ConfigChannel+0x688>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d14b      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <HAL_ADC_ConfigChannel+0x678>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_ADC_ConfigChannel+0x5de>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a28      	ldr	r2, [pc, #160]	; (80037bc <HAL_ADC_ConfigChannel+0x67c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x5e2>
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_ADC_ConfigChannel+0x680>)
 8003720:	e000      	b.n	8003724 <HAL_ADC_ConfigChannel+0x5e4>
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <HAL_ADC_ConfigChannel+0x684>)
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7ff f9ec 	bl	8002b0a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003732:	e036      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a28      	ldr	r2, [pc, #160]	; (80037dc <HAL_ADC_ConfigChannel+0x69c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d131      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d12c      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_ADC_ConfigChannel+0x688>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d127      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_ADC_ConfigChannel+0x678>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_ADC_ConfigChannel+0x626>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_ADC_ConfigChannel+0x67c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x62a>
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_ADC_ConfigChannel+0x680>)
 8003768:	e000      	b.n	800376c <HAL_ADC_ConfigChannel+0x62c>
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_ADC_ConfigChannel+0x684>)
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f7ff f9c8 	bl	8002b0a <LL_ADC_SetCommonPathInternalCh>
 800377a:	e012      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800378e:	e008      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3784      	adds	r7, #132	; 0x84
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40022100 	.word	0x40022100
 80037c0:	40022300 	.word	0x40022300
 80037c4:	58026300 	.word	0x58026300
 80037c8:	58026000 	.word	0x58026000
 80037cc:	cb840000 	.word	0xcb840000
 80037d0:	24000000 	.word	0x24000000
 80037d4:	053e2d63 	.word	0x053e2d63
 80037d8:	c7520000 	.word	0xc7520000
 80037dc:	cfb80000 	.word	0xcfb80000

080037e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <ADC_ConfigureBoostMode+0x1f8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <ADC_ConfigureBoostMode+0x1c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a79      	ldr	r2, [pc, #484]	; (80039dc <ADC_ConfigureBoostMode+0x1fc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d109      	bne.n	8003810 <ADC_ConfigureBoostMode+0x30>
 80037fc:	4b78      	ldr	r3, [pc, #480]	; (80039e0 <ADC_ConfigureBoostMode+0x200>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e008      	b.n	8003822 <ADC_ConfigureBoostMode+0x42>
 8003810:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <ADC_ConfigureBoostMode+0x204>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01c      	beq.n	8003860 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003826:	f003 f8d1 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 800382a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003834:	d010      	beq.n	8003858 <ADC_ConfigureBoostMode+0x78>
 8003836:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800383a:	d873      	bhi.n	8003924 <ADC_ConfigureBoostMode+0x144>
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d002      	beq.n	8003848 <ADC_ConfigureBoostMode+0x68>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003846:	d16d      	bne.n	8003924 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	60fb      	str	r3, [r7, #12]
        break;
 8003856:	e068      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	60fb      	str	r3, [r7, #12]
        break;
 800385e:	e064      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003860:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f004 fb16 	bl	8007e98 <HAL_RCCEx_GetPeriphCLKFreq>
 800386c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003876:	d051      	beq.n	800391c <ADC_ConfigureBoostMode+0x13c>
 8003878:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800387c:	d854      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 800387e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003882:	d047      	beq.n	8003914 <ADC_ConfigureBoostMode+0x134>
 8003884:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003888:	d84e      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 800388a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800388e:	d03d      	beq.n	800390c <ADC_ConfigureBoostMode+0x12c>
 8003890:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003894:	d848      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 8003896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389a:	d033      	beq.n	8003904 <ADC_ConfigureBoostMode+0x124>
 800389c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a0:	d842      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 80038a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80038a6:	d029      	beq.n	80038fc <ADC_ConfigureBoostMode+0x11c>
 80038a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80038ac:	d83c      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 80038ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80038b2:	d01a      	beq.n	80038ea <ADC_ConfigureBoostMode+0x10a>
 80038b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80038b8:	d836      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 80038ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80038be:	d014      	beq.n	80038ea <ADC_ConfigureBoostMode+0x10a>
 80038c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80038c4:	d830      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 80038c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ca:	d00e      	beq.n	80038ea <ADC_ConfigureBoostMode+0x10a>
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d0:	d82a      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 80038d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038d6:	d008      	beq.n	80038ea <ADC_ConfigureBoostMode+0x10a>
 80038d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038dc:	d824      	bhi.n	8003928 <ADC_ConfigureBoostMode+0x148>
 80038de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e2:	d002      	beq.n	80038ea <ADC_ConfigureBoostMode+0x10a>
 80038e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038e8:	d11e      	bne.n	8003928 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	60fb      	str	r3, [r7, #12]
        break;
 80038fa:	e016      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	60fb      	str	r3, [r7, #12]
        break;
 8003902:	e012      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	60fb      	str	r3, [r7, #12]
        break;
 800390a:	e00e      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	60fb      	str	r3, [r7, #12]
        break;
 8003912:	e00a      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	09db      	lsrs	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
        break;
 800391a:	e006      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	60fb      	str	r3, [r7, #12]
        break;
 8003922:	e002      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003928:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800392a:	f7ff f8a5 	bl	8002a78 <HAL_GetREVID>
 800392e:	4603      	mov	r3, r0
 8003930:	f241 0203 	movw	r2, #4099	; 0x1003
 8003934:	4293      	cmp	r3, r2
 8003936:	d815      	bhi.n	8003964 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <ADC_ConfigureBoostMode+0x208>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d908      	bls.n	8003952 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003950:	e03e      	b.n	80039d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	e035      	b.n	80039d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <ADC_ConfigureBoostMode+0x20c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d808      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003980:	609a      	str	r2, [r3, #8]
}
 8003982:	e025      	b.n	80039d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <ADC_ConfigureBoostMode+0x210>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d80a      	bhi.n	80039a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	e016      	b.n	80039d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <ADC_ConfigureBoostMode+0x214>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d80a      	bhi.n	80039c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	609a      	str	r2, [r3, #8]
}
 80039be:	e007      	b.n	80039d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40022100 	.word	0x40022100
 80039e0:	40022300 	.word	0x40022300
 80039e4:	58026300 	.word	0x58026300
 80039e8:	01312d00 	.word	0x01312d00
 80039ec:	005f5e10 	.word	0x005f5e10
 80039f0:	00bebc20 	.word	0x00bebc20
 80039f4:	017d7840 	.word	0x017d7840

080039f8 <LL_ADC_IsEnabled>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <LL_ADC_IsEnabled+0x18>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <LL_ADC_IsEnabled+0x1a>
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d101      	bne.n	8003a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b09f      	sub	sp, #124	; 0x7c
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0be      	b.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a7c:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	e001      	b.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e09d      	b.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ffb9 	bl	8003a1e <LL_ADC_REG_IsConversionOngoing>
 8003aac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ffb3 	bl	8003a1e <LL_ADC_REG_IsConversionOngoing>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d17f      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d17c      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a47      	ldr	r2, [pc, #284]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a46      	ldr	r2, [pc, #280]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003ad8:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ada:	e000      	b.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003adc:	4b45      	ldr	r3, [pc, #276]	; (8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ade:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d039      	beq.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a3a      	ldr	r2, [pc, #232]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a38      	ldr	r2, [pc, #224]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b0e:	4836      	ldr	r0, [pc, #216]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b10:	f7ff ff72 	bl	80039f8 <LL_ADC_IsEnabled>
 8003b14:	4604      	mov	r4, r0
 8003b16:	4835      	ldr	r0, [pc, #212]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b18:	f7ff ff6e 	bl	80039f8 <LL_ADC_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e008      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003b2c:	4832      	ldr	r0, [pc, #200]	; (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b2e:	f7ff ff63 	bl	80039f8 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d047      	beq.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	6811      	ldr	r1, [r2, #0]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	431a      	orrs	r2, r3
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b5a:	e03a      	b.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d10e      	bne.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003b7c:	481a      	ldr	r0, [pc, #104]	; (8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b7e:	f7ff ff3b 	bl	80039f8 <LL_ADC_IsEnabled>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4819      	ldr	r0, [pc, #100]	; (8003bec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b86:	f7ff ff37 	bl	80039f8 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e008      	b.n	8003bac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b9a:	4817      	ldr	r0, [pc, #92]	; (8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b9c:	f7ff ff2c 	bl	80039f8 <LL_ADC_IsEnabled>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bbc:	e009      	b.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	377c      	adds	r7, #124	; 0x7c
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd90      	pop	{r4, r7, pc}
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40022100 	.word	0x40022100
 8003bf0:	40022300 	.word	0x40022300
 8003bf4:	58026300 	.word	0x58026300
 8003bf8:	58026000 	.word	0x58026000
 8003bfc:	fffff0e0 	.word	0xfffff0e0

08003c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <__NVIC_SetPriorityGrouping+0x40>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <__NVIC_SetPriorityGrouping+0x40>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00
 8003c44:	05fa0000 	.word	0x05fa0000

08003c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <__NVIC_GetPriorityGrouping+0x18>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 0307 	and.w	r3, r3, #7
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff47 	bl	8003c00 <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff5e 	bl	8003c48 <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff90 	bl	8003cb8 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5f 	bl	8003c64 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffb2 	bl	8003d20 <SysTick_Config>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0cf      	b.n	8003f7a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2223      	movs	r2, #35	; 0x23
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fd fd75 	bl	80018dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df2:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <HAL_ETH_Init+0x1bc>)
 8003df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003df8:	4a62      	ldr	r2, [pc, #392]	; (8003f84 <HAL_ETH_Init+0x1bc>)
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e02:	4b60      	ldr	r3, [pc, #384]	; (8003f84 <HAL_ETH_Init+0x1bc>)
 8003e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a1b      	ldrb	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fe fe39 	bl	8002a90 <HAL_SYSCFG_ETHInterfaceSelect>
 8003e1e:	e003      	b.n	8003e28 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003e20:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003e24:	f7fe fe34 	bl	8002a90 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003e28:	4b57      	ldr	r3, [pc, #348]	; (8003f88 <HAL_ETH_Init+0x1c0>)
 8003e2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7fe fde8 	bl	8002a18 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e4a:	e011      	b.n	8003e70 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e4c:	f7fe fde4 	bl	8002a18 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e5a:	d909      	bls.n	8003e70 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	22e0      	movs	r2, #224	; 0xe0
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e084      	b.n	8003f7a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e4      	bne.n	8003e4c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f886 	bl	8003f94 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e88:	f002 fda0 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	; (8003f8c <HAL_ETH_Init+0x1c4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	0c9a      	lsrs	r2, r3, #18
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3a01      	subs	r2, #1
 8003e9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa71 	bl	8004388 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003eb2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ec2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	22e0      	movs	r2, #224	; 0xe0
 8003ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e049      	b.n	8003f7a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_ETH_Init+0x1c8>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6952      	ldr	r2, [r2, #20]
 8003efa:	0051      	lsls	r1, r2, #1
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f06:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fad9 	bl	80044c2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb1f 	bl	8004554 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	3305      	adds	r3, #5
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	061a      	lsls	r2, r3, #24
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	3302      	adds	r3, #2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f54:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f62:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2210      	movs	r2, #16
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
 8003f88:	58000400 	.word	0x58000400
 8003f8c:	431bde83 	.word	0x431bde83
 8003f90:	ffff8001 	.word	0xffff8001

08003f94 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003fae:	f002 fd0d 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 8003fb2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d908      	bls.n	8003fce <HAL_ETH_SetMDIOClockRange+0x3a>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d804      	bhi.n	8003fce <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e027      	b.n	800401e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d908      	bls.n	8003fe8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d204      	bcs.n	8003fe8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e01a      	b.n	800401e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4a13      	ldr	r2, [pc, #76]	; (8004038 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d303      	bcc.n	8003ff8 <HAL_ETH_SetMDIOClockRange+0x64>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d911      	bls.n	800401c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d908      	bls.n	8004012 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d804      	bhi.n	8004012 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e005      	b.n	800401e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e000      	b.n	800401e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800401c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	01312cff 	.word	0x01312cff
 8004034:	02160ebf 	.word	0x02160ebf
 8004038:	03938700 	.word	0x03938700
 800403c:	05f5e0ff 	.word	0x05f5e0ff
 8004040:	08f0d17f 	.word	0x08f0d17f

08004044 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004056:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	791b      	ldrb	r3, [r3, #4]
 800405c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800405e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	7b1b      	ldrb	r3, [r3, #12]
 8004064:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004066:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7b5b      	ldrb	r3, [r3, #13]
 800406c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800406e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	7b9b      	ldrb	r3, [r3, #14]
 8004074:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004076:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	7bdb      	ldrb	r3, [r3, #15]
 800407c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800407e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	7c12      	ldrb	r2, [r2, #16]
 8004084:	2a00      	cmp	r2, #0
 8004086:	d102      	bne.n	800408e <ETH_SetMACConfig+0x4a>
 8004088:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800408c:	e000      	b.n	8004090 <ETH_SetMACConfig+0x4c>
 800408e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004090:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	7c52      	ldrb	r2, [r2, #17]
 8004096:	2a00      	cmp	r2, #0
 8004098:	d102      	bne.n	80040a0 <ETH_SetMACConfig+0x5c>
 800409a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409e:	e000      	b.n	80040a2 <ETH_SetMACConfig+0x5e>
 80040a0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80040a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	7c9b      	ldrb	r3, [r3, #18]
 80040a8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80040aa:	431a      	orrs	r2, r3
               macconf->Speed |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80040b0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80040b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7f1b      	ldrb	r3, [r3, #28]
 80040bc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80040be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7f5b      	ldrb	r3, [r3, #29]
 80040c4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80040c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	7f92      	ldrb	r2, [r2, #30]
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	d102      	bne.n	80040d6 <ETH_SetMACConfig+0x92>
 80040d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d4:	e000      	b.n	80040d8 <ETH_SetMACConfig+0x94>
 80040d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80040d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	7fdb      	ldrb	r3, [r3, #31]
 80040de:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80040e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d102      	bne.n	80040f2 <ETH_SetMACConfig+0xae>
 80040ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040f0:	e000      	b.n	80040f4 <ETH_SetMACConfig+0xb0>
 80040f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80040f4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80040fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004102:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004104:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b56      	ldr	r3, [pc, #344]	; (8004270 <ETH_SetMACConfig+0x22c>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	68f9      	ldr	r1, [r7, #12]
 800411e:	430b      	orrs	r3, r1
 8004120:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800412e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004130:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004138:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800413a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004142:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004144:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800414c:	2a00      	cmp	r2, #0
 800414e:	d102      	bne.n	8004156 <ETH_SetMACConfig+0x112>
 8004150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004154:	e000      	b.n	8004158 <ETH_SetMACConfig+0x114>
 8004156:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004158:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <ETH_SetMACConfig+0x230>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	430b      	orrs	r3, r1
 8004174:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <ETH_SetMACConfig+0x234>)
 800418e:	4013      	ands	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	430b      	orrs	r3, r1
 8004198:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	d101      	bne.n	80041b6 <ETH_SetMACConfig+0x172>
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	e000      	b.n	80041b8 <ETH_SetMACConfig+0x174>
 80041b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80041b8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80041e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80041e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f023 0103 	bic.w	r1, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	430a      	orrs	r2, r1
 8004202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800420e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800422a:	2a00      	cmp	r2, #0
 800422c:	d101      	bne.n	8004232 <ETH_SetMACConfig+0x1ee>
 800422e:	2240      	movs	r2, #64	; 0x40
 8004230:	e000      	b.n	8004234 <ETH_SetMACConfig+0x1f0>
 8004232:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004234:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800423c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800423e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004246:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004254:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	430a      	orrs	r2, r1
 8004260:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	00048083 	.word	0x00048083
 8004274:	c0f88000 	.word	0xc0f88000
 8004278:	fffffef0 	.word	0xfffffef0

0800427c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b38      	ldr	r3, [pc, #224]	; (8004374 <ETH_SetDMAConfig+0xf8>)
 8004292:	4013      	ands	r3, r2
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	6811      	ldr	r1, [r2, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430b      	orrs	r3, r1
 800429e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042a2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	791b      	ldrb	r3, [r3, #4]
 80042a8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	7b1b      	ldrb	r3, [r3, #12]
 80042b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <ETH_SetDMAConfig+0xfc>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	430b      	orrs	r3, r1
 80042d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042d4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	7b5b      	ldrb	r3, [r3, #13]
 80042da:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <ETH_SetDMAConfig+0x100>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	430b      	orrs	r3, r1
 80042fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004300:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	7d1b      	ldrb	r3, [r3, #20]
 800430c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800430e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	7f5b      	ldrb	r3, [r3, #29]
 8004314:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004322:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <ETH_SetDMAConfig+0x104>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	430b      	orrs	r3, r1
 8004332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004336:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	7f1b      	ldrb	r3, [r3, #28]
 800433e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004350:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <ETH_SetDMAConfig+0x108>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	430b      	orrs	r3, r1
 8004360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004364:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	ffff87fd 	.word	0xffff87fd
 8004378:	ffff2ffe 	.word	0xffff2ffe
 800437c:	fffec000 	.word	0xfffec000
 8004380:	ffc0efef 	.word	0xffc0efef
 8004384:	7fc0ffff 	.word	0x7fc0ffff

08004388 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b0a4      	sub	sp, #144	; 0x90
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004396:	2300      	movs	r3, #0
 8004398:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80043c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043c8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80043e0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80043ec:	2300      	movs	r3, #0
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004402:	2300      	movs	r3, #0
 8004404:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004406:	2300      	movs	r3, #0
 8004408:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800440a:	2300      	movs	r3, #0
 800440c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004420:	2320      	movs	r3, #32
 8004422:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004432:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004438:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004456:	2300      	movs	r3, #0
 8004458:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004462:	2300      	movs	r3, #0
 8004464:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800446c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fde6 	bl	8004044 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004478:	2301      	movs	r3, #1
 800447a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004492:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004496:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800449c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80044a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff fee1 	bl	800427c <ETH_SetDMAConfig>
}
 80044ba:	bf00      	nop
 80044bc:	3790      	adds	r7, #144	; 0x90
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	e01d      	b.n	800450c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68d9      	ldr	r1, [r3, #12]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	3206      	adds	r2, #6
 8004502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d9de      	bls.n	80044d0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004520:	461a      	mov	r2, r3
 8004522:	2303      	movs	r3, #3
 8004524:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004534:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004544:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e023      	b.n	80045aa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6919      	ldr	r1, [r3, #16]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	440b      	add	r3, r1
 8004572:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	3212      	adds	r2, #18
 80045a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d9d8      	bls.n	8004562 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	461a      	mov	r2, r3
 80045d8:	2303      	movs	r3, #3
 80045da:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b098      	sub	sp, #96	; 0x60
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004618:	4a84      	ldr	r2, [pc, #528]	; (800482c <HAL_FDCAN_Init+0x21c>)
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	4611      	mov	r1, r2
 8004620:	224c      	movs	r2, #76	; 0x4c
 8004622:	4618      	mov	r0, r3
 8004624:	f007 fa40 	bl	800baa8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e1c6      	b.n	80049c0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7e      	ldr	r2, [pc, #504]	; (8004830 <HAL_FDCAN_Init+0x220>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d106      	bne.n	800464a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd fa6c 	bl	8001b3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0210 	bic.w	r2, r2, #16
 8004672:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004674:	f7fe f9d0 	bl	8002a18 <HAL_GetTick>
 8004678:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800467a:	e014      	b.n	80046a6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800467c:	f7fe f9cc 	bl	8002a18 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b0a      	cmp	r3, #10
 8004688:	d90d      	bls.n	80046a6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2203      	movs	r2, #3
 800469e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e18c      	b.n	80049c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d0e3      	beq.n	800467c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c4:	f7fe f9a8 	bl	8002a18 <HAL_GetTick>
 80046c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046ca:	e014      	b.n	80046f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046cc:	f7fe f9a4 	bl	8002a18 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b0a      	cmp	r3, #10
 80046d8:	d90d      	bls.n	80046f6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2203      	movs	r2, #3
 80046ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e164      	b.n	80049c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0e3      	beq.n	80046cc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0202 	orr.w	r2, r2, #2
 8004712:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	7c1b      	ldrb	r3, [r3, #16]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d108      	bne.n	800472e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472a:	619a      	str	r2, [r3, #24]
 800472c:	e007      	b.n	800473e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	7c5b      	ldrb	r3, [r3, #17]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d108      	bne.n	8004758 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004754:	619a      	str	r2, [r3, #24]
 8004756:	e007      	b.n	8004768 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004766:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	7c9b      	ldrb	r3, [r3, #18]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d108      	bne.n	8004782 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800477e:	619a      	str	r2, [r3, #24]
 8004780:	e007      	b.n	8004792 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004790:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80047b6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0210 	bic.w	r2, r2, #16
 80047c6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d108      	bne.n	80047e2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0204 	orr.w	r2, r2, #4
 80047de:	619a      	str	r2, [r3, #24]
 80047e0:	e030      	b.n	8004844 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02c      	beq.n	8004844 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d020      	beq.n	8004834 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004800:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0210 	orr.w	r2, r2, #16
 8004810:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d114      	bne.n	8004844 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0220 	orr.w	r2, r2, #32
 8004828:	619a      	str	r2, [r3, #24]
 800482a:	e00b      	b.n	8004844 <HAL_FDCAN_Init+0x234>
 800482c:	0800c37c 	.word	0x0800c37c
 8004830:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0220 	orr.w	r2, r2, #32
 8004842:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	3b01      	subs	r3, #1
 800484a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	3b01      	subs	r3, #1
 8004852:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004854:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800485c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	3b01      	subs	r3, #1
 8004866:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800486c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800486e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d115      	bne.n	80048a6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	3b01      	subs	r3, #1
 8004886:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004888:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	3b01      	subs	r3, #1
 8004890:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004892:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	3b01      	subs	r3, #1
 800489c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80048a2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048a4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048cc:	4413      	add	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d011      	beq.n	80048f6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80048da:	f023 0107 	bic.w	r1, r3, #7
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	3360      	adds	r3, #96	; 0x60
 80048e6:	443b      	add	r3, r7
 80048e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004906:	f023 0107 	bic.w	r1, r3, #7
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	3360      	adds	r3, #96	; 0x60
 8004912:	443b      	add	r3, r7
 8004914:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	2b00      	cmp	r3, #0
 8004928:	d012      	beq.n	8004950 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004932:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	3360      	adds	r3, #96	; 0x60
 800493e:	443b      	add	r3, r7
 8004940:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004944:	011a      	lsls	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004960:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	3360      	adds	r3, #96	; 0x60
 800496c:	443b      	add	r3, r7
 800496e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004972:	021a      	lsls	r2, r3, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <HAL_FDCAN_Init+0x3b8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d107      	bne.n	8004998 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f022 0203 	bic.w	r2, r2, #3
 8004996:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f80b 	bl	80049cc <FDCAN_CalcultateRamBlockAddresses>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80049bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3760      	adds	r7, #96	; 0x60
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	4000a000 	.word	0x4000a000

080049cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049e2:	4ba7      	ldr	r3, [pc, #668]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	0091      	lsls	r1, r2, #2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	430b      	orrs	r3, r1
 80049f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	041a      	lsls	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	4413      	add	r3, r2
 8004a18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a22:	4b97      	ldr	r3, [pc, #604]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0091      	lsls	r1, r2, #2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	041a      	lsls	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004a64:	4b86      	ldr	r3, [pc, #536]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	0091      	lsls	r1, r2, #2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a7e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	041a      	lsls	r2, r3, #16
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004aac:	4b74      	ldr	r3, [pc, #464]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	0091      	lsls	r1, r2, #2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ac6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	041a      	lsls	r2, r3, #16
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4413      	add	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004af4:	4b62      	ldr	r3, [pc, #392]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	0091      	lsls	r1, r2, #2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4413      	add	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004b20:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	0091      	lsls	r1, r2, #2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b3a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	041a      	lsls	r2, r3, #16
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	4413      	add	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004b62:	4b47      	ldr	r3, [pc, #284]	; (8004c80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0091      	lsls	r1, r2, #2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b7c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b98:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	061a      	lsls	r2, r3, #24
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb0:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009a      	lsls	r2, r3, #2
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c62:	fb01 f303 	mul.w	r3, r1, r3
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d915      	bls.n	8004ca8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c7c:	e006      	b.n	8004c8c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c7e:	bf00      	nop
 8004c80:	ffff0003 	.word	0xffff0003
 8004c84:	10002b00 	.word	0x10002b00
 8004c88:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e010      	b.n	8004cca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e005      	b.n	8004cbc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3f3      	bcc.n	8004cb0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	; 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ce6:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <HAL_GPIO_Init+0x234>)
 8004ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cea:	e194      	b.n	8005016 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8186 	beq.w	8005010 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d005      	beq.n	8004d1c <HAL_GPIO_Init+0x44>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d130      	bne.n	8004d7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	2203      	movs	r2, #3
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d52:	2201      	movs	r2, #1
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	f003 0201 	and.w	r2, r3, #1
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d017      	beq.n	8004dba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	2203      	movs	r2, #3
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d123      	bne.n	8004e0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	08da      	lsrs	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3208      	adds	r2, #8
 8004dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	220f      	movs	r2, #15
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	08da      	lsrs	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3208      	adds	r2, #8
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	2203      	movs	r2, #3
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0203 	and.w	r2, r3, #3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80e0 	beq.w	8005010 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e50:	4b2f      	ldr	r3, [pc, #188]	; (8004f10 <HAL_GPIO_Init+0x238>)
 8004e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e56:	4a2e      	ldr	r2, [pc, #184]	; (8004f10 <HAL_GPIO_Init+0x238>)
 8004e58:	f043 0302 	orr.w	r3, r3, #2
 8004e5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e60:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_GPIO_Init+0x238>)
 8004e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e6e:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <HAL_GPIO_Init+0x23c>)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	3302      	adds	r3, #2
 8004e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <HAL_GPIO_Init+0x240>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d052      	beq.n	8004f40 <HAL_GPIO_Init+0x268>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <HAL_GPIO_Init+0x244>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d031      	beq.n	8004f06 <HAL_GPIO_Init+0x22e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_GPIO_Init+0x248>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <HAL_GPIO_Init+0x22a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <HAL_GPIO_Init+0x24c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x226>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_GPIO_Init+0x250>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x222>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <HAL_GPIO_Init+0x254>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x21e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_GPIO_Init+0x258>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x21a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_GPIO_Init+0x25c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x216>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <HAL_GPIO_Init+0x260>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x212>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_GPIO_Init+0x264>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x20e>
 8004ee2:	2309      	movs	r3, #9
 8004ee4:	e02d      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004ee6:	230a      	movs	r3, #10
 8004ee8:	e02b      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004eea:	2308      	movs	r3, #8
 8004eec:	e029      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004eee:	2307      	movs	r3, #7
 8004ef0:	e027      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	e025      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	e023      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004efa:	2304      	movs	r3, #4
 8004efc:	e021      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004efe:	2303      	movs	r3, #3
 8004f00:	e01f      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e01d      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e01b      	b.n	8004f42 <HAL_GPIO_Init+0x26a>
 8004f0a:	bf00      	nop
 8004f0c:	58000080 	.word	0x58000080
 8004f10:	58024400 	.word	0x58024400
 8004f14:	58000400 	.word	0x58000400
 8004f18:	58020000 	.word	0x58020000
 8004f1c:	58020400 	.word	0x58020400
 8004f20:	58020800 	.word	0x58020800
 8004f24:	58020c00 	.word	0x58020c00
 8004f28:	58021000 	.word	0x58021000
 8004f2c:	58021400 	.word	0x58021400
 8004f30:	58021800 	.word	0x58021800
 8004f34:	58021c00 	.word	0x58021c00
 8004f38:	58022000 	.word	0x58022000
 8004f3c:	58022400 	.word	0x58022400
 8004f40:	2300      	movs	r3, #0
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	4093      	lsls	r3, r2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f52:	4938      	ldr	r1, [pc, #224]	; (8005034 <HAL_GPIO_Init+0x35c>)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f ae63 	bne.w	8004cec <HAL_GPIO_Init+0x14>
  }
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	3724      	adds	r7, #36	; 0x24
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	58000400 	.word	0x58000400

08005038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	e001      	b.n	800505a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	807b      	strh	r3, [r7, #2]
 8005074:	4613      	mov	r3, r2
 8005076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005078:	787b      	ldrb	r3, [r7, #1]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005084:	e003      	b.n	800508e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005086:	887b      	ldrh	r3, [r7, #2]
 8005088:	041a      	lsls	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4013      	ands	r3, r2
 80050b2:	041a      	lsls	r2, r3, #16
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	43d9      	mvns	r1, r3
 80050b8:	887b      	ldrh	r3, [r7, #2]
 80050ba:	400b      	ands	r3, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	619a      	str	r2, [r3, #24]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0bf      	b.n	8005262 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fdf0 	bl	8001cdc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005112:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005128:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b4a      	ldr	r3, [pc, #296]	; (800526c <HAL_LTDC_Init+0x19c>)
 8005144:	400b      	ands	r3, r1
 8005146:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68d9      	ldr	r1, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_LTDC_Init+0x19c>)
 8005172:	400b      	ands	r3, r1
 8005174:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68d9      	ldr	r1, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6919      	ldr	r1, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_LTDC_Init+0x19c>)
 80051a0:	400b      	ands	r3, r1
 80051a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6919      	ldr	r1, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6959      	ldr	r1, [r3, #20]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_LTDC_Init+0x19c>)
 80051ce:	400b      	ands	r3, r1
 80051d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6959      	ldr	r1, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0206 	orr.w	r2, r2, #6
 800523e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	f000f800 	.word	0xf000f800

08005270 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_LTDC_ConfigLayer+0x1a>
 8005286:	2302      	movs	r3, #2
 8005288:	e02c      	b.n	80052e4 <HAL_LTDC_ConfigLayer+0x74>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2134      	movs	r1, #52	; 0x34
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4614      	mov	r4, r2
 80052ae:	461d      	mov	r5, r3
 80052b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f811 	bl	80052ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2201      	movs	r2, #1
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bdb0      	pop	{r4, r5, r7, pc}

080052ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005308:	4413      	add	r3, r2
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	01db      	lsls	r3, r3, #7
 8005318:	4413      	add	r3, r2
 800531a:	3384      	adds	r3, #132	; 0x84
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	4611      	mov	r1, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	01d2      	lsls	r2, r2, #7
 8005328:	440a      	add	r2, r1
 800532a:	3284      	adds	r2, #132	; 0x84
 800532c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005330:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005342:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005344:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	01db      	lsls	r3, r3, #7
 8005350:	440b      	add	r3, r1
 8005352:	3384      	adds	r3, #132	; 0x84
 8005354:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800535a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536a:	4413      	add	r3, r2
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	01db      	lsls	r3, r3, #7
 800537a:	4413      	add	r3, r2
 800537c:	3384      	adds	r3, #132	; 0x84
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	4611      	mov	r1, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	01d2      	lsls	r2, r2, #7
 800538a:	440a      	add	r2, r1
 800538c:	3284      	adds	r2, #132	; 0x84
 800538e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005392:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a2:	4413      	add	r3, r2
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	440b      	add	r3, r1
 80053b2:	3384      	adds	r3, #132	; 0x84
 80053b4:	4619      	mov	r1, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	01db      	lsls	r3, r3, #7
 80053c6:	4413      	add	r3, r2
 80053c8:	3384      	adds	r3, #132	; 0x84
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	4611      	mov	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	01d2      	lsls	r2, r2, #7
 80053d6:	440a      	add	r2, r1
 80053d8:	3284      	adds	r2, #132	; 0x84
 80053da:	f023 0307 	bic.w	r3, r3, #7
 80053de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	01db      	lsls	r3, r3, #7
 80053ea:	4413      	add	r3, r2
 80053ec:	3384      	adds	r3, #132	; 0x84
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	061b      	lsls	r3, r3, #24
 8005410:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	01db      	lsls	r3, r3, #7
 800541c:	4413      	add	r3, r2
 800541e:	3384      	adds	r3, #132	; 0x84
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	4413      	add	r3, r2
 800542e:	3384      	adds	r3, #132	; 0x84
 8005430:	461a      	mov	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800543c:	461a      	mov	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	431a      	orrs	r2, r3
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	440b      	add	r3, r1
 8005452:	3384      	adds	r3, #132	; 0x84
 8005454:	4619      	mov	r1, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	01db      	lsls	r3, r3, #7
 8005466:	4413      	add	r3, r2
 8005468:	3384      	adds	r3, #132	; 0x84
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	4611      	mov	r1, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	01d2      	lsls	r2, r2, #7
 8005476:	440a      	add	r2, r1
 8005478:	3284      	adds	r2, #132	; 0x84
 800547a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	01db      	lsls	r3, r3, #7
 800548a:	4413      	add	r3, r2
 800548c:	3384      	adds	r3, #132	; 0x84
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	01db      	lsls	r3, r3, #7
 80054a0:	4413      	add	r3, r2
 80054a2:	3384      	adds	r3, #132	; 0x84
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	01db      	lsls	r3, r3, #7
 80054b0:	440b      	add	r3, r1
 80054b2:	3384      	adds	r3, #132	; 0x84
 80054b4:	4619      	mov	r1, r3
 80054b6:	4b58      	ldr	r3, [pc, #352]	; (8005618 <LTDC_SetConfig+0x32c>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	6809      	ldr	r1, [r1, #0]
 80054c8:	4608      	mov	r0, r1
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	01c9      	lsls	r1, r1, #7
 80054ce:	4401      	add	r1, r0
 80054d0:	3184      	adds	r1, #132	; 0x84
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	4413      	add	r3, r2
 80054e2:	3384      	adds	r3, #132	; 0x84
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	4413      	add	r3, r2
 80054f2:	3384      	adds	r3, #132	; 0x84
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4413      	add	r3, r2
 8005506:	3384      	adds	r3, #132	; 0x84
 8005508:	461a      	mov	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005518:	2304      	movs	r3, #4
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	e01b      	b.n	8005556 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d102      	bne.n	800552c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005526:	2303      	movs	r3, #3
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	e014      	b.n	8005556 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d00b      	beq.n	800554c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005538:	2b02      	cmp	r3, #2
 800553a:	d007      	beq.n	800554c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005540:	2b03      	cmp	r3, #3
 8005542:	d003      	beq.n	800554c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005548:	2b07      	cmp	r3, #7
 800554a:	d102      	bne.n	8005552 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800554c:	2302      	movs	r3, #2
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	e001      	b.n	8005556 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005552:	2301      	movs	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	01db      	lsls	r3, r3, #7
 8005560:	4413      	add	r3, r2
 8005562:	3384      	adds	r3, #132	; 0x84
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	4611      	mov	r1, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	01d2      	lsls	r2, r2, #7
 8005570:	440a      	add	r2, r1
 8005572:	3284      	adds	r2, #132	; 0x84
 8005574:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	041a      	lsls	r2, r3, #16
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1acb      	subs	r3, r1, r3
 8005590:	69f9      	ldr	r1, [r7, #28]
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	3307      	adds	r3, #7
 8005598:	68f9      	ldr	r1, [r7, #12]
 800559a:	6809      	ldr	r1, [r1, #0]
 800559c:	4608      	mov	r0, r1
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	01c9      	lsls	r1, r1, #7
 80055a2:	4401      	add	r1, r0
 80055a4:	3184      	adds	r1, #132	; 0x84
 80055a6:	4313      	orrs	r3, r2
 80055a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	01db      	lsls	r3, r3, #7
 80055b4:	4413      	add	r3, r2
 80055b6:	3384      	adds	r3, #132	; 0x84
 80055b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4619      	mov	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	01db      	lsls	r3, r3, #7
 80055c4:	440b      	add	r3, r1
 80055c6:	3384      	adds	r3, #132	; 0x84
 80055c8:	4619      	mov	r1, r3
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <LTDC_SetConfig+0x330>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	01db      	lsls	r3, r3, #7
 80055da:	4413      	add	r3, r2
 80055dc:	3384      	adds	r3, #132	; 0x84
 80055de:	461a      	mov	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	01db      	lsls	r3, r3, #7
 80055f0:	4413      	add	r3, r2
 80055f2:	3384      	adds	r3, #132	; 0x84
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4611      	mov	r1, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	01d2      	lsls	r2, r2, #7
 8005600:	440a      	add	r2, r1
 8005602:	3284      	adds	r2, #132	; 0x84
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	fffff8f8 	.word	0xfffff8f8
 800561c:	fffff800 	.word	0xfffff800

08005620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005622:	b08f      	sub	sp, #60	; 0x3c
 8005624:	af0a      	add	r7, sp, #40	; 0x28
 8005626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e116      	b.n	8005860 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fc fe65 	bl	800231c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2203      	movs	r2, #3
 8005656:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f005 ff15 	bl	800b4a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	687e      	ldr	r6, [r7, #4]
 800567e:	466d      	mov	r5, sp
 8005680:	f106 0410 	add.w	r4, r6, #16
 8005684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800568a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800568c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005690:	e885 0003 	stmia.w	r5, {r0, r1}
 8005694:	1d33      	adds	r3, r6, #4
 8005696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005698:	6838      	ldr	r0, [r7, #0]
 800569a:	f005 fe93 	bl	800b3c4 <USB_CoreInit>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0d7      	b.n	8005860 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f005 ff03 	bl	800b4c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]
 80056c0:	e04a      	b.n	8005758 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	333d      	adds	r3, #61	; 0x3d
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	333c      	adds	r3, #60	; 0x3c
 80056e6:	7bfa      	ldrb	r2, [r7, #15]
 80056e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056ea:	7bfa      	ldrb	r2, [r7, #15]
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	b298      	uxth	r0, r3
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3356      	adds	r3, #86	; 0x56
 80056fe:	4602      	mov	r2, r0
 8005700:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	3340      	adds	r3, #64	; 0x40
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3344      	adds	r3, #68	; 0x44
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3348      	adds	r3, #72	; 0x48
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800573e:	7bfa      	ldrb	r2, [r7, #15]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	334c      	adds	r3, #76	; 0x4c
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	3301      	adds	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	7bfa      	ldrb	r2, [r7, #15]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	d3af      	bcc.n	80056c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	e044      	b.n	80057f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800577e:	7bfa      	ldrb	r2, [r7, #15]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	3301      	adds	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	7bfa      	ldrb	r2, [r7, #15]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3b5      	bcc.n	8005768 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	687e      	ldr	r6, [r7, #4]
 8005804:	466d      	mov	r5, sp
 8005806:	f106 0410 	add.w	r4, r6, #16
 800580a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800580e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005816:	e885 0003 	stmia.w	r5, {r0, r1}
 800581a:	1d33      	adds	r3, r6, #4
 800581c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	f005 fe9c 	bl	800b55c <USB_DevInit>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e014      	b.n	8005860 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b01      	cmp	r3, #1
 800584c:	d102      	bne.n	8005854 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f80a 	bl	8005868 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f006 f85a 	bl	800b912 <USB_DevDisconnect>

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005868 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <HAL_PCDEx_ActivateLPM+0x44>)
 8005898:	4313      	orrs	r3, r2
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	10000003 	.word	0x10000003

080058b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_PWREx_ConfigSupply+0x70>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d00a      	beq.n	80058da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058c4:	4b16      	ldr	r3, [pc, #88]	; (8005920 <HAL_PWREx_ConfigSupply+0x70>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d001      	beq.n	80058d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e01f      	b.n	8005916 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e01d      	b.n	8005916 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <HAL_PWREx_ConfigSupply+0x70>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f023 0207 	bic.w	r2, r3, #7
 80058e2:	490f      	ldr	r1, [pc, #60]	; (8005920 <HAL_PWREx_ConfigSupply+0x70>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058ea:	f7fd f895 	bl	8002a18 <HAL_GetTick>
 80058ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058f0:	e009      	b.n	8005906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058f2:	f7fd f891 	bl	8002a18 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005900:	d901      	bls.n	8005906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e007      	b.n	8005916 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_PWREx_ConfigSupply+0x70>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005912:	d1ee      	bne.n	80058f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	58024800 	.word	0x58024800

08005924 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a04      	ldr	r2, [pc, #16]	; (8005940 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005932:	60d3      	str	r3, [r2, #12]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	58024800 	.word	0x58024800

08005944 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af02      	add	r7, sp, #8
 800594a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800594c:	f7fd f864 	bl	8002a18 <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e05f      	b.n	8005a1c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fc faa5 	bl	8001eb8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800596e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f85a 	bl	8005a2c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	3b01      	subs	r3, #1
 8005988:	021a      	lsls	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	2120      	movs	r1, #32
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f852 	bl	8005a48 <QSPI_WaitFlagStateUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d135      	bne.n	8005a1a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <HAL_QSPI_Init+0xe0>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6852      	ldr	r2, [r2, #4]
 80059bc:	0611      	lsls	r1, r2, #24
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	69d2      	ldr	r2, [r2, #28]
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6a12      	ldr	r2, [r2, #32]
 80059ce:	4311      	orrs	r1, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	430b      	orrs	r3, r1
 80059d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_QSPI_Init+0xe4>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6912      	ldr	r2, [r2, #16]
 80059e6:	0411      	lsls	r1, r2, #16
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6952      	ldr	r2, [r2, #20]
 80059ec:	4311      	orrs	r1, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6992      	ldr	r2, [r2, #24]
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	00ffff2f 	.word	0x00ffff2f
 8005a28:	ffe0f8fe 	.word	0xffe0f8fe

08005a2c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a58:	e01a      	b.n	8005a90 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d016      	beq.n	8005a90 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a62:	f7fc ffd9 	bl	8002a18 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d302      	bcc.n	8005a78 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10b      	bne.n	8005a90 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e00e      	b.n	8005aae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf14      	ite	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	2300      	moveq	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d1d6      	bne.n	8005a5a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f000 bc48 	b.w	800635c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8088 	beq.w	8005bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ada:	4b99      	ldr	r3, [pc, #612]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae4:	4b96      	ldr	r3, [pc, #600]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d007      	beq.n	8005b00 <HAL_RCC_OscConfig+0x48>
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	2b18      	cmp	r3, #24
 8005af4:	d111      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62>
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b00:	4b8f      	ldr	r3, [pc, #572]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d06d      	beq.n	8005be8 <HAL_RCC_OscConfig+0x130>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d169      	bne.n	8005be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f000 bc21 	b.w	800635c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b22:	d106      	bne.n	8005b32 <HAL_RCC_OscConfig+0x7a>
 8005b24:	4b86      	ldr	r3, [pc, #536]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a85      	ldr	r2, [pc, #532]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e02e      	b.n	8005b90 <HAL_RCC_OscConfig+0xd8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x9c>
 8005b3a:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a80      	ldr	r2, [pc, #512]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b7e      	ldr	r3, [pc, #504]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7d      	ldr	r2, [pc, #500]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e01d      	b.n	8005b90 <HAL_RCC_OscConfig+0xd8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0xc0>
 8005b5e:	4b78      	ldr	r3, [pc, #480]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a77      	ldr	r2, [pc, #476]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4b75      	ldr	r3, [pc, #468]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a74      	ldr	r2, [pc, #464]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e00b      	b.n	8005b90 <HAL_RCC_OscConfig+0xd8>
 8005b78:	4b71      	ldr	r3, [pc, #452]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a70      	ldr	r2, [pc, #448]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	4b6e      	ldr	r3, [pc, #440]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a6d      	ldr	r2, [pc, #436]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d013      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc ff3e 	bl	8002a18 <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba0:	f7fc ff3a 	bl	8002a18 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b64      	cmp	r3, #100	; 0x64
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e3d4      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bb2:	4b63      	ldr	r3, [pc, #396]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xe8>
 8005bbe:	e014      	b.n	8005bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fc ff2a 	bl	8002a18 <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fc ff26 	bl	8002a18 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e3c0      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bda:	4b59      	ldr	r3, [pc, #356]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x110>
 8005be6:	e000      	b.n	8005bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80ca 	beq.w	8005d8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf8:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c02:	4b4f      	ldr	r3, [pc, #316]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_RCC_OscConfig+0x166>
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2b18      	cmp	r3, #24
 8005c12:	d156      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x20a>
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d151      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c1e:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_RCC_OscConfig+0x17e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e392      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c36:	4b42      	ldr	r3, [pc, #264]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 0219 	bic.w	r2, r3, #25
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	493f      	ldr	r1, [pc, #252]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fc fee6 	bl	8002a18 <HAL_GetTick>
 8005c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c50:	f7fc fee2 	bl	8002a18 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e37c      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c62:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6e:	f7fc ff03 	bl	8002a78 <HAL_GetREVID>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d817      	bhi.n	8005cac <HAL_RCC_OscConfig+0x1f4>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d108      	bne.n	8005c96 <HAL_RCC_OscConfig+0x1de>
 8005c84:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c8c:	4a2c      	ldr	r2, [pc, #176]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c94:	e07a      	b.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c96:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	4926      	ldr	r1, [pc, #152]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005caa:	e06f      	b.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	4921      	ldr	r1, [pc, #132]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc0:	e064      	b.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d047      	beq.n	8005d5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cca:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 0219 	bic.w	r2, r3, #25
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	491a      	ldr	r1, [pc, #104]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fc fe9c 	bl	8002a18 <HAL_GetTick>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce4:	f7fc fe98 	bl	8002a18 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e332      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf6:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d02:	f7fc feb9 	bl	8002a78 <HAL_GetREVID>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d819      	bhi.n	8005d44 <HAL_RCC_OscConfig+0x28c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d108      	bne.n	8005d2a <HAL_RCC_OscConfig+0x272>
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d20:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d26:	6053      	str	r3, [r2, #4]
 8005d28:	e030      	b.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	031b      	lsls	r3, r3, #12
 8005d38:	4901      	ldr	r1, [pc, #4]	; (8005d40 <HAL_RCC_OscConfig+0x288>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	604b      	str	r3, [r1, #4]
 8005d3e:	e025      	b.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
 8005d40:	58024400 	.word	0x58024400
 8005d44:	4b9a      	ldr	r3, [pc, #616]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	4997      	ldr	r1, [pc, #604]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
 8005d58:	e018      	b.n	8005d8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5a:	4b95      	ldr	r3, [pc, #596]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a94      	ldr	r2, [pc, #592]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d66:	f7fc fe57 	bl	8002a18 <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6e:	f7fc fe53 	bl	8002a18 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e2ed      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d80:	4b8b      	ldr	r3, [pc, #556]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f0      	bne.n	8005d6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a9 	beq.w	8005eec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9a:	4b85      	ldr	r3, [pc, #532]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005da4:	4b82      	ldr	r3, [pc, #520]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d007      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x308>
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b18      	cmp	r3, #24
 8005db4:	d13a      	bne.n	8005e2c <HAL_RCC_OscConfig+0x374>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d135      	bne.n	8005e2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dc0:	4b7b      	ldr	r3, [pc, #492]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x320>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e2c1      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dd8:	f7fc fe4e 	bl	8002a78 <HAL_GetREVID>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d817      	bhi.n	8005e16 <HAL_RCC_OscConfig+0x35e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d108      	bne.n	8005e00 <HAL_RCC_OscConfig+0x348>
 8005dee:	4b70      	ldr	r3, [pc, #448]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005df6:	4a6e      	ldr	r2, [pc, #440]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dfc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dfe:	e075      	b.n	8005eec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e00:	4b6b      	ldr	r3, [pc, #428]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	069b      	lsls	r3, r3, #26
 8005e0e:	4968      	ldr	r1, [pc, #416]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e14:	e06a      	b.n	8005eec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e16:	4b66      	ldr	r3, [pc, #408]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	4962      	ldr	r1, [pc, #392]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e2a:	e05f      	b.n	8005eec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d042      	beq.n	8005eba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e34:	4b5e      	ldr	r3, [pc, #376]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a5d      	ldr	r2, [pc, #372]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fc fdea 	bl	8002a18 <HAL_GetTick>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e48:	f7fc fde6 	bl	8002a18 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e280      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e5a:	4b55      	ldr	r3, [pc, #340]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e66:	f7fc fe07 	bl	8002a78 <HAL_GetREVID>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d817      	bhi.n	8005ea4 <HAL_RCC_OscConfig+0x3ec>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d108      	bne.n	8005e8e <HAL_RCC_OscConfig+0x3d6>
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e84:	4a4a      	ldr	r2, [pc, #296]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e8a:	6053      	str	r3, [r2, #4]
 8005e8c:	e02e      	b.n	8005eec <HAL_RCC_OscConfig+0x434>
 8005e8e:	4b48      	ldr	r3, [pc, #288]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	069b      	lsls	r3, r3, #26
 8005e9c:	4944      	ldr	r1, [pc, #272]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	604b      	str	r3, [r1, #4]
 8005ea2:	e023      	b.n	8005eec <HAL_RCC_OscConfig+0x434>
 8005ea4:	4b42      	ldr	r3, [pc, #264]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	493f      	ldr	r1, [pc, #252]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60cb      	str	r3, [r1, #12]
 8005eb8:	e018      	b.n	8005eec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005eba:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a3c      	ldr	r2, [pc, #240]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec6:	f7fc fda7 	bl	8002a18 <HAL_GetTick>
 8005eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ece:	f7fc fda3 	bl	8002a18 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e23d      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ee0:	4b33      	ldr	r3, [pc, #204]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f0      	bne.n	8005ece <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d036      	beq.n	8005f66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d019      	beq.n	8005f34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f00:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fc fd84 	bl	8002a18 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f14:	f7fc fd80 	bl	8002a18 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e21a      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f26:	4b22      	ldr	r3, [pc, #136]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0x45c>
 8005f32:	e018      	b.n	8005f66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f40:	f7fc fd6a 	bl	8002a18 <HAL_GetTick>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f48:	f7fc fd66 	bl	8002a18 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e200      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1f0      	bne.n	8005f48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d039      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f86:	f7fc fd47 	bl	8002a18 <HAL_GetTick>
 8005f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f8e:	f7fc fd43 	bl	8002a18 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e1dd      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCC_OscConfig+0x4f8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCC_OscConfig+0x4d6>
 8005fac:	e01b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x52e>
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fb4:	4b9b      	ldr	r3, [pc, #620]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a9a      	ldr	r2, [pc, #616]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8005fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fc0:	f7fc fd2a 	bl	8002a18 <HAL_GetTick>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fc8:	f7fc fd26 	bl	8002a18 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e1c0      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fda:	4b92      	ldr	r3, [pc, #584]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8081 	beq.w	80060f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ff4:	4b8c      	ldr	r3, [pc, #560]	; (8006228 <HAL_RCC_OscConfig+0x770>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a8b      	ldr	r2, [pc, #556]	; (8006228 <HAL_RCC_OscConfig+0x770>)
 8005ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006000:	f7fc fd0a 	bl	8002a18 <HAL_GetTick>
 8006004:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006008:	f7fc fd06 	bl	8002a18 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e1a0      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800601a:	4b83      	ldr	r3, [pc, #524]	; (8006228 <HAL_RCC_OscConfig+0x770>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d106      	bne.n	800603c <HAL_RCC_OscConfig+0x584>
 800602e:	4b7d      	ldr	r3, [pc, #500]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	e02d      	b.n	8006098 <HAL_RCC_OscConfig+0x5e0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10c      	bne.n	800605e <HAL_RCC_OscConfig+0x5a6>
 8006044:	4b77      	ldr	r3, [pc, #476]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	4a76      	ldr	r2, [pc, #472]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	6713      	str	r3, [r2, #112]	; 0x70
 8006050:	4b74      	ldr	r3, [pc, #464]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4a73      	ldr	r2, [pc, #460]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006056:	f023 0304 	bic.w	r3, r3, #4
 800605a:	6713      	str	r3, [r2, #112]	; 0x70
 800605c:	e01c      	b.n	8006098 <HAL_RCC_OscConfig+0x5e0>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b05      	cmp	r3, #5
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x5c8>
 8006066:	4b6f      	ldr	r3, [pc, #444]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	4a6e      	ldr	r2, [pc, #440]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	6713      	str	r3, [r2, #112]	; 0x70
 8006072:	4b6c      	ldr	r3, [pc, #432]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	4a6b      	ldr	r2, [pc, #428]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6713      	str	r3, [r2, #112]	; 0x70
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0x5e0>
 8006080:	4b68      	ldr	r3, [pc, #416]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a67      	ldr	r2, [pc, #412]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
 800608c:	4b65      	ldr	r3, [pc, #404]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	4a64      	ldr	r2, [pc, #400]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006092:	f023 0304 	bic.w	r3, r3, #4
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fc fcba 	bl	8002a18 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a6:	e00a      	b.n	80060be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fc fcb6 	bl	8002a18 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e14e      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ee      	beq.n	80060a8 <HAL_RCC_OscConfig+0x5f0>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fc fca4 	bl	8002a18 <HAL_GetTick>
 80060d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fc fca0 	bl	8002a18 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e138      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060ea:	4b4e      	ldr	r3, [pc, #312]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ee      	bne.n	80060d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 812d 	beq.w	800635a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006100:	4b48      	ldr	r3, [pc, #288]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006108:	2b18      	cmp	r3, #24
 800610a:	f000 80bd 	beq.w	8006288 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	2b02      	cmp	r3, #2
 8006114:	f040 809e 	bne.w	8006254 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a41      	ldr	r2, [pc, #260]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800611e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fc fc78 	bl	8002a18 <HAL_GetTick>
 8006128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612c:	f7fc fc74 	bl	8002a18 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e10e      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800613e:	4b39      	ldr	r3, [pc, #228]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800614c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614e:	4b37      	ldr	r3, [pc, #220]	; (800622c <HAL_RCC_OscConfig+0x774>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800615a:	0112      	lsls	r2, r2, #4
 800615c:	430a      	orrs	r2, r1
 800615e:	4931      	ldr	r1, [pc, #196]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006160:	4313      	orrs	r3, r2
 8006162:	628b      	str	r3, [r1, #40]	; 0x28
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	3b01      	subs	r3, #1
 800616a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	3b01      	subs	r3, #1
 8006174:	025b      	lsls	r3, r3, #9
 8006176:	b29b      	uxth	r3, r3
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	3b01      	subs	r3, #1
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	3b01      	subs	r3, #1
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006194:	4923      	ldr	r1, [pc, #140]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800619a:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a21      	ldr	r2, [pc, #132]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061a6:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	4b21      	ldr	r3, [pc, #132]	; (8006230 <HAL_RCC_OscConfig+0x778>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061b2:	00d2      	lsls	r2, r2, #3
 80061b4:	491b      	ldr	r1, [pc, #108]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f023 020c 	bic.w	r2, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	4917      	ldr	r1, [pc, #92]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061cc:	4b15      	ldr	r3, [pc, #84]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f023 0202 	bic.w	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	4912      	ldr	r1, [pc, #72]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	4a10      	ldr	r2, [pc, #64]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 80061fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a04      	ldr	r2, [pc, #16]	; (8006224 <HAL_RCC_OscConfig+0x76c>)
 8006214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fc fbfd 	bl	8002a18 <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006220:	e011      	b.n	8006246 <HAL_RCC_OscConfig+0x78e>
 8006222:	bf00      	nop
 8006224:	58024400 	.word	0x58024400
 8006228:	58024800 	.word	0x58024800
 800622c:	fffffc0c 	.word	0xfffffc0c
 8006230:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fc fbf0 	bl	8002a18 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e08a      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006246:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x77c>
 8006252:	e082      	b.n	800635a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006254:	4b43      	ldr	r3, [pc, #268]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a42      	ldr	r2, [pc, #264]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 800625a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800625e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fc fbda 	bl	8002a18 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006268:	f7fc fbd6 	bl	8002a18 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e070      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800627a:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x7b0>
 8006286:	e068      	b.n	800635a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006288:	4b36      	ldr	r3, [pc, #216]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800628e:	4b35      	ldr	r3, [pc, #212]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b01      	cmp	r3, #1
 800629a:	d031      	beq.n	8006300 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f003 0203 	and.w	r2, r3, #3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d12a      	bne.n	8006300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d122      	bne.n	8006300 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d11a      	bne.n	8006300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	0a5b      	lsrs	r3, r3, #9
 80062ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062d8:	429a      	cmp	r2, r3
 80062da:	d111      	bne.n	8006300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d108      	bne.n	8006300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	0e1b      	lsrs	r3, r3, #24
 80062f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e02b      	b.n	800635c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006304:	4b17      	ldr	r3, [pc, #92]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006308:	08db      	lsrs	r3, r3, #3
 800630a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800630e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	d01f      	beq.n	800635a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	4a11      	ldr	r2, [pc, #68]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006326:	f7fc fb77 	bl	8002a18 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800632c:	bf00      	nop
 800632e:	f7fc fb73 	bl	8002a18 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	4293      	cmp	r3, r2
 8006338:	d0f9      	beq.n	800632e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 800633c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_RCC_OscConfig+0x8b0>)
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006346:	00d2      	lsls	r2, r2, #3
 8006348:	4906      	ldr	r1, [pc, #24]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 800634a:	4313      	orrs	r3, r2
 800634c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	4a04      	ldr	r2, [pc, #16]	; (8006364 <HAL_RCC_OscConfig+0x8ac>)
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3730      	adds	r7, #48	; 0x30
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	58024400 	.word	0x58024400
 8006368:	ffff0007 	.word	0xffff0007

0800636c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e19c      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006380:	4b8a      	ldr	r3, [pc, #552]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d910      	bls.n	80063b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638e:	4b87      	ldr	r3, [pc, #540]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 020f 	bic.w	r2, r3, #15
 8006396:	4985      	ldr	r1, [pc, #532]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639e:	4b83      	ldr	r3, [pc, #524]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e184      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d010      	beq.n	80063de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	4b7b      	ldr	r3, [pc, #492]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d908      	bls.n	80063de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063cc:	4b78      	ldr	r3, [pc, #480]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	4975      	ldr	r1, [pc, #468]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	4b70      	ldr	r3, [pc, #448]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d908      	bls.n	800640c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063fa:	4b6d      	ldr	r3, [pc, #436]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	496a      	ldr	r1, [pc, #424]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006408:	4313      	orrs	r3, r2
 800640a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	4b64      	ldr	r3, [pc, #400]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006424:	429a      	cmp	r2, r3
 8006426:	d908      	bls.n	800643a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	495e      	ldr	r1, [pc, #376]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006436:	4313      	orrs	r3, r2
 8006438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d010      	beq.n	8006468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69da      	ldr	r2, [r3, #28]
 800644a:	4b59      	ldr	r3, [pc, #356]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006452:	429a      	cmp	r2, r3
 8006454:	d908      	bls.n	8006468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006456:	4b56      	ldr	r3, [pc, #344]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	4953      	ldr	r1, [pc, #332]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006464:	4313      	orrs	r3, r2
 8006466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d010      	beq.n	8006496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	4b4d      	ldr	r3, [pc, #308]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	429a      	cmp	r2, r3
 8006482:	d908      	bls.n	8006496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006484:	4b4a      	ldr	r3, [pc, #296]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f023 020f 	bic.w	r2, r3, #15
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4947      	ldr	r1, [pc, #284]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006492:	4313      	orrs	r3, r2
 8006494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d055      	beq.n	800654e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064a2:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4940      	ldr	r1, [pc, #256]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d107      	bne.n	80064cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064bc:	4b3c      	ldr	r3, [pc, #240]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d121      	bne.n	800650c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0f6      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d107      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064d4:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0ea      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d107      	bne.n	80064fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064ec:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0de      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064fc:	4b2c      	ldr	r3, [pc, #176]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0d6      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800650c:	4b28      	ldr	r3, [pc, #160]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f023 0207 	bic.w	r2, r3, #7
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4925      	ldr	r1, [pc, #148]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800651a:	4313      	orrs	r3, r2
 800651c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651e:	f7fc fa7b 	bl	8002a18 <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006524:	e00a      	b.n	800653c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006526:	f7fc fa77 	bl	8002a18 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	f241 3288 	movw	r2, #5000	; 0x1388
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e0be      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653c:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	429a      	cmp	r2, r3
 800654c:	d1eb      	bne.n	8006526 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d010      	beq.n	800657c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	429a      	cmp	r2, r3
 8006568:	d208      	bcs.n	800657c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f023 020f 	bic.w	r2, r3, #15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	490e      	ldr	r1, [pc, #56]	; (80065b0 <HAL_RCC_ClockConfig+0x244>)
 8006578:	4313      	orrs	r3, r2
 800657a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d214      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658a:	4b08      	ldr	r3, [pc, #32]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 020f 	bic.w	r2, r3, #15
 8006592:	4906      	ldr	r1, [pc, #24]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	4313      	orrs	r3, r2
 8006598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <HAL_RCC_ClockConfig+0x240>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e086      	b.n	80066ba <HAL_RCC_ClockConfig+0x34e>
 80065ac:	52002000 	.word	0x52002000
 80065b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d010      	beq.n	80065e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	4b3f      	ldr	r3, [pc, #252]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d208      	bcs.n	80065e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065d0:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	4939      	ldr	r1, [pc, #228]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d208      	bcs.n	8006610 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065fe:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	492e      	ldr	r1, [pc, #184]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 800660c:	4313      	orrs	r3, r2
 800660e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006628:	429a      	cmp	r2, r3
 800662a:	d208      	bcs.n	800663e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	4922      	ldr	r1, [pc, #136]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 800663a:	4313      	orrs	r3, r2
 800663c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006656:	429a      	cmp	r2, r3
 8006658:	d208      	bcs.n	800666c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800665a:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4917      	ldr	r1, [pc, #92]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 8006668:	4313      	orrs	r3, r2
 800666a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800666c:	f000 f834 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	4912      	ldr	r1, [pc, #72]	; (80066c8 <HAL_RCC_ClockConfig+0x35c>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800668a:	4b0e      	ldr	r3, [pc, #56]	; (80066c4 <HAL_RCC_ClockConfig+0x358>)
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <HAL_RCC_ClockConfig+0x35c>)
 8006694:	5cd3      	ldrb	r3, [r2, r3]
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <HAL_RCC_ClockConfig+0x360>)
 80066a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066a4:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <HAL_RCC_ClockConfig+0x364>)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <HAL_RCC_ClockConfig+0x368>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fc f968 	bl	8002984 <HAL_InitTick>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
 80066c8:	0800c3c8 	.word	0x0800c3c8
 80066cc:	24000004 	.word	0x24000004
 80066d0:	24000000 	.word	0x24000000
 80066d4:	24000008 	.word	0x24000008

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	b089      	sub	sp, #36	; 0x24
 80066dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066de:	4bb3      	ldr	r3, [pc, #716]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e6:	2b18      	cmp	r3, #24
 80066e8:	f200 8155 	bhi.w	8006996 <HAL_RCC_GetSysClockFreq+0x2be>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006759 	.word	0x08006759
 80066f8:	08006997 	.word	0x08006997
 80066fc:	08006997 	.word	0x08006997
 8006700:	08006997 	.word	0x08006997
 8006704:	08006997 	.word	0x08006997
 8006708:	08006997 	.word	0x08006997
 800670c:	08006997 	.word	0x08006997
 8006710:	08006997 	.word	0x08006997
 8006714:	0800677f 	.word	0x0800677f
 8006718:	08006997 	.word	0x08006997
 800671c:	08006997 	.word	0x08006997
 8006720:	08006997 	.word	0x08006997
 8006724:	08006997 	.word	0x08006997
 8006728:	08006997 	.word	0x08006997
 800672c:	08006997 	.word	0x08006997
 8006730:	08006997 	.word	0x08006997
 8006734:	08006785 	.word	0x08006785
 8006738:	08006997 	.word	0x08006997
 800673c:	08006997 	.word	0x08006997
 8006740:	08006997 	.word	0x08006997
 8006744:	08006997 	.word	0x08006997
 8006748:	08006997 	.word	0x08006997
 800674c:	08006997 	.word	0x08006997
 8006750:	08006997 	.word	0x08006997
 8006754:	0800678b 	.word	0x0800678b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006758:	4b94      	ldr	r3, [pc, #592]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d009      	beq.n	8006778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006764:	4b91      	ldr	r3, [pc, #580]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	08db      	lsrs	r3, r3, #3
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	4a90      	ldr	r2, [pc, #576]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
 8006774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006776:	e111      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006778:	4b8d      	ldr	r3, [pc, #564]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800677a:	61bb      	str	r3, [r7, #24]
      break;
 800677c:	e10e      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800677e:	4b8d      	ldr	r3, [pc, #564]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006780:	61bb      	str	r3, [r7, #24]
      break;
 8006782:	e10b      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006784:	4b8c      	ldr	r3, [pc, #560]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006786:	61bb      	str	r3, [r7, #24]
      break;
 8006788:	e108      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800678a:	4b88      	ldr	r3, [pc, #544]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006794:	4b85      	ldr	r3, [pc, #532]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800679e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067a0:	4b82      	ldr	r3, [pc, #520]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067aa:	4b80      	ldr	r3, [pc, #512]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	08db      	lsrs	r3, r3, #3
 80067b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80e1 	beq.w	8006990 <HAL_RCC_GetSysClockFreq+0x2b8>
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f000 8083 	beq.w	80068dc <HAL_RCC_GetSysClockFreq+0x204>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	f200 80a1 	bhi.w	8006920 <HAL_RCC_GetSysClockFreq+0x248>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_RCC_GetSysClockFreq+0x114>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d056      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x1c0>
 80067ea:	e099      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ec:	4b6f      	ldr	r3, [pc, #444]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02d      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067f8:	4b6c      	ldr	r3, [pc, #432]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	08db      	lsrs	r3, r3, #3
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	4a6b      	ldr	r2, [pc, #428]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006804:	fa22 f303 	lsr.w	r3, r2, r3
 8006808:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	4b62      	ldr	r3, [pc, #392]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	ed97 6a02 	vldr	s12, [r7, #8]
 8006836:	eddf 5a61 	vldr	s11, [pc, #388]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800683a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006852:	e087      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80069c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b51      	ldr	r3, [pc, #324]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a02 	vldr	s12, [r7, #8]
 800687a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006896:	e065      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80069c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b40      	ldr	r3, [pc, #256]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80068be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068da:	e043      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80069c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006902:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800691e:	e021      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80069c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b1e      	ldr	r3, [pc, #120]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a02 	vldr	s12, [r7, #8]
 8006946:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006962:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006964:	4b11      	ldr	r3, [pc, #68]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	0a5b      	lsrs	r3, r3, #9
 800696a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696e:	3301      	adds	r3, #1
 8006970:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800697c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006988:	ee17 3a90 	vmov	r3, s15
 800698c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800698e:	e005      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
      break;
 8006994:	e002      	b.n	800699c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006998:	61bb      	str	r3, [r7, #24]
      break;
 800699a:	bf00      	nop
  }

  return sysclockfreq;
 800699c:	69bb      	ldr	r3, [r7, #24]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3724      	adds	r7, #36	; 0x24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	58024400 	.word	0x58024400
 80069b0:	03d09000 	.word	0x03d09000
 80069b4:	003d0900 	.word	0x003d0900
 80069b8:	017d7840 	.word	0x017d7840
 80069bc:	46000000 	.word	0x46000000
 80069c0:	4c742400 	.word	0x4c742400
 80069c4:	4a742400 	.word	0x4a742400
 80069c8:	4bbebc20 	.word	0x4bbebc20

080069cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069d2:	f7ff fe81 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 80069d6:	4602      	mov	r2, r0
 80069d8:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	490f      	ldr	r1, [pc, #60]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80069e4:	5ccb      	ldrb	r3, [r1, r3]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	fa22 f303 	lsr.w	r3, r2, r3
 80069ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80069fa:	5cd3      	ldrb	r3, [r2, r3]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a0a:	4a07      	ldr	r2, [pc, #28]	; (8006a28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	0800c3c8 	.word	0x0800c3c8
 8006a24:	24000004 	.word	0x24000004
 8006a28:	24000000 	.word	0x24000000

08006a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a30:	f7ff ffcc 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 8006a34:	4602      	mov	r2, r0
 8006a36:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	4904      	ldr	r1, [pc, #16]	; (8006a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a42:	5ccb      	ldrb	r3, [r1, r3]
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	58024400 	.word	0x58024400
 8006a54:	0800c3c8 	.word	0x0800c3c8

08006a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a5c:	f7ff ffb6 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 8006a60:	4602      	mov	r2, r0
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	4904      	ldr	r1, [pc, #16]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6e:	5ccb      	ldrb	r3, [r1, r3]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	0800c3c8 	.word	0x0800c3c8

08006a84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a88:	b0ca      	sub	sp, #296	; 0x128
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a96:	2300      	movs	r3, #0
 8006a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006aa8:	2500      	movs	r5, #0
 8006aaa:	ea54 0305 	orrs.w	r3, r4, r5
 8006aae:	d049      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aba:	d02f      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ac0:	d828      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ac6:	d01a      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006acc:	d822      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad6:	d007      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ad8:	e01c      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ada:	4bb8      	ldr	r3, [pc, #736]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	4ab7      	ldr	r2, [pc, #732]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ae6:	e01a      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aec:	3308      	adds	r3, #8
 8006aee:	2102      	movs	r1, #2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f002 fb61 	bl	80091b8 <RCCEx_PLL2_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006afc:	e00f      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b02:	3328      	adds	r3, #40	; 0x28
 8006b04:	2102      	movs	r1, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 fc08 	bl	800931c <RCCEx_PLL3_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b12:	e004      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b1a:	e000      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b26:	4ba5      	ldr	r3, [pc, #660]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b34:	4aa1      	ldr	r2, [pc, #644]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b36:	430b      	orrs	r3, r1
 8006b38:	6513      	str	r3, [r2, #80]	; 0x50
 8006b3a:	e003      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	ea58 0309 	orrs.w	r3, r8, r9
 8006b58:	d047      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d82a      	bhi.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b64:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b81 	.word	0x08006b81
 8006b70:	08006b8f 	.word	0x08006b8f
 8006b74:	08006ba5 	.word	0x08006ba5
 8006b78:	08006bc3 	.word	0x08006bc3
 8006b7c:	08006bc3 	.word	0x08006bc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b80:	4b8e      	ldr	r3, [pc, #568]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	4a8d      	ldr	r2, [pc, #564]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e01a      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b92:	3308      	adds	r3, #8
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f002 fb0e 	bl	80091b8 <RCCEx_PLL2_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ba2:	e00f      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba8:	3328      	adds	r3, #40	; 0x28
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f002 fbb5 	bl	800931c <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bb8:	e004      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bcc:	4b7b      	ldr	r3, [pc, #492]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	f023 0107 	bic.w	r1, r3, #7
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	4a78      	ldr	r2, [pc, #480]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6513      	str	r3, [r2, #80]	; 0x50
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006bf6:	f04f 0b00 	mov.w	fp, #0
 8006bfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bfe:	d04c      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0a:	d030      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c10:	d829      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c12:	2bc0      	cmp	r3, #192	; 0xc0
 8006c14:	d02d      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006c16:	2bc0      	cmp	r3, #192	; 0xc0
 8006c18:	d825      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d018      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006c1e:	2b80      	cmp	r3, #128	; 0x80
 8006c20:	d821      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d007      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006c2a:	e01c      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c2c:	4b63      	ldr	r3, [pc, #396]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a62      	ldr	r2, [pc, #392]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c38:	e01c      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3e:	3308      	adds	r3, #8
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f002 fab8 	bl	80091b8 <RCCEx_PLL2_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c4e:	e011      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c54:	3328      	adds	r3, #40	; 0x28
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f002 fb5f 	bl	800931c <RCCEx_PLL3_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c64:	e006      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c6c:	e002      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c6e:	bf00      	nop
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c7c:	4b4f      	ldr	r3, [pc, #316]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8a:	4a4c      	ldr	r2, [pc, #304]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6513      	str	r3, [r2, #80]	; 0x50
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006ca6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d053      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cc6:	d035      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ccc:	d82e      	bhi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006cce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cd2:	d031      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006cd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cd8:	d828      	bhi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cde:	d01a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ce4:	d822      	bhi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cee:	d007      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006cf0:	e01c      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf2:	4b32      	ldr	r3, [pc, #200]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	4a31      	ldr	r2, [pc, #196]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e01c      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d04:	3308      	adds	r3, #8
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 fa55 	bl	80091b8 <RCCEx_PLL2_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d14:	e011      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1a:	3328      	adds	r3, #40	; 0x28
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f002 fafc 	bl	800931c <RCCEx_PLL3_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d2a:	e006      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d42:	4b1e      	ldr	r3, [pc, #120]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d52:	4a1a      	ldr	r2, [pc, #104]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6593      	str	r3, [r2, #88]	; 0x58
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d056      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d8e:	d038      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d94:	d831      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d9a:	d034      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006da0:	d82b      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006da6:	d01d      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dac:	d825      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006db2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006db6:	d00a      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006db8:	e01f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dba:	bf00      	nop
 8006dbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc0:	4ba2      	ldr	r3, [pc, #648]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	4aa1      	ldr	r2, [pc, #644]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dcc:	e01c      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f002 f9ee 	bl	80091b8 <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006de2:	e011      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de8:	3328      	adds	r3, #40	; 0x28
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 fa95 	bl	800931c <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e00:	e002      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006e02:	bf00      	nop
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10b      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e10:	4b8e      	ldr	r3, [pc, #568]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e20:	4a8a      	ldr	r2, [pc, #552]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e22:	430b      	orrs	r3, r1
 8006e24:	6593      	str	r3, [r2, #88]	; 0x58
 8006e26:	e003      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e40:	2300      	movs	r3, #0
 8006e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d03a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e56:	2b30      	cmp	r3, #48	; 0x30
 8006e58:	d01f      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006e5a:	2b30      	cmp	r3, #48	; 0x30
 8006e5c:	d819      	bhi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d00c      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d815      	bhi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d019      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d111      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6e:	4b77      	ldr	r3, [pc, #476]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4a76      	ldr	r2, [pc, #472]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e7a:	e011      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e80:	3308      	adds	r3, #8
 8006e82:	2102      	movs	r1, #2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f002 f997 	bl	80091b8 <RCCEx_PLL2_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e90:	e006      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e98:	e002      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e9a:	bf00      	nop
 8006e9c:	e000      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ea8:	4b68      	ldr	r3, [pc, #416]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	4a65      	ldr	r2, [pc, #404]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ebc:	e003      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006edc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	d051      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d035      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef6:	d82e      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efc:	d031      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f02:	d828      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f08:	d01a      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	d822      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f18:	d007      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006f1a:	e01c      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4b4b      	ldr	r3, [pc, #300]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a4a      	ldr	r2, [pc, #296]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f28:	e01c      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2e:	3308      	adds	r3, #8
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 f940 	bl	80091b8 <RCCEx_PLL2_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f3e:	e011      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f44:	3328      	adds	r3, #40	; 0x28
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 f9e7 	bl	800931c <RCCEx_PLL3_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f54:	e006      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f6c:	4b37      	ldr	r3, [pc, #220]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7a:	4a34      	ldr	r2, [pc, #208]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6513      	str	r3, [r2, #80]	; 0x50
 8006f80:	e003      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d056      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb4:	d033      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fba:	d82c      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fc0:	d02f      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fc6:	d826      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fcc:	d02b      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006fce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fd2:	d820      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd8:	d012      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fde:	d81a      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d022      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe8:	d115      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fee:	3308      	adds	r3, #8
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f002 f8e0 	bl	80091b8 <RCCEx_PLL2_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ffe:	e015      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007004:	3328      	adds	r3, #40	; 0x28
 8007006:	2101      	movs	r1, #1
 8007008:	4618      	mov	r0, r3
 800700a:	f002 f987 	bl	800931c <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007014:	e00a      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800701c:	e006      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800701e:	bf00      	nop
 8007020:	e004      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800702a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10d      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007038:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007042:	4a02      	ldr	r2, [pc, #8]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007044:	430b      	orrs	r3, r1
 8007046:	6513      	str	r3, [r2, #80]	; 0x50
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800706e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d055      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007084:	d033      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800708a:	d82c      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d02f      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d826      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800709c:	d02b      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800709e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070a2:	d820      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a8:	d012      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80070aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ae:	d81a      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d022      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80070b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b8:	d115      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070be:	3308      	adds	r3, #8
 80070c0:	2101      	movs	r1, #1
 80070c2:	4618      	mov	r0, r3
 80070c4:	f002 f878 	bl	80091b8 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070ce:	e015      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d4:	3328      	adds	r3, #40	; 0x28
 80070d6:	2101      	movs	r1, #1
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 f91f 	bl	800931c <RCCEx_PLL3_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070e4:	e00a      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070ec:	e006      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070ee:	bf00      	nop
 80070f0:	e004      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070f2:	bf00      	nop
 80070f4:	e002      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070f6:	bf00      	nop
 80070f8:	e000      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007104:	4ba3      	ldr	r3, [pc, #652]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007108:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007114:	4a9f      	ldr	r2, [pc, #636]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007116:	430b      	orrs	r3, r1
 8007118:	6593      	str	r3, [r2, #88]	; 0x58
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007134:	2300      	movs	r3, #0
 8007136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800713a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800713e:	460b      	mov	r3, r1
 8007140:	4313      	orrs	r3, r2
 8007142:	d037      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800714e:	d00e      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007154:	d816      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800715a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800715e:	d111      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007160:	4b8c      	ldr	r3, [pc, #560]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	4a8b      	ldr	r2, [pc, #556]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800716c:	e00f      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007172:	3308      	adds	r3, #8
 8007174:	2101      	movs	r1, #1
 8007176:	4618      	mov	r0, r3
 8007178:	f002 f81e 	bl	80091b8 <RCCEx_PLL2_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007182:	e004      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800718a:	e000      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800718c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007196:	4b7f      	ldr	r3, [pc, #508]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	4a7b      	ldr	r2, [pc, #492]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071a6:	430b      	orrs	r3, r1
 80071a8:	6513      	str	r3, [r2, #80]	; 0x50
 80071aa:	e003      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80071c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4313      	orrs	r3, r2
 80071d2:	d039      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d81c      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007221 	.word	0x08007221
 80071e8:	080071f5 	.word	0x080071f5
 80071ec:	08007203 	.word	0x08007203
 80071f0:	08007221 	.word	0x08007221
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f4:	4b67      	ldr	r3, [pc, #412]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	4a66      	ldr	r2, [pc, #408]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007200:	e00f      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007206:	3308      	adds	r3, #8
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f001 ffd4 	bl	80091b8 <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007216:	e004      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800721e:	e000      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800722a:	4b5a      	ldr	r3, [pc, #360]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800722c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722e:	f023 0103 	bic.w	r1, r3, #3
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007238:	4a56      	ldr	r2, [pc, #344]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800723a:	430b      	orrs	r3, r1
 800723c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800723e:	e003      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007258:	2300      	movs	r3, #0
 800725a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800725e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007262:	460b      	mov	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	f000 809f 	beq.w	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800726a:	4b4b      	ldr	r3, [pc, #300]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a4a      	ldr	r2, [pc, #296]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007276:	f7fb fbcf 	bl	8002a18 <HAL_GetTick>
 800727a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800727e:	e00b      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007280:	f7fb fbca 	bl	8002a18 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b64      	cmp	r3, #100	; 0x64
 800728e:	d903      	bls.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007296:	e005      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007298:	4b3f      	ldr	r3, [pc, #252]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ed      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d179      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072ac:	4b39      	ldr	r3, [pc, #228]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072b8:	4053      	eors	r3, r2
 80072ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d015      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072c2:	4b34      	ldr	r3, [pc, #208]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072ce:	4b31      	ldr	r3, [pc, #196]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	4a30      	ldr	r2, [pc, #192]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072da:	4b2e      	ldr	r3, [pc, #184]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072e6:	4a2b      	ldr	r2, [pc, #172]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	d118      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fb fb8c 	bl	8002a18 <HAL_GetTick>
 8007300:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007304:	e00d      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007306:	f7fb fb87 	bl	8002a18 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007310:	1ad2      	subs	r2, r2, r3
 8007312:	f241 3388 	movw	r3, #5000	; 0x1388
 8007316:	429a      	cmp	r2, r3
 8007318:	d903      	bls.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007320:	e005      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007322:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0eb      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800732e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007332:	2b00      	cmp	r3, #0
 8007334:	d129      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800733e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007346:	d10e      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007348:	4b12      	ldr	r3, [pc, #72]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007358:	091a      	lsrs	r2, r3, #4
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800735c:	4013      	ands	r3, r2
 800735e:	4a0d      	ldr	r2, [pc, #52]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007360:	430b      	orrs	r3, r1
 8007362:	6113      	str	r3, [r2, #16]
 8007364:	e005      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800736c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007370:	6113      	str	r3, [r2, #16]
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007374:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800737e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007382:	4a04      	ldr	r2, [pc, #16]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007384:	430b      	orrs	r3, r1
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	e00e      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800738a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800738e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007392:	e009      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007394:	58024400 	.word	0x58024400
 8007398:	58024800 	.word	0x58024800
 800739c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 0301 	and.w	r3, r2, #1
 80073b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f000 8089 	beq.w	80074dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d0:	2b28      	cmp	r3, #40	; 0x28
 80073d2:	d86b      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	080074b5 	.word	0x080074b5
 80073e0:	080074ad 	.word	0x080074ad
 80073e4:	080074ad 	.word	0x080074ad
 80073e8:	080074ad 	.word	0x080074ad
 80073ec:	080074ad 	.word	0x080074ad
 80073f0:	080074ad 	.word	0x080074ad
 80073f4:	080074ad 	.word	0x080074ad
 80073f8:	080074ad 	.word	0x080074ad
 80073fc:	08007481 	.word	0x08007481
 8007400:	080074ad 	.word	0x080074ad
 8007404:	080074ad 	.word	0x080074ad
 8007408:	080074ad 	.word	0x080074ad
 800740c:	080074ad 	.word	0x080074ad
 8007410:	080074ad 	.word	0x080074ad
 8007414:	080074ad 	.word	0x080074ad
 8007418:	080074ad 	.word	0x080074ad
 800741c:	08007497 	.word	0x08007497
 8007420:	080074ad 	.word	0x080074ad
 8007424:	080074ad 	.word	0x080074ad
 8007428:	080074ad 	.word	0x080074ad
 800742c:	080074ad 	.word	0x080074ad
 8007430:	080074ad 	.word	0x080074ad
 8007434:	080074ad 	.word	0x080074ad
 8007438:	080074ad 	.word	0x080074ad
 800743c:	080074b5 	.word	0x080074b5
 8007440:	080074ad 	.word	0x080074ad
 8007444:	080074ad 	.word	0x080074ad
 8007448:	080074ad 	.word	0x080074ad
 800744c:	080074ad 	.word	0x080074ad
 8007450:	080074ad 	.word	0x080074ad
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074ad 	.word	0x080074ad
 800745c:	080074b5 	.word	0x080074b5
 8007460:	080074ad 	.word	0x080074ad
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074ad 	.word	0x080074ad
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074b5 	.word	0x080074b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007484:	3308      	adds	r3, #8
 8007486:	2101      	movs	r1, #1
 8007488:	4618      	mov	r0, r3
 800748a:	f001 fe95 	bl	80091b8 <RCCEx_PLL2_Config>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007494:	e00f      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749a:	3328      	adds	r3, #40	; 0x28
 800749c:	2101      	movs	r1, #1
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 ff3c 	bl	800931c <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074aa:	e004      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074b2:	e000      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80074b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074be:	4bbf      	ldr	r3, [pc, #764]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074cc:	4abb      	ldr	r2, [pc, #748]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074ce:	430b      	orrs	r3, r1
 80074d0:	6553      	str	r3, [r2, #84]	; 0x54
 80074d2:	e003      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f002 0302 	and.w	r3, r2, #2
 80074e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074ec:	2300      	movs	r3, #0
 80074ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80074f6:	460b      	mov	r3, r1
 80074f8:	4313      	orrs	r3, r2
 80074fa:	d041      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007502:	2b05      	cmp	r3, #5
 8007504:	d824      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007559 	.word	0x08007559
 8007510:	08007525 	.word	0x08007525
 8007514:	0800753b 	.word	0x0800753b
 8007518:	08007559 	.word	0x08007559
 800751c:	08007559 	.word	0x08007559
 8007520:	08007559 	.word	0x08007559
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007528:	3308      	adds	r3, #8
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fe43 	bl	80091b8 <RCCEx_PLL2_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007538:	e00f      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800753a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753e:	3328      	adds	r3, #40	; 0x28
 8007540:	2101      	movs	r1, #1
 8007542:	4618      	mov	r0, r3
 8007544:	f001 feea 	bl	800931c <RCCEx_PLL3_Config>
 8007548:	4603      	mov	r3, r0
 800754a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800754e:	e004      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007556:	e000      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800755a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007562:	4b96      	ldr	r3, [pc, #600]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	f023 0107 	bic.w	r1, r3, #7
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007570:	4a92      	ldr	r2, [pc, #584]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007572:	430b      	orrs	r3, r1
 8007574:	6553      	str	r3, [r2, #84]	; 0x54
 8007576:	e003      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800757c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f002 0304 	and.w	r3, r2, #4
 800758c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007590:	2300      	movs	r3, #0
 8007592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007596:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800759a:	460b      	mov	r3, r1
 800759c:	4313      	orrs	r3, r2
 800759e:	d044      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	d825      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	08007601 	.word	0x08007601
 80075b8:	080075cd 	.word	0x080075cd
 80075bc:	080075e3 	.word	0x080075e3
 80075c0:	08007601 	.word	0x08007601
 80075c4:	08007601 	.word	0x08007601
 80075c8:	08007601 	.word	0x08007601
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d0:	3308      	adds	r3, #8
 80075d2:	2101      	movs	r1, #1
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 fdef 	bl	80091b8 <RCCEx_PLL2_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075e0:	e00f      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e6:	3328      	adds	r3, #40	; 0x28
 80075e8:	2101      	movs	r1, #1
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 fe96 	bl	800931c <RCCEx_PLL3_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075f6:	e004      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800760a:	4b6c      	ldr	r3, [pc, #432]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	f023 0107 	bic.w	r1, r3, #7
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800761a:	4a68      	ldr	r2, [pc, #416]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800761c:	430b      	orrs	r3, r1
 800761e:	6593      	str	r3, [r2, #88]	; 0x58
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f002 0320 	and.w	r3, r2, #32
 8007636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d055      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007656:	d033      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800765c:	d82c      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800765e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007662:	d02f      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d826      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800766a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800766e:	d02b      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007670:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007674:	d820      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767a:	d012      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800767c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007680:	d81a      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d022      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800768a:	d115      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	3308      	adds	r3, #8
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f001 fd8f 	bl	80091b8 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80076a0:	e015      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a6:	3328      	adds	r3, #40	; 0x28
 80076a8:	2102      	movs	r1, #2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 fe36 	bl	800931c <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80076b6:	e00a      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076be:	e006      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076d6:	4b39      	ldr	r3, [pc, #228]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e6:	4a35      	ldr	r2, [pc, #212]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6553      	str	r3, [r2, #84]	; 0x54
 80076ec:	e003      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800770c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d058      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800771e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007722:	d033      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007728:	d82c      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d02f      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007734:	d826      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800773a:	d02b      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800773c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007740:	d820      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007746:	d012      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800774c:	d81a      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d022      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007756:	d115      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775c:	3308      	adds	r3, #8
 800775e:	2100      	movs	r1, #0
 8007760:	4618      	mov	r0, r3
 8007762:	f001 fd29 	bl	80091b8 <RCCEx_PLL2_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800776c:	e015      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	3328      	adds	r3, #40	; 0x28
 8007774:	2102      	movs	r1, #2
 8007776:	4618      	mov	r0, r3
 8007778:	f001 fdd0 	bl	800931c <RCCEx_PLL3_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007782:	e00a      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800778a:	e006      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800778c:	bf00      	nop
 800778e:	e004      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007790:	bf00      	nop
 8007792:	e002      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007794:	bf00      	nop
 8007796:	e000      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10e      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b2:	4a02      	ldr	r2, [pc, #8]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6593      	str	r3, [r2, #88]	; 0x58
 80077b8:	e006      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80077d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80077e2:	460b      	mov	r3, r1
 80077e4:	4313      	orrs	r3, r2
 80077e6:	d055      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077f4:	d033      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80077f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077fa:	d82c      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007800:	d02f      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007806:	d826      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007808:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800780c:	d02b      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800780e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007812:	d820      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007818:	d012      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800781a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800781e:	d81a      	bhi.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d022      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007828:	d115      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782e:	3308      	adds	r3, #8
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f001 fcc0 	bl	80091b8 <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800783e:	e015      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007844:	3328      	adds	r3, #40	; 0x28
 8007846:	2102      	movs	r1, #2
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fd67 	bl	800931c <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007854:	e00a      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800785c:	e006      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800785e:	bf00      	nop
 8007860:	e004      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007862:	bf00      	nop
 8007864:	e002      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800786a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007874:	4ba1      	ldr	r3, [pc, #644]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007878:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007884:	4a9d      	ldr	r2, [pc, #628]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007886:	430b      	orrs	r3, r1
 8007888:	6593      	str	r3, [r2, #88]	; 0x58
 800788a:	e003      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007890:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f002 0308 	and.w	r3, r2, #8
 80078a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80078ae:	460b      	mov	r3, r1
 80078b0:	4313      	orrs	r3, r2
 80078b2:	d01e      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d10c      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c6:	3328      	adds	r3, #40	; 0x28
 80078c8:	2102      	movs	r1, #2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fd26 	bl	800931c <RCCEx_PLL3_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078dc:	4b87      	ldr	r3, [pc, #540]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ec:	4a83      	ldr	r2, [pc, #524]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ee:	430b      	orrs	r3, r1
 80078f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f002 0310 	and.w	r3, r2, #16
 80078fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007902:	2300      	movs	r3, #0
 8007904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007908:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800790c:	460b      	mov	r3, r1
 800790e:	4313      	orrs	r3, r2
 8007910:	d01e      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800791a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791e:	d10c      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007924:	3328      	adds	r3, #40	; 0x28
 8007926:	2102      	movs	r1, #2
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fcf7 	bl	800931c <RCCEx_PLL3_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800793a:	4b70      	ldr	r3, [pc, #448]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800793c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800794a:	4a6c      	ldr	r2, [pc, #432]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800794c:	430b      	orrs	r3, r1
 800794e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800795c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007960:	2300      	movs	r3, #0
 8007962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007966:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800796a:	460b      	mov	r3, r1
 800796c:	4313      	orrs	r3, r2
 800796e:	d03e      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800797c:	d022      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800797e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007982:	d81b      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d00b      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800798e:	e015      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007994:	3308      	adds	r3, #8
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fc0d 	bl	80091b8 <RCCEx_PLL2_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079a4:	e00f      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	3328      	adds	r3, #40	; 0x28
 80079ac:	2102      	movs	r1, #2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 fcb4 	bl	800931c <RCCEx_PLL3_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079ba:	e004      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079c2:	e000      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80079c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079ce:	4b4b      	ldr	r3, [pc, #300]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079de:	4a47      	ldr	r2, [pc, #284]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079e0:	430b      	orrs	r3, r1
 80079e2:	6593      	str	r3, [r2, #88]	; 0x58
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80079fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80079fc:	2300      	movs	r3, #0
 80079fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007a04:	460b      	mov	r3, r1
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d03b      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a16:	d01f      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a1c:	d818      	bhi.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a22:	d003      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a28:	d007      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007a2a:	e011      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2c:	4b33      	ldr	r3, [pc, #204]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4a32      	ldr	r2, [pc, #200]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a38:	e00f      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3e:	3328      	adds	r3, #40	; 0x28
 8007a40:	2101      	movs	r1, #1
 8007a42:	4618      	mov	r0, r3
 8007a44:	f001 fc6a 	bl	800931c <RCCEx_PLL3_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a4e:	e004      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a56:	e000      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a62:	4b26      	ldr	r3, [pc, #152]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	4a22      	ldr	r2, [pc, #136]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6553      	str	r3, [r2, #84]	; 0x54
 8007a78:	e003      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a90:	2300      	movs	r3, #0
 8007a92:	677b      	str	r3, [r7, #116]	; 0x74
 8007a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d034      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aac:	d007      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007aae:	e011      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab0:	4b12      	ldr	r3, [pc, #72]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	4a11      	ldr	r2, [pc, #68]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007abc:	e00e      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fb76 	bl	80091b8 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ad2:	e003      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10d      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ae4:	4b05      	ldr	r3, [pc, #20]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af2:	4a02      	ldr	r2, [pc, #8]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007af4:	430b      	orrs	r3, r1
 8007af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b16:	2300      	movs	r3, #0
 8007b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d00c      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b28:	3328      	adds	r3, #40	; 0x28
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fbf5 	bl	800931c <RCCEx_PLL3_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8007b50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007b54:	460b      	mov	r3, r1
 8007b56:	4313      	orrs	r3, r2
 8007b58:	d038      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b66:	d018      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6c:	d811      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b72:	d014      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b78:	d80b      	bhi.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d011      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b82:	d106      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b84:	4bc3      	ldr	r3, [pc, #780]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4ac2      	ldr	r2, [pc, #776]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b90:	e008      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b98:	e004      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b9a:	bf00      	nop
 8007b9c:	e002      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bac:	4bb9      	ldr	r3, [pc, #740]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bbc:	4ab5      	ldr	r2, [pc, #724]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	6553      	str	r3, [r2, #84]	; 0x54
 8007bc2:	e003      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bda:	2300      	movs	r3, #0
 8007bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007be8:	4baa      	ldr	r3, [pc, #680]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf6:	4aa7      	ldr	r2, [pc, #668]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007c08:	653b      	str	r3, [r7, #80]	; 0x50
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007c12:	460b      	mov	r3, r1
 8007c14:	4313      	orrs	r3, r2
 8007c16:	d00a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c18:	4b9e      	ldr	r3, [pc, #632]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c28:	4a9a      	ldr	r2, [pc, #616]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d009      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c4a:	4b92      	ldr	r3, [pc, #584]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c58:	4a8e      	ldr	r2, [pc, #568]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c5a:	430b      	orrs	r3, r1
 8007c5c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007c74:	460b      	mov	r3, r1
 8007c76:	4313      	orrs	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c7a:	4b86      	ldr	r3, [pc, #536]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	4a85      	ldr	r2, [pc, #532]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c84:	6113      	str	r3, [r2, #16]
 8007c86:	4b83      	ldr	r3, [pc, #524]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c88:	6919      	ldr	r1, [r3, #16]
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c92:	4a80      	ldr	r2, [pc, #512]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007caa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007cb4:	4b77      	ldr	r3, [pc, #476]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	4a74      	ldr	r2, [pc, #464]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d00a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ce4:	4b6b      	ldr	r3, [pc, #428]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf4:	4a67      	ldr	r2, [pc, #412]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	2100      	movs	r1, #0
 8007d04:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d011      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 fa4a 	bl	80091b8 <RCCEx_PLL2_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	2100      	movs	r1, #0
 8007d44:	6239      	str	r1, [r7, #32]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d50:	460b      	mov	r3, r1
 8007d52:	4313      	orrs	r3, r2
 8007d54:	d011      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fa2a 	bl	80091b8 <RCCEx_PLL2_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	2100      	movs	r1, #0
 8007d84:	61b9      	str	r1, [r7, #24]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d90:	460b      	mov	r3, r1
 8007d92:	4313      	orrs	r3, r2
 8007d94:	d011      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	2102      	movs	r1, #2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fa0a 	bl	80091b8 <RCCEx_PLL2_Config>
 8007da4:	4603      	mov	r3, r0
 8007da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007db6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	6139      	str	r1, [r7, #16]
 8007dc6:	f003 0308 	and.w	r3, r3, #8
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	d011      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dda:	3328      	adds	r3, #40	; 0x28
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 fa9c 	bl	800931c <RCCEx_PLL3_Config>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	2100      	movs	r1, #0
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e10:	460b      	mov	r3, r1
 8007e12:	4313      	orrs	r3, r2
 8007e14:	d011      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1a:	3328      	adds	r3, #40	; 0x28
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 fa7c 	bl	800931c <RCCEx_PLL3_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	2100      	movs	r1, #0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e50:	460b      	mov	r3, r1
 8007e52:	4313      	orrs	r3, r2
 8007e54:	d011      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5a:	3328      	adds	r3, #40	; 0x28
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 fa5c 	bl	800931c <RCCEx_PLL3_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007e7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e000      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e94:	58024400 	.word	0x58024400

08007e98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b090      	sub	sp, #64	; 0x40
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	f040 8094 	bne.w	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007eb0:	4b9e      	ldr	r3, [pc, #632]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	f200 8087 	bhi.w	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007edd 	.word	0x08007edd
 8007ecc:	08007f05 	.word	0x08007f05
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007fc9 	.word	0x08007fc9
 8007ed8:	08007f55 	.word	0x08007f55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007edc:	4b93      	ldr	r3, [pc, #588]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ee8:	d108      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f001 f810 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef8:	f000 bd45 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f00:	f000 bd41 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f04:	4b89      	ldr	r3, [pc, #548]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f10:	d108      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f12:	f107 0318 	add.w	r3, r7, #24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fd54 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f20:	f000 bd31 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f28:	f000 bd2d 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f2c:	4b7f      	ldr	r3, [pc, #508]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f38:	d108      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f3a:	f107 030c 	add.w	r3, r7, #12
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fe94 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f48:	f000 bd1d 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f50:	f000 bd19 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f54:	4b75      	ldr	r3, [pc, #468]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f5e:	4b73      	ldr	r3, [pc, #460]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d10c      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d109      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f70:	4b6e      	ldr	r3, [pc, #440]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	08db      	lsrs	r3, r3, #3
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	4a6d      	ldr	r2, [pc, #436]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f82:	e01f      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f84:	4b69      	ldr	r3, [pc, #420]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f90:	d106      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f98:	d102      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f9a:	4b66      	ldr	r3, [pc, #408]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f9e:	e011      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fa0:	4b62      	ldr	r3, [pc, #392]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fac:	d106      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb4:	d102      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fb6:	4b60      	ldr	r3, [pc, #384]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fba:	e003      	b.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fc0:	f000 bce1 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fc4:	f000 bcdf 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fc8:	4b5c      	ldr	r3, [pc, #368]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fcc:	f000 bcdb 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd4:	f000 bcd7 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fdc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	f040 80ad 	bne.w	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007fe6:	4b51      	ldr	r3, [pc, #324]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff6:	d056      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffe:	f200 8090 	bhi.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	2bc0      	cmp	r3, #192	; 0xc0
 8008006:	f000 8088 	beq.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2bc0      	cmp	r3, #192	; 0xc0
 800800e:	f200 8088 	bhi.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	2b80      	cmp	r3, #128	; 0x80
 8008016:	d032      	beq.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	2b80      	cmp	r3, #128	; 0x80
 800801c:	f200 8081 	bhi.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	2b40      	cmp	r3, #64	; 0x40
 800802a:	d014      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800802c:	e079      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800802e:	4b3f      	ldr	r3, [pc, #252]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800803a:	d108      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800803c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008040:	4618      	mov	r0, r3
 8008042:	f000 ff67 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800804a:	f000 bc9c 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008052:	f000 bc98 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008056:	4b35      	ldr	r3, [pc, #212]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800805e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008062:	d108      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008064:	f107 0318 	add.w	r3, r7, #24
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fcab 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008072:	f000 bc88 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807a:	f000 bc84 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800807e:	4b2b      	ldr	r3, [pc, #172]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808a:	d108      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808c:	f107 030c 	add.w	r3, r7, #12
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fdeb 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809a:	f000 bc74 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a2:	f000 bc70 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080a6:	4b21      	ldr	r3, [pc, #132]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080b0:	4b1e      	ldr	r3, [pc, #120]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d10c      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80080bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	08db      	lsrs	r3, r3, #3
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	4a18      	ldr	r2, [pc, #96]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080ce:	fa22 f303 	lsr.w	r3, r2, r3
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d4:	e01f      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080d6:	4b15      	ldr	r3, [pc, #84]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e2:	d106      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ea:	d102      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080ec:	4b11      	ldr	r3, [pc, #68]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f0:	e011      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080f2:	4b0e      	ldr	r3, [pc, #56]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080fe:	d106      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008106:	d102      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008108:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810c:	e003      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008112:	f000 bc38 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008116:	f000 bc36 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811e:	f000 bc32 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008126:	f000 bc2e 	b.w	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
 8008130:	03d09000 	.word	0x03d09000
 8008134:	003d0900 	.word	0x003d0900
 8008138:	017d7840 	.word	0x017d7840
 800813c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008144:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008148:	430b      	orrs	r3, r1
 800814a:	f040 809c 	bne.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800814e:	4b9e      	ldr	r3, [pc, #632]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008156:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800815e:	d054      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008166:	f200 808b 	bhi.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008170:	f000 8083 	beq.w	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800817a:	f200 8081 	bhi.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008184:	d02f      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818c:	d878      	bhi.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800819a:	d012      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800819c:	e070      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800819e:	4b8a      	ldr	r3, [pc, #552]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081aa:	d107      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 feaf 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ba:	e3e4      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c0:	e3e1      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c2:	4b81      	ldr	r3, [pc, #516]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081ce:	d107      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fbf5 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081de:	e3d2      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e4:	e3cf      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081e6:	4b78      	ldr	r3, [pc, #480]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f2:	d107      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fd37 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008202:	e3c0      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008208:	e3bd      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800820a:	4b6f      	ldr	r3, [pc, #444]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800820c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008212:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008214:	4b6c      	ldr	r3, [pc, #432]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d10c      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	2b00      	cmp	r3, #0
 8008224:	d109      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008226:	4b68      	ldr	r3, [pc, #416]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	08db      	lsrs	r3, r3, #3
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	4a66      	ldr	r2, [pc, #408]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008232:	fa22 f303 	lsr.w	r3, r2, r3
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008238:	e01e      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800823a:	4b63      	ldr	r3, [pc, #396]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008246:	d106      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800824e:	d102      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008250:	4b5f      	ldr	r3, [pc, #380]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008254:	e010      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008256:	4b5c      	ldr	r3, [pc, #368]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008262:	d106      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800826a:	d102      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800826c:	4b59      	ldr	r3, [pc, #356]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008270:	e002      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008276:	e386      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008278:	e385      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800827a:	4b57      	ldr	r3, [pc, #348]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827e:	e382      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008284:	e37f      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800828e:	430b      	orrs	r3, r1
 8008290:	f040 80a7 	bne.w	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008294:	4b4c      	ldr	r3, [pc, #304]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008298:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800829c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082a4:	d055      	beq.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082ac:	f200 8096 	bhi.w	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082b6:	f000 8084 	beq.w	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082c0:	f200 808c 	bhi.w	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ca:	d030      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d2:	f200 8083 	bhi.w	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082e2:	d012      	beq.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80082e4:	e07a      	b.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082e6:	4b38      	ldr	r3, [pc, #224]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082f2:	d107      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fe0b 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008302:	e340      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008308:	e33d      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800830a:	4b2f      	ldr	r3, [pc, #188]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008316:	d107      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008318:	f107 0318 	add.w	r3, r7, #24
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fb51 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008326:	e32e      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832c:	e32b      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800832e:	4b26      	ldr	r3, [pc, #152]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833a:	d107      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800833c:	f107 030c 	add.w	r3, r7, #12
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fc93 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834a:	e31c      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008350:	e319      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008352:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800835a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800835c:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b04      	cmp	r3, #4
 8008366:	d10c      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	08db      	lsrs	r3, r3, #3
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	4a14      	ldr	r2, [pc, #80]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008380:	e01e      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008382:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838e:	d106      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008396:	d102      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839c:	e010      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083aa:	d106      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b2:	d102      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b8:	e002      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083be:	e2e2      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083c0:	e2e1      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c6:	e2de      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083c8:	58024400 	.word	0x58024400
 80083cc:	03d09000 	.word	0x03d09000
 80083d0:	003d0900 	.word	0x003d0900
 80083d4:	017d7840 	.word	0x017d7840
 80083d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e0:	e2d1      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80083e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80083ea:	430b      	orrs	r3, r1
 80083ec:	f040 809c 	bne.w	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80083f0:	4b93      	ldr	r3, [pc, #588]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80083f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008400:	d054      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008408:	f200 808b 	bhi.w	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008412:	f000 8083 	beq.w	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800841c:	f200 8081 	bhi.w	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008426:	d02f      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842e:	d878      	bhi.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843c:	d012      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800843e:	e070      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008440:	4b7f      	ldr	r3, [pc, #508]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800844c:	d107      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800844e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fd5e 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845c:	e293      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008462:	e290      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008464:	4b76      	ldr	r3, [pc, #472]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008470:	d107      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008472:	f107 0318 	add.w	r3, r7, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f000 faa4 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008480:	e281      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008486:	e27e      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008488:	4b6d      	ldr	r3, [pc, #436]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008494:	d107      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008496:	f107 030c 	add.w	r3, r7, #12
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fbe6 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a4:	e26f      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084aa:	e26c      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084ac:	4b64      	ldr	r3, [pc, #400]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084b6:	4b62      	ldr	r3, [pc, #392]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d10c      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084c8:	4b5d      	ldr	r3, [pc, #372]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	08db      	lsrs	r3, r3, #3
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	4a5c      	ldr	r2, [pc, #368]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084da:	e01e      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084dc:	4b58      	ldr	r3, [pc, #352]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e8:	d106      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084f2:	4b55      	ldr	r3, [pc, #340]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f6:	e010      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084f8:	4b51      	ldr	r3, [pc, #324]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008504:	d106      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800850c:	d102      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800850e:	4b4f      	ldr	r3, [pc, #316]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008512:	e002      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008518:	e235      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800851a:	e234      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800851c:	4b4c      	ldr	r3, [pc, #304]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008520:	e231      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008526:	e22e      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008530:	430b      	orrs	r3, r1
 8008532:	f040 808f 	bne.w	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008536:	4b42      	ldr	r3, [pc, #264]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800853e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008546:	d06b      	beq.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800854e:	d874      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008556:	d056      	beq.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800855e:	d86c      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008566:	d03b      	beq.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800856e:	d864      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008576:	d021      	beq.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800857e:	d85c      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	d004      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800858e:	e054      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008590:	f7fe fa4c 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8008594:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008596:	e1f6      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008598:	4b29      	ldr	r3, [pc, #164]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a4:	d107      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a6:	f107 0318 	add.w	r3, r7, #24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fa0a 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b4:	e1e7      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ba:	e1e4      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085bc:	4b20      	ldr	r3, [pc, #128]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c8:	d107      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ca:	f107 030c 	add.w	r3, r7, #12
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fb4c 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d8:	e1d5      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085de:	e1d2      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085e0:	4b17      	ldr	r3, [pc, #92]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d109      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ec:	4b14      	ldr	r3, [pc, #80]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	08db      	lsrs	r3, r3, #3
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	4a13      	ldr	r2, [pc, #76]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fe:	e1c2      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008604:	e1bf      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008612:	d102      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008614:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008618:	e1b5      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861e:	e1b2      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862c:	d102      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008632:	e1a8      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008638:	e1a5      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863e:	e1a2      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008640:	58024400 	.word	0x58024400
 8008644:	03d09000 	.word	0x03d09000
 8008648:	003d0900 	.word	0x003d0900
 800864c:	017d7840 	.word	0x017d7840
 8008650:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008658:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800865c:	430b      	orrs	r3, r1
 800865e:	d173      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008660:	4b9c      	ldr	r3, [pc, #624]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008668:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008670:	d02f      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008678:	d863      	bhi.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d012      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008688:	e05b      	b.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800868a:	4b92      	ldr	r3, [pc, #584]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008698:	f107 0318 	add.w	r3, r7, #24
 800869c:	4618      	mov	r0, r3
 800869e:	f000 f991 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a6:	e16e      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ac:	e16b      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ae:	4b89      	ldr	r3, [pc, #548]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ba:	d107      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fad3 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ca:	e15c      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d0:	e159      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086d2:	4b80      	ldr	r3, [pc, #512]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086dc:	4b7d      	ldr	r3, [pc, #500]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d10c      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086ee:	4b79      	ldr	r3, [pc, #484]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	08db      	lsrs	r3, r3, #3
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	4a77      	ldr	r2, [pc, #476]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80086fa:	fa22 f303 	lsr.w	r3, r2, r3
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008700:	e01e      	b.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008702:	4b74      	ldr	r3, [pc, #464]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870e:	d106      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008716:	d102      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008718:	4b70      	ldr	r3, [pc, #448]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800871c:	e010      	b.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800871e:	4b6d      	ldr	r3, [pc, #436]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800872a:	d106      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800872c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008732:	d102      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008734:	4b6a      	ldr	r3, [pc, #424]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008738:	e002      	b.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800873e:	e122      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008740:	e121      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008746:	e11e      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008750:	430b      	orrs	r3, r1
 8008752:	d133      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008754:	4b5f      	ldr	r3, [pc, #380]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800875c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876a:	d012      	beq.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800876c:	e023      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800876e:	4b59      	ldr	r3, [pc, #356]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800877a:	d107      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800877c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fbc7 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878a:	e0fc      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008790:	e0f9      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008792:	4b50      	ldr	r3, [pc, #320]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800879a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800879e:	d107      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087a0:	f107 0318 	add.w	r3, r7, #24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f90d 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ae:	e0ea      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	e0e7      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ba:	e0e4      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80087bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80087c4:	430b      	orrs	r3, r1
 80087c6:	f040 808d 	bne.w	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80087ca:	4b42      	ldr	r3, [pc, #264]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087da:	d06b      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e2:	d874      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ea:	d056      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f2:	d86c      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087fa:	d03b      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008802:	d864      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880a:	d021      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008812:	d85c      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008820:	d004      	beq.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008822:	e054      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008824:	f000 f8b8 	bl	8008998 <HAL_RCCEx_GetD3PCLK1Freq>
 8008828:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800882a:	e0ac      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800882c:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008838:	d107      	bne.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800883a:	f107 0318 	add.w	r3, r7, #24
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f8c0 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008848:	e09d      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884e:	e09a      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008850:	4b20      	ldr	r3, [pc, #128]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885c:	d107      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fa02 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800886c:	e08b      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008872:	e088      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008874:	4b17      	ldr	r3, [pc, #92]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b04      	cmp	r3, #4
 800887e:	d109      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	08db      	lsrs	r3, r3, #3
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	4a13      	ldr	r2, [pc, #76]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800888c:	fa22 f303 	lsr.w	r3, r2, r3
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008892:	e078      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008898:	e075      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800889a:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a6:	d102      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ac:	e06b      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b2:	e068      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c6:	e05e      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088cc:	e05b      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d2:	e058      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088d4:	58024400 	.word	0x58024400
 80088d8:	03d09000 	.word	0x03d09000
 80088dc:	003d0900 	.word	0x003d0900
 80088e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80088e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80088ec:	430b      	orrs	r3, r1
 80088ee:	d148      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80088f0:	4b27      	ldr	r3, [pc, #156]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008900:	d02a      	beq.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008908:	d838      	bhi.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008916:	d00d      	beq.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008918:	e030      	b.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800891a:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008926:	d102      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008928:	4b1a      	ldr	r3, [pc, #104]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800892c:	e02b      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008932:	e028      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008934:	4b16      	ldr	r3, [pc, #88]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800893c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008940:	d107      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fae4 	bl	8008f14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008950:	e019      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008956:	e016      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008958:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008964:	d107      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008966:	f107 0318 	add.w	r3, r7, #24
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f82a 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008974:	e007      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800897a:	e004      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008980:	e001      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008988:	4618      	mov	r0, r3
 800898a:	3740      	adds	r7, #64	; 0x40
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	58024400 	.word	0x58024400
 8008994:	017d7840 	.word	0x017d7840

08008998 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800899c:	f7fe f816 	bl	80069cc <HAL_RCC_GetHCLKFreq>
 80089a0:	4602      	mov	r2, r0
 80089a2:	4b06      	ldr	r3, [pc, #24]	; (80089bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	091b      	lsrs	r3, r3, #4
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	4904      	ldr	r1, [pc, #16]	; (80089c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80089ae:	5ccb      	ldrb	r3, [r1, r3]
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	58024400 	.word	0x58024400
 80089c0:	0800c3c8 	.word	0x0800c3c8

080089c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b089      	sub	sp, #36	; 0x24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089cc:	4ba1      	ldr	r3, [pc, #644]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80089d6:	4b9f      	ldr	r3, [pc, #636]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	0b1b      	lsrs	r3, r3, #12
 80089dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80089e2:	4b9c      	ldr	r3, [pc, #624]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	091b      	lsrs	r3, r3, #4
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80089ee:	4b99      	ldr	r3, [pc, #612]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	08db      	lsrs	r3, r3, #3
 80089f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8111 	beq.w	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f000 8083 	beq.w	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	f200 80a1 	bhi.w	8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d056      	beq.n	8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a2e:	e099      	b.n	8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a30:	4b88      	ldr	r3, [pc, #544]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d02d      	beq.n	8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a3c:	4b85      	ldr	r3, [pc, #532]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	08db      	lsrs	r3, r3, #3
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	4a84      	ldr	r2, [pc, #528]	; (8008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a66:	4b7b      	ldr	r3, [pc, #492]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a96:	e087      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aaa:	4b6a      	ldr	r3, [pc, #424]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008abe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ada:	e065      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aee:	4b59      	ldr	r3, [pc, #356]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b1e:	e043      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b32:	4b48      	ldr	r3, [pc, #288]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b62:	e021      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b76:	4b37      	ldr	r3, [pc, #220]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ba6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ba8:	4b2a      	ldr	r3, [pc, #168]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	0a5b      	lsrs	r3, r3, #9
 8008bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bce:	ee17 2a90 	vmov	r2, s15
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008bd6:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	0c1b      	lsrs	r3, r3, #16
 8008bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bfc:	ee17 2a90 	vmov	r2, s15
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c04:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	0e1b      	lsrs	r3, r3, #24
 8008c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c2a:	ee17 2a90 	vmov	r2, s15
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c32:	e008      	b.n	8008c46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	609a      	str	r2, [r3, #8]
}
 8008c46:	bf00      	nop
 8008c48:	3724      	adds	r7, #36	; 0x24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
 8008c58:	03d09000 	.word	0x03d09000
 8008c5c:	46000000 	.word	0x46000000
 8008c60:	4c742400 	.word	0x4c742400
 8008c64:	4a742400 	.word	0x4a742400
 8008c68:	4bbebc20 	.word	0x4bbebc20

08008c6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b089      	sub	sp, #36	; 0x24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c74:	4ba1      	ldr	r3, [pc, #644]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c7e:	4b9f      	ldr	r3, [pc, #636]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	0d1b      	lsrs	r3, r3, #20
 8008c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c8a:	4b9c      	ldr	r3, [pc, #624]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c96:	4b99      	ldr	r3, [pc, #612]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	08db      	lsrs	r3, r3, #3
 8008c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8111 	beq.w	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	f000 8083 	beq.w	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	f200 80a1 	bhi.w	8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d056      	beq.n	8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008cd6:	e099      	b.n	8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cd8:	4b88      	ldr	r3, [pc, #544]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02d      	beq.n	8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ce4:	4b85      	ldr	r3, [pc, #532]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	08db      	lsrs	r3, r3, #3
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	4a84      	ldr	r2, [pc, #528]	; (8008f00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	ee07 3a90 	vmov	s15, r3
 8008cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b7b      	ldr	r3, [pc, #492]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d3e:	e087      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b6a      	ldr	r3, [pc, #424]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d82:	e065      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b59      	ldr	r3, [pc, #356]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008daa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc6:	e043      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b48      	ldr	r3, [pc, #288]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e0a:	e021      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1e:	4b37      	ldr	r3, [pc, #220]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008e50:	4b2a      	ldr	r3, [pc, #168]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	0a5b      	lsrs	r3, r3, #9
 8008e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e76:	ee17 2a90 	vmov	r2, s15
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e7e:	4b1f      	ldr	r3, [pc, #124]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	0c1b      	lsrs	r3, r3, #16
 8008e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea4:	ee17 2a90 	vmov	r2, s15
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008eac:	4b13      	ldr	r3, [pc, #76]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb0:	0e1b      	lsrs	r3, r3, #24
 8008eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed2:	ee17 2a90 	vmov	r2, s15
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008eda:	e008      	b.n	8008eee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	609a      	str	r2, [r3, #8]
}
 8008eee:	bf00      	nop
 8008ef0:	3724      	adds	r7, #36	; 0x24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	58024400 	.word	0x58024400
 8008f00:	03d09000 	.word	0x03d09000
 8008f04:	46000000 	.word	0x46000000
 8008f08:	4c742400 	.word	0x4c742400
 8008f0c:	4a742400 	.word	0x4a742400
 8008f10:	4bbebc20 	.word	0x4bbebc20

08008f14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b089      	sub	sp, #36	; 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f1c:	4ba0      	ldr	r3, [pc, #640]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008f26:	4b9e      	ldr	r3, [pc, #632]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	091b      	lsrs	r3, r3, #4
 8008f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f30:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008f32:	4b9b      	ldr	r3, [pc, #620]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008f3c:	4b98      	ldr	r3, [pc, #608]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f40:	08db      	lsrs	r3, r3, #3
 8008f42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	fb02 f303 	mul.w	r3, r2, r3
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 8111 	beq.w	8009182 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	f000 8083 	beq.w	800906e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	f200 80a1 	bhi.w	80090b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d056      	beq.n	800902a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f7c:	e099      	b.n	80090b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f7e:	4b88      	ldr	r3, [pc, #544]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d02d      	beq.n	8008fe6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f8a:	4b85      	ldr	r3, [pc, #532]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	08db      	lsrs	r3, r3, #3
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	4a83      	ldr	r2, [pc, #524]	; (80091a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	ee07 3a90 	vmov	s15, r3
 8008fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb4:	4b7a      	ldr	r3, [pc, #488]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fe4:	e087      	b.n	80090f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80091ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff8:	4b69      	ldr	r3, [pc, #420]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009008:	ed97 6a03 	vldr	s12, [r7, #12]
 800900c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009028:	e065      	b.n	80090f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009034:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80091b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903c:	4b58      	ldr	r3, [pc, #352]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009044:	ee07 3a90 	vmov	s15, r3
 8009048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009050:	eddf 5a55 	vldr	s11, [pc, #340]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800906c:	e043      	b.n	80090f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009078:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80091b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800907c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009080:	4b47      	ldr	r3, [pc, #284]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009088:	ee07 3a90 	vmov	s15, r3
 800908c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009090:	ed97 6a03 	vldr	s12, [r7, #12]
 8009094:	eddf 5a44 	vldr	s11, [pc, #272]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090b0:	e021      	b.n	80090f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80091ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c4:	4b36      	ldr	r3, [pc, #216]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090cc:	ee07 3a90 	vmov	s15, r3
 80090d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80091a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80090f6:	4b2a      	ldr	r3, [pc, #168]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	0a5b      	lsrs	r3, r3, #9
 80090fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009100:	ee07 3a90 	vmov	s15, r3
 8009104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009110:	edd7 6a07 	vldr	s13, [r7, #28]
 8009114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911c:	ee17 2a90 	vmov	r2, s15
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009124:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009128:	0c1b      	lsrs	r3, r3, #16
 800912a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800913a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800913e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914a:	ee17 2a90 	vmov	r2, s15
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	0e1b      	lsrs	r3, r3, #24
 8009158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800916c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009178:	ee17 2a90 	vmov	r2, s15
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009180:	e008      	b.n	8009194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	609a      	str	r2, [r3, #8]
}
 8009194:	bf00      	nop
 8009196:	3724      	adds	r7, #36	; 0x24
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	58024400 	.word	0x58024400
 80091a4:	03d09000 	.word	0x03d09000
 80091a8:	46000000 	.word	0x46000000
 80091ac:	4c742400 	.word	0x4c742400
 80091b0:	4a742400 	.word	0x4a742400
 80091b4:	4bbebc20 	.word	0x4bbebc20

080091b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091c6:	4b53      	ldr	r3, [pc, #332]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d101      	bne.n	80091d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e099      	b.n	800930a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091d6:	4b4f      	ldr	r3, [pc, #316]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a4e      	ldr	r2, [pc, #312]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80091dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e2:	f7f9 fc19 	bl	8002a18 <HAL_GetTick>
 80091e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091e8:	e008      	b.n	80091fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091ea:	f7f9 fc15 	bl	8002a18 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d901      	bls.n	80091fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e086      	b.n	800930a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091fc:	4b45      	ldr	r3, [pc, #276]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1f0      	bne.n	80091ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009208:	4b42      	ldr	r3, [pc, #264]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	031b      	lsls	r3, r3, #12
 8009216:	493f      	ldr	r1, [pc, #252]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009218:	4313      	orrs	r3, r2
 800921a:	628b      	str	r3, [r1, #40]	; 0x28
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	3b01      	subs	r3, #1
 8009222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	3b01      	subs	r3, #1
 800922c:	025b      	lsls	r3, r3, #9
 800922e:	b29b      	uxth	r3, r3
 8009230:	431a      	orrs	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	3b01      	subs	r3, #1
 8009238:	041b      	lsls	r3, r3, #16
 800923a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	3b01      	subs	r3, #1
 8009246:	061b      	lsls	r3, r3, #24
 8009248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800924c:	4931      	ldr	r1, [pc, #196]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 800924e:	4313      	orrs	r3, r2
 8009250:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009252:	4b30      	ldr	r3, [pc, #192]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	492d      	ldr	r1, [pc, #180]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009260:	4313      	orrs	r3, r2
 8009262:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009264:	4b2b      	ldr	r3, [pc, #172]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	f023 0220 	bic.w	r2, r3, #32
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	4928      	ldr	r1, [pc, #160]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009276:	4b27      	ldr	r3, [pc, #156]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	4a26      	ldr	r2, [pc, #152]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 800927c:	f023 0310 	bic.w	r3, r3, #16
 8009280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009282:	4b24      	ldr	r3, [pc, #144]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009286:	4b24      	ldr	r3, [pc, #144]	; (8009318 <RCCEx_PLL2_Config+0x160>)
 8009288:	4013      	ands	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	69d2      	ldr	r2, [r2, #28]
 800928e:	00d2      	lsls	r2, r2, #3
 8009290:	4920      	ldr	r1, [pc, #128]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009292:	4313      	orrs	r3, r2
 8009294:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009296:	4b1f      	ldr	r3, [pc, #124]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	4a1e      	ldr	r2, [pc, #120]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 800929c:	f043 0310 	orr.w	r3, r3, #16
 80092a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d106      	bne.n	80092b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092a8:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4a19      	ldr	r2, [pc, #100]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092b4:	e00f      	b.n	80092d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d106      	bne.n	80092ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092bc:	4b15      	ldr	r3, [pc, #84]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	4a14      	ldr	r2, [pc, #80]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092c8:	e005      	b.n	80092d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092ca:	4b12      	ldr	r3, [pc, #72]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	4a11      	ldr	r2, [pc, #68]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a0e      	ldr	r2, [pc, #56]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e2:	f7f9 fb99 	bl	8002a18 <HAL_GetTick>
 80092e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092e8:	e008      	b.n	80092fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092ea:	f7f9 fb95 	bl	8002a18 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d901      	bls.n	80092fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e006      	b.n	800930a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <RCCEx_PLL2_Config+0x15c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0f0      	beq.n	80092ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	58024400 	.word	0x58024400
 8009318:	ffff0007 	.word	0xffff0007

0800931c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800932a:	4b53      	ldr	r3, [pc, #332]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 800932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b03      	cmp	r3, #3
 8009334:	d101      	bne.n	800933a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e099      	b.n	800946e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800933a:	4b4f      	ldr	r3, [pc, #316]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a4e      	ldr	r2, [pc, #312]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009346:	f7f9 fb67 	bl	8002a18 <HAL_GetTick>
 800934a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800934c:	e008      	b.n	8009360 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800934e:	f7f9 fb63 	bl	8002a18 <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	2b02      	cmp	r3, #2
 800935a:	d901      	bls.n	8009360 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e086      	b.n	800946e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009360:	4b45      	ldr	r3, [pc, #276]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f0      	bne.n	800934e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800936c:	4b42      	ldr	r3, [pc, #264]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	051b      	lsls	r3, r3, #20
 800937a:	493f      	ldr	r1, [pc, #252]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 800937c:	4313      	orrs	r3, r2
 800937e:	628b      	str	r3, [r1, #40]	; 0x28
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	3b01      	subs	r3, #1
 8009386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	3b01      	subs	r3, #1
 8009390:	025b      	lsls	r3, r3, #9
 8009392:	b29b      	uxth	r3, r3
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	3b01      	subs	r3, #1
 800939c:	041b      	lsls	r3, r3, #16
 800939e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093a2:	431a      	orrs	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	061b      	lsls	r3, r3, #24
 80093ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093b0:	4931      	ldr	r1, [pc, #196]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093b6:	4b30      	ldr	r3, [pc, #192]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	492d      	ldr	r1, [pc, #180]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093c8:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	4928      	ldr	r1, [pc, #160]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093da:	4b27      	ldr	r3, [pc, #156]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	4a26      	ldr	r2, [pc, #152]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093e6:	4b24      	ldr	r3, [pc, #144]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <RCCEx_PLL3_Config+0x160>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	69d2      	ldr	r2, [r2, #28]
 80093f2:	00d2      	lsls	r2, r2, #3
 80093f4:	4920      	ldr	r1, [pc, #128]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093fa:	4b1f      	ldr	r3, [pc, #124]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d106      	bne.n	800941a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800940c:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a19      	ldr	r2, [pc, #100]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009412:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009418:	e00f      	b.n	800943a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d106      	bne.n	800942e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009420:	4b15      	ldr	r3, [pc, #84]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	4a14      	ldr	r2, [pc, #80]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009426:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800942a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800942c:	e005      	b.n	800943a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800942e:	4b12      	ldr	r3, [pc, #72]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	4a11      	ldr	r2, [pc, #68]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009438:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800943a:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a0e      	ldr	r2, [pc, #56]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009446:	f7f9 fae7 	bl	8002a18 <HAL_GetTick>
 800944a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800944c:	e008      	b.n	8009460 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800944e:	f7f9 fae3 	bl	8002a18 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	2b02      	cmp	r3, #2
 800945a:	d901      	bls.n	8009460 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e006      	b.n	800946e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009460:	4b05      	ldr	r3, [pc, #20]	; (8009478 <RCCEx_PLL3_Config+0x15c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0f0      	beq.n	800944e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	58024400 	.word	0x58024400
 800947c:	ffff0007 	.word	0xffff0007

08009480 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d071      	beq.n	8009576 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7f8 fdd2 	bl	8002050 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b10      	cmp	r3, #16
 80094c0:	d050      	beq.n	8009564 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	22ca      	movs	r2, #202	; 0xca
 80094c8:	625a      	str	r2, [r3, #36]	; 0x24
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2253      	movs	r2, #83	; 0x53
 80094d0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f87a 	bl	80095cc <RTC_EnterInitMode>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d124      	bne.n	800952c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6899      	ldr	r1, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	4b24      	ldr	r3, [pc, #144]	; (8009580 <HAL_RTC_Init+0x100>)
 80094ee:	400b      	ands	r3, r1
 80094f0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6899      	ldr	r1, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	0419      	lsls	r1, r3, #16
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f886 	bl	8009634 <RTC_ExitInitMode>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d113      	bne.n	800955a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0203 	bic.w	r2, r2, #3
 8009540:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	69da      	ldr	r2, [r3, #28]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	22ff      	movs	r2, #255	; 0xff
 8009560:	625a      	str	r2, [r3, #36]	; 0x24
 8009562:	e001      	b.n	8009568 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d103      	bne.n	8009576 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	ff8fffbf 	.word	0xff8fffbf

08009584 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a0d      	ldr	r2, [pc, #52]	; (80095c8 <HAL_RTC_WaitForSynchro+0x44>)
 8009592:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009594:	f7f9 fa40 	bl	8002a18 <HAL_GetTick>
 8009598:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800959a:	e009      	b.n	80095b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800959c:	f7f9 fa3c 	bl	8002a18 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095aa:	d901      	bls.n	80095b0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e007      	b.n	80095c0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f003 0320 	and.w	r3, r3, #32
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0ee      	beq.n	800959c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	0003ff5f 	.word	0x0003ff5f

080095cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d120      	bne.n	8009628 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295
 80095ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80095f0:	f7f9 fa12 	bl	8002a18 <HAL_GetTick>
 80095f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80095f6:	e00d      	b.n	8009614 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80095f8:	f7f9 fa0e 	bl	8002a18 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009606:	d905      	bls.n	8009614 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2203      	movs	r2, #3
 8009610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <RTC_EnterInitMode+0x5c>
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b03      	cmp	r3, #3
 8009626:	d1e7      	bne.n	80095f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009640:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <RTC_ExitInitMode+0x78>)
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	4a19      	ldr	r2, [pc, #100]	; (80096ac <RTC_ExitInitMode+0x78>)
 8009646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800964c:	4b17      	ldr	r3, [pc, #92]	; (80096ac <RTC_ExitInitMode+0x78>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10c      	bne.n	8009672 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff ff93 	bl	8009584 <HAL_RTC_WaitForSynchro>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01e      	beq.n	80096a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2203      	movs	r2, #3
 8009668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	73fb      	strb	r3, [r7, #15]
 8009670:	e017      	b.n	80096a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009672:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <RTC_ExitInitMode+0x78>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	4a0d      	ldr	r2, [pc, #52]	; (80096ac <RTC_ExitInitMode+0x78>)
 8009678:	f023 0320 	bic.w	r3, r3, #32
 800967c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff ff80 	bl	8009584 <HAL_RTC_WaitForSynchro>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2203      	movs	r2, #3
 800968e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009696:	4b05      	ldr	r3, [pc, #20]	; (80096ac <RTC_ExitInitMode+0x78>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	4a04      	ldr	r2, [pc, #16]	; (80096ac <RTC_ExitInitMode+0x78>)
 800969c:	f043 0320 	orr.w	r3, r3, #32
 80096a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	58004000 	.word	0x58004000

080096b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08a      	sub	sp, #40	; 0x28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e28e      	b.n	8009be0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80096c2:	f7f9 f9d9 	bl	8002a78 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d113      	bne.n	80096f8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a96      	ldr	r2, [pc, #600]	; (8009930 <HAL_SAI_Init+0x280>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <HAL_SAI_Init+0x34>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a95      	ldr	r2, [pc, #596]	; (8009934 <HAL_SAI_Init+0x284>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d107      	bne.n	80096f4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d103      	bne.n	80096f4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e273      	b.n	8009be0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a8c      	ldr	r2, [pc, #560]	; (8009930 <HAL_SAI_Init+0x280>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_SAI_Init+0x5c>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a8c      	ldr	r2, [pc, #560]	; (8009938 <HAL_SAI_Init+0x288>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d102      	bne.n	8009712 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800970c:	4b8b      	ldr	r3, [pc, #556]	; (800993c <HAL_SAI_Init+0x28c>)
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	e028      	b.n	8009764 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a8a      	ldr	r2, [pc, #552]	; (8009940 <HAL_SAI_Init+0x290>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d004      	beq.n	8009726 <HAL_SAI_Init+0x76>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a88      	ldr	r2, [pc, #544]	; (8009944 <HAL_SAI_Init+0x294>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d102      	bne.n	800972c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009726:	4b88      	ldr	r3, [pc, #544]	; (8009948 <HAL_SAI_Init+0x298>)
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	e01b      	b.n	8009764 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a86      	ldr	r2, [pc, #536]	; (800994c <HAL_SAI_Init+0x29c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d004      	beq.n	8009740 <HAL_SAI_Init+0x90>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a85      	ldr	r2, [pc, #532]	; (8009950 <HAL_SAI_Init+0x2a0>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d102      	bne.n	8009746 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009740:	4b84      	ldr	r3, [pc, #528]	; (8009954 <HAL_SAI_Init+0x2a4>)
 8009742:	61bb      	str	r3, [r7, #24]
 8009744:	e00e      	b.n	8009764 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a7a      	ldr	r2, [pc, #488]	; (8009934 <HAL_SAI_Init+0x284>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d004      	beq.n	800975a <HAL_SAI_Init+0xaa>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a80      	ldr	r2, [pc, #512]	; (8009958 <HAL_SAI_Init+0x2a8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d102      	bne.n	8009760 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800975a:	4b80      	ldr	r3, [pc, #512]	; (800995c <HAL_SAI_Init+0x2ac>)
 800975c:	61bb      	str	r3, [r7, #24]
 800975e:	e001      	b.n	8009764 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e23d      	b.n	8009be0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7f8 ff11 	bl	80025a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa40 	bl	8009c04 <SAI_Disable>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e228      	b.n	8009be0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d00c      	beq.n	80097b8 <HAL_SAI_Init+0x108>
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d80d      	bhi.n	80097be <HAL_SAI_Init+0x10e>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <HAL_SAI_Init+0xfc>
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d003      	beq.n	80097b2 <HAL_SAI_Init+0x102>
 80097aa:	e008      	b.n	80097be <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097b0:	e008      	b.n	80097c4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80097b2:	2310      	movs	r3, #16
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097b6:	e005      	b.n	80097c4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80097b8:	2320      	movs	r3, #32
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097bc:	e002      	b.n	80097c4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097c2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	2b05      	cmp	r3, #5
 80097ca:	d832      	bhi.n	8009832 <HAL_SAI_Init+0x182>
 80097cc:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <HAL_SAI_Init+0x124>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	080097f3 	.word	0x080097f3
 80097dc:	080097fb 	.word	0x080097fb
 80097e0:	08009803 	.word	0x08009803
 80097e4:	08009813 	.word	0x08009813
 80097e8:	08009823 	.word	0x08009823
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
      break;
 80097f0:	e022      	b.n	8009838 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80097f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f6:	61fb      	str	r3, [r7, #28]
      break;
 80097f8:	e01e      	b.n	8009838 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80097fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097fe:	61fb      	str	r3, [r7, #28]
      break;
 8009800:	e01a      	b.n	8009838 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009806:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009810:	e012      	b.n	8009838 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009816:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	f043 0302 	orr.w	r3, r3, #2
 800981e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009820:	e00a      	b.n	8009838 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009826:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	f043 0303 	orr.w	r3, r3, #3
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009830:	e002      	b.n	8009838 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]
      break;
 8009836:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80c5 	beq.w	80099d2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a37      	ldr	r2, [pc, #220]	; (8009930 <HAL_SAI_Init+0x280>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_SAI_Init+0x1b0>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a37      	ldr	r2, [pc, #220]	; (8009938 <HAL_SAI_Init+0x288>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d106      	bne.n	800986e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009860:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009864:	f04f 0100 	mov.w	r1, #0
 8009868:	f7fe fb16 	bl	8007e98 <HAL_RCCEx_GetPeriphCLKFreq>
 800986c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a33      	ldr	r2, [pc, #204]	; (8009940 <HAL_SAI_Init+0x290>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d004      	beq.n	8009882 <HAL_SAI_Init+0x1d2>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a31      	ldr	r2, [pc, #196]	; (8009944 <HAL_SAI_Init+0x294>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d106      	bne.n	8009890 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009882:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009886:	f04f 0100 	mov.w	r1, #0
 800988a:	f7fe fb05 	bl	8007e98 <HAL_RCCEx_GetPeriphCLKFreq>
 800988e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a2d      	ldr	r2, [pc, #180]	; (800994c <HAL_SAI_Init+0x29c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d004      	beq.n	80098a4 <HAL_SAI_Init+0x1f4>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a2c      	ldr	r2, [pc, #176]	; (8009950 <HAL_SAI_Init+0x2a0>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d106      	bne.n	80098b2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80098a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80098a8:	f04f 0100 	mov.w	r1, #0
 80098ac:	f7fe faf4 	bl	8007e98 <HAL_RCCEx_GetPeriphCLKFreq>
 80098b0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <HAL_SAI_Init+0x284>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d106      	bne.n	80098ca <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80098bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80098c0:	f04f 0100 	mov.w	r1, #0
 80098c4:	f7fe fae8 	bl	8007e98 <HAL_RCCEx_GetPeriphCLKFreq>
 80098c8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a22      	ldr	r2, [pc, #136]	; (8009958 <HAL_SAI_Init+0x2a8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d106      	bne.n	80098e2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80098d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80098d8:	f04f 0100 	mov.w	r1, #0
 80098dc:	f7fe fadc 	bl	8007e98 <HAL_RCCEx_GetPeriphCLKFreq>
 80098e0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098ea:	d139      	bne.n	8009960 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d102      	bne.n	80098fa <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80098f4:	2340      	movs	r3, #64	; 0x40
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	e00a      	b.n	8009910 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	2b08      	cmp	r3, #8
 8009900:	d103      	bne.n	800990a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e002      	b.n	8009910 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	4619      	mov	r1, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a1b      	ldr	r3, [r3, #32]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	fb02 f303 	mul.w	r3, r2, r3
 8009926:	fbb1 f3f3 	udiv	r3, r1, r3
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	e030      	b.n	8009990 <HAL_SAI_Init+0x2e0>
 800992e:	bf00      	nop
 8009930:	40015804 	.word	0x40015804
 8009934:	58005404 	.word	0x58005404
 8009938:	40015824 	.word	0x40015824
 800993c:	40015800 	.word	0x40015800
 8009940:	40015c04 	.word	0x40015c04
 8009944:	40015c24 	.word	0x40015c24
 8009948:	40015c00 	.word	0x40015c00
 800994c:	40016004 	.word	0x40016004
 8009950:	40016024 	.word	0x40016024
 8009954:	40016000 	.word	0x40016000
 8009958:	58005424 	.word	0x58005424
 800995c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009968:	d101      	bne.n	800996e <HAL_SAI_Init+0x2be>
 800996a:	2302      	movs	r3, #2
 800996c:	e000      	b.n	8009970 <HAL_SAI_Init+0x2c0>
 800996e:	2301      	movs	r3, #1
 8009970:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	4619      	mov	r1, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	fb02 f303 	mul.w	r3, r2, r3
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	fbb1 f3f3 	udiv	r3, r1, r3
 800998e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4a95      	ldr	r2, [pc, #596]	; (8009be8 <HAL_SAI_Init+0x538>)
 8009994:	fba2 2303 	umull	r2, r3, r2, r3
 8009998:	08da      	lsrs	r2, r3, #3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800999e:	6939      	ldr	r1, [r7, #16]
 80099a0:	4b91      	ldr	r3, [pc, #580]	; (8009be8 <HAL_SAI_Init+0x538>)
 80099a2:	fba3 2301 	umull	r2, r3, r3, r1
 80099a6:	08da      	lsrs	r2, r3, #3
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	1aca      	subs	r2, r1, r3
 80099b2:	2a08      	cmp	r2, #8
 80099b4:	d904      	bls.n	80099c0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d104      	bne.n	80099d2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	085a      	lsrs	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_SAI_Init+0x332>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d109      	bne.n	80099f6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_SAI_Init+0x33e>
 80099ea:	2300      	movs	r3, #0
 80099ec:	e001      	b.n	80099f2 <HAL_SAI_Init+0x342>
 80099ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099f2:	623b      	str	r3, [r7, #32]
 80099f4:	e008      	b.n	8009a08 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d102      	bne.n	8009a04 <HAL_SAI_Init+0x354>
 80099fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a02:	e000      	b.n	8009a06 <HAL_SAI_Init+0x356>
 8009a04:	2300      	movs	r3, #0
 8009a06:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009a08:	f7f9 f836 	bl	8002a78 <HAL_GetREVID>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a12:	d331      	bcc.n	8009a78 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6819      	ldr	r1, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	4b73      	ldr	r3, [pc, #460]	; (8009bec <HAL_SAI_Init+0x53c>)
 8009a20:	400b      	ands	r3, r1
 8009a22:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6819      	ldr	r1, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a32:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a38:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009a4c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a58:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	051b      	lsls	r3, r3, #20
 8009a60:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a66:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	e02d      	b.n	8009ad4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6819      	ldr	r1, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b5b      	ldr	r3, [pc, #364]	; (8009bf0 <HAL_SAI_Init+0x540>)
 8009a84:	400b      	ands	r3, r1
 8009a86:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6819      	ldr	r1, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a96:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a9c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009ab0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009abc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	051b      	lsls	r3, r3, #20
 8009ac4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009aca:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6859      	ldr	r1, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b45      	ldr	r3, [pc, #276]	; (8009bf4 <HAL_SAI_Init+0x544>)
 8009ae0:	400b      	ands	r3, r1
 8009ae2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6859      	ldr	r1, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69da      	ldr	r2, [r3, #28]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6899      	ldr	r1, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b3a      	ldr	r3, [pc, #232]	; (8009bf8 <HAL_SAI_Init+0x548>)
 8009b0e:	400b      	ands	r3, r1
 8009b10:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6899      	ldr	r1, [r3, #8]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b22:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009b28:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009b2e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b34:	3b01      	subs	r3, #1
 8009b36:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009b38:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68d9      	ldr	r1, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009b50:	400b      	ands	r3, r1
 8009b52:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68d9      	ldr	r1, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b62:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b68:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b6a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b70:	3b01      	subs	r3, #1
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <HAL_SAI_Init+0x54c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d004      	beq.n	8009b92 <HAL_SAI_Init+0x4e2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1c      	ldr	r2, [pc, #112]	; (8009c00 <HAL_SAI_Init+0x550>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d119      	bne.n	8009bc6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b96:	f023 0201 	bic.w	r2, r3, #1
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d10e      	bne.n	8009bc6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbe:	f043 0201 	orr.w	r2, r3, #1
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3728      	adds	r7, #40	; 0x28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	cccccccd 	.word	0xcccccccd
 8009bec:	f005c010 	.word	0xf005c010
 8009bf0:	f805c010 	.word	0xf805c010
 8009bf4:	ffff1ff0 	.word	0xffff1ff0
 8009bf8:	fff88000 	.word	0xfff88000
 8009bfc:	40015804 	.word	0x40015804
 8009c00:	58005404 	.word	0x58005404

08009c04 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009c0c:	4b18      	ldr	r3, [pc, #96]	; (8009c70 <SAI_Disable+0x6c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a18      	ldr	r2, [pc, #96]	; (8009c74 <SAI_Disable+0x70>)
 8009c12:	fba2 2303 	umull	r2, r3, r2, r3
 8009c16:	0b1b      	lsrs	r3, r3, #12
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009c46:	2303      	movs	r3, #3
 8009c48:	72fb      	strb	r3, [r7, #11]
      break;
 8009c4a:	e009      	b.n	8009c60 <SAI_Disable+0x5c>
    }
    count--;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e7      	bne.n	8009c30 <SAI_Disable+0x2c>

  return status;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	24000000 	.word	0x24000000
 8009c74:	95cbec1b 	.word	0x95cbec1b

08009c78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e02b      	b.n	8009ce4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d106      	bne.n	8009ca6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7f8 fc73 	bl	800258c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f001 fabd 	bl	800b238 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	f001 fb11 	bl	800b2f0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009cce:	4b07      	ldr	r3, [pc, #28]	; (8009cec <HAL_SDRAM_Init+0x74>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a06      	ldr	r2, [pc, #24]	; (8009cec <HAL_SDRAM_Init+0x74>)
 8009cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cd8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	52004000 	.word	0x52004000

08009cf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e10f      	b.n	8009f22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a87      	ldr	r2, [pc, #540]	; (8009f2c <HAL_SPI_Init+0x23c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d00f      	beq.n	8009d32 <HAL_SPI_Init+0x42>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a86      	ldr	r2, [pc, #536]	; (8009f30 <HAL_SPI_Init+0x240>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00a      	beq.n	8009d32 <HAL_SPI_Init+0x42>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a84      	ldr	r2, [pc, #528]	; (8009f34 <HAL_SPI_Init+0x244>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d005      	beq.n	8009d32 <HAL_SPI_Init+0x42>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	d901      	bls.n	8009d32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e0f7      	b.n	8009f22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f900 	bl	8009f38 <SPI_GetPacketSize>
 8009d38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a7b      	ldr	r2, [pc, #492]	; (8009f2c <HAL_SPI_Init+0x23c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00c      	beq.n	8009d5e <HAL_SPI_Init+0x6e>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a79      	ldr	r2, [pc, #484]	; (8009f30 <HAL_SPI_Init+0x240>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d007      	beq.n	8009d5e <HAL_SPI_Init+0x6e>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a78      	ldr	r2, [pc, #480]	; (8009f34 <HAL_SPI_Init+0x244>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d002      	beq.n	8009d5e <HAL_SPI_Init+0x6e>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b08      	cmp	r3, #8
 8009d5c:	d811      	bhi.n	8009d82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d62:	4a72      	ldr	r2, [pc, #456]	; (8009f2c <HAL_SPI_Init+0x23c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d009      	beq.n	8009d7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a70      	ldr	r2, [pc, #448]	; (8009f30 <HAL_SPI_Init+0x240>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d004      	beq.n	8009d7c <HAL_SPI_Init+0x8c>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a6f      	ldr	r2, [pc, #444]	; (8009f34 <HAL_SPI_Init+0x244>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d104      	bne.n	8009d86 <HAL_SPI_Init+0x96>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b10      	cmp	r3, #16
 8009d80:	d901      	bls.n	8009d86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e0cd      	b.n	8009f22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7f8 f98a 	bl	80020b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0201 	bic.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009dc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dcc:	d119      	bne.n	8009e02 <HAL_SPI_Init+0x112>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dd6:	d103      	bne.n	8009de0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d008      	beq.n	8009df2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10c      	bne.n	8009e02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df0:	d107      	bne.n	8009e02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00f      	beq.n	8009e2e <HAL_SPI_Init+0x13e>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	2b06      	cmp	r3, #6
 8009e14:	d90b      	bls.n	8009e2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	e007      	b.n	8009e3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69da      	ldr	r2, [r3, #28]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	431a      	orrs	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e50:	ea42 0103 	orr.w	r1, r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68da      	ldr	r2, [r3, #12]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	431a      	orrs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9e:	ea42 0103 	orr.w	r1, r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d113      	bne.n	8009ede <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ec8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009edc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0201 	bic.w	r2, r2, #1
 8009eec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	40013000 	.word	0x40013000
 8009f30:	40003800 	.word	0x40003800
 8009f34:	40003c00 	.word	0x40003c00

08009f38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	3301      	adds	r3, #1
 8009f48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	3307      	adds	r3, #7
 8009f56:	08db      	lsrs	r3, r3, #3
 8009f58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e042      	b.n	800a006 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7f8 f958 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2224      	movs	r2, #36	; 0x24
 8009f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f8bb 	bl	800a12c <UART_SetConfig>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e022      	b.n	800a006 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fe17 	bl	800abfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0201 	orr.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fe9e 	bl	800ad40 <UART_CheckIdleState>
 800a004:	4603      	mov	r3, r0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b08a      	sub	sp, #40	; 0x28
 800a012:	af02      	add	r7, sp, #8
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	603b      	str	r3, [r7, #0]
 800a01a:	4613      	mov	r3, r2
 800a01c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a024:	2b20      	cmp	r3, #32
 800a026:	d17b      	bne.n	800a120 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <HAL_UART_Transmit+0x26>
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e074      	b.n	800a122 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2221      	movs	r2, #33	; 0x21
 800a044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a048:	f7f8 fce6 	bl	8002a18 <HAL_GetTick>
 800a04c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	88fa      	ldrh	r2, [r7, #6]
 800a052:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	88fa      	ldrh	r2, [r7, #6]
 800a05a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a066:	d108      	bne.n	800a07a <HAL_UART_Transmit+0x6c>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a070:	2300      	movs	r3, #0
 800a072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	e003      	b.n	800a082 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a082:	e030      	b.n	800a0e6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2180      	movs	r1, #128	; 0x80
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 ff00 	bl	800ae94 <UART_WaitOnFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2220      	movs	r2, #32
 800a09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e03d      	b.n	800a122 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	3302      	adds	r3, #2
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	e007      	b.n	800a0d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	781a      	ldrb	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1c8      	bne.n	800a084 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2140      	movs	r1, #64	; 0x40
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 fec9 	bl	800ae94 <UART_WaitOnFlagUntilTimeout>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a110:	2303      	movs	r3, #3
 800a112:	e006      	b.n	800a122 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	e000      	b.n	800a122 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a120:	2302      	movs	r3, #2
  }
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a12c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a130:	b092      	sub	sp, #72	; 0x48
 800a132:	af00      	add	r7, sp, #0
 800a134:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	689a      	ldr	r2, [r3, #8]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	431a      	orrs	r2, r3
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	4313      	orrs	r3, r2
 800a152:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4bbe      	ldr	r3, [pc, #760]	; (800a454 <UART_SetConfig+0x328>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	6812      	ldr	r2, [r2, #0]
 800a162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a164:	430b      	orrs	r3, r1
 800a166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	68da      	ldr	r2, [r3, #12]
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4ab3      	ldr	r2, [pc, #716]	; (800a458 <UART_SetConfig+0x32c>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d004      	beq.n	800a198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a194:	4313      	orrs	r3, r2
 800a196:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	4baf      	ldr	r3, [pc, #700]	; (800a45c <UART_SetConfig+0x330>)
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	f023 010f 	bic.w	r1, r3, #15
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4aa6      	ldr	r2, [pc, #664]	; (800a460 <UART_SetConfig+0x334>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d177      	bne.n	800a2bc <UART_SetConfig+0x190>
 800a1cc:	4ba5      	ldr	r3, [pc, #660]	; (800a464 <UART_SetConfig+0x338>)
 800a1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1d4:	2b28      	cmp	r3, #40	; 0x28
 800a1d6:	d86d      	bhi.n	800a2b4 <UART_SetConfig+0x188>
 800a1d8:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <UART_SetConfig+0xb4>)
 800a1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1de:	bf00      	nop
 800a1e0:	0800a285 	.word	0x0800a285
 800a1e4:	0800a2b5 	.word	0x0800a2b5
 800a1e8:	0800a2b5 	.word	0x0800a2b5
 800a1ec:	0800a2b5 	.word	0x0800a2b5
 800a1f0:	0800a2b5 	.word	0x0800a2b5
 800a1f4:	0800a2b5 	.word	0x0800a2b5
 800a1f8:	0800a2b5 	.word	0x0800a2b5
 800a1fc:	0800a2b5 	.word	0x0800a2b5
 800a200:	0800a28d 	.word	0x0800a28d
 800a204:	0800a2b5 	.word	0x0800a2b5
 800a208:	0800a2b5 	.word	0x0800a2b5
 800a20c:	0800a2b5 	.word	0x0800a2b5
 800a210:	0800a2b5 	.word	0x0800a2b5
 800a214:	0800a2b5 	.word	0x0800a2b5
 800a218:	0800a2b5 	.word	0x0800a2b5
 800a21c:	0800a2b5 	.word	0x0800a2b5
 800a220:	0800a295 	.word	0x0800a295
 800a224:	0800a2b5 	.word	0x0800a2b5
 800a228:	0800a2b5 	.word	0x0800a2b5
 800a22c:	0800a2b5 	.word	0x0800a2b5
 800a230:	0800a2b5 	.word	0x0800a2b5
 800a234:	0800a2b5 	.word	0x0800a2b5
 800a238:	0800a2b5 	.word	0x0800a2b5
 800a23c:	0800a2b5 	.word	0x0800a2b5
 800a240:	0800a29d 	.word	0x0800a29d
 800a244:	0800a2b5 	.word	0x0800a2b5
 800a248:	0800a2b5 	.word	0x0800a2b5
 800a24c:	0800a2b5 	.word	0x0800a2b5
 800a250:	0800a2b5 	.word	0x0800a2b5
 800a254:	0800a2b5 	.word	0x0800a2b5
 800a258:	0800a2b5 	.word	0x0800a2b5
 800a25c:	0800a2b5 	.word	0x0800a2b5
 800a260:	0800a2a5 	.word	0x0800a2a5
 800a264:	0800a2b5 	.word	0x0800a2b5
 800a268:	0800a2b5 	.word	0x0800a2b5
 800a26c:	0800a2b5 	.word	0x0800a2b5
 800a270:	0800a2b5 	.word	0x0800a2b5
 800a274:	0800a2b5 	.word	0x0800a2b5
 800a278:	0800a2b5 	.word	0x0800a2b5
 800a27c:	0800a2b5 	.word	0x0800a2b5
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	2301      	movs	r3, #1
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28a:	e222      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a28c:	2304      	movs	r3, #4
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e21e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a294:	2308      	movs	r3, #8
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e21a      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a29c:	2310      	movs	r3, #16
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e216      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e212      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e20e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a2b4:	2380      	movs	r3, #128	; 0x80
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e20a      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a69      	ldr	r2, [pc, #420]	; (800a468 <UART_SetConfig+0x33c>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d130      	bne.n	800a328 <UART_SetConfig+0x1fc>
 800a2c6:	4b67      	ldr	r3, [pc, #412]	; (800a464 <UART_SetConfig+0x338>)
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	d826      	bhi.n	800a320 <UART_SetConfig+0x1f4>
 800a2d2:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <UART_SetConfig+0x1ac>)
 800a2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d8:	0800a2f1 	.word	0x0800a2f1
 800a2dc:	0800a2f9 	.word	0x0800a2f9
 800a2e0:	0800a301 	.word	0x0800a301
 800a2e4:	0800a309 	.word	0x0800a309
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a319 	.word	0x0800a319
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f6:	e1ec      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fe:	e1e8      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a300:	2308      	movs	r3, #8
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e1e4      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a308:	2310      	movs	r3, #16
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e1e0      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a310:	2320      	movs	r3, #32
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e1dc      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a318:	2340      	movs	r3, #64	; 0x40
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e1d8      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a320:	2380      	movs	r3, #128	; 0x80
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e1d4      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a4f      	ldr	r2, [pc, #316]	; (800a46c <UART_SetConfig+0x340>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d130      	bne.n	800a394 <UART_SetConfig+0x268>
 800a332:	4b4c      	ldr	r3, [pc, #304]	; (800a464 <UART_SetConfig+0x338>)
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d826      	bhi.n	800a38c <UART_SetConfig+0x260>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <UART_SetConfig+0x218>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a35d 	.word	0x0800a35d
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	0800a36d 	.word	0x0800a36d
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a37d 	.word	0x0800a37d
 800a358:	0800a385 	.word	0x0800a385
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a362:	e1b6      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a364:	2304      	movs	r3, #4
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36a:	e1b2      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a36c:	2308      	movs	r3, #8
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e1ae      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a374:	2310      	movs	r3, #16
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e1aa      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a37c:	2320      	movs	r3, #32
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e1a6      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a384:	2340      	movs	r3, #64	; 0x40
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e1a2      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e19e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a35      	ldr	r2, [pc, #212]	; (800a470 <UART_SetConfig+0x344>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d130      	bne.n	800a400 <UART_SetConfig+0x2d4>
 800a39e:	4b31      	ldr	r3, [pc, #196]	; (800a464 <UART_SetConfig+0x338>)
 800a3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	d826      	bhi.n	800a3f8 <UART_SetConfig+0x2cc>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <UART_SetConfig+0x284>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3c9 	.word	0x0800a3c9
 800a3b4:	0800a3d1 	.word	0x0800a3d1
 800a3b8:	0800a3d9 	.word	0x0800a3d9
 800a3bc:	0800a3e1 	.word	0x0800a3e1
 800a3c0:	0800a3e9 	.word	0x0800a3e9
 800a3c4:	0800a3f1 	.word	0x0800a3f1
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ce:	e180      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e17c      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a3d8:	2308      	movs	r3, #8
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e178      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e174      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ee:	e170      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a3f0:	2340      	movs	r3, #64	; 0x40
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e16c      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a3f8:	2380      	movs	r3, #128	; 0x80
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fe:	e168      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a1b      	ldr	r2, [pc, #108]	; (800a474 <UART_SetConfig+0x348>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d142      	bne.n	800a490 <UART_SetConfig+0x364>
 800a40a:	4b16      	ldr	r3, [pc, #88]	; (800a464 <UART_SetConfig+0x338>)
 800a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b05      	cmp	r3, #5
 800a414:	d838      	bhi.n	800a488 <UART_SetConfig+0x35c>
 800a416:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <UART_SetConfig+0x2f0>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a435 	.word	0x0800a435
 800a420:	0800a43d 	.word	0x0800a43d
 800a424:	0800a445 	.word	0x0800a445
 800a428:	0800a44d 	.word	0x0800a44d
 800a42c:	0800a479 	.word	0x0800a479
 800a430:	0800a481 	.word	0x0800a481
 800a434:	2300      	movs	r3, #0
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43a:	e14a      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a43c:	2304      	movs	r3, #4
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e146      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a444:	2308      	movs	r3, #8
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e142      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a44c:	2310      	movs	r3, #16
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e13e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a454:	cfff69f3 	.word	0xcfff69f3
 800a458:	58000c00 	.word	0x58000c00
 800a45c:	11fff4ff 	.word	0x11fff4ff
 800a460:	40011000 	.word	0x40011000
 800a464:	58024400 	.word	0x58024400
 800a468:	40004400 	.word	0x40004400
 800a46c:	40004800 	.word	0x40004800
 800a470:	40004c00 	.word	0x40004c00
 800a474:	40005000 	.word	0x40005000
 800a478:	2320      	movs	r3, #32
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47e:	e128      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e124      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e120      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4acb      	ldr	r2, [pc, #812]	; (800a7c4 <UART_SetConfig+0x698>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d176      	bne.n	800a588 <UART_SetConfig+0x45c>
 800a49a:	4bcb      	ldr	r3, [pc, #812]	; (800a7c8 <UART_SetConfig+0x69c>)
 800a49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4a2:	2b28      	cmp	r3, #40	; 0x28
 800a4a4:	d86c      	bhi.n	800a580 <UART_SetConfig+0x454>
 800a4a6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <UART_SetConfig+0x380>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a551 	.word	0x0800a551
 800a4b0:	0800a581 	.word	0x0800a581
 800a4b4:	0800a581 	.word	0x0800a581
 800a4b8:	0800a581 	.word	0x0800a581
 800a4bc:	0800a581 	.word	0x0800a581
 800a4c0:	0800a581 	.word	0x0800a581
 800a4c4:	0800a581 	.word	0x0800a581
 800a4c8:	0800a581 	.word	0x0800a581
 800a4cc:	0800a559 	.word	0x0800a559
 800a4d0:	0800a581 	.word	0x0800a581
 800a4d4:	0800a581 	.word	0x0800a581
 800a4d8:	0800a581 	.word	0x0800a581
 800a4dc:	0800a581 	.word	0x0800a581
 800a4e0:	0800a581 	.word	0x0800a581
 800a4e4:	0800a581 	.word	0x0800a581
 800a4e8:	0800a581 	.word	0x0800a581
 800a4ec:	0800a561 	.word	0x0800a561
 800a4f0:	0800a581 	.word	0x0800a581
 800a4f4:	0800a581 	.word	0x0800a581
 800a4f8:	0800a581 	.word	0x0800a581
 800a4fc:	0800a581 	.word	0x0800a581
 800a500:	0800a581 	.word	0x0800a581
 800a504:	0800a581 	.word	0x0800a581
 800a508:	0800a581 	.word	0x0800a581
 800a50c:	0800a569 	.word	0x0800a569
 800a510:	0800a581 	.word	0x0800a581
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a581 	.word	0x0800a581
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a581 	.word	0x0800a581
 800a524:	0800a581 	.word	0x0800a581
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a571 	.word	0x0800a571
 800a530:	0800a581 	.word	0x0800a581
 800a534:	0800a581 	.word	0x0800a581
 800a538:	0800a581 	.word	0x0800a581
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a581 	.word	0x0800a581
 800a544:	0800a581 	.word	0x0800a581
 800a548:	0800a581 	.word	0x0800a581
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	2301      	movs	r3, #1
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a556:	e0bc      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a558:	2304      	movs	r3, #4
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e0b8      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a560:	2308      	movs	r3, #8
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e0b4      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a568:	2310      	movs	r3, #16
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e0b0      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a570:	2320      	movs	r3, #32
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a576:	e0ac      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e0a8      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e0a4      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a8f      	ldr	r2, [pc, #572]	; (800a7cc <UART_SetConfig+0x6a0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d130      	bne.n	800a5f4 <UART_SetConfig+0x4c8>
 800a592:	4b8d      	ldr	r3, [pc, #564]	; (800a7c8 <UART_SetConfig+0x69c>)
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d826      	bhi.n	800a5ec <UART_SetConfig+0x4c0>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <UART_SetConfig+0x478>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5bd 	.word	0x0800a5bd
 800a5a8:	0800a5c5 	.word	0x0800a5c5
 800a5ac:	0800a5cd 	.word	0x0800a5cd
 800a5b0:	0800a5d5 	.word	0x0800a5d5
 800a5b4:	0800a5dd 	.word	0x0800a5dd
 800a5b8:	0800a5e5 	.word	0x0800a5e5
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c2:	e086      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ca:	e082      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e07e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5da:	e07a      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5dc:	2320      	movs	r3, #32
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e2:	e076      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e072      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5ec:	2380      	movs	r3, #128	; 0x80
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e06e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a75      	ldr	r2, [pc, #468]	; (800a7d0 <UART_SetConfig+0x6a4>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d130      	bne.n	800a660 <UART_SetConfig+0x534>
 800a5fe:	4b72      	ldr	r3, [pc, #456]	; (800a7c8 <UART_SetConfig+0x69c>)
 800a600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	2b05      	cmp	r3, #5
 800a608:	d826      	bhi.n	800a658 <UART_SetConfig+0x52c>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <UART_SetConfig+0x4e4>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a629 	.word	0x0800a629
 800a614:	0800a631 	.word	0x0800a631
 800a618:	0800a639 	.word	0x0800a639
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a649 	.word	0x0800a649
 800a624:	0800a651 	.word	0x0800a651
 800a628:	2300      	movs	r3, #0
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e050      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a630:	2304      	movs	r3, #4
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e04c      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a638:	2308      	movs	r3, #8
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e048      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a640:	2310      	movs	r3, #16
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e044      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a648:	2320      	movs	r3, #32
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e040      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e03c      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a658:	2380      	movs	r3, #128	; 0x80
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e038      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a5b      	ldr	r2, [pc, #364]	; (800a7d4 <UART_SetConfig+0x6a8>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d130      	bne.n	800a6cc <UART_SetConfig+0x5a0>
 800a66a:	4b57      	ldr	r3, [pc, #348]	; (800a7c8 <UART_SetConfig+0x69c>)
 800a66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a66e:	f003 0307 	and.w	r3, r3, #7
 800a672:	2b05      	cmp	r3, #5
 800a674:	d826      	bhi.n	800a6c4 <UART_SetConfig+0x598>
 800a676:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <UART_SetConfig+0x550>)
 800a678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67c:	0800a695 	.word	0x0800a695
 800a680:	0800a69d 	.word	0x0800a69d
 800a684:	0800a6a5 	.word	0x0800a6a5
 800a688:	0800a6ad 	.word	0x0800a6ad
 800a68c:	0800a6b5 	.word	0x0800a6b5
 800a690:	0800a6bd 	.word	0x0800a6bd
 800a694:	2302      	movs	r3, #2
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69a:	e01a      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a69c:	2304      	movs	r3, #4
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a2:	e016      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a6a4:	2308      	movs	r3, #8
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6aa:	e012      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a6ac:	2310      	movs	r3, #16
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b2:	e00e      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a6b4:	2320      	movs	r3, #32
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ba:	e00a      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a6bc:	2340      	movs	r3, #64	; 0x40
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c2:	e006      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a6c4:	2380      	movs	r3, #128	; 0x80
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ca:	e002      	b.n	800a6d2 <UART_SetConfig+0x5a6>
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a3f      	ldr	r2, [pc, #252]	; (800a7d4 <UART_SetConfig+0x6a8>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	f040 80f8 	bne.w	800a8ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	dc46      	bgt.n	800a774 <UART_SetConfig+0x648>
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	f2c0 8082 	blt.w	800a7f0 <UART_SetConfig+0x6c4>
 800a6ec:	3b02      	subs	r3, #2
 800a6ee:	2b1e      	cmp	r3, #30
 800a6f0:	d87e      	bhi.n	800a7f0 <UART_SetConfig+0x6c4>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <UART_SetConfig+0x5cc>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a77b 	.word	0x0800a77b
 800a6fc:	0800a7f1 	.word	0x0800a7f1
 800a700:	0800a783 	.word	0x0800a783
 800a704:	0800a7f1 	.word	0x0800a7f1
 800a708:	0800a7f1 	.word	0x0800a7f1
 800a70c:	0800a7f1 	.word	0x0800a7f1
 800a710:	0800a793 	.word	0x0800a793
 800a714:	0800a7f1 	.word	0x0800a7f1
 800a718:	0800a7f1 	.word	0x0800a7f1
 800a71c:	0800a7f1 	.word	0x0800a7f1
 800a720:	0800a7f1 	.word	0x0800a7f1
 800a724:	0800a7f1 	.word	0x0800a7f1
 800a728:	0800a7f1 	.word	0x0800a7f1
 800a72c:	0800a7f1 	.word	0x0800a7f1
 800a730:	0800a7a3 	.word	0x0800a7a3
 800a734:	0800a7f1 	.word	0x0800a7f1
 800a738:	0800a7f1 	.word	0x0800a7f1
 800a73c:	0800a7f1 	.word	0x0800a7f1
 800a740:	0800a7f1 	.word	0x0800a7f1
 800a744:	0800a7f1 	.word	0x0800a7f1
 800a748:	0800a7f1 	.word	0x0800a7f1
 800a74c:	0800a7f1 	.word	0x0800a7f1
 800a750:	0800a7f1 	.word	0x0800a7f1
 800a754:	0800a7f1 	.word	0x0800a7f1
 800a758:	0800a7f1 	.word	0x0800a7f1
 800a75c:	0800a7f1 	.word	0x0800a7f1
 800a760:	0800a7f1 	.word	0x0800a7f1
 800a764:	0800a7f1 	.word	0x0800a7f1
 800a768:	0800a7f1 	.word	0x0800a7f1
 800a76c:	0800a7f1 	.word	0x0800a7f1
 800a770:	0800a7e3 	.word	0x0800a7e3
 800a774:	2b40      	cmp	r3, #64	; 0x40
 800a776:	d037      	beq.n	800a7e8 <UART_SetConfig+0x6bc>
 800a778:	e03a      	b.n	800a7f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a77a:	f7fe f90d 	bl	8008998 <HAL_RCCEx_GetD3PCLK1Freq>
 800a77e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a780:	e03c      	b.n	800a7fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe f91c 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a790:	e034      	b.n	800a7fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a792:	f107 0318 	add.w	r3, r7, #24
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fa68 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a0:	e02c      	b.n	800a7fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7a2:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <UART_SetConfig+0x69c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d016      	beq.n	800a7dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7ae:	4b06      	ldr	r3, [pc, #24]	; (800a7c8 <UART_SetConfig+0x69c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	08db      	lsrs	r3, r3, #3
 800a7b4:	f003 0303 	and.w	r3, r3, #3
 800a7b8:	4a07      	ldr	r2, [pc, #28]	; (800a7d8 <UART_SetConfig+0x6ac>)
 800a7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7c0:	e01c      	b.n	800a7fc <UART_SetConfig+0x6d0>
 800a7c2:	bf00      	nop
 800a7c4:	40011400 	.word	0x40011400
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	40007800 	.word	0x40007800
 800a7d0:	40007c00 	.word	0x40007c00
 800a7d4:	58000c00 	.word	0x58000c00
 800a7d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a7dc:	4b9d      	ldr	r3, [pc, #628]	; (800aa54 <UART_SetConfig+0x928>)
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7e0:	e00c      	b.n	800a7fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7e2:	4b9d      	ldr	r3, [pc, #628]	; (800aa58 <UART_SetConfig+0x92c>)
 800a7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7e6:	e009      	b.n	800a7fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ee:	e005      	b.n	800a7fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a7fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 81de 	beq.w	800abc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	4a94      	ldr	r2, [pc, #592]	; (800aa5c <UART_SetConfig+0x930>)
 800a80a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a80e:	461a      	mov	r2, r3
 800a810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a812:	fbb3 f3f2 	udiv	r3, r3, r2
 800a816:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4613      	mov	r3, r2
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	4413      	add	r3, r2
 800a822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a824:	429a      	cmp	r2, r3
 800a826:	d305      	bcc.n	800a834 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a830:	429a      	cmp	r2, r3
 800a832:	d903      	bls.n	800a83c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a83a:	e1c1      	b.n	800abc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83e:	2200      	movs	r2, #0
 800a840:	60bb      	str	r3, [r7, #8]
 800a842:	60fa      	str	r2, [r7, #12]
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	4a84      	ldr	r2, [pc, #528]	; (800aa5c <UART_SetConfig+0x930>)
 800a84a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	2200      	movs	r2, #0
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	607a      	str	r2, [r7, #4]
 800a856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a85e:	f7f5 fd97 	bl	8000390 <__aeabi_uldivmod>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	4610      	mov	r0, r2
 800a868:	4619      	mov	r1, r3
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	f04f 0300 	mov.w	r3, #0
 800a872:	020b      	lsls	r3, r1, #8
 800a874:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a878:	0202      	lsls	r2, r0, #8
 800a87a:	6979      	ldr	r1, [r7, #20]
 800a87c:	6849      	ldr	r1, [r1, #4]
 800a87e:	0849      	lsrs	r1, r1, #1
 800a880:	2000      	movs	r0, #0
 800a882:	460c      	mov	r4, r1
 800a884:	4605      	mov	r5, r0
 800a886:	eb12 0804 	adds.w	r8, r2, r4
 800a88a:	eb43 0905 	adc.w	r9, r3, r5
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	469a      	mov	sl, r3
 800a896:	4693      	mov	fp, r2
 800a898:	4652      	mov	r2, sl
 800a89a:	465b      	mov	r3, fp
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fd76 	bl	8000390 <__aeabi_uldivmod>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8b2:	d308      	bcc.n	800a8c6 <UART_SetConfig+0x79a>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ba:	d204      	bcs.n	800a8c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c2:	60da      	str	r2, [r3, #12]
 800a8c4:	e17c      	b.n	800abc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8cc:	e178      	b.n	800abc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8d6:	f040 80c5 	bne.w	800aa64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a8da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	dc48      	bgt.n	800a974 <UART_SetConfig+0x848>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	db7b      	blt.n	800a9de <UART_SetConfig+0x8b2>
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d879      	bhi.n	800a9de <UART_SetConfig+0x8b2>
 800a8ea:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <UART_SetConfig+0x7c4>)
 800a8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f0:	0800a97b 	.word	0x0800a97b
 800a8f4:	0800a983 	.word	0x0800a983
 800a8f8:	0800a9df 	.word	0x0800a9df
 800a8fc:	0800a9df 	.word	0x0800a9df
 800a900:	0800a98b 	.word	0x0800a98b
 800a904:	0800a9df 	.word	0x0800a9df
 800a908:	0800a9df 	.word	0x0800a9df
 800a90c:	0800a9df 	.word	0x0800a9df
 800a910:	0800a99b 	.word	0x0800a99b
 800a914:	0800a9df 	.word	0x0800a9df
 800a918:	0800a9df 	.word	0x0800a9df
 800a91c:	0800a9df 	.word	0x0800a9df
 800a920:	0800a9df 	.word	0x0800a9df
 800a924:	0800a9df 	.word	0x0800a9df
 800a928:	0800a9df 	.word	0x0800a9df
 800a92c:	0800a9df 	.word	0x0800a9df
 800a930:	0800a9ab 	.word	0x0800a9ab
 800a934:	0800a9df 	.word	0x0800a9df
 800a938:	0800a9df 	.word	0x0800a9df
 800a93c:	0800a9df 	.word	0x0800a9df
 800a940:	0800a9df 	.word	0x0800a9df
 800a944:	0800a9df 	.word	0x0800a9df
 800a948:	0800a9df 	.word	0x0800a9df
 800a94c:	0800a9df 	.word	0x0800a9df
 800a950:	0800a9df 	.word	0x0800a9df
 800a954:	0800a9df 	.word	0x0800a9df
 800a958:	0800a9df 	.word	0x0800a9df
 800a95c:	0800a9df 	.word	0x0800a9df
 800a960:	0800a9df 	.word	0x0800a9df
 800a964:	0800a9df 	.word	0x0800a9df
 800a968:	0800a9df 	.word	0x0800a9df
 800a96c:	0800a9df 	.word	0x0800a9df
 800a970:	0800a9d1 	.word	0x0800a9d1
 800a974:	2b40      	cmp	r3, #64	; 0x40
 800a976:	d02e      	beq.n	800a9d6 <UART_SetConfig+0x8aa>
 800a978:	e031      	b.n	800a9de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a97a:	f7fc f857 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800a97e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a980:	e033      	b.n	800a9ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a982:	f7fc f869 	bl	8006a58 <HAL_RCC_GetPCLK2Freq>
 800a986:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a988:	e02f      	b.n	800a9ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe f818 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a998:	e027      	b.n	800a9ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99a:	f107 0318 	add.w	r3, r7, #24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe f964 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a8:	e01f      	b.n	800a9ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9aa:	4b2d      	ldr	r3, [pc, #180]	; (800aa60 <UART_SetConfig+0x934>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d009      	beq.n	800a9ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9b6:	4b2a      	ldr	r3, [pc, #168]	; (800aa60 <UART_SetConfig+0x934>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	08db      	lsrs	r3, r3, #3
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	4a24      	ldr	r2, [pc, #144]	; (800aa54 <UART_SetConfig+0x928>)
 800a9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9c8:	e00f      	b.n	800a9ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a9ca:	4b22      	ldr	r3, [pc, #136]	; (800aa54 <UART_SetConfig+0x928>)
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ce:	e00c      	b.n	800a9ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9d0:	4b21      	ldr	r3, [pc, #132]	; (800aa58 <UART_SetConfig+0x92c>)
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9d4:	e009      	b.n	800a9ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9dc:	e005      	b.n	800a9ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a9e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 80e7 	beq.w	800abc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	4a19      	ldr	r2, [pc, #100]	; (800aa5c <UART_SetConfig+0x930>)
 800a9f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa00:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa04:	005a      	lsls	r2, r3, #1
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	441a      	add	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	d916      	bls.n	800aa4c <UART_SetConfig+0x920>
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa24:	d212      	bcs.n	800aa4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	f023 030f 	bic.w	r3, r3, #15
 800aa2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	085b      	lsrs	r3, r3, #1
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aa48:	60da      	str	r2, [r3, #12]
 800aa4a:	e0b9      	b.n	800abc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa52:	e0b5      	b.n	800abc0 <UART_SetConfig+0xa94>
 800aa54:	03d09000 	.word	0x03d09000
 800aa58:	003d0900 	.word	0x003d0900
 800aa5c:	0800c3d8 	.word	0x0800c3d8
 800aa60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa68:	2b20      	cmp	r3, #32
 800aa6a:	dc49      	bgt.n	800ab00 <UART_SetConfig+0x9d4>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	db7c      	blt.n	800ab6a <UART_SetConfig+0xa3e>
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	d87a      	bhi.n	800ab6a <UART_SetConfig+0xa3e>
 800aa74:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <UART_SetConfig+0x950>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800ab07 	.word	0x0800ab07
 800aa80:	0800ab0f 	.word	0x0800ab0f
 800aa84:	0800ab6b 	.word	0x0800ab6b
 800aa88:	0800ab6b 	.word	0x0800ab6b
 800aa8c:	0800ab17 	.word	0x0800ab17
 800aa90:	0800ab6b 	.word	0x0800ab6b
 800aa94:	0800ab6b 	.word	0x0800ab6b
 800aa98:	0800ab6b 	.word	0x0800ab6b
 800aa9c:	0800ab27 	.word	0x0800ab27
 800aaa0:	0800ab6b 	.word	0x0800ab6b
 800aaa4:	0800ab6b 	.word	0x0800ab6b
 800aaa8:	0800ab6b 	.word	0x0800ab6b
 800aaac:	0800ab6b 	.word	0x0800ab6b
 800aab0:	0800ab6b 	.word	0x0800ab6b
 800aab4:	0800ab6b 	.word	0x0800ab6b
 800aab8:	0800ab6b 	.word	0x0800ab6b
 800aabc:	0800ab37 	.word	0x0800ab37
 800aac0:	0800ab6b 	.word	0x0800ab6b
 800aac4:	0800ab6b 	.word	0x0800ab6b
 800aac8:	0800ab6b 	.word	0x0800ab6b
 800aacc:	0800ab6b 	.word	0x0800ab6b
 800aad0:	0800ab6b 	.word	0x0800ab6b
 800aad4:	0800ab6b 	.word	0x0800ab6b
 800aad8:	0800ab6b 	.word	0x0800ab6b
 800aadc:	0800ab6b 	.word	0x0800ab6b
 800aae0:	0800ab6b 	.word	0x0800ab6b
 800aae4:	0800ab6b 	.word	0x0800ab6b
 800aae8:	0800ab6b 	.word	0x0800ab6b
 800aaec:	0800ab6b 	.word	0x0800ab6b
 800aaf0:	0800ab6b 	.word	0x0800ab6b
 800aaf4:	0800ab6b 	.word	0x0800ab6b
 800aaf8:	0800ab6b 	.word	0x0800ab6b
 800aafc:	0800ab5d 	.word	0x0800ab5d
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	d02e      	beq.n	800ab62 <UART_SetConfig+0xa36>
 800ab04:	e031      	b.n	800ab6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab06:	f7fb ff91 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800ab0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab0c:	e033      	b.n	800ab76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab0e:	f7fb ffa3 	bl	8006a58 <HAL_RCC_GetPCLK2Freq>
 800ab12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab14:	e02f      	b.n	800ab76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fd ff52 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab24:	e027      	b.n	800ab76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab26:	f107 0318 	add.w	r3, r7, #24
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe f89e 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab34:	e01f      	b.n	800ab76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab36:	4b2d      	ldr	r3, [pc, #180]	; (800abec <UART_SetConfig+0xac0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d009      	beq.n	800ab56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab42:	4b2a      	ldr	r3, [pc, #168]	; (800abec <UART_SetConfig+0xac0>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	4a28      	ldr	r2, [pc, #160]	; (800abf0 <UART_SetConfig+0xac4>)
 800ab4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab54:	e00f      	b.n	800ab76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ab56:	4b26      	ldr	r3, [pc, #152]	; (800abf0 <UART_SetConfig+0xac4>)
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5a:	e00c      	b.n	800ab76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab5c:	4b25      	ldr	r3, [pc, #148]	; (800abf4 <UART_SetConfig+0xac8>)
 800ab5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab60:	e009      	b.n	800ab76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab68:	e005      	b.n	800ab76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab74:	bf00      	nop
    }

    if (pclk != 0U)
 800ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d021      	beq.n	800abc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab80:	4a1d      	ldr	r2, [pc, #116]	; (800abf8 <UART_SetConfig+0xacc>)
 800ab82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab86:	461a      	mov	r2, r3
 800ab88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	085b      	lsrs	r3, r3, #1
 800ab94:	441a      	add	r2, r3
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	2b0f      	cmp	r3, #15
 800aba4:	d909      	bls.n	800abba <UART_SetConfig+0xa8e>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abac:	d205      	bcs.n	800abba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60da      	str	r2, [r3, #12]
 800abb8:	e002      	b.n	800abc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2201      	movs	r2, #1
 800abcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2200      	movs	r2, #0
 800abd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2200      	movs	r2, #0
 800abda:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800abdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3748      	adds	r7, #72	; 0x48
 800abe4:	46bd      	mov	sp, r7
 800abe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abea:	bf00      	nop
 800abec:	58024400 	.word	0x58024400
 800abf0:	03d09000 	.word	0x03d09000
 800abf4:	003d0900 	.word	0x003d0900
 800abf8:	0800c3d8 	.word	0x0800c3d8

0800abfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	430a      	orrs	r2, r1
 800ac46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	f003 0308 	and.w	r3, r3, #8
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac90:	f003 0310 	and.w	r3, r3, #16
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00a      	beq.n	800acae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01a      	beq.n	800ad12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acfa:	d10a      	bne.n	800ad12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00a      	beq.n	800ad34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	605a      	str	r2, [r3, #4]
  }
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b098      	sub	sp, #96	; 0x60
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad50:	f7f7 fe62 	bl	8002a18 <HAL_GetTick>
 800ad54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d12f      	bne.n	800adc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f88e 	bl	800ae94 <UART_WaitOnFlagUntilTimeout>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d022      	beq.n	800adc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	e853 3f00 	ldrex	r3, [r3]
 800ad8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad92:	653b      	str	r3, [r7, #80]	; 0x50
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ada2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e6      	bne.n	800ad7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e063      	b.n	800ae8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0304 	and.w	r3, r3, #4
 800adce:	2b04      	cmp	r3, #4
 800add0:	d149      	bne.n	800ae66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800add2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adda:	2200      	movs	r2, #0
 800addc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f857 	bl	800ae94 <UART_WaitOnFlagUntilTimeout>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d03c      	beq.n	800ae66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	623b      	str	r3, [r7, #32]
   return(result);
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0a:	633b      	str	r3, [r7, #48]	; 0x30
 800ae0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae3e:	61fa      	str	r2, [r7, #28]
 800ae40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	69b9      	ldr	r1, [r7, #24]
 800ae44:	69fa      	ldr	r2, [r7, #28]
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	617b      	str	r3, [r7, #20]
   return(result);
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e5      	bne.n	800ae1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2220      	movs	r2, #32
 800ae56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e012      	b.n	800ae8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2220      	movs	r2, #32
 800ae6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2220      	movs	r2, #32
 800ae72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3758      	adds	r7, #88	; 0x58
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	4613      	mov	r3, r2
 800aea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aea4:	e049      	b.n	800af3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d045      	beq.n	800af3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeae:	f7f7 fdb3 	bl	8002a18 <HAL_GetTick>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d302      	bcc.n	800aec4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e048      	b.n	800af5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0304 	and.w	r3, r3, #4
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d031      	beq.n	800af3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	f003 0308 	and.w	r3, r3, #8
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d110      	bne.n	800af06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2208      	movs	r2, #8
 800aeea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f839 	bl	800af64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2208      	movs	r2, #8
 800aef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e029      	b.n	800af5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af14:	d111      	bne.n	800af3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 f81f 	bl	800af64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2220      	movs	r2, #32
 800af2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800af36:	2303      	movs	r3, #3
 800af38:	e00f      	b.n	800af5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69da      	ldr	r2, [r3, #28]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4013      	ands	r3, r2
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	429a      	cmp	r2, r3
 800af48:	bf0c      	ite	eq
 800af4a:	2301      	moveq	r3, #1
 800af4c:	2300      	movne	r3, #0
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	461a      	mov	r2, r3
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	429a      	cmp	r2, r3
 800af56:	d0a6      	beq.n	800aea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
	...

0800af64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af64:	b480      	push	{r7}
 800af66:	b095      	sub	sp, #84	; 0x54
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8a:	643b      	str	r3, [r7, #64]	; 0x40
 800af8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e6      	bne.n	800af6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3308      	adds	r3, #8
 800afa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	61fb      	str	r3, [r7, #28]
   return(result);
 800afae:	69fa      	ldr	r2, [r7, #28]
 800afb0:	4b1e      	ldr	r3, [pc, #120]	; (800b02c <UART_EndRxTransfer+0xc8>)
 800afb2:	4013      	ands	r3, r2
 800afb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3308      	adds	r3, #8
 800afbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e5      	bne.n	800af9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d118      	bne.n	800b00c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	e853 3f00 	ldrex	r3, [r3]
 800afe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f023 0310 	bic.w	r3, r3, #16
 800afee:	647b      	str	r3, [r7, #68]	; 0x44
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	461a      	mov	r2, r3
 800aff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affc:	6979      	ldr	r1, [r7, #20]
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	e841 2300 	strex	r3, r2, [r1]
 800b004:	613b      	str	r3, [r7, #16]
   return(result);
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e6      	bne.n	800afda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b020:	bf00      	nop
 800b022:	3754      	adds	r7, #84	; 0x54
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	effffffe 	.word	0xeffffffe

0800b030 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d101      	bne.n	800b046 <HAL_UARTEx_DisableFifoMode+0x16>
 800b042:	2302      	movs	r3, #2
 800b044:	e027      	b.n	800b096 <HAL_UARTEx_DisableFifoMode+0x66>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2224      	movs	r2, #36	; 0x24
 800b052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f022 0201 	bic.w	r2, r2, #1
 800b06c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b074:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2220      	movs	r2, #32
 800b088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	e02d      	b.n	800b116 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2224      	movs	r2, #36	; 0x24
 800b0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0201 	bic.w	r2, r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f850 	bl	800b19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d101      	bne.n	800b136 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b132:	2302      	movs	r3, #2
 800b134:	e02d      	b.n	800b192 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2224      	movs	r2, #36	; 0x24
 800b142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0201 	bic.w	r2, r2, #1
 800b15c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f812 	bl	800b19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d108      	bne.n	800b1be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1bc:	e031      	b.n	800b222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1be:	2310      	movs	r3, #16
 800b1c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	0e5b      	lsrs	r3, r3, #25
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	f003 0307 	and.w	r3, r3, #7
 800b1d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	0f5b      	lsrs	r3, r3, #29
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	7b3a      	ldrb	r2, [r7, #12]
 800b1ea:	4911      	ldr	r1, [pc, #68]	; (800b230 <UARTEx_SetNbDataToProcess+0x94>)
 800b1ec:	5c8a      	ldrb	r2, [r1, r2]
 800b1ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1f2:	7b3a      	ldrb	r2, [r7, #12]
 800b1f4:	490f      	ldr	r1, [pc, #60]	; (800b234 <UARTEx_SetNbDataToProcess+0x98>)
 800b1f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b204:	7bfb      	ldrb	r3, [r7, #15]
 800b206:	7b7a      	ldrb	r2, [r7, #13]
 800b208:	4909      	ldr	r1, [pc, #36]	; (800b230 <UARTEx_SetNbDataToProcess+0x94>)
 800b20a:	5c8a      	ldrb	r2, [r1, r2]
 800b20c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b210:	7b7a      	ldrb	r2, [r7, #13]
 800b212:	4908      	ldr	r1, [pc, #32]	; (800b234 <UARTEx_SetNbDataToProcess+0x98>)
 800b214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b216:	fb93 f3f2 	sdiv	r3, r3, r2
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	0800c3f0 	.word	0x0800c3f0
 800b234:	0800c3f8 	.word	0x0800c3f8

0800b238 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d121      	bne.n	800b28e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	4b27      	ldr	r3, [pc, #156]	; (800b2ec <FMC_SDRAM_Init+0xb4>)
 800b250:	4013      	ands	r3, r2
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	6851      	ldr	r1, [r2, #4]
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	6892      	ldr	r2, [r2, #8]
 800b25a:	4311      	orrs	r1, r2
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	68d2      	ldr	r2, [r2, #12]
 800b260:	4311      	orrs	r1, r2
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	6912      	ldr	r2, [r2, #16]
 800b266:	4311      	orrs	r1, r2
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	6952      	ldr	r2, [r2, #20]
 800b26c:	4311      	orrs	r1, r2
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	6992      	ldr	r2, [r2, #24]
 800b272:	4311      	orrs	r1, r2
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	69d2      	ldr	r2, [r2, #28]
 800b278:	4311      	orrs	r1, r2
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	6a12      	ldr	r2, [r2, #32]
 800b27e:	4311      	orrs	r1, r2
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b284:	430a      	orrs	r2, r1
 800b286:	431a      	orrs	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	e026      	b.n	800b2dc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	69d9      	ldr	r1, [r3, #28]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	4319      	orrs	r1, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	4b0e      	ldr	r3, [pc, #56]	; (800b2ec <FMC_SDRAM_Init+0xb4>)
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	6851      	ldr	r1, [r2, #4]
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	6892      	ldr	r2, [r2, #8]
 800b2bc:	4311      	orrs	r1, r2
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	68d2      	ldr	r2, [r2, #12]
 800b2c2:	4311      	orrs	r1, r2
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	6912      	ldr	r2, [r2, #16]
 800b2c8:	4311      	orrs	r1, r2
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	6952      	ldr	r2, [r2, #20]
 800b2ce:	4311      	orrs	r1, r2
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	6992      	ldr	r2, [r2, #24]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	431a      	orrs	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	ffff8000 	.word	0xffff8000

0800b2f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d128      	bne.n	800b354 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	1e59      	subs	r1, r3, #1
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	3b01      	subs	r3, #1
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	4319      	orrs	r1, r3
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	3b01      	subs	r3, #1
 800b320:	021b      	lsls	r3, r3, #8
 800b322:	4319      	orrs	r1, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	3b01      	subs	r3, #1
 800b32a:	031b      	lsls	r3, r3, #12
 800b32c:	4319      	orrs	r1, r3
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	3b01      	subs	r3, #1
 800b334:	041b      	lsls	r3, r3, #16
 800b336:	4319      	orrs	r1, r3
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	051b      	lsls	r3, r3, #20
 800b340:	4319      	orrs	r1, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	3b01      	subs	r3, #1
 800b348:	061b      	lsls	r3, r3, #24
 800b34a:	430b      	orrs	r3, r1
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	609a      	str	r2, [r3, #8]
 800b352:	e02d      	b.n	800b3b0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	4b19      	ldr	r3, [pc, #100]	; (800b3c0 <FMC_SDRAM_Timing_Init+0xd0>)
 800b35a:	4013      	ands	r3, r2
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	68d2      	ldr	r2, [r2, #12]
 800b360:	3a01      	subs	r2, #1
 800b362:	0311      	lsls	r1, r2, #12
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	6952      	ldr	r2, [r2, #20]
 800b368:	3a01      	subs	r2, #1
 800b36a:	0512      	lsls	r2, r2, #20
 800b36c:	430a      	orrs	r2, r1
 800b36e:	431a      	orrs	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	1e59      	subs	r1, r3, #1
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	3b01      	subs	r3, #1
 800b388:	011b      	lsls	r3, r3, #4
 800b38a:	4319      	orrs	r1, r3
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	3b01      	subs	r3, #1
 800b392:	021b      	lsls	r3, r3, #8
 800b394:	4319      	orrs	r1, r3
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	4319      	orrs	r1, r3
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	061b      	lsls	r3, r3, #24
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	ff0f0fff 	.word	0xff0f0fff

0800b3c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	f107 001c 	add.w	r0, r7, #28
 800b3d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d120      	bne.n	800b41e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	4b2a      	ldr	r3, [pc, #168]	; (800b498 <USB_CoreInit+0xd4>)
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b402:	2b01      	cmp	r3, #1
 800b404:	d105      	bne.n	800b412 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 faac 	bl	800b970 <USB_CoreReset>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]
 800b41c:	e01a      	b.n	800b454 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 faa0 	bl	800b970 <USB_CoreReset>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	639a      	str	r2, [r3, #56]	; 0x38
 800b446:	e005      	b.n	800b454 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	2b01      	cmp	r3, #1
 800b458:	d116      	bne.n	800b488 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b468:	4b0c      	ldr	r3, [pc, #48]	; (800b49c <USB_CoreInit+0xd8>)
 800b46a:	4313      	orrs	r3, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	f043 0206 	orr.w	r2, r3, #6
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f043 0220 	orr.w	r2, r3, #32
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b494:	b004      	add	sp, #16
 800b496:	4770      	bx	lr
 800b498:	ffbdffbf 	.word	0xffbdffbf
 800b49c:	03ee0000 	.word	0x03ee0000

0800b4a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f023 0201 	bic.w	r2, r3, #1
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4de:	78fb      	ldrb	r3, [r7, #3]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d115      	bne.n	800b510 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f7f7 fa9d 	bl	8002a30 <HAL_Delay>
      ms++;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa29 	bl	800b954 <USB_GetMode>
 800b502:	4603      	mov	r3, r0
 800b504:	2b01      	cmp	r3, #1
 800b506:	d01e      	beq.n	800b546 <USB_SetCurrentMode+0x84>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2b31      	cmp	r3, #49	; 0x31
 800b50c:	d9f0      	bls.n	800b4f0 <USB_SetCurrentMode+0x2e>
 800b50e:	e01a      	b.n	800b546 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b510:	78fb      	ldrb	r3, [r7, #3]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d115      	bne.n	800b542 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b522:	2001      	movs	r0, #1
 800b524:	f7f7 fa84 	bl	8002a30 <HAL_Delay>
      ms++;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3301      	adds	r3, #1
 800b52c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fa10 	bl	800b954 <USB_GetMode>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d005      	beq.n	800b546 <USB_SetCurrentMode+0x84>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b31      	cmp	r3, #49	; 0x31
 800b53e:	d9f0      	bls.n	800b522 <USB_SetCurrentMode+0x60>
 800b540:	e001      	b.n	800b546 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e005      	b.n	800b552 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b32      	cmp	r3, #50	; 0x32
 800b54a:	d101      	bne.n	800b550 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e000      	b.n	800b552 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b55c:	b084      	sub	sp, #16
 800b55e:	b580      	push	{r7, lr}
 800b560:	b086      	sub	sp, #24
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b56a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]
 800b57a:	e009      	b.n	800b590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	3340      	adds	r3, #64	; 0x40
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	2200      	movs	r2, #0
 800b588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	3301      	adds	r3, #1
 800b58e:	613b      	str	r3, [r7, #16]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2b0e      	cmp	r3, #14
 800b594:	d9f2      	bls.n	800b57c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11c      	bne.n	800b5d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5aa:	f043 0302 	orr.w	r3, r3, #2
 800b5ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	e005      	b.n	800b5e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	680b      	ldr	r3, [r1, #0]
 800b600:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b604:	2b01      	cmp	r3, #1
 800b606:	d10c      	bne.n	800b622 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d104      	bne.n	800b618 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b60e:	2100      	movs	r1, #0
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f965 	bl	800b8e0 <USB_SetDevSpeed>
 800b616:	e008      	b.n	800b62a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b618:	2101      	movs	r1, #1
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f960 	bl	800b8e0 <USB_SetDevSpeed>
 800b620:	e003      	b.n	800b62a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b622:	2103      	movs	r1, #3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f95b 	bl	800b8e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b62a:	2110      	movs	r1, #16
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f8f3 	bl	800b818 <USB_FlushTxFifo>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f91f 	bl	800b880 <USB_FlushRxFifo>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	461a      	mov	r2, r3
 800b654:	2300      	movs	r3, #0
 800b656:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b65e:	461a      	mov	r2, r3
 800b660:	2300      	movs	r3, #0
 800b662:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66a:	461a      	mov	r2, r3
 800b66c:	2300      	movs	r3, #0
 800b66e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b670:	2300      	movs	r3, #0
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	e043      	b.n	800b6fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b68c:	d118      	bne.n	800b6c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	e013      	b.n	800b6d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	e008      	b.n	800b6d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6de:	461a      	mov	r2, r3
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	613b      	str	r3, [r7, #16]
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	d3b7      	bcc.n	800b676 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b706:	2300      	movs	r3, #0
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	e043      	b.n	800b794 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b71e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b722:	d118      	bne.n	800b756 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	015a      	lsls	r2, r3, #5
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	4413      	add	r3, r2
 800b732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b736:	461a      	mov	r2, r3
 800b738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	e013      	b.n	800b768 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	461a      	mov	r2, r3
 800b74e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	e008      	b.n	800b768 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b762:	461a      	mov	r2, r3
 800b764:	2300      	movs	r3, #0
 800b766:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b774:	461a      	mov	r2, r3
 800b776:	2300      	movs	r3, #0
 800b778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	015a      	lsls	r2, r3, #5
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4413      	add	r3, r2
 800b782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b786:	461a      	mov	r2, r3
 800b788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b78c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	3301      	adds	r3, #1
 800b792:	613b      	str	r3, [r7, #16]
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d3b7      	bcc.n	800b70c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d105      	bne.n	800b7d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	f043 0210 	orr.w	r2, r3, #16
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	699a      	ldr	r2, [r3, #24]
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <USB_DevInit+0x2b4>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d005      	beq.n	800b7ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	f043 0208 	orr.w	r2, r3, #8
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d105      	bne.n	800b800 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699a      	ldr	r2, [r3, #24]
 800b7f8:	4b06      	ldr	r3, [pc, #24]	; (800b814 <USB_DevInit+0x2b8>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b800:	7dfb      	ldrb	r3, [r7, #23]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b80c:	b004      	add	sp, #16
 800b80e:	4770      	bx	lr
 800b810:	803c3800 	.word	0x803c3800
 800b814:	40000004 	.word	0x40000004

0800b818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	3301      	adds	r3, #1
 800b82a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4a13      	ldr	r2, [pc, #76]	; (800b87c <USB_FlushTxFifo+0x64>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d901      	bls.n	800b838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e01b      	b.n	800b870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	daf2      	bge.n	800b826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	019b      	lsls	r3, r3, #6
 800b848:	f043 0220 	orr.w	r2, r3, #32
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4a08      	ldr	r2, [pc, #32]	; (800b87c <USB_FlushTxFifo+0x64>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d901      	bls.n	800b862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e006      	b.n	800b870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	f003 0320 	and.w	r3, r3, #32
 800b86a:	2b20      	cmp	r3, #32
 800b86c:	d0f0      	beq.n	800b850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	00030d40 	.word	0x00030d40

0800b880 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3301      	adds	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4a11      	ldr	r2, [pc, #68]	; (800b8dc <USB_FlushRxFifo+0x5c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d901      	bls.n	800b89e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b89a:	2303      	movs	r3, #3
 800b89c:	e018      	b.n	800b8d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	daf2      	bge.n	800b88c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2210      	movs	r2, #16
 800b8ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4a08      	ldr	r2, [pc, #32]	; (800b8dc <USB_FlushRxFifo+0x5c>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d901      	bls.n	800b8c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e006      	b.n	800b8d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	f003 0310 	and.w	r3, r3, #16
 800b8ca:	2b10      	cmp	r3, #16
 800b8cc:	d0f0      	beq.n	800b8b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	00030d40 	.word	0x00030d40

0800b8e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b900:	4313      	orrs	r3, r2
 800b902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b912:	b480      	push	{r7}
 800b914:	b085      	sub	sp, #20
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b92c:	f023 0303 	bic.w	r3, r3, #3
 800b930:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b940:	f043 0302 	orr.w	r3, r3, #2
 800b944:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	f003 0301 	and.w	r3, r3, #1
}
 800b964:	4618      	mov	r0, r3
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3301      	adds	r3, #1
 800b980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	4a13      	ldr	r2, [pc, #76]	; (800b9d4 <USB_CoreReset+0x64>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d901      	bls.n	800b98e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e01b      	b.n	800b9c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	daf2      	bge.n	800b97c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	f043 0201 	orr.w	r2, r3, #1
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4a09      	ldr	r2, [pc, #36]	; (800b9d4 <USB_CoreReset+0x64>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d901      	bls.n	800b9b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e006      	b.n	800b9c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d0f0      	beq.n	800b9a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	00030d40 	.word	0x00030d40

0800b9d8 <sniprintf>:
 800b9d8:	b40c      	push	{r2, r3}
 800b9da:	b530      	push	{r4, r5, lr}
 800b9dc:	4b17      	ldr	r3, [pc, #92]	; (800ba3c <sniprintf+0x64>)
 800b9de:	1e0c      	subs	r4, r1, #0
 800b9e0:	681d      	ldr	r5, [r3, #0]
 800b9e2:	b09d      	sub	sp, #116	; 0x74
 800b9e4:	da08      	bge.n	800b9f8 <sniprintf+0x20>
 800b9e6:	238b      	movs	r3, #139	; 0x8b
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ee:	b01d      	add	sp, #116	; 0x74
 800b9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9f4:	b002      	add	sp, #8
 800b9f6:	4770      	bx	lr
 800b9f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ba00:	bf14      	ite	ne
 800ba02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba06:	4623      	moveq	r3, r4
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba10:	9002      	str	r0, [sp, #8]
 800ba12:	9006      	str	r0, [sp, #24]
 800ba14:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba1a:	ab21      	add	r3, sp, #132	; 0x84
 800ba1c:	a902      	add	r1, sp, #8
 800ba1e:	4628      	mov	r0, r5
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	f000 f9a1 	bl	800bd68 <_svfiprintf_r>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	bfbc      	itt	lt
 800ba2a:	238b      	movlt	r3, #139	; 0x8b
 800ba2c:	602b      	strlt	r3, [r5, #0]
 800ba2e:	2c00      	cmp	r4, #0
 800ba30:	d0dd      	beq.n	800b9ee <sniprintf+0x16>
 800ba32:	9b02      	ldr	r3, [sp, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	701a      	strb	r2, [r3, #0]
 800ba38:	e7d9      	b.n	800b9ee <sniprintf+0x16>
 800ba3a:	bf00      	nop
 800ba3c:	2400005c 	.word	0x2400005c

0800ba40 <memset>:
 800ba40:	4402      	add	r2, r0
 800ba42:	4603      	mov	r3, r0
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d100      	bne.n	800ba4a <memset+0xa>
 800ba48:	4770      	bx	lr
 800ba4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4e:	e7f9      	b.n	800ba44 <memset+0x4>

0800ba50 <__errno>:
 800ba50:	4b01      	ldr	r3, [pc, #4]	; (800ba58 <__errno+0x8>)
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	2400005c 	.word	0x2400005c

0800ba5c <__libc_init_array>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	4d0d      	ldr	r5, [pc, #52]	; (800ba94 <__libc_init_array+0x38>)
 800ba60:	4c0d      	ldr	r4, [pc, #52]	; (800ba98 <__libc_init_array+0x3c>)
 800ba62:	1b64      	subs	r4, r4, r5
 800ba64:	10a4      	asrs	r4, r4, #2
 800ba66:	2600      	movs	r6, #0
 800ba68:	42a6      	cmp	r6, r4
 800ba6a:	d109      	bne.n	800ba80 <__libc_init_array+0x24>
 800ba6c:	4d0b      	ldr	r5, [pc, #44]	; (800ba9c <__libc_init_array+0x40>)
 800ba6e:	4c0c      	ldr	r4, [pc, #48]	; (800baa0 <__libc_init_array+0x44>)
 800ba70:	f000 fc6a 	bl	800c348 <_init>
 800ba74:	1b64      	subs	r4, r4, r5
 800ba76:	10a4      	asrs	r4, r4, #2
 800ba78:	2600      	movs	r6, #0
 800ba7a:	42a6      	cmp	r6, r4
 800ba7c:	d105      	bne.n	800ba8a <__libc_init_array+0x2e>
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba84:	4798      	blx	r3
 800ba86:	3601      	adds	r6, #1
 800ba88:	e7ee      	b.n	800ba68 <__libc_init_array+0xc>
 800ba8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8e:	4798      	blx	r3
 800ba90:	3601      	adds	r6, #1
 800ba92:	e7f2      	b.n	800ba7a <__libc_init_array+0x1e>
 800ba94:	0800c43c 	.word	0x0800c43c
 800ba98:	0800c43c 	.word	0x0800c43c
 800ba9c:	0800c43c 	.word	0x0800c43c
 800baa0:	0800c440 	.word	0x0800c440

0800baa4 <__retarget_lock_acquire_recursive>:
 800baa4:	4770      	bx	lr

0800baa6 <__retarget_lock_release_recursive>:
 800baa6:	4770      	bx	lr

0800baa8 <memcpy>:
 800baa8:	440a      	add	r2, r1
 800baaa:	4291      	cmp	r1, r2
 800baac:	f100 33ff 	add.w	r3, r0, #4294967295
 800bab0:	d100      	bne.n	800bab4 <memcpy+0xc>
 800bab2:	4770      	bx	lr
 800bab4:	b510      	push	{r4, lr}
 800bab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800babe:	4291      	cmp	r1, r2
 800bac0:	d1f9      	bne.n	800bab6 <memcpy+0xe>
 800bac2:	bd10      	pop	{r4, pc}

0800bac4 <_free_r>:
 800bac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d044      	beq.n	800bb54 <_free_r+0x90>
 800baca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bace:	9001      	str	r0, [sp, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f1a1 0404 	sub.w	r4, r1, #4
 800bad6:	bfb8      	it	lt
 800bad8:	18e4      	addlt	r4, r4, r3
 800bada:	f000 f8df 	bl	800bc9c <__malloc_lock>
 800bade:	4a1e      	ldr	r2, [pc, #120]	; (800bb58 <_free_r+0x94>)
 800bae0:	9801      	ldr	r0, [sp, #4]
 800bae2:	6813      	ldr	r3, [r2, #0]
 800bae4:	b933      	cbnz	r3, 800baf4 <_free_r+0x30>
 800bae6:	6063      	str	r3, [r4, #4]
 800bae8:	6014      	str	r4, [r2, #0]
 800baea:	b003      	add	sp, #12
 800baec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baf0:	f000 b8da 	b.w	800bca8 <__malloc_unlock>
 800baf4:	42a3      	cmp	r3, r4
 800baf6:	d908      	bls.n	800bb0a <_free_r+0x46>
 800baf8:	6825      	ldr	r5, [r4, #0]
 800bafa:	1961      	adds	r1, r4, r5
 800bafc:	428b      	cmp	r3, r1
 800bafe:	bf01      	itttt	eq
 800bb00:	6819      	ldreq	r1, [r3, #0]
 800bb02:	685b      	ldreq	r3, [r3, #4]
 800bb04:	1949      	addeq	r1, r1, r5
 800bb06:	6021      	streq	r1, [r4, #0]
 800bb08:	e7ed      	b.n	800bae6 <_free_r+0x22>
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	b10b      	cbz	r3, 800bb14 <_free_r+0x50>
 800bb10:	42a3      	cmp	r3, r4
 800bb12:	d9fa      	bls.n	800bb0a <_free_r+0x46>
 800bb14:	6811      	ldr	r1, [r2, #0]
 800bb16:	1855      	adds	r5, r2, r1
 800bb18:	42a5      	cmp	r5, r4
 800bb1a:	d10b      	bne.n	800bb34 <_free_r+0x70>
 800bb1c:	6824      	ldr	r4, [r4, #0]
 800bb1e:	4421      	add	r1, r4
 800bb20:	1854      	adds	r4, r2, r1
 800bb22:	42a3      	cmp	r3, r4
 800bb24:	6011      	str	r1, [r2, #0]
 800bb26:	d1e0      	bne.n	800baea <_free_r+0x26>
 800bb28:	681c      	ldr	r4, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	6053      	str	r3, [r2, #4]
 800bb2e:	440c      	add	r4, r1
 800bb30:	6014      	str	r4, [r2, #0]
 800bb32:	e7da      	b.n	800baea <_free_r+0x26>
 800bb34:	d902      	bls.n	800bb3c <_free_r+0x78>
 800bb36:	230c      	movs	r3, #12
 800bb38:	6003      	str	r3, [r0, #0]
 800bb3a:	e7d6      	b.n	800baea <_free_r+0x26>
 800bb3c:	6825      	ldr	r5, [r4, #0]
 800bb3e:	1961      	adds	r1, r4, r5
 800bb40:	428b      	cmp	r3, r1
 800bb42:	bf04      	itt	eq
 800bb44:	6819      	ldreq	r1, [r3, #0]
 800bb46:	685b      	ldreq	r3, [r3, #4]
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	bf04      	itt	eq
 800bb4c:	1949      	addeq	r1, r1, r5
 800bb4e:	6021      	streq	r1, [r4, #0]
 800bb50:	6054      	str	r4, [r2, #4]
 800bb52:	e7ca      	b.n	800baea <_free_r+0x26>
 800bb54:	b003      	add	sp, #12
 800bb56:	bd30      	pop	{r4, r5, pc}
 800bb58:	24000f9c 	.word	0x24000f9c

0800bb5c <sbrk_aligned>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	4e0e      	ldr	r6, [pc, #56]	; (800bb98 <sbrk_aligned+0x3c>)
 800bb60:	460c      	mov	r4, r1
 800bb62:	6831      	ldr	r1, [r6, #0]
 800bb64:	4605      	mov	r5, r0
 800bb66:	b911      	cbnz	r1, 800bb6e <sbrk_aligned+0x12>
 800bb68:	f000 fba6 	bl	800c2b8 <_sbrk_r>
 800bb6c:	6030      	str	r0, [r6, #0]
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4628      	mov	r0, r5
 800bb72:	f000 fba1 	bl	800c2b8 <_sbrk_r>
 800bb76:	1c43      	adds	r3, r0, #1
 800bb78:	d00a      	beq.n	800bb90 <sbrk_aligned+0x34>
 800bb7a:	1cc4      	adds	r4, r0, #3
 800bb7c:	f024 0403 	bic.w	r4, r4, #3
 800bb80:	42a0      	cmp	r0, r4
 800bb82:	d007      	beq.n	800bb94 <sbrk_aligned+0x38>
 800bb84:	1a21      	subs	r1, r4, r0
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 fb96 	bl	800c2b8 <_sbrk_r>
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d101      	bne.n	800bb94 <sbrk_aligned+0x38>
 800bb90:	f04f 34ff 	mov.w	r4, #4294967295
 800bb94:	4620      	mov	r0, r4
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	24000fa0 	.word	0x24000fa0

0800bb9c <_malloc_r>:
 800bb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba0:	1ccd      	adds	r5, r1, #3
 800bba2:	f025 0503 	bic.w	r5, r5, #3
 800bba6:	3508      	adds	r5, #8
 800bba8:	2d0c      	cmp	r5, #12
 800bbaa:	bf38      	it	cc
 800bbac:	250c      	movcc	r5, #12
 800bbae:	2d00      	cmp	r5, #0
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	db01      	blt.n	800bbb8 <_malloc_r+0x1c>
 800bbb4:	42a9      	cmp	r1, r5
 800bbb6:	d905      	bls.n	800bbc4 <_malloc_r+0x28>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	2600      	movs	r6, #0
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc98 <_malloc_r+0xfc>
 800bbc8:	f000 f868 	bl	800bc9c <__malloc_lock>
 800bbcc:	f8d8 3000 	ldr.w	r3, [r8]
 800bbd0:	461c      	mov	r4, r3
 800bbd2:	bb5c      	cbnz	r4, 800bc2c <_malloc_r+0x90>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f7ff ffc0 	bl	800bb5c <sbrk_aligned>
 800bbdc:	1c43      	adds	r3, r0, #1
 800bbde:	4604      	mov	r4, r0
 800bbe0:	d155      	bne.n	800bc8e <_malloc_r+0xf2>
 800bbe2:	f8d8 4000 	ldr.w	r4, [r8]
 800bbe6:	4626      	mov	r6, r4
 800bbe8:	2e00      	cmp	r6, #0
 800bbea:	d145      	bne.n	800bc78 <_malloc_r+0xdc>
 800bbec:	2c00      	cmp	r4, #0
 800bbee:	d048      	beq.n	800bc82 <_malloc_r+0xe6>
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	eb04 0903 	add.w	r9, r4, r3
 800bbfa:	f000 fb5d 	bl	800c2b8 <_sbrk_r>
 800bbfe:	4581      	cmp	r9, r0
 800bc00:	d13f      	bne.n	800bc82 <_malloc_r+0xe6>
 800bc02:	6821      	ldr	r1, [r4, #0]
 800bc04:	1a6d      	subs	r5, r5, r1
 800bc06:	4629      	mov	r1, r5
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff ffa7 	bl	800bb5c <sbrk_aligned>
 800bc0e:	3001      	adds	r0, #1
 800bc10:	d037      	beq.n	800bc82 <_malloc_r+0xe6>
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	442b      	add	r3, r5
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	f8d8 3000 	ldr.w	r3, [r8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d038      	beq.n	800bc92 <_malloc_r+0xf6>
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	42a2      	cmp	r2, r4
 800bc24:	d12b      	bne.n	800bc7e <_malloc_r+0xe2>
 800bc26:	2200      	movs	r2, #0
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	e00f      	b.n	800bc4c <_malloc_r+0xb0>
 800bc2c:	6822      	ldr	r2, [r4, #0]
 800bc2e:	1b52      	subs	r2, r2, r5
 800bc30:	d41f      	bmi.n	800bc72 <_malloc_r+0xd6>
 800bc32:	2a0b      	cmp	r2, #11
 800bc34:	d917      	bls.n	800bc66 <_malloc_r+0xca>
 800bc36:	1961      	adds	r1, r4, r5
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	6025      	str	r5, [r4, #0]
 800bc3c:	bf18      	it	ne
 800bc3e:	6059      	strne	r1, [r3, #4]
 800bc40:	6863      	ldr	r3, [r4, #4]
 800bc42:	bf08      	it	eq
 800bc44:	f8c8 1000 	streq.w	r1, [r8]
 800bc48:	5162      	str	r2, [r4, r5]
 800bc4a:	604b      	str	r3, [r1, #4]
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f104 060b 	add.w	r6, r4, #11
 800bc52:	f000 f829 	bl	800bca8 <__malloc_unlock>
 800bc56:	f026 0607 	bic.w	r6, r6, #7
 800bc5a:	1d23      	adds	r3, r4, #4
 800bc5c:	1af2      	subs	r2, r6, r3
 800bc5e:	d0ae      	beq.n	800bbbe <_malloc_r+0x22>
 800bc60:	1b9b      	subs	r3, r3, r6
 800bc62:	50a3      	str	r3, [r4, r2]
 800bc64:	e7ab      	b.n	800bbbe <_malloc_r+0x22>
 800bc66:	42a3      	cmp	r3, r4
 800bc68:	6862      	ldr	r2, [r4, #4]
 800bc6a:	d1dd      	bne.n	800bc28 <_malloc_r+0x8c>
 800bc6c:	f8c8 2000 	str.w	r2, [r8]
 800bc70:	e7ec      	b.n	800bc4c <_malloc_r+0xb0>
 800bc72:	4623      	mov	r3, r4
 800bc74:	6864      	ldr	r4, [r4, #4]
 800bc76:	e7ac      	b.n	800bbd2 <_malloc_r+0x36>
 800bc78:	4634      	mov	r4, r6
 800bc7a:	6876      	ldr	r6, [r6, #4]
 800bc7c:	e7b4      	b.n	800bbe8 <_malloc_r+0x4c>
 800bc7e:	4613      	mov	r3, r2
 800bc80:	e7cc      	b.n	800bc1c <_malloc_r+0x80>
 800bc82:	230c      	movs	r3, #12
 800bc84:	603b      	str	r3, [r7, #0]
 800bc86:	4638      	mov	r0, r7
 800bc88:	f000 f80e 	bl	800bca8 <__malloc_unlock>
 800bc8c:	e797      	b.n	800bbbe <_malloc_r+0x22>
 800bc8e:	6025      	str	r5, [r4, #0]
 800bc90:	e7dc      	b.n	800bc4c <_malloc_r+0xb0>
 800bc92:	605b      	str	r3, [r3, #4]
 800bc94:	deff      	udf	#255	; 0xff
 800bc96:	bf00      	nop
 800bc98:	24000f9c 	.word	0x24000f9c

0800bc9c <__malloc_lock>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	; (800bca4 <__malloc_lock+0x8>)
 800bc9e:	f7ff bf01 	b.w	800baa4 <__retarget_lock_acquire_recursive>
 800bca2:	bf00      	nop
 800bca4:	24000f98 	.word	0x24000f98

0800bca8 <__malloc_unlock>:
 800bca8:	4801      	ldr	r0, [pc, #4]	; (800bcb0 <__malloc_unlock+0x8>)
 800bcaa:	f7ff befc 	b.w	800baa6 <__retarget_lock_release_recursive>
 800bcae:	bf00      	nop
 800bcb0:	24000f98 	.word	0x24000f98

0800bcb4 <__ssputs_r>:
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	688e      	ldr	r6, [r1, #8]
 800bcba:	461f      	mov	r7, r3
 800bcbc:	42be      	cmp	r6, r7
 800bcbe:	680b      	ldr	r3, [r1, #0]
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	4690      	mov	r8, r2
 800bcc6:	d82c      	bhi.n	800bd22 <__ssputs_r+0x6e>
 800bcc8:	898a      	ldrh	r2, [r1, #12]
 800bcca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcce:	d026      	beq.n	800bd1e <__ssputs_r+0x6a>
 800bcd0:	6965      	ldr	r5, [r4, #20]
 800bcd2:	6909      	ldr	r1, [r1, #16]
 800bcd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcd8:	eba3 0901 	sub.w	r9, r3, r1
 800bcdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bce0:	1c7b      	adds	r3, r7, #1
 800bce2:	444b      	add	r3, r9
 800bce4:	106d      	asrs	r5, r5, #1
 800bce6:	429d      	cmp	r5, r3
 800bce8:	bf38      	it	cc
 800bcea:	461d      	movcc	r5, r3
 800bcec:	0553      	lsls	r3, r2, #21
 800bcee:	d527      	bpl.n	800bd40 <__ssputs_r+0x8c>
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7ff ff53 	bl	800bb9c <_malloc_r>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	b360      	cbz	r0, 800bd54 <__ssputs_r+0xa0>
 800bcfa:	6921      	ldr	r1, [r4, #16]
 800bcfc:	464a      	mov	r2, r9
 800bcfe:	f7ff fed3 	bl	800baa8 <memcpy>
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd0c:	81a3      	strh	r3, [r4, #12]
 800bd0e:	6126      	str	r6, [r4, #16]
 800bd10:	6165      	str	r5, [r4, #20]
 800bd12:	444e      	add	r6, r9
 800bd14:	eba5 0509 	sub.w	r5, r5, r9
 800bd18:	6026      	str	r6, [r4, #0]
 800bd1a:	60a5      	str	r5, [r4, #8]
 800bd1c:	463e      	mov	r6, r7
 800bd1e:	42be      	cmp	r6, r7
 800bd20:	d900      	bls.n	800bd24 <__ssputs_r+0x70>
 800bd22:	463e      	mov	r6, r7
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	4632      	mov	r2, r6
 800bd28:	4641      	mov	r1, r8
 800bd2a:	f000 faab 	bl	800c284 <memmove>
 800bd2e:	68a3      	ldr	r3, [r4, #8]
 800bd30:	1b9b      	subs	r3, r3, r6
 800bd32:	60a3      	str	r3, [r4, #8]
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	4433      	add	r3, r6
 800bd38:	6023      	str	r3, [r4, #0]
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd40:	462a      	mov	r2, r5
 800bd42:	f000 fac9 	bl	800c2d8 <_realloc_r>
 800bd46:	4606      	mov	r6, r0
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d1e0      	bne.n	800bd0e <__ssputs_r+0x5a>
 800bd4c:	6921      	ldr	r1, [r4, #16]
 800bd4e:	4650      	mov	r0, sl
 800bd50:	f7ff feb8 	bl	800bac4 <_free_r>
 800bd54:	230c      	movs	r3, #12
 800bd56:	f8ca 3000 	str.w	r3, [sl]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	f04f 30ff 	mov.w	r0, #4294967295
 800bd66:	e7e9      	b.n	800bd3c <__ssputs_r+0x88>

0800bd68 <_svfiprintf_r>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	4698      	mov	r8, r3
 800bd6e:	898b      	ldrh	r3, [r1, #12]
 800bd70:	061b      	lsls	r3, r3, #24
 800bd72:	b09d      	sub	sp, #116	; 0x74
 800bd74:	4607      	mov	r7, r0
 800bd76:	460d      	mov	r5, r1
 800bd78:	4614      	mov	r4, r2
 800bd7a:	d50e      	bpl.n	800bd9a <_svfiprintf_r+0x32>
 800bd7c:	690b      	ldr	r3, [r1, #16]
 800bd7e:	b963      	cbnz	r3, 800bd9a <_svfiprintf_r+0x32>
 800bd80:	2140      	movs	r1, #64	; 0x40
 800bd82:	f7ff ff0b 	bl	800bb9c <_malloc_r>
 800bd86:	6028      	str	r0, [r5, #0]
 800bd88:	6128      	str	r0, [r5, #16]
 800bd8a:	b920      	cbnz	r0, 800bd96 <_svfiprintf_r+0x2e>
 800bd8c:	230c      	movs	r3, #12
 800bd8e:	603b      	str	r3, [r7, #0]
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295
 800bd94:	e0d0      	b.n	800bf38 <_svfiprintf_r+0x1d0>
 800bd96:	2340      	movs	r3, #64	; 0x40
 800bd98:	616b      	str	r3, [r5, #20]
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd9e:	2320      	movs	r3, #32
 800bda0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bda4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda8:	2330      	movs	r3, #48	; 0x30
 800bdaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf50 <_svfiprintf_r+0x1e8>
 800bdae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdb2:	f04f 0901 	mov.w	r9, #1
 800bdb6:	4623      	mov	r3, r4
 800bdb8:	469a      	mov	sl, r3
 800bdba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdbe:	b10a      	cbz	r2, 800bdc4 <_svfiprintf_r+0x5c>
 800bdc0:	2a25      	cmp	r2, #37	; 0x25
 800bdc2:	d1f9      	bne.n	800bdb8 <_svfiprintf_r+0x50>
 800bdc4:	ebba 0b04 	subs.w	fp, sl, r4
 800bdc8:	d00b      	beq.n	800bde2 <_svfiprintf_r+0x7a>
 800bdca:	465b      	mov	r3, fp
 800bdcc:	4622      	mov	r2, r4
 800bdce:	4629      	mov	r1, r5
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7ff ff6f 	bl	800bcb4 <__ssputs_r>
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	f000 80a9 	beq.w	800bf2e <_svfiprintf_r+0x1c6>
 800bddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdde:	445a      	add	r2, fp
 800bde0:	9209      	str	r2, [sp, #36]	; 0x24
 800bde2:	f89a 3000 	ldrb.w	r3, [sl]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 80a1 	beq.w	800bf2e <_svfiprintf_r+0x1c6>
 800bdec:	2300      	movs	r3, #0
 800bdee:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdf6:	f10a 0a01 	add.w	sl, sl, #1
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	9307      	str	r3, [sp, #28]
 800bdfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be02:	931a      	str	r3, [sp, #104]	; 0x68
 800be04:	4654      	mov	r4, sl
 800be06:	2205      	movs	r2, #5
 800be08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0c:	4850      	ldr	r0, [pc, #320]	; (800bf50 <_svfiprintf_r+0x1e8>)
 800be0e:	f7f4 fa6f 	bl	80002f0 <memchr>
 800be12:	9a04      	ldr	r2, [sp, #16]
 800be14:	b9d8      	cbnz	r0, 800be4e <_svfiprintf_r+0xe6>
 800be16:	06d0      	lsls	r0, r2, #27
 800be18:	bf44      	itt	mi
 800be1a:	2320      	movmi	r3, #32
 800be1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be20:	0711      	lsls	r1, r2, #28
 800be22:	bf44      	itt	mi
 800be24:	232b      	movmi	r3, #43	; 0x2b
 800be26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be2a:	f89a 3000 	ldrb.w	r3, [sl]
 800be2e:	2b2a      	cmp	r3, #42	; 0x2a
 800be30:	d015      	beq.n	800be5e <_svfiprintf_r+0xf6>
 800be32:	9a07      	ldr	r2, [sp, #28]
 800be34:	4654      	mov	r4, sl
 800be36:	2000      	movs	r0, #0
 800be38:	f04f 0c0a 	mov.w	ip, #10
 800be3c:	4621      	mov	r1, r4
 800be3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be42:	3b30      	subs	r3, #48	; 0x30
 800be44:	2b09      	cmp	r3, #9
 800be46:	d94d      	bls.n	800bee4 <_svfiprintf_r+0x17c>
 800be48:	b1b0      	cbz	r0, 800be78 <_svfiprintf_r+0x110>
 800be4a:	9207      	str	r2, [sp, #28]
 800be4c:	e014      	b.n	800be78 <_svfiprintf_r+0x110>
 800be4e:	eba0 0308 	sub.w	r3, r0, r8
 800be52:	fa09 f303 	lsl.w	r3, r9, r3
 800be56:	4313      	orrs	r3, r2
 800be58:	9304      	str	r3, [sp, #16]
 800be5a:	46a2      	mov	sl, r4
 800be5c:	e7d2      	b.n	800be04 <_svfiprintf_r+0x9c>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	1d19      	adds	r1, r3, #4
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	9103      	str	r1, [sp, #12]
 800be66:	2b00      	cmp	r3, #0
 800be68:	bfbb      	ittet	lt
 800be6a:	425b      	neglt	r3, r3
 800be6c:	f042 0202 	orrlt.w	r2, r2, #2
 800be70:	9307      	strge	r3, [sp, #28]
 800be72:	9307      	strlt	r3, [sp, #28]
 800be74:	bfb8      	it	lt
 800be76:	9204      	strlt	r2, [sp, #16]
 800be78:	7823      	ldrb	r3, [r4, #0]
 800be7a:	2b2e      	cmp	r3, #46	; 0x2e
 800be7c:	d10c      	bne.n	800be98 <_svfiprintf_r+0x130>
 800be7e:	7863      	ldrb	r3, [r4, #1]
 800be80:	2b2a      	cmp	r3, #42	; 0x2a
 800be82:	d134      	bne.n	800beee <_svfiprintf_r+0x186>
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	1d1a      	adds	r2, r3, #4
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	9203      	str	r2, [sp, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	bfb8      	it	lt
 800be90:	f04f 33ff 	movlt.w	r3, #4294967295
 800be94:	3402      	adds	r4, #2
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf60 <_svfiprintf_r+0x1f8>
 800be9c:	7821      	ldrb	r1, [r4, #0]
 800be9e:	2203      	movs	r2, #3
 800bea0:	4650      	mov	r0, sl
 800bea2:	f7f4 fa25 	bl	80002f0 <memchr>
 800bea6:	b138      	cbz	r0, 800beb8 <_svfiprintf_r+0x150>
 800bea8:	9b04      	ldr	r3, [sp, #16]
 800beaa:	eba0 000a 	sub.w	r0, r0, sl
 800beae:	2240      	movs	r2, #64	; 0x40
 800beb0:	4082      	lsls	r2, r0
 800beb2:	4313      	orrs	r3, r2
 800beb4:	3401      	adds	r4, #1
 800beb6:	9304      	str	r3, [sp, #16]
 800beb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebc:	4825      	ldr	r0, [pc, #148]	; (800bf54 <_svfiprintf_r+0x1ec>)
 800bebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bec2:	2206      	movs	r2, #6
 800bec4:	f7f4 fa14 	bl	80002f0 <memchr>
 800bec8:	2800      	cmp	r0, #0
 800beca:	d038      	beq.n	800bf3e <_svfiprintf_r+0x1d6>
 800becc:	4b22      	ldr	r3, [pc, #136]	; (800bf58 <_svfiprintf_r+0x1f0>)
 800bece:	bb1b      	cbnz	r3, 800bf18 <_svfiprintf_r+0x1b0>
 800bed0:	9b03      	ldr	r3, [sp, #12]
 800bed2:	3307      	adds	r3, #7
 800bed4:	f023 0307 	bic.w	r3, r3, #7
 800bed8:	3308      	adds	r3, #8
 800beda:	9303      	str	r3, [sp, #12]
 800bedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bede:	4433      	add	r3, r6
 800bee0:	9309      	str	r3, [sp, #36]	; 0x24
 800bee2:	e768      	b.n	800bdb6 <_svfiprintf_r+0x4e>
 800bee4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bee8:	460c      	mov	r4, r1
 800beea:	2001      	movs	r0, #1
 800beec:	e7a6      	b.n	800be3c <_svfiprintf_r+0xd4>
 800beee:	2300      	movs	r3, #0
 800bef0:	3401      	adds	r4, #1
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	4619      	mov	r1, r3
 800bef6:	f04f 0c0a 	mov.w	ip, #10
 800befa:	4620      	mov	r0, r4
 800befc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf00:	3a30      	subs	r2, #48	; 0x30
 800bf02:	2a09      	cmp	r2, #9
 800bf04:	d903      	bls.n	800bf0e <_svfiprintf_r+0x1a6>
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0c6      	beq.n	800be98 <_svfiprintf_r+0x130>
 800bf0a:	9105      	str	r1, [sp, #20]
 800bf0c:	e7c4      	b.n	800be98 <_svfiprintf_r+0x130>
 800bf0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf12:	4604      	mov	r4, r0
 800bf14:	2301      	movs	r3, #1
 800bf16:	e7f0      	b.n	800befa <_svfiprintf_r+0x192>
 800bf18:	ab03      	add	r3, sp, #12
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	462a      	mov	r2, r5
 800bf1e:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <_svfiprintf_r+0x1f4>)
 800bf20:	a904      	add	r1, sp, #16
 800bf22:	4638      	mov	r0, r7
 800bf24:	f3af 8000 	nop.w
 800bf28:	1c42      	adds	r2, r0, #1
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	d1d6      	bne.n	800bedc <_svfiprintf_r+0x174>
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	065b      	lsls	r3, r3, #25
 800bf32:	f53f af2d 	bmi.w	800bd90 <_svfiprintf_r+0x28>
 800bf36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf38:	b01d      	add	sp, #116	; 0x74
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	ab03      	add	r3, sp, #12
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	462a      	mov	r2, r5
 800bf44:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <_svfiprintf_r+0x1f4>)
 800bf46:	a904      	add	r1, sp, #16
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f000 f879 	bl	800c040 <_printf_i>
 800bf4e:	e7eb      	b.n	800bf28 <_svfiprintf_r+0x1c0>
 800bf50:	0800c400 	.word	0x0800c400
 800bf54:	0800c40a 	.word	0x0800c40a
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	0800bcb5 	.word	0x0800bcb5
 800bf60:	0800c406 	.word	0x0800c406

0800bf64 <_printf_common>:
 800bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf68:	4616      	mov	r6, r2
 800bf6a:	4699      	mov	r9, r3
 800bf6c:	688a      	ldr	r2, [r1, #8]
 800bf6e:	690b      	ldr	r3, [r1, #16]
 800bf70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf74:	4293      	cmp	r3, r2
 800bf76:	bfb8      	it	lt
 800bf78:	4613      	movlt	r3, r2
 800bf7a:	6033      	str	r3, [r6, #0]
 800bf7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf80:	4607      	mov	r7, r0
 800bf82:	460c      	mov	r4, r1
 800bf84:	b10a      	cbz	r2, 800bf8a <_printf_common+0x26>
 800bf86:	3301      	adds	r3, #1
 800bf88:	6033      	str	r3, [r6, #0]
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	0699      	lsls	r1, r3, #26
 800bf8e:	bf42      	ittt	mi
 800bf90:	6833      	ldrmi	r3, [r6, #0]
 800bf92:	3302      	addmi	r3, #2
 800bf94:	6033      	strmi	r3, [r6, #0]
 800bf96:	6825      	ldr	r5, [r4, #0]
 800bf98:	f015 0506 	ands.w	r5, r5, #6
 800bf9c:	d106      	bne.n	800bfac <_printf_common+0x48>
 800bf9e:	f104 0a19 	add.w	sl, r4, #25
 800bfa2:	68e3      	ldr	r3, [r4, #12]
 800bfa4:	6832      	ldr	r2, [r6, #0]
 800bfa6:	1a9b      	subs	r3, r3, r2
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	dc26      	bgt.n	800bffa <_printf_common+0x96>
 800bfac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfb0:	1e13      	subs	r3, r2, #0
 800bfb2:	6822      	ldr	r2, [r4, #0]
 800bfb4:	bf18      	it	ne
 800bfb6:	2301      	movne	r3, #1
 800bfb8:	0692      	lsls	r2, r2, #26
 800bfba:	d42b      	bmi.n	800c014 <_printf_common+0xb0>
 800bfbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	47c0      	blx	r8
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d01e      	beq.n	800c008 <_printf_common+0xa4>
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	6922      	ldr	r2, [r4, #16]
 800bfce:	f003 0306 	and.w	r3, r3, #6
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	bf02      	ittt	eq
 800bfd6:	68e5      	ldreq	r5, [r4, #12]
 800bfd8:	6833      	ldreq	r3, [r6, #0]
 800bfda:	1aed      	subeq	r5, r5, r3
 800bfdc:	68a3      	ldr	r3, [r4, #8]
 800bfde:	bf0c      	ite	eq
 800bfe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfe4:	2500      	movne	r5, #0
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	bfc4      	itt	gt
 800bfea:	1a9b      	subgt	r3, r3, r2
 800bfec:	18ed      	addgt	r5, r5, r3
 800bfee:	2600      	movs	r6, #0
 800bff0:	341a      	adds	r4, #26
 800bff2:	42b5      	cmp	r5, r6
 800bff4:	d11a      	bne.n	800c02c <_printf_common+0xc8>
 800bff6:	2000      	movs	r0, #0
 800bff8:	e008      	b.n	800c00c <_printf_common+0xa8>
 800bffa:	2301      	movs	r3, #1
 800bffc:	4652      	mov	r2, sl
 800bffe:	4649      	mov	r1, r9
 800c000:	4638      	mov	r0, r7
 800c002:	47c0      	blx	r8
 800c004:	3001      	adds	r0, #1
 800c006:	d103      	bne.n	800c010 <_printf_common+0xac>
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c010:	3501      	adds	r5, #1
 800c012:	e7c6      	b.n	800bfa2 <_printf_common+0x3e>
 800c014:	18e1      	adds	r1, r4, r3
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	2030      	movs	r0, #48	; 0x30
 800c01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c01e:	4422      	add	r2, r4
 800c020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c028:	3302      	adds	r3, #2
 800c02a:	e7c7      	b.n	800bfbc <_printf_common+0x58>
 800c02c:	2301      	movs	r3, #1
 800c02e:	4622      	mov	r2, r4
 800c030:	4649      	mov	r1, r9
 800c032:	4638      	mov	r0, r7
 800c034:	47c0      	blx	r8
 800c036:	3001      	adds	r0, #1
 800c038:	d0e6      	beq.n	800c008 <_printf_common+0xa4>
 800c03a:	3601      	adds	r6, #1
 800c03c:	e7d9      	b.n	800bff2 <_printf_common+0x8e>
	...

0800c040 <_printf_i>:
 800c040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	7e0f      	ldrb	r7, [r1, #24]
 800c046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c048:	2f78      	cmp	r7, #120	; 0x78
 800c04a:	4691      	mov	r9, r2
 800c04c:	4680      	mov	r8, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	469a      	mov	sl, r3
 800c052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c056:	d807      	bhi.n	800c068 <_printf_i+0x28>
 800c058:	2f62      	cmp	r7, #98	; 0x62
 800c05a:	d80a      	bhi.n	800c072 <_printf_i+0x32>
 800c05c:	2f00      	cmp	r7, #0
 800c05e:	f000 80d4 	beq.w	800c20a <_printf_i+0x1ca>
 800c062:	2f58      	cmp	r7, #88	; 0x58
 800c064:	f000 80c0 	beq.w	800c1e8 <_printf_i+0x1a8>
 800c068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c070:	e03a      	b.n	800c0e8 <_printf_i+0xa8>
 800c072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c076:	2b15      	cmp	r3, #21
 800c078:	d8f6      	bhi.n	800c068 <_printf_i+0x28>
 800c07a:	a101      	add	r1, pc, #4	; (adr r1, 800c080 <_printf_i+0x40>)
 800c07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c080:	0800c0d9 	.word	0x0800c0d9
 800c084:	0800c0ed 	.word	0x0800c0ed
 800c088:	0800c069 	.word	0x0800c069
 800c08c:	0800c069 	.word	0x0800c069
 800c090:	0800c069 	.word	0x0800c069
 800c094:	0800c069 	.word	0x0800c069
 800c098:	0800c0ed 	.word	0x0800c0ed
 800c09c:	0800c069 	.word	0x0800c069
 800c0a0:	0800c069 	.word	0x0800c069
 800c0a4:	0800c069 	.word	0x0800c069
 800c0a8:	0800c069 	.word	0x0800c069
 800c0ac:	0800c1f1 	.word	0x0800c1f1
 800c0b0:	0800c119 	.word	0x0800c119
 800c0b4:	0800c1ab 	.word	0x0800c1ab
 800c0b8:	0800c069 	.word	0x0800c069
 800c0bc:	0800c069 	.word	0x0800c069
 800c0c0:	0800c213 	.word	0x0800c213
 800c0c4:	0800c069 	.word	0x0800c069
 800c0c8:	0800c119 	.word	0x0800c119
 800c0cc:	0800c069 	.word	0x0800c069
 800c0d0:	0800c069 	.word	0x0800c069
 800c0d4:	0800c1b3 	.word	0x0800c1b3
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	1d1a      	adds	r2, r3, #4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	602a      	str	r2, [r5, #0]
 800c0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e09f      	b.n	800c22c <_printf_i+0x1ec>
 800c0ec:	6820      	ldr	r0, [r4, #0]
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	0607      	lsls	r7, r0, #24
 800c0f2:	f103 0104 	add.w	r1, r3, #4
 800c0f6:	6029      	str	r1, [r5, #0]
 800c0f8:	d501      	bpl.n	800c0fe <_printf_i+0xbe>
 800c0fa:	681e      	ldr	r6, [r3, #0]
 800c0fc:	e003      	b.n	800c106 <_printf_i+0xc6>
 800c0fe:	0646      	lsls	r6, r0, #25
 800c100:	d5fb      	bpl.n	800c0fa <_printf_i+0xba>
 800c102:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c106:	2e00      	cmp	r6, #0
 800c108:	da03      	bge.n	800c112 <_printf_i+0xd2>
 800c10a:	232d      	movs	r3, #45	; 0x2d
 800c10c:	4276      	negs	r6, r6
 800c10e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c112:	485a      	ldr	r0, [pc, #360]	; (800c27c <_printf_i+0x23c>)
 800c114:	230a      	movs	r3, #10
 800c116:	e012      	b.n	800c13e <_printf_i+0xfe>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	6820      	ldr	r0, [r4, #0]
 800c11c:	1d19      	adds	r1, r3, #4
 800c11e:	6029      	str	r1, [r5, #0]
 800c120:	0605      	lsls	r5, r0, #24
 800c122:	d501      	bpl.n	800c128 <_printf_i+0xe8>
 800c124:	681e      	ldr	r6, [r3, #0]
 800c126:	e002      	b.n	800c12e <_printf_i+0xee>
 800c128:	0641      	lsls	r1, r0, #25
 800c12a:	d5fb      	bpl.n	800c124 <_printf_i+0xe4>
 800c12c:	881e      	ldrh	r6, [r3, #0]
 800c12e:	4853      	ldr	r0, [pc, #332]	; (800c27c <_printf_i+0x23c>)
 800c130:	2f6f      	cmp	r7, #111	; 0x6f
 800c132:	bf0c      	ite	eq
 800c134:	2308      	moveq	r3, #8
 800c136:	230a      	movne	r3, #10
 800c138:	2100      	movs	r1, #0
 800c13a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c13e:	6865      	ldr	r5, [r4, #4]
 800c140:	60a5      	str	r5, [r4, #8]
 800c142:	2d00      	cmp	r5, #0
 800c144:	bfa2      	ittt	ge
 800c146:	6821      	ldrge	r1, [r4, #0]
 800c148:	f021 0104 	bicge.w	r1, r1, #4
 800c14c:	6021      	strge	r1, [r4, #0]
 800c14e:	b90e      	cbnz	r6, 800c154 <_printf_i+0x114>
 800c150:	2d00      	cmp	r5, #0
 800c152:	d04b      	beq.n	800c1ec <_printf_i+0x1ac>
 800c154:	4615      	mov	r5, r2
 800c156:	fbb6 f1f3 	udiv	r1, r6, r3
 800c15a:	fb03 6711 	mls	r7, r3, r1, r6
 800c15e:	5dc7      	ldrb	r7, [r0, r7]
 800c160:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c164:	4637      	mov	r7, r6
 800c166:	42bb      	cmp	r3, r7
 800c168:	460e      	mov	r6, r1
 800c16a:	d9f4      	bls.n	800c156 <_printf_i+0x116>
 800c16c:	2b08      	cmp	r3, #8
 800c16e:	d10b      	bne.n	800c188 <_printf_i+0x148>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	07de      	lsls	r6, r3, #31
 800c174:	d508      	bpl.n	800c188 <_printf_i+0x148>
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	6861      	ldr	r1, [r4, #4]
 800c17a:	4299      	cmp	r1, r3
 800c17c:	bfde      	ittt	le
 800c17e:	2330      	movle	r3, #48	; 0x30
 800c180:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c184:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c188:	1b52      	subs	r2, r2, r5
 800c18a:	6122      	str	r2, [r4, #16]
 800c18c:	f8cd a000 	str.w	sl, [sp]
 800c190:	464b      	mov	r3, r9
 800c192:	aa03      	add	r2, sp, #12
 800c194:	4621      	mov	r1, r4
 800c196:	4640      	mov	r0, r8
 800c198:	f7ff fee4 	bl	800bf64 <_printf_common>
 800c19c:	3001      	adds	r0, #1
 800c19e:	d14a      	bne.n	800c236 <_printf_i+0x1f6>
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	b004      	add	sp, #16
 800c1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	f043 0320 	orr.w	r3, r3, #32
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	4833      	ldr	r0, [pc, #204]	; (800c280 <_printf_i+0x240>)
 800c1b4:	2778      	movs	r7, #120	; 0x78
 800c1b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	6829      	ldr	r1, [r5, #0]
 800c1be:	061f      	lsls	r7, r3, #24
 800c1c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1c4:	d402      	bmi.n	800c1cc <_printf_i+0x18c>
 800c1c6:	065f      	lsls	r7, r3, #25
 800c1c8:	bf48      	it	mi
 800c1ca:	b2b6      	uxthmi	r6, r6
 800c1cc:	07df      	lsls	r7, r3, #31
 800c1ce:	bf48      	it	mi
 800c1d0:	f043 0320 	orrmi.w	r3, r3, #32
 800c1d4:	6029      	str	r1, [r5, #0]
 800c1d6:	bf48      	it	mi
 800c1d8:	6023      	strmi	r3, [r4, #0]
 800c1da:	b91e      	cbnz	r6, 800c1e4 <_printf_i+0x1a4>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	f023 0320 	bic.w	r3, r3, #32
 800c1e2:	6023      	str	r3, [r4, #0]
 800c1e4:	2310      	movs	r3, #16
 800c1e6:	e7a7      	b.n	800c138 <_printf_i+0xf8>
 800c1e8:	4824      	ldr	r0, [pc, #144]	; (800c27c <_printf_i+0x23c>)
 800c1ea:	e7e4      	b.n	800c1b6 <_printf_i+0x176>
 800c1ec:	4615      	mov	r5, r2
 800c1ee:	e7bd      	b.n	800c16c <_printf_i+0x12c>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	6826      	ldr	r6, [r4, #0]
 800c1f4:	6961      	ldr	r1, [r4, #20]
 800c1f6:	1d18      	adds	r0, r3, #4
 800c1f8:	6028      	str	r0, [r5, #0]
 800c1fa:	0635      	lsls	r5, r6, #24
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	d501      	bpl.n	800c204 <_printf_i+0x1c4>
 800c200:	6019      	str	r1, [r3, #0]
 800c202:	e002      	b.n	800c20a <_printf_i+0x1ca>
 800c204:	0670      	lsls	r0, r6, #25
 800c206:	d5fb      	bpl.n	800c200 <_printf_i+0x1c0>
 800c208:	8019      	strh	r1, [r3, #0]
 800c20a:	2300      	movs	r3, #0
 800c20c:	6123      	str	r3, [r4, #16]
 800c20e:	4615      	mov	r5, r2
 800c210:	e7bc      	b.n	800c18c <_printf_i+0x14c>
 800c212:	682b      	ldr	r3, [r5, #0]
 800c214:	1d1a      	adds	r2, r3, #4
 800c216:	602a      	str	r2, [r5, #0]
 800c218:	681d      	ldr	r5, [r3, #0]
 800c21a:	6862      	ldr	r2, [r4, #4]
 800c21c:	2100      	movs	r1, #0
 800c21e:	4628      	mov	r0, r5
 800c220:	f7f4 f866 	bl	80002f0 <memchr>
 800c224:	b108      	cbz	r0, 800c22a <_printf_i+0x1ea>
 800c226:	1b40      	subs	r0, r0, r5
 800c228:	6060      	str	r0, [r4, #4]
 800c22a:	6863      	ldr	r3, [r4, #4]
 800c22c:	6123      	str	r3, [r4, #16]
 800c22e:	2300      	movs	r3, #0
 800c230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c234:	e7aa      	b.n	800c18c <_printf_i+0x14c>
 800c236:	6923      	ldr	r3, [r4, #16]
 800c238:	462a      	mov	r2, r5
 800c23a:	4649      	mov	r1, r9
 800c23c:	4640      	mov	r0, r8
 800c23e:	47d0      	blx	sl
 800c240:	3001      	adds	r0, #1
 800c242:	d0ad      	beq.n	800c1a0 <_printf_i+0x160>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	079b      	lsls	r3, r3, #30
 800c248:	d413      	bmi.n	800c272 <_printf_i+0x232>
 800c24a:	68e0      	ldr	r0, [r4, #12]
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	4298      	cmp	r0, r3
 800c250:	bfb8      	it	lt
 800c252:	4618      	movlt	r0, r3
 800c254:	e7a6      	b.n	800c1a4 <_printf_i+0x164>
 800c256:	2301      	movs	r3, #1
 800c258:	4632      	mov	r2, r6
 800c25a:	4649      	mov	r1, r9
 800c25c:	4640      	mov	r0, r8
 800c25e:	47d0      	blx	sl
 800c260:	3001      	adds	r0, #1
 800c262:	d09d      	beq.n	800c1a0 <_printf_i+0x160>
 800c264:	3501      	adds	r5, #1
 800c266:	68e3      	ldr	r3, [r4, #12]
 800c268:	9903      	ldr	r1, [sp, #12]
 800c26a:	1a5b      	subs	r3, r3, r1
 800c26c:	42ab      	cmp	r3, r5
 800c26e:	dcf2      	bgt.n	800c256 <_printf_i+0x216>
 800c270:	e7eb      	b.n	800c24a <_printf_i+0x20a>
 800c272:	2500      	movs	r5, #0
 800c274:	f104 0619 	add.w	r6, r4, #25
 800c278:	e7f5      	b.n	800c266 <_printf_i+0x226>
 800c27a:	bf00      	nop
 800c27c:	0800c411 	.word	0x0800c411
 800c280:	0800c422 	.word	0x0800c422

0800c284 <memmove>:
 800c284:	4288      	cmp	r0, r1
 800c286:	b510      	push	{r4, lr}
 800c288:	eb01 0402 	add.w	r4, r1, r2
 800c28c:	d902      	bls.n	800c294 <memmove+0x10>
 800c28e:	4284      	cmp	r4, r0
 800c290:	4623      	mov	r3, r4
 800c292:	d807      	bhi.n	800c2a4 <memmove+0x20>
 800c294:	1e43      	subs	r3, r0, #1
 800c296:	42a1      	cmp	r1, r4
 800c298:	d008      	beq.n	800c2ac <memmove+0x28>
 800c29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2a2:	e7f8      	b.n	800c296 <memmove+0x12>
 800c2a4:	4402      	add	r2, r0
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	428a      	cmp	r2, r1
 800c2aa:	d100      	bne.n	800c2ae <memmove+0x2a>
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2b6:	e7f7      	b.n	800c2a8 <memmove+0x24>

0800c2b8 <_sbrk_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_sbrk_r+0x1c>)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	f7f6 fa3a 	bl	800273c <_sbrk>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_sbrk_r+0x1a>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_sbrk_r+0x1a>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	24000f94 	.word	0x24000f94

0800c2d8 <_realloc_r>:
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	4680      	mov	r8, r0
 800c2de:	4614      	mov	r4, r2
 800c2e0:	460e      	mov	r6, r1
 800c2e2:	b921      	cbnz	r1, 800c2ee <_realloc_r+0x16>
 800c2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	f7ff bc57 	b.w	800bb9c <_malloc_r>
 800c2ee:	b92a      	cbnz	r2, 800c2fc <_realloc_r+0x24>
 800c2f0:	f7ff fbe8 	bl	800bac4 <_free_r>
 800c2f4:	4625      	mov	r5, r4
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2fc:	f000 f81b 	bl	800c336 <_malloc_usable_size_r>
 800c300:	4284      	cmp	r4, r0
 800c302:	4607      	mov	r7, r0
 800c304:	d802      	bhi.n	800c30c <_realloc_r+0x34>
 800c306:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c30a:	d812      	bhi.n	800c332 <_realloc_r+0x5a>
 800c30c:	4621      	mov	r1, r4
 800c30e:	4640      	mov	r0, r8
 800c310:	f7ff fc44 	bl	800bb9c <_malloc_r>
 800c314:	4605      	mov	r5, r0
 800c316:	2800      	cmp	r0, #0
 800c318:	d0ed      	beq.n	800c2f6 <_realloc_r+0x1e>
 800c31a:	42bc      	cmp	r4, r7
 800c31c:	4622      	mov	r2, r4
 800c31e:	4631      	mov	r1, r6
 800c320:	bf28      	it	cs
 800c322:	463a      	movcs	r2, r7
 800c324:	f7ff fbc0 	bl	800baa8 <memcpy>
 800c328:	4631      	mov	r1, r6
 800c32a:	4640      	mov	r0, r8
 800c32c:	f7ff fbca 	bl	800bac4 <_free_r>
 800c330:	e7e1      	b.n	800c2f6 <_realloc_r+0x1e>
 800c332:	4635      	mov	r5, r6
 800c334:	e7df      	b.n	800c2f6 <_realloc_r+0x1e>

0800c336 <_malloc_usable_size_r>:
 800c336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c33a:	1f18      	subs	r0, r3, #4
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bfbc      	itt	lt
 800c340:	580b      	ldrlt	r3, [r1, r0]
 800c342:	18c0      	addlt	r0, r0, r3
 800c344:	4770      	bx	lr
	...

0800c348 <_init>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	bf00      	nop
 800c34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34e:	bc08      	pop	{r3}
 800c350:	469e      	mov	lr, r3
 800c352:	4770      	bx	lr

0800c354 <_fini>:
 800c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c356:	bf00      	nop
 800c358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35a:	bc08      	pop	{r3}
 800c35c:	469e      	mov	lr, r3
 800c35e:	4770      	bx	lr


STM32H750B-DK_VIN_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800da58  0800da58  0001da58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db30  0800db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800db34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800dba8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800dc08  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fbc  24000134  0800dc68  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240010f0  0800dc68  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000303da  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000440d  00000000  00000000  0005053c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00054950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002178  00000000  00000000  00056c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c08  00000000  00000000  00058dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b46b  00000000  00000000  000999d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b4e3  00000000  00000000  000c4e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00260326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f68  00000000  00000000  00260378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da40 	.word	0x0800da40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800da40 	.word	0x0800da40

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f002 f9f8 	bl	8002a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f846 	bl	800072c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a0:	f000 f8d0 	bl	8000844 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fe58 	bl	8001358 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a8:	f000 f8fc 	bl	80008a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ac:	f000 f972 	bl	8000994 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006b0:	f000 f9d4 	bl	8000a5c <MX_ADC3_Init>
  MX_ETH_Init();
 80006b4:	f000 fa34 	bl	8000b20 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80006b8:	f000 fa7e 	bl	8000bb8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006bc:	f000 fae0 	bl	8000c80 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80006c0:	f000 fdfc 	bl	80012bc <MX_FMC_Init>
  MX_LTDC_Init();
 80006c4:	f000 fb40 	bl	8000d48 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006c8:	f000 fbf0 	bl	8000eac <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006cc:	f000 fc1a 	bl	8000f04 <MX_RTC_Init>
  MX_SAI2_Init();
 80006d0:	f000 fc40 	bl	8000f54 <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 80006d4:	f000 fcfc 	bl	80010d0 <MX_SDMMC1_MMC_Init>
  MX_SPI2_Init();
 80006d8:	f000 fd1e 	bl	8001118 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006dc:	f000 fd70 	bl	80011c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e0:	f000 fdba 	bl	8001258 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USART3:%d secs\r\n",Counter);
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0x88>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <main+0x8c>)
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <main+0x90>)
 80006f0:	f00c fd32 	bl	800d158 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x90>)
 80006f6:	f7ff fdf3 	bl	80002e0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	2301      	movs	r3, #1
 8000700:	4908      	ldr	r1, [pc, #32]	; (8000724 <main+0x90>)
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <main+0x94>)
 8000704:	f00a fc3b 	bl	800af7e <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f002 fa50 	bl	8002bb0 <HAL_Delay>
	    Counter++;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <main+0x88>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a01      	ldr	r2, [pc, #4]	; (800071c <main+0x88>)
 8000718:	6013      	str	r3, [r2, #0]
  {
 800071a:	e7e3      	b.n	80006e4 <main+0x50>
 800071c:	240010bc 	.word	0x240010bc
 8000720:	0800da58 	.word	0x0800da58
 8000724:	24000fbc 	.word	0x24000fbc
 8000728:	240009e8 	.word	0x240009e8

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09c      	sub	sp, #112	; 0x70
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	224c      	movs	r2, #76	; 0x4c
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00c fd04 	bl	800d148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00c fcfe 	bl	800d148 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800074c:	2002      	movs	r0, #2
 800074e:	f006 f867 	bl	8006820 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <SystemClock_Config+0x10c>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	4a37      	ldr	r2, [pc, #220]	; (8000838 <SystemClock_Config+0x10c>)
 800075c:	f023 0301 	bic.w	r3, r3, #1
 8000760:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000762:	4b35      	ldr	r3, [pc, #212]	; (8000838 <SystemClock_Config+0x10c>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <SystemClock_Config+0x110>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	4a31      	ldr	r2, [pc, #196]	; (800083c <SystemClock_Config+0x110>)
 8000776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <SystemClock_Config+0x110>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000788:	bf00      	nop
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <SystemClock_Config+0x110>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000796:	d1f8      	bne.n	800078a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0x114>)
 800079a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079c:	f023 0303 	bic.w	r3, r3, #3
 80007a0:	4a27      	ldr	r2, [pc, #156]	; (8000840 <SystemClock_Config+0x114>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80007a8:	230b      	movs	r3, #11
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 80007c6:	2316      	movs	r3, #22
 80007c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80007ca:	23a9      	movs	r3, #169	; 0xa9
 80007cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80007da:	2300      	movs	r3, #0
 80007dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007de:	2300      	movs	r3, #0
 80007e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f91c 	bl	8006a28 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007f6:	f000 ff59 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	233f      	movs	r3, #63	; 0x3f
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fd5c 	bl	80072dc <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800082a:	f000 ff3f 	bl	80016ac <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3770      	adds	r7, #112	; 0x70
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	58000400 	.word	0x58000400
 800083c:	58024800 	.word	0x58024800
 8000840:	58024400 	.word	0x58024400

08000844 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0b0      	sub	sp, #192	; 0xc0
 8000848:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	22c0      	movs	r2, #192	; 0xc0
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f00c fc79 	bl	800d148 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000856:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000866:	230c      	movs	r3, #12
 8000868:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800086a:	2305      	movs	r3, #5
 800086c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000876:	23c0      	movs	r3, #192	; 0xc0
 8000878:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800087a:	2320      	movs	r3, #32
 800087c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4618      	mov	r0, r3
 800088c:	f007 f8b2 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000896:	f000 ff09 	bl	80016ac <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	37c0      	adds	r7, #192	; 0xc0
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_ADC1_Init+0xe8>)
 80008ca:	4a31      	ldr	r2, [pc, #196]	; (8000990 <MX_ADC1_Init+0xec>)
 80008cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <MX_ADC1_Init+0xe8>)
 80008d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_ADC1_Init+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_ADC1_Init+0xe8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <MX_ADC1_Init+0xe8>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_ADC1_Init+0xe8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <MX_ADC1_Init+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <MX_ADC1_Init+0xe8>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_ADC1_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_ADC1_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_ADC1_Init+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_ADC1_Init+0xe8>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_ADC1_Init+0xe8>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ADC1_Init+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ADC1_Init+0xe8>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000926:	4819      	ldr	r0, [pc, #100]	; (800098c <MX_ADC1_Init+0xe8>)
 8000928:	f002 fb28 	bl	8002f7c <HAL_ADC_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000932:	f000 febb 	bl	80016ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_ADC1_Init+0xe8>)
 8000942:	f003 f93f 	bl	8003bc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800094c:	f000 feae 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000950:	2301      	movs	r3, #1
 8000952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000954:	2306      	movs	r3, #6
 8000956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800095c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000960:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000962:	2304      	movs	r3, #4
 8000964:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_ADC1_Init+0xe8>)
 8000974:	f002 fca4 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800097e:	f000 fe95 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	24000188 	.word	0x24000188
 8000990:	40022000 	.word	0x40022000

08000994 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <MX_ADC2_Init+0xc4>)
 80009b0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009da:	2201      	movs	r2, #1
 80009dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_ADC2_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_ADC2_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a0a:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_ADC2_Init+0xc0>)
 8000a0c:	f002 fab6 	bl	8002f7c <HAL_ADC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000a16:	f000 fe49 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a2a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_ADC2_Init+0xc0>)
 8000a3e:	f002 fc3f 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000a48:	f000 fe30 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	240001ec 	.word	0x240001ec
 8000a58:	40022100 	.word	0x40022100

08000a5c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a76:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <MX_ADC3_Init+0xbc>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000acc:	f002 fa56 	bl	8002f7c <HAL_ADC_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000ad6:	f000 fde9 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_ADC3_Init+0xc0>)
 8000adc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000aea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aec:	2304      	movs	r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_ADC3_Init+0xb8>)
 8000afe:	f002 fbdf 	bl	80032c0 <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000b08:	f000 fdd0 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000250 	.word	0x24000250
 8000b18:	58026000 	.word	0x58026000
 8000b1c:	1d500080 	.word	0x1d500080

08000b20 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <MX_ETH_Init+0x84>)
 8000b28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b38:	22e1      	movs	r2, #225	; 0xe1
 8000b3a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <MX_ETH_Init+0x88>)
 8000b52:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <MX_ETH_Init+0x8c>)
 8000b5e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b64:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b6c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_ETH_Init+0x80>)
 8000b70:	f003 f9ea 	bl	8003f48 <HAL_ETH_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b7a:	f000 fd97 	bl	80016ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b7e:	2238      	movs	r2, #56	; 0x38
 8000b80:	2100      	movs	r1, #0
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_ETH_Init+0x94>)
 8000b84:	f00c fae0 	bl	800d148 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_ETH_Init+0x94>)
 8000b8a:	2221      	movs	r2, #33	; 0x21
 8000b8c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_ETH_Init+0x94>)
 8000b90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b94:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_ETH_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	240002b4 	.word	0x240002b4
 8000ba4:	40028000 	.word	0x40028000
 8000ba8:	240010c0 	.word	0x240010c0
 8000bac:	240000d4 	.word	0x240000d4
 8000bb0:	24000074 	.word	0x24000074
 8000bb4:	24000150 	.word	0x24000150

08000bb8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <MX_FDCAN1_Init+0xc4>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000be2:	2210      	movs	r2, #16
 8000be4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c42:	2204      	movs	r2, #4
 8000c44:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c60:	2204      	movs	r2, #4
 8000c62:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_FDCAN1_Init+0xc0>)
 8000c66:	f003 fd93 	bl	8004790 <HAL_FDCAN_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c70:	f000 fd1c 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24000364 	.word	0x24000364
 8000c7c:	4000a000 	.word	0x4000a000

08000c80 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <MX_FDCAN2_Init+0xc4>)
 8000c88:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000caa:	2210      	movs	r2, #16
 8000cac:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_FDCAN2_Init+0xc0>)
 8000d2e:	f003 fd2f 	bl	8004790 <HAL_FDCAN_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d38:	f000 fcb8 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24000404 	.word	0x24000404
 8000d44:	4000a400 	.word	0x4000a400

08000d48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b09a      	sub	sp, #104	; 0x68
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d52:	2234      	movs	r2, #52	; 0x34
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00c f9f6 	bl	800d148 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2234      	movs	r2, #52	; 0x34
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00c f9f0 	bl	800d148 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d68:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <MX_LTDC_Init+0x160>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d74:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d80:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000d8c:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d94:	220e      	movs	r2, #14
 8000d96:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000da0:	f240 228e 	movw	r2, #654	; 0x28e
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000da8:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000db0:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000db8:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dd6:	4833      	ldr	r0, [pc, #204]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000dd8:	f004 fa08 	bl	80051ec <HAL_LTDC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000de2:	f000 fc63 	bl	80016ac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000df6:	2300      	movs	r3, #0
 8000df8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000e34:	f004 faaa 	bl	800538c <HAL_LTDC_ConfigLayer>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000e3e:	f000 fc35 	bl	80016ac <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e64:	2305      	movs	r3, #5
 8000e66:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_LTDC_Init+0x15c>)
 8000e8e:	f004 fa7d 	bl	800538c <HAL_LTDC_ConfigLayer>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000e98:	f000 fc08 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3768      	adds	r7, #104	; 0x68
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	240004a4 	.word	0x240004a4
 8000ea8:	50001000 	.word	0x50001000

08000eac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <MX_QUADSPI_Init+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ee8:	f005 fce4 	bl	80068b4 <HAL_QSPI_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 fbdb 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2400054c 	.word	0x2400054c
 8000f00:	52005000 	.word	0x52005000

08000f04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <MX_RTC_Init+0x4c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f16:	227f      	movs	r2, #127	; 0x7f
 8000f18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f3a:	f009 fa59 	bl	800a3f0 <HAL_RTC_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f44:	f000 fbb2 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	24000598 	.word	0x24000598
 8000f50:	58004000 	.word	0x58004000

08000f54 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f58:	4b58      	ldr	r3, [pc, #352]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f5a:	4a59      	ldr	r2, [pc, #356]	; (80010c0 <MX_SAI2_Init+0x16c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f64:	4b55      	ldr	r3, [pc, #340]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f6a:	4b54      	ldr	r3, [pc, #336]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f88:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f96:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <MX_SAI2_Init+0x170>)
 8000f98:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <MX_SAI2_Init+0x168>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fda:	4b38      	ldr	r3, [pc, #224]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000fe6:	4b35      	ldr	r3, [pc, #212]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_SAI2_Init+0x168>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <MX_SAI2_Init+0x168>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_SAI2_Init+0x168>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ffe:	482f      	ldr	r0, [pc, #188]	; (80010bc <MX_SAI2_Init+0x168>)
 8001000:	f009 fb0e 	bl	800a620 <HAL_SAI_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800100a:	f000 fb4f 	bl	80016ac <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <MX_SAI2_Init+0x178>)
 8001012:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <MX_SAI2_Init+0x174>)
 800101c:	2203      	movs	r2, #3
 800101e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001022:	2240      	movs	r2, #64	; 0x40
 8001024:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001028:	2200      	movs	r2, #0
 800102a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_SAI2_Init+0x174>)
 800102e:	2200      	movs	r2, #0
 8001030:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001034:	2201      	movs	r2, #1
 8001036:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <MX_SAI2_Init+0x174>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_SAI2_Init+0x174>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001052:	2200      	movs	r2, #0
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001058:	2200      	movs	r2, #0
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_SAI2_Init+0x174>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001066:	2201      	movs	r2, #1
 8001068:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_SAI2_Init+0x174>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001074:	2208      	movs	r2, #8
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_SAI2_Init+0x174>)
 800107a:	2201      	movs	r2, #1
 800107c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001080:	2200      	movs	r2, #0
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001086:	2200      	movs	r2, #0
 8001088:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SAI2_Init+0x174>)
 800108c:	2200      	movs	r2, #0
 800108e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001092:	2200      	movs	r2, #0
 8001094:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SAI2_Init+0x174>)
 8001098:	2200      	movs	r2, #0
 800109a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SAI2_Init+0x174>)
 800109e:	2201      	movs	r2, #1
 80010a0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SAI2_Init+0x174>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_SAI2_Init+0x174>)
 80010aa:	f009 fab9 	bl	800a620 <HAL_SAI_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80010b4:	f000 fafa 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	240005bc 	.word	0x240005bc
 80010c0:	40015c04 	.word	0x40015c04
 80010c4:	0002ee00 	.word	0x0002ee00
 80010c8:	24000654 	.word	0x24000654
 80010cc:	40015c24 	.word	0x40015c24

080010d0 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <MX_SDMMC1_MMC_Init+0x44>)
 80010d8:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ec:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_SDMMC1_MMC_Init+0x40>)
 80010fc:	f004 fb1e 	bl	800573c <HAL_MMC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8001106:	f000 fad1 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240006ec 	.word	0x240006ec
 8001114:	52007000 	.word	0x52007000

08001118 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <MX_SPI2_Init+0xa4>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001124:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001132:	2203      	movs	r2, #3
 8001134:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001176:	2200      	movs	r2, #0
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800117c:	2200      	movs	r2, #0
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001188:	2200      	movs	r2, #0
 800118a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI2_Init+0xa0>)
 8001194:	2200      	movs	r2, #0
 8001196:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI2_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SPI2_Init+0xa0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_SPI2_Init+0xa0>)
 80011a6:	f009 fd5b 	bl	800ac60 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80011b0:	f000 fa7c 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000960 	.word	0x24000960
 80011bc:	40003800 	.word	0x40003800

080011c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <MX_USART3_UART_Init+0x94>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART3_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800120a:	f009 fe68 	bl	800aede <HAL_UART_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001214:	f000 fa4a 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800121c:	f00a fef9 	bl	800c012 <HAL_UARTEx_SetTxFifoThreshold>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 fa41 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800122e:	f00a ff2e 	bl	800c08e <HAL_UARTEx_SetRxFifoThreshold>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001238:	f000 fa38 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_USART3_UART_Init+0x90>)
 800123e:	f00a feaf 	bl	800bfa0 <HAL_UARTEx_DisableFifoMode>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 fa30 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	240009e8 	.word	0x240009e8
 8001254:	40004800 	.word	0x40004800

08001258 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001260:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001264:	2209      	movs	r2, #9
 8001266:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800126a:	2202      	movs	r2, #2
 800126c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001276:	2202      	movs	r2, #2
 8001278:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800128e:	2201      	movs	r2, #1
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001294:	2201      	movs	r2, #1
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012a0:	f005 f976 	bl	8006590 <HAL_PCD_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012aa:	f000 f9ff 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24000a7c 	.word	0x24000a7c
 80012b8:	40080000 	.word	0x40080000

080012bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_FMC_Init+0x94>)
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <MX_FMC_Init+0x98>)
 80012d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_FMC_Init+0x94>)
 80012dc:	2201      	movs	r2, #1
 80012de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_FMC_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_FMC_Init+0x94>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_FMC_Init+0x94>)
 80012ee:	2210      	movs	r2, #16
 80012f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_FMC_Init+0x94>)
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_FMC_Init+0x94>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_FMC_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_FMC_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_FMC_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_FMC_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001316:	2310      	movs	r3, #16
 8001318:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800131a:	2310      	movs	r3, #16
 800131c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800131e:	2310      	movs	r3, #16
 8001320:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001322:	2310      	movs	r3, #16
 8001324:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800132a:	2310      	movs	r3, #16
 800132c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800132e:	2310      	movs	r3, #16
 8001330:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_FMC_Init+0x94>)
 8001338:	f009 fc56 	bl	800abe8 <HAL_SDRAM_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001342:	f000 f9b3 	bl	80016ac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	24000f88 	.word	0x24000f88
 8001354:	52004140 	.word	0x52004140

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	; 0x40
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800136e:	4bbf      	ldr	r3, [pc, #764]	; (800166c <MX_GPIO_Init+0x314>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4abd      	ldr	r2, [pc, #756]	; (800166c <MX_GPIO_Init+0x314>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4bbb      	ldr	r3, [pc, #748]	; (800166c <MX_GPIO_Init+0x314>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4bb7      	ldr	r3, [pc, #732]	; (800166c <MX_GPIO_Init+0x314>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4ab6      	ldr	r2, [pc, #728]	; (800166c <MX_GPIO_Init+0x314>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4bb3      	ldr	r3, [pc, #716]	; (800166c <MX_GPIO_Init+0x314>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013aa:	4bb0      	ldr	r3, [pc, #704]	; (800166c <MX_GPIO_Init+0x314>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4aae      	ldr	r2, [pc, #696]	; (800166c <MX_GPIO_Init+0x314>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4bac      	ldr	r3, [pc, #688]	; (800166c <MX_GPIO_Init+0x314>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c8:	4ba8      	ldr	r3, [pc, #672]	; (800166c <MX_GPIO_Init+0x314>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4aa7      	ldr	r2, [pc, #668]	; (800166c <MX_GPIO_Init+0x314>)
 80013d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4ba4      	ldr	r3, [pc, #656]	; (800166c <MX_GPIO_Init+0x314>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4ba1      	ldr	r3, [pc, #644]	; (800166c <MX_GPIO_Init+0x314>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a9f      	ldr	r2, [pc, #636]	; (800166c <MX_GPIO_Init+0x314>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b9d      	ldr	r3, [pc, #628]	; (800166c <MX_GPIO_Init+0x314>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b99      	ldr	r3, [pc, #612]	; (800166c <MX_GPIO_Init+0x314>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a98      	ldr	r2, [pc, #608]	; (800166c <MX_GPIO_Init+0x314>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b95      	ldr	r3, [pc, #596]	; (800166c <MX_GPIO_Init+0x314>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	4b92      	ldr	r3, [pc, #584]	; (800166c <MX_GPIO_Init+0x314>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	4a90      	ldr	r2, [pc, #576]	; (800166c <MX_GPIO_Init+0x314>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001432:	4b8e      	ldr	r3, [pc, #568]	; (800166c <MX_GPIO_Init+0x314>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001440:	4b8a      	ldr	r3, [pc, #552]	; (800166c <MX_GPIO_Init+0x314>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	4a89      	ldr	r2, [pc, #548]	; (800166c <MX_GPIO_Init+0x314>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001450:	4b86      	ldr	r3, [pc, #536]	; (800166c <MX_GPIO_Init+0x314>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b83      	ldr	r3, [pc, #524]	; (800166c <MX_GPIO_Init+0x314>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	4a81      	ldr	r2, [pc, #516]	; (800166c <MX_GPIO_Init+0x314>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <MX_GPIO_Init+0x314>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147c:	4b7b      	ldr	r3, [pc, #492]	; (800166c <MX_GPIO_Init+0x314>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a7a      	ldr	r2, [pc, #488]	; (800166c <MX_GPIO_Init+0x314>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b77      	ldr	r3, [pc, #476]	; (800166c <MX_GPIO_Init+0x314>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b74      	ldr	r3, [pc, #464]	; (800166c <MX_GPIO_Init+0x314>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	4a72      	ldr	r2, [pc, #456]	; (800166c <MX_GPIO_Init+0x314>)
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014aa:	4b70      	ldr	r3, [pc, #448]	; (800166c <MX_GPIO_Init+0x314>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	486c      	ldr	r0, [pc, #432]	; (8001670 <MX_GPIO_Init+0x318>)
 80014c0:	f003 fe7a 	bl	80051b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f241 0104 	movw	r1, #4100	; 0x1004
 80014ca:	486a      	ldr	r0, [pc, #424]	; (8001674 <MX_GPIO_Init+0x31c>)
 80014cc:	f003 fe74 	bl	80051b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	4868      	ldr	r0, [pc, #416]	; (8001678 <MX_GPIO_Init+0x320>)
 80014d6:	f003 fe6f 	bl	80051b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014ec:	2303      	movs	r3, #3
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f4:	4619      	mov	r1, r3
 80014f6:	4861      	ldr	r0, [pc, #388]	; (800167c <MX_GPIO_Init+0x324>)
 80014f8:	f003 fcae 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150c:	4619      	mov	r1, r3
 800150e:	485c      	ldr	r0, [pc, #368]	; (8001680 <MX_GPIO_Init+0x328>)
 8001510:	f003 fca2 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001514:	2330      	movs	r3, #48	; 0x30
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001524:	230a      	movs	r3, #10
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	4855      	ldr	r0, [pc, #340]	; (8001684 <MX_GPIO_Init+0x32c>)
 8001530:	f003 fc92 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001534:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001546:	4619      	mov	r1, r3
 8001548:	484f      	ldr	r0, [pc, #316]	; (8001688 <MX_GPIO_Init+0x330>)
 800154a:	f003 fc85 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800154e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001560:	4619      	mov	r1, r3
 8001562:	484a      	ldr	r0, [pc, #296]	; (800168c <MX_GPIO_Init+0x334>)
 8001564:	f003 fc78 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800157a:	2301      	movs	r3, #1
 800157c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001582:	4619      	mov	r1, r3
 8001584:	4840      	ldr	r0, [pc, #256]	; (8001688 <MX_GPIO_Init+0x330>)
 8001586:	f003 fc67 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800159a:	2306      	movs	r3, #6
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a2:	4619      	mov	r1, r3
 80015a4:	483a      	ldr	r0, [pc, #232]	; (8001690 <MX_GPIO_Init+0x338>)
 80015a6:	f003 fc57 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c0:	4619      	mov	r1, r3
 80015c2:	482b      	ldr	r0, [pc, #172]	; (8001670 <MX_GPIO_Init+0x318>)
 80015c4:	f003 fc48 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80015c8:	2304      	movs	r3, #4
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	482c      	ldr	r0, [pc, #176]	; (8001690 <MX_GPIO_Init+0x338>)
 80015de:	f003 fc3b 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f2:	4619      	mov	r1, r3
 80015f4:	4827      	ldr	r0, [pc, #156]	; (8001694 <MX_GPIO_Init+0x33c>)
 80015f6:	f003 fc2f 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80015fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	481a      	ldr	r0, [pc, #104]	; (800167c <MX_GPIO_Init+0x324>)
 8001612:	f003 fc21 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001616:	2340      	movs	r3, #64	; 0x40
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001626:	2309      	movs	r3, #9
 8001628:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162e:	4619      	mov	r1, r3
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <MX_GPIO_Init+0x330>)
 8001632:	f003 fc11 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001636:	f241 0304 	movw	r3, #4100	; 0x1004
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_GPIO_Init+0x31c>)
 8001650:	f003 fc02 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001654:	2304      	movs	r3, #4
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	e015      	b.n	8001698 <MX_GPIO_Init+0x340>
 800166c:	58024400 	.word	0x58024400
 8001670:	58022000 	.word	0x58022000
 8001674:	58020400 	.word	0x58020400
 8001678:	58022400 	.word	0x58022400
 800167c:	58021c00 	.word	0x58021c00
 8001680:	58020c00 	.word	0x58020c00
 8001684:	58021000 	.word	0x58021000
 8001688:	58020000 	.word	0x58020000
 800168c:	58020800 	.word	0x58020800
 8001690:	58021800 	.word	0x58021800
 8001694:	58022800 	.word	0x58022800
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_GPIO_Init+0x350>)
 800169a:	f003 fbdd 	bl	8004e58 <HAL_GPIO_Init>

}
 800169e:	bf00      	nop
 80016a0:	3740      	adds	r7, #64	; 0x40
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	58022400 	.word	0x58022400

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_MspInit+0x30>)
 80016c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_MspInit+0x30>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MspInit+0x30>)
 80016d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58024400 	.word	0x58024400

080016ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b090      	sub	sp, #64	; 0x40
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a72      	ldr	r2, [pc, #456]	; (80018d4 <HAL_ADC_MspInit+0x1e8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d14e      	bne.n	80017ac <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800170e:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <HAL_ADC_MspInit+0x1ec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a70      	ldr	r2, [pc, #448]	; (80018d8 <HAL_ADC_MspInit+0x1ec>)
 8001716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001718:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <HAL_ADC_MspInit+0x1ec>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10e      	bne.n	800173e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001720:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001726:	4a6d      	ldr	r2, [pc, #436]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001744:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176c:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800177a:	2301      	movs	r3, #1
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	4619      	mov	r1, r3
 800178c:	4854      	ldr	r0, [pc, #336]	; (80018e0 <HAL_ADC_MspInit+0x1f4>)
 800178e:	f003 fb63 	bl	8004e58 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001792:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001796:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800179a:	f001 fa4d 	bl	8002c38 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800179e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017a2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80017a6:	f001 fa47 	bl	8002c38 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80017aa:	e08f      	b.n	80018cc <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_ADC_MspInit+0x1f8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d133      	bne.n	800181e <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <HAL_ADC_MspInit+0x1ec>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a46      	ldr	r2, [pc, #280]	; (80018d8 <HAL_ADC_MspInit+0x1ec>)
 80017be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017c0:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <HAL_ADC_MspInit+0x1ec>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10e      	bne.n	80017e6 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017c8:	4b44      	ldr	r3, [pc, #272]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 80017ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ce:	4a43      	ldr	r2, [pc, #268]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 80017da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	4a3b      	ldr	r2, [pc, #236]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001804:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001808:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800180c:	f001 fa14 	bl	8002c38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001810:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001814:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001818:	f001 fa0e 	bl	8002c38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800181c:	e056      	b.n	80018cc <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_ADC_MspInit+0x1fc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d151      	bne.n	80018cc <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a23      	ldr	r2, [pc, #140]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 800184e:	f043 0320 	orr.w	r3, r3, #32
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_ADC_MspInit+0x1f0>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001888:	2303      	movs	r3, #3
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	4619      	mov	r1, r3
 8001896:	4815      	ldr	r0, [pc, #84]	; (80018ec <HAL_ADC_MspInit+0x200>)
 8001898:	f003 fade 	bl	8004e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a0:	2303      	movs	r3, #3
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ac:	4619      	mov	r1, r3
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <HAL_ADC_MspInit+0x1f4>)
 80018b0:	f003 fad2 	bl	8004e58 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80018b4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80018b8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018bc:	f001 f9bc 	bl	8002c38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80018c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80018c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80018c8:	f001 f9b6 	bl	8002c38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80018cc:	bf00      	nop
 80018ce:	3740      	adds	r7, #64	; 0x40
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40022000 	.word	0x40022000
 80018d8:	240010c8 	.word	0x240010c8
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58020800 	.word	0x58020800
 80018e4:	40022100 	.word	0x40022100
 80018e8:	58026000 	.word	0x58026000
 80018ec:	58021400 	.word	0x58021400

080018f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b092      	sub	sp, #72	; 0x48
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <HAL_ETH_MspInit+0x23c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 8108 	bne.w	8001b24 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001914:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800191a:	4a85      	ldr	r2, [pc, #532]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 800191c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001920:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001924:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800192a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001932:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001938:	4a7d      	ldr	r2, [pc, #500]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001942:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001950:	4b77      	ldr	r3, [pc, #476]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001952:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001956:	4a76      	ldr	r2, [pc, #472]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001960:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800196e:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001974:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197e:	4b6c      	ldr	r3, [pc, #432]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001992:	4a67      	ldr	r2, [pc, #412]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199c:	4b64      	ldr	r3, [pc, #400]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80019aa:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a5f      	ldr	r2, [pc, #380]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d8:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a50      	ldr	r2, [pc, #320]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a41      	ldr	r2, [pc, #260]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_ETH_MspInit+0x240>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001a40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a52:	230b      	movs	r3, #11
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4835      	ldr	r0, [pc, #212]	; (8001b34 <HAL_ETH_MspInit+0x244>)
 8001a5e:	f003 f9fb 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001a62:	2304      	movs	r3, #4
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a72:	230b      	movs	r3, #11
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	482e      	ldr	r0, [pc, #184]	; (8001b38 <HAL_ETH_MspInit+0x248>)
 8001a7e:	f003 f9eb 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a94:	230b      	movs	r3, #11
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <HAL_ETH_MspInit+0x24c>)
 8001aa0:	f003 f9da 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001aa4:	233e      	movs	r3, #62	; 0x3e
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ab4:	230b      	movs	r3, #11
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001abc:	4619      	mov	r1, r3
 8001abe:	4820      	ldr	r0, [pc, #128]	; (8001b40 <HAL_ETH_MspInit+0x250>)
 8001ac0:	f003 f9ca 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad4:	230b      	movs	r3, #11
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001adc:	4619      	mov	r1, r3
 8001ade:	4819      	ldr	r0, [pc, #100]	; (8001b44 <HAL_ETH_MspInit+0x254>)
 8001ae0:	f003 f9ba 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001ae4:	2386      	movs	r3, #134	; 0x86
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af4:	230b      	movs	r3, #11
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001afc:	4619      	mov	r1, r3
 8001afe:	4812      	ldr	r0, [pc, #72]	; (8001b48 <HAL_ETH_MspInit+0x258>)
 8001b00:	f003 f9aa 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001b04:	2303      	movs	r3, #3
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b14:	230b      	movs	r3, #11
 8001b16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480b      	ldr	r0, [pc, #44]	; (8001b4c <HAL_ETH_MspInit+0x25c>)
 8001b20:	f003 f99a 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3748      	adds	r7, #72	; 0x48
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40028000 	.word	0x40028000
 8001b30:	58024400 	.word	0x58024400
 8001b34:	58021800 	.word	0x58021800
 8001b38:	58021000 	.word	0x58021000
 8001b3c:	58022000 	.word	0x58022000
 8001b40:	58020800 	.word	0x58020800
 8001b44:	58021c00 	.word	0x58021c00
 8001b48:	58020000 	.word	0x58020000
 8001b4c:	58020400 	.word	0x58020400

08001b50 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0bc      	sub	sp, #240	; 0xf0
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	22c0      	movs	r2, #192	; 0xc0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00b fae9 	bl	800d148 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_FDCAN_MspInit+0x188>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d151      	bne.n	8001c24 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 ff2b 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001ba4:	f7ff fd82 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_FDCAN_MspInit+0x18c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a4b      	ldr	r2, [pc, #300]	; (8001cdc <HAL_FDCAN_MspInit+0x18c>)
 8001bb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_FDCAN_MspInit+0x18c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001bba:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001bbc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bc0:	4a47      	ldr	r2, [pc, #284]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bca:	4b45      	ldr	r3, [pc, #276]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001bcc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001bf6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c10:	2309      	movs	r3, #9
 8001c12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <HAL_FDCAN_MspInit+0x194>)
 8001c1e:	f003 f91b 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001c22:	e055      	b.n	8001cd0 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <HAL_FDCAN_MspInit+0x198>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d150      	bne.n	8001cd0 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f005 fed4 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001c52:	f7ff fd2b 	bl	80016ac <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_FDCAN_MspInit+0x18c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_FDCAN_MspInit+0x18c>)
 8001c5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_FDCAN_MspInit+0x18c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10e      	bne.n	8001c86 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001c6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001c7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_FDCAN_MspInit+0x190>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001ca4:	f242 0320 	movw	r3, #8224	; 0x2020
 8001ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001cbe:	2309      	movs	r3, #9
 8001cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <HAL_FDCAN_MspInit+0x19c>)
 8001ccc:	f003 f8c4 	bl	8004e58 <HAL_GPIO_Init>
}
 8001cd0:	bf00      	nop
 8001cd2:	37f0      	adds	r7, #240	; 0xf0
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	4000a000 	.word	0x4000a000
 8001cdc:	240010cc 	.word	0x240010cc
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58021c00 	.word	0x58021c00
 8001ce8:	4000a400 	.word	0x4000a400
 8001cec:	58020400 	.word	0x58020400

08001cf0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0be      	sub	sp, #248	; 0xf8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d08:	f107 0320 	add.w	r3, r7, #32
 8001d0c:	22c0      	movs	r2, #192	; 0xc0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00b fa19 	bl	800d148 <memset>
  if(hltdc->Instance==LTDC)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a66      	ldr	r2, [pc, #408]	; (8001eb4 <HAL_LTDC_MspInit+0x1c4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	f040 80c4 	bne.w	8001eaa <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d36:	2302      	movs	r3, #2
 8001d38:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d46:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	4618      	mov	r0, r3
 8001d58:	f005 fe4c 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001d62:	f7ff fca3 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d66:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001d68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001d76:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001d78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d94:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001da2:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	4a43      	ldr	r2, [pc, #268]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	4a3c      	ldr	r2, [pc, #240]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_LTDC_MspInit+0x1c8>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001dfc:	23fc      	movs	r3, #252	; 0xfc
 8001dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e14:	230e      	movs	r3, #14
 8001e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4826      	ldr	r0, [pc, #152]	; (8001ebc <HAL_LTDC_MspInit+0x1cc>)
 8001e22:	f003 f819 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001e26:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e40:	230e      	movs	r3, #14
 8001e42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481c      	ldr	r0, [pc, #112]	; (8001ec0 <HAL_LTDC_MspInit+0x1d0>)
 8001e4e:	f003 f803 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001e52:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e6c:	230e      	movs	r3, #14
 8001e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <HAL_LTDC_MspInit+0x1d4>)
 8001e7a:	f002 ffed 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e98:	230e      	movs	r3, #14
 8001e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <HAL_LTDC_MspInit+0x1d8>)
 8001ea6:	f002 ffd7 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001eaa:	bf00      	nop
 8001eac:	37f8      	adds	r7, #248	; 0xf8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	50001000 	.word	0x50001000
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	58022800 	.word	0x58022800
 8001ec0:	58022000 	.word	0x58022000
 8001ec4:	58022400 	.word	0x58022400
 8001ec8:	58021c00 	.word	0x58021c00

08001ecc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b0bc      	sub	sp, #240	; 0xf0
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	22c0      	movs	r2, #192	; 0xc0
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00b f92b 	bl	800d148 <memset>
  if(hqspi->Instance==QUADSPI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_QSPI_MspInit+0x184>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	f040 80a5 	bne.w	8002048 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	4618      	mov	r0, r3
 8001f14:	f005 fd6e 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001f1e:	f7ff fbc5 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f22:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f28:	4a4a      	ldr	r2, [pc, #296]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	4b44      	ldr	r3, [pc, #272]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	4a43      	ldr	r2, [pc, #268]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f50:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f66:	f043 0320 	orr.w	r3, r3, #32
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_QSPI_MspInit+0x188>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4826      	ldr	r0, [pc, #152]	; (8002058 <HAL_QSPI_MspInit+0x18c>)
 8001fc0:	f002 ff4a 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001fc4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fde:	2309      	movs	r3, #9
 8001fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fe8:	4619      	mov	r1, r3
 8001fea:	481c      	ldr	r0, [pc, #112]	; (800205c <HAL_QSPI_MspInit+0x190>)
 8001fec:	f002 ff34 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800200a:	230a      	movs	r3, #10
 800200c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002010:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002014:	4619      	mov	r1, r3
 8002016:	4811      	ldr	r0, [pc, #68]	; (800205c <HAL_QSPI_MspInit+0x190>)
 8002018:	f002 ff1e 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800201c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002020:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002036:	2309      	movs	r3, #9
 8002038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002040:	4619      	mov	r1, r3
 8002042:	4807      	ldr	r0, [pc, #28]	; (8002060 <HAL_QSPI_MspInit+0x194>)
 8002044:	f002 ff08 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002048:	bf00      	nop
 800204a:	37f0      	adds	r7, #240	; 0xf0
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	52005000 	.word	0x52005000
 8002054:	58024400 	.word	0x58024400
 8002058:	58020400 	.word	0x58020400
 800205c:	58021400 	.word	0x58021400
 8002060:	58020c00 	.word	0x58020c00

08002064 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b2      	sub	sp, #200	; 0xc8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	22c0      	movs	r2, #192	; 0xc0
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f00b f867 	bl	800d148 <memset>
  if(hrtc->Instance==RTC)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_RTC_MspInit+0x5c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d119      	bne.n	80020b8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002084:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	4618      	mov	r0, r3
 800209e:	f005 fca9 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80020a8:	f7ff fb00 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RTC_MspInit+0x60>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_RTC_MspInit+0x60>)
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020b8:	bf00      	nop
 80020ba:	37c8      	adds	r7, #200	; 0xc8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	58004000 	.word	0x58004000
 80020c4:	58024400 	.word	0x58024400

080020c8 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0bc      	sub	sp, #240	; 0xf0
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	22c0      	movs	r2, #192	; 0xc0
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00b f82d 	bl	800d148 <memset>
  if(hmmc->Instance==SDMMC1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_MMC_MspInit+0x158>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f040 808f 	bne.w	8002218 <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80020fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002106:	2300      	movs	r3, #0
 8002108:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210a:	f107 0318 	add.w	r3, r7, #24
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fc70 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 800211a:	f7ff fac7 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 8002120:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002124:	4a3f      	ldr	r2, [pc, #252]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 8002130:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002142:	4a38      	ldr	r2, [pc, #224]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217e:	4a29      	ldr	r2, [pc, #164]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_MMC_MspInit+0x15c>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8002196:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 800219a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021b0:	230c      	movs	r3, #12
 80021b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ba:	4619      	mov	r1, r3
 80021bc:	481a      	ldr	r0, [pc, #104]	; (8002228 <HAL_MMC_MspInit+0x160>)
 80021be:	f002 fe4b 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 80021c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021dc:	230c      	movs	r3, #12
 80021de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021e6:	4619      	mov	r1, r3
 80021e8:	4810      	ldr	r0, [pc, #64]	; (800222c <HAL_MMC_MspInit+0x164>)
 80021ea:	f002 fe35 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80021ee:	2304      	movs	r3, #4
 80021f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002206:	230c      	movs	r3, #12
 8002208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002210:	4619      	mov	r1, r3
 8002212:	4807      	ldr	r0, [pc, #28]	; (8002230 <HAL_MMC_MspInit+0x168>)
 8002214:	f002 fe20 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	37f0      	adds	r7, #240	; 0xf0
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	52007000 	.word	0x52007000
 8002224:	58024400 	.word	0x58024400
 8002228:	58020800 	.word	0x58020800
 800222c:	58020400 	.word	0x58020400
 8002230:	58020c00 	.word	0x58020c00

08002234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0bc      	sub	sp, #240	; 0xf0
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	22c0      	movs	r2, #192	; 0xc0
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00a ff77 	bl	800d148 <memset>
  if(hspi->Instance==SPI2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a55      	ldr	r2, [pc, #340]	; (80023b4 <HAL_SPI_MspInit+0x180>)
 8002260:	4293      	cmp	r3, r2
 8002262:	f040 80a3 	bne.w	80023ac <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002272:	2300      	movs	r3, #0
 8002274:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fbba 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002286:	f7ff fa11 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228a:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 800228c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002290:	4a49      	ldr	r2, [pc, #292]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 800229c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	4a42      	ldr	r2, [pc, #264]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022cc:	4a3a      	ldr	r2, [pc, #232]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ea:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_SPI_MspInit+0x184>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002302:	2310      	movs	r3, #16
 8002304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800231a:	2307      	movs	r3, #7
 800231c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002324:	4619      	mov	r1, r3
 8002326:	4825      	ldr	r0, [pc, #148]	; (80023bc <HAL_SPI_MspInit+0x188>)
 8002328:	f002 fd96 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800232c:	2308      	movs	r3, #8
 800232e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002344:	2305      	movs	r3, #5
 8002346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800234e:	4619      	mov	r1, r3
 8002350:	481b      	ldr	r0, [pc, #108]	; (80023c0 <HAL_SPI_MspInit+0x18c>)
 8002352:	f002 fd81 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002356:	2304      	movs	r3, #4
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800236e:	2305      	movs	r3, #5
 8002370:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002374:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002378:	4619      	mov	r1, r3
 800237a:	4812      	ldr	r0, [pc, #72]	; (80023c4 <HAL_SPI_MspInit+0x190>)
 800237c:	f002 fd6c 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239a:	2305      	movs	r3, #5
 800239c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_SPI_MspInit+0x188>)
 80023a8:	f002 fd56 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023ac:	bf00      	nop
 80023ae:	37f0      	adds	r7, #240	; 0xf0
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40003800 	.word	0x40003800
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58020400 	.word	0x58020400
 80023c0:	58020c00 	.word	0x58020c00
 80023c4:	58022000 	.word	0x58022000

080023c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b0ba      	sub	sp, #232	; 0xe8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	22c0      	movs	r2, #192	; 0xc0
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00a fead 	bl	800d148 <memset>
  if(huart->Instance==USART3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_UART_MspInit+0xc8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d146      	bne.n	8002486 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023f8:	f04f 0202 	mov.w	r2, #2
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	4618      	mov	r0, r3
 8002410:	f005 faf0 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800241a:	f7ff f947 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_UART_MspInit+0xcc>)
 8002420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_UART_MspInit+0xcc>)
 8002426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_UART_MspInit+0xcc>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_UART_MspInit+0xcc>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_UART_MspInit+0xcc>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_UART_MspInit+0xcc>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800245a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800245e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002474:	2307      	movs	r3, #7
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_UART_MspInit+0xd0>)
 8002482:	f002 fce9 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	37e8      	adds	r7, #232	; 0xe8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40004800 	.word	0x40004800
 8002494:	58024400 	.word	0x58024400
 8002498:	58020400 	.word	0x58020400

0800249c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ba      	sub	sp, #232	; 0xe8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	22c0      	movs	r2, #192	; 0xc0
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00a fe43 	bl	800d148 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a30      	ldr	r2, [pc, #192]	; (8002588 <HAL_PCD_MspInit+0xec>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d159      	bne.n	8002580 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80024d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4618      	mov	r0, r3
 80024e6:	f005 fa85 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80024f0:	f7ff f8dc 	bl	80016ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024f4:	f004 f9ce 	bl	8006894 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_PCD_MspInit+0xf0>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fe:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_PCD_MspInit+0xf0>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_PCD_MspInit+0xf0>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800252e:	4619      	mov	r1, r3
 8002530:	4817      	ldr	r0, [pc, #92]	; (8002590 <HAL_PCD_MspInit+0xf4>)
 8002532:	f002 fc91 	bl	8004e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002536:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800253a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002550:	230a      	movs	r3, #10
 8002552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800255a:	4619      	mov	r1, r3
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <HAL_PCD_MspInit+0xf4>)
 800255e:	f002 fc7b 	bl	8004e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_PCD_MspInit+0xf0>)
 8002564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_PCD_MspInit+0xf0>)
 800256a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800256e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_PCD_MspInit+0xf0>)
 8002574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002580:	bf00      	nop
 8002582:	37e8      	adds	r7, #232	; 0xe8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40080000 	.word	0x40080000
 800258c:	58024400 	.word	0x58024400
 8002590:	58020000 	.word	0x58020000

08002594 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002594:	b580      	push	{r7, lr}
 8002596:	b0b8      	sub	sp, #224	; 0xe0
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800259a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80025aa:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <HAL_FMC_MspInit+0x15c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8099 	bne.w	80026e6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <HAL_FMC_MspInit+0x15c>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	22c0      	movs	r2, #192	; 0xc0
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00a fdc0 	bl	800d148 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80025c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 fa09 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80025e8:	f7ff f860 	bl	80016ac <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025ec:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_FMC_MspInit+0x160>)
 80025ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025f2:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <HAL_FMC_MspInit+0x160>)
 80025f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80025fc:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_FMC_MspInit+0x160>)
 80025fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800260a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800260e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002624:	230c      	movs	r3, #12
 8002626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800262e:	4619      	mov	r1, r3
 8002630:	4831      	ldr	r0, [pc, #196]	; (80026f8 <HAL_FMC_MspInit+0x164>)
 8002632:	f002 fc11 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002636:	f248 1333 	movw	r3, #33075	; 0x8133
 800263a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002650:	230c      	movs	r3, #12
 8002652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002656:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800265a:	4619      	mov	r1, r3
 800265c:	4827      	ldr	r0, [pc, #156]	; (80026fc <HAL_FMC_MspInit+0x168>)
 800265e:	f002 fbfb 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002662:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800267c:	230c      	movs	r3, #12
 800267e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002682:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002686:	4619      	mov	r1, r3
 8002688:	481d      	ldr	r0, [pc, #116]	; (8002700 <HAL_FMC_MspInit+0x16c>)
 800268a:	f002 fbe5 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800268e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002692:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a8:	230c      	movs	r3, #12
 80026aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026b2:	4619      	mov	r1, r3
 80026b4:	4813      	ldr	r0, [pc, #76]	; (8002704 <HAL_FMC_MspInit+0x170>)
 80026b6:	f002 fbcf 	bl	8004e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026ba:	23e0      	movs	r3, #224	; 0xe0
 80026bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026d2:	230c      	movs	r3, #12
 80026d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026dc:	4619      	mov	r1, r3
 80026de:	480a      	ldr	r0, [pc, #40]	; (8002708 <HAL_FMC_MspInit+0x174>)
 80026e0:	f002 fbba 	bl	8004e58 <HAL_GPIO_Init>
 80026e4:	e000      	b.n	80026e8 <HAL_FMC_MspInit+0x154>
    return;
 80026e6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026e8:	37e0      	adds	r7, #224	; 0xe0
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	240010d0 	.word	0x240010d0
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58021000 	.word	0x58021000
 80026fc:	58021800 	.word	0x58021800
 8002700:	58020c00 	.word	0x58020c00
 8002704:	58021400 	.word	0x58021400
 8002708:	58021c00 	.word	0x58021c00

0800270c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002714:	f7ff ff3e 	bl	8002594 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0ba      	sub	sp, #232	; 0xe8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	22c0      	movs	r2, #192	; 0xc0
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f00a fd09 	bl	800d148 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_SAI_MspInit+0x130>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d13e      	bne.n	80027be <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800274c:	2300      	movs	r3, #0
 800274e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f005 f94d 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002760:	f7fe ffa4 	bl	80016ac <Error_Handler>
    }

    if (SAI2_client == 0)
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_SAI_MspInit+0x134>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10e      	bne.n	800278a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_SAI_MspInit+0x138>)
 800276e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002772:	4a39      	ldr	r2, [pc, #228]	; (8002858 <HAL_SAI_MspInit+0x138>)
 8002774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002778:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_SAI_MspInit+0x138>)
 800277e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_SAI_MspInit+0x134>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_SAI_MspInit+0x134>)
 8002792:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002794:	23f0      	movs	r3, #240	; 0xf0
 8002796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027ac:	230a      	movs	r3, #10
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027b6:	4619      	mov	r1, r3
 80027b8:	4828      	ldr	r0, [pc, #160]	; (800285c <HAL_SAI_MspInit+0x13c>)
 80027ba:	f002 fb4d 	bl	8004e58 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_SAI_MspInit+0x140>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d13f      	bne.n	8002848 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80027c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	4618      	mov	r0, r3
 80027de:	f005 f909 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80027e8:	f7fe ff60 	bl	80016ac <Error_Handler>
    }

      if (SAI2_client == 0)
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_SAI_MspInit+0x134>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_SAI_MspInit+0x138>)
 80027f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_SAI_MspInit+0x138>)
 80027fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002800:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <HAL_SAI_MspInit+0x138>)
 8002806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800280a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_SAI_MspInit+0x134>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_SAI_MspInit+0x134>)
 800281a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800281c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002836:	230a      	movs	r3, #10
 8002838:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800283c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002840:	4619      	mov	r1, r3
 8002842:	4808      	ldr	r0, [pc, #32]	; (8002864 <HAL_SAI_MspInit+0x144>)
 8002844:	f002 fb08 	bl	8004e58 <HAL_GPIO_Init>

    }
}
 8002848:	bf00      	nop
 800284a:	37e8      	adds	r7, #232	; 0xe8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40015c04 	.word	0x40015c04
 8002854:	240010d4 	.word	0x240010d4
 8002858:	58024400 	.word	0x58024400
 800285c:	58022000 	.word	0x58022000
 8002860:	40015c24 	.word	0x40015c24
 8002864:	58021800 	.word	0x58021800

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800286c:	e7fe      	b.n	800286c <NMI_Handler+0x4>

0800286e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <MemManage_Handler+0x4>

0800287a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <BusFault_Handler+0x4>

08002880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <UsageFault_Handler+0x4>

08002886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b4:	f000 f95c 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_sbrk+0x5c>)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_sbrk+0x60>)
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x64>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <_sbrk+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ec:	f00a fbf4 	bl	800d0d8 <__errno>
 80028f0:	4603      	mov	r3, r0
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e009      	b.n	8002910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <_sbrk+0x64>)
 800290c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	24080000 	.word	0x24080000
 800291c:	00000400 	.word	0x00000400
 8002920:	240010d8 	.word	0x240010d8
 8002924:	240010f0 	.word	0x240010f0

08002928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800292c:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <SystemInit+0xe4>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	4a36      	ldr	r2, [pc, #216]	; (8002a0c <SystemInit+0xe4>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800293c:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <SystemInit+0xe8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	2b06      	cmp	r3, #6
 8002946:	d807      	bhi.n	8002958 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <SystemInit+0xe8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 030f 	bic.w	r3, r3, #15
 8002950:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <SystemInit+0xe8>)
 8002952:	f043 0307 	orr.w	r3, r3, #7
 8002956:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <SystemInit+0xec>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <SystemInit+0xec>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <SystemInit+0xec>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <SystemInit+0xec>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4929      	ldr	r1, [pc, #164]	; (8002a14 <SystemInit+0xec>)
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <SystemInit+0xf0>)
 8002972:	4013      	ands	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <SystemInit+0xe8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <SystemInit+0xe8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 030f 	bic.w	r3, r3, #15
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <SystemInit+0xe8>)
 800298c:	f043 0307 	orr.w	r3, r3, #7
 8002990:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <SystemInit+0xec>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <SystemInit+0xec>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <SystemInit+0xec>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <SystemInit+0xec>)
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <SystemInit+0xf4>)
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <SystemInit+0xec>)
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <SystemInit+0xf8>)
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <SystemInit+0xec>)
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <SystemInit+0xfc>)
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <SystemInit+0xec>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <SystemInit+0xec>)
 80029be:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <SystemInit+0xfc>)
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <SystemInit+0xec>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <SystemInit+0xec>)
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <SystemInit+0xfc>)
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <SystemInit+0xec>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <SystemInit+0xec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <SystemInit+0xec>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <SystemInit+0xec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <SystemInit+0x100>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <SystemInit+0x104>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f2:	d202      	bcs.n	80029fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <SystemInit+0x108>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <SystemInit+0x10c>)
 80029fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00
 8002a10:	52002000 	.word	0x52002000
 8002a14:	58024400 	.word	0x58024400
 8002a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a1c:	02020200 	.word	0x02020200
 8002a20:	01ff0000 	.word	0x01ff0000
 8002a24:	01010280 	.word	0x01010280
 8002a28:	5c001000 	.word	0x5c001000
 8002a2c:	ffff0000 	.word	0xffff0000
 8002a30:	51008108 	.word	0x51008108
 8002a34:	52004000 	.word	0x52004000

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a3c:	f7ff ff74 	bl	8002928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a42:	490d      	ldr	r1, [pc, #52]	; (8002a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a48:	e002      	b.n	8002a50 <LoopCopyDataInit>

08002a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4e:	3304      	adds	r3, #4

08002a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a54:	d3f9      	bcc.n	8002a4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a58:	4c0a      	ldr	r4, [pc, #40]	; (8002a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a5c:	e001      	b.n	8002a62 <LoopFillZerobss>

08002a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a60:	3204      	adds	r2, #4

08002a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a64:	d3fb      	bcc.n	8002a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a66:	f00a fb3d 	bl	800d0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6a:	f7fd fe13 	bl	8000694 <main>
  bx  lr
 8002a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a78:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002a7c:	0800db34 	.word	0x0800db34
  ldr r2, =_sbss
 8002a80:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8002a84:	240010f0 	.word	0x240010f0

08002a88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC3_IRQHandler>
	...

08002a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a92:	2003      	movs	r0, #3
 8002a94:	f001 fa26 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a98:	f004 fdd6 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_Init+0x68>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	4913      	ldr	r1, [pc, #76]	; (8002af8 <HAL_Init+0x6c>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_Init+0x68>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_Init+0x6c>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <HAL_Init+0x70>)
 8002ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <HAL_Init+0x74>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f000 f814 	bl	8002b04 <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e002      	b.n	8002aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae6:	f7fe fde7 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	0800dab8 	.word	0x0800dab8
 8002afc:	24000004 	.word	0x24000004
 8002b00:	24000000 	.word	0x24000000

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_InitTick+0x60>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e021      	b.n	8002b5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_InitTick+0x64>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_InitTick+0x60>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f9fd 	bl	8003f2e <HAL_SYSTICK_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00e      	b.n	8002b5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d80a      	bhi.n	8002b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f001 f9d5 	bl	8003efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b50:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <HAL_InitTick+0x68>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2400000c 	.word	0x2400000c
 8002b68:	24000000 	.word	0x24000000
 8002b6c:	24000008 	.word	0x24000008

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2400000c 	.word	0x2400000c
 8002b94:	240010dc 	.word	0x240010dc

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	240010dc 	.word	0x240010dc

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2400000c 	.word	0x2400000c

08002bf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_GetREVID+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0c1b      	lsrs	r3, r3, #16
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	5c001000 	.word	0x5c001000

08002c10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c20:	4904      	ldr	r1, [pc, #16]	; (8002c34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	58000400 	.word	0x58000400

08002c38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	58000400 	.word	0x58000400

08002c64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3360      	adds	r3, #96	; 0x60
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	611a      	str	r2, [r3, #16]
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]
  }
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3330      	adds	r3, #48	; 0x30
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	211f      	movs	r1, #31
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	f003 011f 	and.w	r1, r3, #31
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	0e5b      	lsrs	r3, r3, #25
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	0d1b      	lsrs	r3, r3, #20
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2107      	movs	r1, #7
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	401a      	ands	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0d1b      	lsrs	r3, r3, #20
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0318 	and.w	r3, r3, #24
 8002e46:	4908      	ldr	r1, [pc, #32]	; (8002e68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e48:	40d9      	lsrs	r1, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	000fffff 	.word	0x000fffff

08002e6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6093      	str	r3, [r2, #8]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	5fffffc0 	.word	0x5fffffc0

08002e90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea4:	d101      	bne.n	8002eaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <LL_ADC_EnableInternalRegulator+0x24>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	6fffffc0 	.word	0x6fffffc0

08002ee0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef4:	d101      	bne.n	8002efa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <LL_ADC_IsEnabled+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_ADC_IsEnabled+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d101      	bne.n	8002f6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e18f      	b.n	80032b6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe fba1 	bl	80016ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff67 	bl	8002e90 <LL_ADC_IsDeepPowerDownEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff4d 	bl	8002e6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff82 	bl	8002ee0 <LL_ADC_IsInternalRegulatorEnabled>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d114      	bne.n	800300c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff66 	bl	8002eb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fec:	4b87      	ldr	r3, [pc, #540]	; (800320c <HAL_ADC_Init+0x290>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	4a87      	ldr	r2, [pc, #540]	; (8003210 <HAL_ADC_Init+0x294>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f9      	bne.n	8003000 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff65 	bl	8002ee0 <LL_ADC_IsInternalRegulatorEnabled>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff76 	bl	8002f2e <LL_ADC_REG_IsConversionOngoing>
 8003042:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8129 	bne.w	80032a4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8125 	bne.w	80032a4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff4a 	bl	8002f08 <LL_ADC_IsEnabled>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d136      	bne.n	80030e8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a65      	ldr	r2, [pc, #404]	; (8003214 <HAL_ADC_Init+0x298>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_ADC_Init+0x112>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a63      	ldr	r2, [pc, #396]	; (8003218 <HAL_ADC_Init+0x29c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10e      	bne.n	80030ac <HAL_ADC_Init+0x130>
 800308e:	4861      	ldr	r0, [pc, #388]	; (8003214 <HAL_ADC_Init+0x298>)
 8003090:	f7ff ff3a 	bl	8002f08 <LL_ADC_IsEnabled>
 8003094:	4604      	mov	r4, r0
 8003096:	4860      	ldr	r0, [pc, #384]	; (8003218 <HAL_ADC_Init+0x29c>)
 8003098:	f7ff ff36 	bl	8002f08 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	4323      	orrs	r3, r4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e008      	b.n	80030be <HAL_ADC_Init+0x142>
 80030ac:	485b      	ldr	r0, [pc, #364]	; (800321c <HAL_ADC_Init+0x2a0>)
 80030ae:	f7ff ff2b 	bl	8002f08 <LL_ADC_IsEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a53      	ldr	r2, [pc, #332]	; (8003214 <HAL_ADC_Init+0x298>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Init+0x15a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a51      	ldr	r2, [pc, #324]	; (8003218 <HAL_ADC_Init+0x29c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_ADC_Init+0x15e>
 80030d6:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_ADC_Init+0x2a4>)
 80030d8:	e000      	b.n	80030dc <HAL_ADC_Init+0x160>
 80030da:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_ADC_Init+0x2a8>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7ff fdbe 	bl	8002c64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030e8:	f7ff fd86 	bl	8002bf8 <HAL_GetREVID>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d914      	bls.n	8003120 <HAL_ADC_Init+0x1a4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d110      	bne.n	8003120 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7d5b      	ldrb	r3, [r3, #21]
 8003102:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003108:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800310e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7f1b      	ldrb	r3, [r3, #28]
 8003114:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003116:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003118:	f043 030c 	orr.w	r3, r3, #12
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e00d      	b.n	800313c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7d5b      	ldrb	r3, [r3, #21]
 8003124:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800312a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003130:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7f1b      	ldrb	r3, [r3, #28]
 8003136:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7f1b      	ldrb	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d106      	bne.n	8003152 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	3b01      	subs	r3, #1
 800314a:	045b      	lsls	r3, r3, #17
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_ADC_Init+0x2ac>)
 8003176:	4013      	ands	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	430b      	orrs	r3, r1
 8003180:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fed1 	bl	8002f2e <LL_ADC_REG_IsConversionOngoing>
 800318c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fede 	bl	8002f54 <LL_ADC_INJ_IsConversionOngoing>
 8003198:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d15f      	bne.n	8003260 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d15c      	bne.n	8003260 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7d1b      	ldrb	r3, [r3, #20]
 80031aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_ADC_Init+0x2b0>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	69b9      	ldr	r1, [r7, #24]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d130      	bne.n	8003234 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_ADC_Init+0x2b4>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031e6:	3a01      	subs	r2, #1
 80031e8:	0411      	lsls	r1, r2, #16
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031ee:	4311      	orrs	r1, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031fa:	430a      	orrs	r2, r1
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	e01c      	b.n	8003244 <HAL_ADC_Init+0x2c8>
 800320a:	bf00      	nop
 800320c:	24000000 	.word	0x24000000
 8003210:	053e2d63 	.word	0x053e2d63
 8003214:	40022000 	.word	0x40022000
 8003218:	40022100 	.word	0x40022100
 800321c:	58026000 	.word	0x58026000
 8003220:	40022300 	.word	0x40022300
 8003224:	58026300 	.word	0x58026300
 8003228:	fff0c003 	.word	0xfff0c003
 800322c:	ffffbffc 	.word	0xffffbffc
 8003230:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fb80 	bl	8003960 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10c      	bne.n	8003282 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f023 010f 	bic.w	r1, r3, #15
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	1e5a      	subs	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
 8003280:	e007      	b.n	8003292 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 020f 	bic.w	r2, r2, #15
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
 80032a2:	e007      	b.n	80032b4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}
 80032be:	bf00      	nop

080032c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b0a1      	sub	sp, #132	; 0x84
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a9d      	ldr	r2, [pc, #628]	; (8003550 <HAL_ADC_ConfigChannel+0x290>)
 80032da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x2a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e321      	b.n	800392e <HAL_ADC_ConfigChannel+0x66e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fe19 	bl	8002f2e <LL_ADC_REG_IsConversionOngoing>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8306 	bne.w	8003910 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x62>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	e016      	b.n	8003350 <HAL_ADC_ConfigChannel+0x90>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003332:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800333e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	69d1      	ldr	r1, [r2, #28]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	430b      	orrs	r3, r1
 800335c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff fd02 	bl	8002d74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fdda 	bl	8002f2e <LL_ADC_REG_IsConversionOngoing>
 800337a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fde7 	bl	8002f54 <LL_ADC_INJ_IsConversionOngoing>
 8003386:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 80b3 	bne.w	80034f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 80af 	bne.w	80034f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f7ff fd11 	bl	8002dcc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_ADC_ConfigChannel+0x294>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b6:	d10b      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x110>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	e01d      	b.n	800340c <HAL_ADC_ConfigChannel+0x14c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x136>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	e00a      	b.n	800340c <HAL_ADC_ConfigChannel+0x14c>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d027      	beq.n	8003466 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003424:	f7ff fc52 	bl	8002ccc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6919      	ldr	r1, [r3, #16]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	7e5b      	ldrb	r3, [r3, #25]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_ADC_ConfigChannel+0x17e>
 8003438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800343c:	e000      	b.n	8003440 <HAL_ADC_ConfigChannel+0x180>
 800343e:	2300      	movs	r3, #0
 8003440:	461a      	mov	r2, r3
 8003442:	f7ff fc7c 	bl	8002d3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6919      	ldr	r1, [r3, #16]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	7e1b      	ldrb	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_ADC_ConfigChannel+0x19c>
 8003456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800345a:	e000      	b.n	800345e <HAL_ADC_ConfigChannel+0x19e>
 800345c:	2300      	movs	r3, #0
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fc54 	bl	8002d0c <LL_ADC_SetDataRightShift>
 8003464:	e047      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	429a      	cmp	r2, r3
 8003478:	d107      	bne.n	800348a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003488:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	429a      	cmp	r2, r3
 800349c:	d107      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	069b      	lsls	r3, r3, #26
 80034be:	429a      	cmp	r2, r3
 80034c0:	d107      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd04 	bl	8002f08 <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f040 820d 	bne.w	8003922 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	461a      	mov	r2, r3
 8003516:	f7ff fc85 	bl	8002e24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <HAL_ADC_ConfigChannel+0x290>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f040 8133 	bne.w	800378c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003532:	2b00      	cmp	r3, #0
 8003534:	d110      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x298>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0e9b      	lsrs	r3, r3, #26
 800353c:	3301      	adds	r3, #1
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b09      	cmp	r3, #9
 8003544:	bf94      	ite	ls
 8003546:	2301      	movls	r3, #1
 8003548:	2300      	movhi	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e01e      	b.n	800358c <HAL_ADC_ConfigChannel+0x2cc>
 800354e:	bf00      	nop
 8003550:	47ff0000 	.word	0x47ff0000
 8003554:	5c001000 	.word	0x5c001000
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003568:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2b09      	cmp	r3, #9
 8003584:	bf94      	ite	ls
 8003586:	2301      	movls	r3, #1
 8003588:	2300      	movhi	r3, #0
 800358a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358c:	2b00      	cmp	r3, #0
 800358e:	d079      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x2ec>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	3301      	adds	r3, #1
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	e015      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x318>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	069b      	lsls	r3, r3, #26
 80035d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x338>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	e017      	b.n	8003628 <HAL_ADC_ConfigChannel+0x368>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003608:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_ADC_ConfigChannel+0x38e>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0e9b      	lsrs	r3, r3, #26
 800363e:	3301      	adds	r3, #1
 8003640:	f003 021f 	and.w	r2, r3, #31
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	051b      	lsls	r3, r3, #20
 800364c:	e018      	b.n	8003680 <HAL_ADC_ConfigChannel+0x3c0>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003680:	430b      	orrs	r3, r1
 8003682:	e07e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	e015      	b.n	80036cc <HAL_ADC_ConfigChannel+0x40c>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	069b      	lsls	r3, r3, #26
 80036c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x42c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	e017      	b.n	800371c <HAL_ADC_ConfigChannel+0x45c>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	61bb      	str	r3, [r7, #24]
  return result;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	ea42 0103 	orr.w	r1, r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x488>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	3301      	adds	r3, #1
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	3b1e      	subs	r3, #30
 8003740:	051b      	lsls	r3, r3, #20
 8003742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003746:	e01b      	b.n	8003780 <HAL_ADC_ConfigChannel+0x4c0>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
  return result;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	3b1e      	subs	r3, #30
 800377a:	051b      	lsls	r3, r3, #20
 800377c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	4619      	mov	r1, r3
 8003788:	f7ff fb20 	bl	8002dcc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f280 80c6 	bge.w	8003922 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a67      	ldr	r2, [pc, #412]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x4ea>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a65      	ldr	r2, [pc, #404]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x4ee>
 80037aa:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 80037ac:	e000      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x4f0>
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fa7d 	bl	8002cb0 <LL_ADC_GetCommonPathInternalCh>
 80037b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_ConfigChannel+0x50c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5d      	ldr	r2, [pc, #372]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10e      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x52a>
 80037cc:	485a      	ldr	r0, [pc, #360]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 80037ce:	f7ff fb9b 	bl	8002f08 <LL_ADC_IsEnabled>
 80037d2:	4604      	mov	r4, r0
 80037d4:	4859      	ldr	r0, [pc, #356]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80037d6:	f7ff fb97 	bl	8002f08 <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	4323      	orrs	r3, r4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e008      	b.n	80037fc <HAL_ADC_ConfigChannel+0x53c>
 80037ea:	4857      	ldr	r0, [pc, #348]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 80037ec:	f7ff fb8c 	bl	8002f08 <LL_ADC_IsEnabled>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d07d      	beq.n	80038fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a51      	ldr	r2, [pc, #324]	; (800394c <HAL_ADC_ConfigChannel+0x68c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d130      	bne.n	800386c <HAL_ADC_ConfigChannel+0x5ac>
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d12b      	bne.n	800386c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f040 8081 	bne.w	8003922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a44      	ldr	r2, [pc, #272]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x574>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a43      	ldr	r2, [pc, #268]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x578>
 8003834:	4a42      	ldr	r2, [pc, #264]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 8003836:	e000      	b.n	800383a <HAL_ADC_ConfigChannel+0x57a>
 8003838:	4a42      	ldr	r2, [pc, #264]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 800383a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7ff fa21 	bl	8002c8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_ADC_ConfigChannel+0x690>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_ADC_ConfigChannel+0x694>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800385c:	e002      	b.n	8003864 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3b01      	subs	r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f9      	bne.n	800385e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800386a:	e05a      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a39      	ldr	r2, [pc, #228]	; (8003958 <HAL_ADC_ConfigChannel+0x698>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d11e      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d119      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d14b      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_ADC_ConfigChannel+0x5de>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x5e2>
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 80038a0:	e000      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x5e4>
 80038a2:	4a28      	ldr	r2, [pc, #160]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7ff f9ec 	bl	8002c8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b2:	e036      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <HAL_ADC_ConfigChannel+0x69c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d131      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d12c      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_ADC_ConfigChannel+0x688>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d127      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_ADC_ConfigChannel+0x678>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x626>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_ADC_ConfigChannel+0x67c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x62a>
 80038e6:	4a16      	ldr	r2, [pc, #88]	; (8003940 <HAL_ADC_ConfigChannel+0x680>)
 80038e8:	e000      	b.n	80038ec <HAL_ADC_ConfigChannel+0x62c>
 80038ea:	4a16      	ldr	r2, [pc, #88]	; (8003944 <HAL_ADC_ConfigChannel+0x684>)
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7ff f9c8 	bl	8002c8a <LL_ADC_SetCommonPathInternalCh>
 80038fa:	e012      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800390e:	e008      	b.n	8003922 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800392a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800392e:	4618      	mov	r0, r3
 8003930:	3784      	adds	r7, #132	; 0x84
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	40022000 	.word	0x40022000
 800393c:	40022100 	.word	0x40022100
 8003940:	40022300 	.word	0x40022300
 8003944:	58026300 	.word	0x58026300
 8003948:	58026000 	.word	0x58026000
 800394c:	cb840000 	.word	0xcb840000
 8003950:	24000000 	.word	0x24000000
 8003954:	053e2d63 	.word	0x053e2d63
 8003958:	c7520000 	.word	0xc7520000
 800395c:	cfb80000 	.word	0xcfb80000

08003960 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7a      	ldr	r2, [pc, #488]	; (8003b58 <ADC_ConfigureBoostMode+0x1f8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <ADC_ConfigureBoostMode+0x1c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a79      	ldr	r2, [pc, #484]	; (8003b5c <ADC_ConfigureBoostMode+0x1fc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d109      	bne.n	8003990 <ADC_ConfigureBoostMode+0x30>
 800397c:	4b78      	ldr	r3, [pc, #480]	; (8003b60 <ADC_ConfigureBoostMode+0x200>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e008      	b.n	80039a2 <ADC_ConfigureBoostMode+0x42>
 8003990:	4b74      	ldr	r3, [pc, #464]	; (8003b64 <ADC_ConfigureBoostMode+0x204>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01c      	beq.n	80039e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039a6:	f003 ffc9 	bl	800793c <HAL_RCC_GetHCLKFreq>
 80039aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039b4:	d010      	beq.n	80039d8 <ADC_ConfigureBoostMode+0x78>
 80039b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ba:	d873      	bhi.n	8003aa4 <ADC_ConfigureBoostMode+0x144>
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d002      	beq.n	80039c8 <ADC_ConfigureBoostMode+0x68>
 80039c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c6:	d16d      	bne.n	8003aa4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	60fb      	str	r3, [r7, #12]
        break;
 80039d6:	e068      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	60fb      	str	r3, [r7, #12]
        break;
 80039de:	e064      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	f005 fa0e 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80039ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039f6:	d051      	beq.n	8003a9c <ADC_ConfigureBoostMode+0x13c>
 80039f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039fc:	d854      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 80039fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a02:	d047      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x134>
 8003a04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a08:	d84e      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a0e:	d03d      	beq.n	8003a8c <ADC_ConfigureBoostMode+0x12c>
 8003a10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a14:	d848      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1a:	d033      	beq.n	8003a84 <ADC_ConfigureBoostMode+0x124>
 8003a1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a20:	d842      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a26:	d029      	beq.n	8003a7c <ADC_ConfigureBoostMode+0x11c>
 8003a28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a2c:	d83c      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a32:	d01a      	beq.n	8003a6a <ADC_ConfigureBoostMode+0x10a>
 8003a34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a38:	d836      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a3e:	d014      	beq.n	8003a6a <ADC_ConfigureBoostMode+0x10a>
 8003a40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a44:	d830      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4a:	d00e      	beq.n	8003a6a <ADC_ConfigureBoostMode+0x10a>
 8003a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a50:	d82a      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a56:	d008      	beq.n	8003a6a <ADC_ConfigureBoostMode+0x10a>
 8003a58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a5c:	d824      	bhi.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
 8003a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a62:	d002      	beq.n	8003a6a <ADC_ConfigureBoostMode+0x10a>
 8003a64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a68:	d11e      	bne.n	8003aa8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	0c9b      	lsrs	r3, r3, #18
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	60fb      	str	r3, [r7, #12]
        break;
 8003a7a:	e016      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	60fb      	str	r3, [r7, #12]
        break;
 8003a82:	e012      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	60fb      	str	r3, [r7, #12]
        break;
 8003a8a:	e00e      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	60fb      	str	r3, [r7, #12]
        break;
 8003a92:	e00a      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	09db      	lsrs	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
        break;
 8003a9a:	e006      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e002      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
        break;
 8003aa4:	bf00      	nop
 8003aa6:	e000      	b.n	8003aaa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003aa8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003aaa:	f7ff f8a5 	bl	8002bf8 <HAL_GetREVID>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d815      	bhi.n	8003ae4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <ADC_ConfigureBoostMode+0x208>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d908      	bls.n	8003ad2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ace:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ad0:	e03e      	b.n	8003b50 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae0:	609a      	str	r2, [r3, #8]
}
 8003ae2:	e035      	b.n	8003b50 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <ADC_ConfigureBoostMode+0x20c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d808      	bhi.n	8003b04 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	e025      	b.n	8003b50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <ADC_ConfigureBoostMode+0x210>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d80a      	bhi.n	8003b22 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	e016      	b.n	8003b50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <ADC_ConfigureBoostMode+0x214>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d80a      	bhi.n	8003b40 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3c:	609a      	str	r2, [r3, #8]
}
 8003b3e:	e007      	b.n	8003b50 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	40022100 	.word	0x40022100
 8003b60:	40022300 	.word	0x40022300
 8003b64:	58026300 	.word	0x58026300
 8003b68:	01312d00 	.word	0x01312d00
 8003b6c:	005f5e10 	.word	0x005f5e10
 8003b70:	00bebc20 	.word	0x00bebc20
 8003b74:	017d7840 	.word	0x017d7840

08003b78 <LL_ADC_IsEnabled>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <LL_ADC_IsEnabled+0x18>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <LL_ADC_IsEnabled+0x1a>
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d101      	bne.n	8003bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b09f      	sub	sp, #124	; 0x7c
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0be      	b.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a5c      	ldr	r2, [pc, #368]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d102      	bne.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bfc:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	e001      	b.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e09d      	b.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ffb9 	bl	8003b9e <LL_ADC_REG_IsConversionOngoing>
 8003c2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ffb3 	bl	8003b9e <LL_ADC_REG_IsConversionOngoing>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d17f      	bne.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d17c      	bne.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a46      	ldr	r2, [pc, #280]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c58:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c5a:	e000      	b.n	8003c5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c5c:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d039      	beq.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10e      	bne.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c8e:	4836      	ldr	r0, [pc, #216]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c90:	f7ff ff72 	bl	8003b78 <LL_ADC_IsEnabled>
 8003c94:	4604      	mov	r4, r0
 8003c96:	4835      	ldr	r0, [pc, #212]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c98:	f7ff ff6e 	bl	8003b78 <LL_ADC_IsEnabled>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4323      	orrs	r3, r4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e008      	b.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003cac:	4832      	ldr	r0, [pc, #200]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003cae:	f7ff ff63 	bl	8003b78 <LL_ADC_IsEnabled>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d047      	beq.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	6811      	ldr	r1, [r2, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cda:	e03a      	b.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10e      	bne.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003cfc:	481a      	ldr	r0, [pc, #104]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfe:	f7ff ff3b 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d02:	4604      	mov	r4, r0
 8003d04:	4819      	ldr	r0, [pc, #100]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d06:	f7ff ff37 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4323      	orrs	r3, r4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e008      	b.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d1a:	4817      	ldr	r0, [pc, #92]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d1c:	f7ff ff2c 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d3c:	e009      	b.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d50:	e000      	b.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	377c      	adds	r7, #124	; 0x7c
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40022100 	.word	0x40022100
 8003d70:	40022300 	.word	0x40022300
 8003d74:	58026300 	.word	0x58026300
 8003d78:	58026000 	.word	0x58026000
 8003d7c:	fffff0e0 	.word	0xfffff0e0

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00
 8003dc4:	05fa0000 	.word	0x05fa0000

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db0a      	blt.n	8003e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	490c      	ldr	r1, [pc, #48]	; (8003e30 <__NVIC_SetPriority+0x4c>)
 8003dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e0c:	e00a      	b.n	8003e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4908      	ldr	r1, [pc, #32]	; (8003e34 <__NVIC_SetPriority+0x50>)
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	761a      	strb	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000e100 	.word	0xe000e100
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf28      	it	cs
 8003e56:	2304      	movcs	r3, #4
 8003e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d902      	bls.n	8003e68 <NVIC_EncodePriority+0x30>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b03      	subs	r3, #3
 8003e66:	e000      	b.n	8003e6a <NVIC_EncodePriority+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	4313      	orrs	r3, r2
         );
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb0:	d301      	bcc.n	8003eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <SysTick_Config+0x40>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	f7ff ff8e 	bl	8003de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <SysTick_Config+0x40>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <SysTick_Config+0x40>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010

08003ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff47 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f08:	f7ff ff5e 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff ff90 	bl	8003e38 <NVIC_EncodePriority>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff5f 	bl	8003de4 <__NVIC_SetPriority>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ffb2 	bl	8003ea0 <SysTick_Config>
 8003f3c:	4603      	mov	r3, r0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0cf      	b.n	80040fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2223      	movs	r2, #35	; 0x23
 8003f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fd fcbf 	bl	80018f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f72:	4b64      	ldr	r3, [pc, #400]	; (8004104 <HAL_ETH_Init+0x1bc>)
 8003f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f78:	4a62      	ldr	r2, [pc, #392]	; (8004104 <HAL_ETH_Init+0x1bc>)
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f82:	4b60      	ldr	r3, [pc, #384]	; (8004104 <HAL_ETH_Init+0x1bc>)
 8003f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7a1b      	ldrb	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d103      	bne.n	8003fa0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fe fe39 	bl	8002c10 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f9e:	e003      	b.n	8003fa8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fa0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003fa4:	f7fe fe34 	bl	8002c10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fa8:	4b57      	ldr	r3, [pc, #348]	; (8004108 <HAL_ETH_Init+0x1c0>)
 8003faa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc4:	f7fe fde8 	bl	8002b98 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fca:	e011      	b.n	8003ff0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fcc:	f7fe fde4 	bl	8002b98 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fda:	d909      	bls.n	8003ff0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	22e0      	movs	r2, #224	; 0xe0
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e084      	b.n	80040fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e4      	bne.n	8003fcc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f886 	bl	8004114 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004008:	f003 fc98 	bl	800793c <HAL_RCC_GetHCLKFreq>
 800400c:	4603      	mov	r3, r0
 800400e:	4a3f      	ldr	r2, [pc, #252]	; (800410c <HAL_ETH_Init+0x1c4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	0c9a      	lsrs	r2, r3, #18
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3a01      	subs	r2, #1
 800401c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa71 	bl	8004508 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004032:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004042:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	22e0      	movs	r2, #224	; 0xe0
 800405e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e049      	b.n	80040fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_ETH_Init+0x1c8>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6952      	ldr	r2, [r2, #20]
 800407a:	0051      	lsls	r1, r2, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	430b      	orrs	r3, r1
 8004082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004086:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fad9 	bl	8004642 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb1f 	bl	80046d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	3305      	adds	r3, #5
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	3303      	adds	r3, #3
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	061a      	lsls	r2, r3, #24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	3302      	adds	r3, #2
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	3301      	adds	r3, #1
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2210      	movs	r2, #16
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
 8004108:	58000400 	.word	0x58000400
 800410c:	431bde83 	.word	0x431bde83
 8004110:	ffff8001 	.word	0xffff8001

08004114 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004124:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800412c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800412e:	f003 fc05 	bl	800793c <HAL_RCC_GetHCLKFreq>
 8004132:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d908      	bls.n	800414e <HAL_ETH_SetMDIOClockRange+0x3a>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d804      	bhi.n	800414e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e027      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d908      	bls.n	8004168 <HAL_ETH_SetMDIOClockRange+0x54>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d204      	bcs.n	8004168 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e01a      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d303      	bcc.n	8004178 <HAL_ETH_SetMDIOClockRange+0x64>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d911      	bls.n	800419c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d908      	bls.n	8004192 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d804      	bhi.n	8004192 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e005      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e000      	b.n	800419e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800419c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	01312cff 	.word	0x01312cff
 80041b4:	02160ebf 	.word	0x02160ebf
 80041b8:	03938700 	.word	0x03938700
 80041bc:	05f5e0ff 	.word	0x05f5e0ff
 80041c0:	08f0d17f 	.word	0x08f0d17f

080041c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80041d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80041de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	7b1b      	ldrb	r3, [r3, #12]
 80041e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	7b5b      	ldrb	r3, [r3, #13]
 80041ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	7b9b      	ldrb	r3, [r3, #14]
 80041f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	7bdb      	ldrb	r3, [r3, #15]
 80041fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	7c12      	ldrb	r2, [r2, #16]
 8004204:	2a00      	cmp	r2, #0
 8004206:	d102      	bne.n	800420e <ETH_SetMACConfig+0x4a>
 8004208:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800420c:	e000      	b.n	8004210 <ETH_SetMACConfig+0x4c>
 800420e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004210:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	7c52      	ldrb	r2, [r2, #17]
 8004216:	2a00      	cmp	r2, #0
 8004218:	d102      	bne.n	8004220 <ETH_SetMACConfig+0x5c>
 800421a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800421e:	e000      	b.n	8004222 <ETH_SetMACConfig+0x5e>
 8004220:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	7c9b      	ldrb	r3, [r3, #18]
 8004228:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800422a:	431a      	orrs	r2, r3
               macconf->Speed |
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004230:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7f1b      	ldrb	r3, [r3, #28]
 800423c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800423e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	7f5b      	ldrb	r3, [r3, #29]
 8004244:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004246:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	7f92      	ldrb	r2, [r2, #30]
 800424c:	2a00      	cmp	r2, #0
 800424e:	d102      	bne.n	8004256 <ETH_SetMACConfig+0x92>
 8004250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004254:	e000      	b.n	8004258 <ETH_SetMACConfig+0x94>
 8004256:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004258:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7fdb      	ldrb	r3, [r3, #31]
 800425e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004260:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004268:	2a00      	cmp	r2, #0
 800426a:	d102      	bne.n	8004272 <ETH_SetMACConfig+0xae>
 800426c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004270:	e000      	b.n	8004274 <ETH_SetMACConfig+0xb0>
 8004272:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004274:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800427a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004282:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004284:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <ETH_SetMACConfig+0x22c>)
 8004296:	4013      	ands	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	430b      	orrs	r3, r1
 80042a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042cc:	2a00      	cmp	r2, #0
 80042ce:	d102      	bne.n	80042d6 <ETH_SetMACConfig+0x112>
 80042d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042d4:	e000      	b.n	80042d8 <ETH_SetMACConfig+0x114>
 80042d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <ETH_SetMACConfig+0x230>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	68f9      	ldr	r1, [r7, #12]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <ETH_SetMACConfig+0x234>)
 800430e:	4013      	ands	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	430b      	orrs	r3, r1
 8004318:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004320:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004326:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800432e:	2a00      	cmp	r2, #0
 8004330:	d101      	bne.n	8004336 <ETH_SetMACConfig+0x172>
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	e000      	b.n	8004338 <ETH_SetMACConfig+0x174>
 8004336:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004338:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	430b      	orrs	r3, r1
 8004358:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004360:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004368:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f023 0103 	bic.w	r1, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	430a      	orrs	r2, r1
 8004382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800438e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d101      	bne.n	80043b2 <ETH_SetMACConfig+0x1ee>
 80043ae:	2240      	movs	r2, #64	; 0x40
 80043b0:	e000      	b.n	80043b4 <ETH_SetMACConfig+0x1f0>
 80043b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80043d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	430a      	orrs	r2, r1
 80043e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	00048083 	.word	0x00048083
 80043f4:	c0f88000 	.word	0xc0f88000
 80043f8:	fffffef0 	.word	0xfffffef0

080043fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <ETH_SetDMAConfig+0xf8>)
 8004412:	4013      	ands	r3, r2
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	6811      	ldr	r1, [r2, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004422:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800442e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	7b1b      	ldrb	r3, [r3, #12]
 8004434:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4b2c      	ldr	r3, [pc, #176]	; (80044f8 <ETH_SetDMAConfig+0xfc>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	430b      	orrs	r3, r1
 8004450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004454:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	7b5b      	ldrb	r3, [r3, #13]
 800445a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004470:	4b22      	ldr	r3, [pc, #136]	; (80044fc <ETH_SetDMAConfig+0x100>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	430b      	orrs	r3, r1
 800447c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004480:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	7d1b      	ldrb	r3, [r3, #20]
 800448c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800448e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	7f5b      	ldrb	r3, [r3, #29]
 8004494:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80044a6:	4b16      	ldr	r3, [pc, #88]	; (8004500 <ETH_SetDMAConfig+0x104>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	7f1b      	ldrb	r3, [r3, #28]
 80044be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <ETH_SetDMAConfig+0x108>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	68f9      	ldr	r1, [r7, #12]
 80044de:	430b      	orrs	r3, r1
 80044e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	ffff87fd 	.word	0xffff87fd
 80044f8:	ffff2ffe 	.word	0xffff2ffe
 80044fc:	fffec000 	.word	0xfffec000
 8004500:	ffc0efef 	.word	0xffc0efef
 8004504:	7fc0ffff 	.word	0x7fc0ffff

08004508 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0a4      	sub	sp, #144	; 0x90
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004516:	2300      	movs	r3, #0
 8004518:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004548:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004550:	2300      	movs	r3, #0
 8004552:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004560:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800456c:	2300      	movs	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004582:	2300      	movs	r3, #0
 8004584:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004586:	2300      	movs	r3, #0
 8004588:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800458a:	2300      	movs	r3, #0
 800458c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045a0:	2320      	movs	r3, #32
 80045a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045e2:	2300      	movs	r3, #0
 80045e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fde6 	bl	80041c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045fc:	2301      	movs	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004612:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004616:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004618:	2300      	movs	r3, #0
 800461a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800461c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004620:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004622:	2300      	movs	r3, #0
 8004624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004628:	f44f 7306 	mov.w	r3, #536	; 0x218
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fee1 	bl	80043fc <ETH_SetDMAConfig>
}
 800463a:	bf00      	nop
 800463c:	3790      	adds	r7, #144	; 0x90
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e01d      	b.n	800468c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68d9      	ldr	r1, [r3, #12]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	3206      	adds	r2, #6
 8004682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d9de      	bls.n	8004650 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	461a      	mov	r2, r3
 80046a2:	2303      	movs	r3, #3
 80046a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e023      	b.n	800472a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	3212      	adds	r2, #18
 8004720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d9d8      	bls.n	80046e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	461a      	mov	r2, r3
 8004758:	2303      	movs	r3, #3
 800475a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b098      	sub	sp, #96	; 0x60
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004798:	4a84      	ldr	r2, [pc, #528]	; (80049ac <HAL_FDCAN_Init+0x21c>)
 800479a:	f107 030c 	add.w	r3, r7, #12
 800479e:	4611      	mov	r1, r2
 80047a0:	224c      	movs	r2, #76	; 0x4c
 80047a2:	4618      	mov	r0, r3
 80047a4:	f008 fcc2 	bl	800d12c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e1c6      	b.n	8004b40 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7e      	ldr	r2, [pc, #504]	; (80049b0 <HAL_FDCAN_Init+0x220>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d106      	bne.n	80047ca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd f9b6 	bl	8001b50 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0210 	bic.w	r2, r2, #16
 80047f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f4:	f7fe f9d0 	bl	8002b98 <HAL_GetTick>
 80047f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80047fa:	e014      	b.n	8004826 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80047fc:	f7fe f9cc 	bl	8002b98 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b0a      	cmp	r3, #10
 8004808:	d90d      	bls.n	8004826 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2203      	movs	r2, #3
 800481e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e18c      	b.n	8004b40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d0e3      	beq.n	80047fc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004844:	f7fe f9a8 	bl	8002b98 <HAL_GetTick>
 8004848:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800484a:	e014      	b.n	8004876 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800484c:	f7fe f9a4 	bl	8002b98 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b0a      	cmp	r3, #10
 8004858:	d90d      	bls.n	8004876 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2203      	movs	r2, #3
 800486e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e164      	b.n	8004b40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0e3      	beq.n	800484c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0202 	orr.w	r2, r2, #2
 8004892:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7c1b      	ldrb	r3, [r3, #16]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d108      	bne.n	80048ae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048aa:	619a      	str	r2, [r3, #24]
 80048ac:	e007      	b.n	80048be <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7c5b      	ldrb	r3, [r3, #17]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d108      	bne.n	80048d8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d4:	619a      	str	r2, [r3, #24]
 80048d6:	e007      	b.n	80048e8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7c9b      	ldrb	r3, [r3, #18]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d108      	bne.n	8004902 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048fe:	619a      	str	r2, [r3, #24]
 8004900:	e007      	b.n	8004912 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004910:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004936:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0210 	bic.w	r2, r2, #16
 8004946:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d108      	bne.n	8004962 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0204 	orr.w	r2, r2, #4
 800495e:	619a      	str	r2, [r3, #24]
 8004960:	e030      	b.n	80049c4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02c      	beq.n	80049c4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d020      	beq.n	80049b4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004980:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0210 	orr.w	r2, r2, #16
 8004990:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d114      	bne.n	80049c4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	619a      	str	r2, [r3, #24]
 80049aa:	e00b      	b.n	80049c4 <HAL_FDCAN_Init+0x234>
 80049ac:	0800da6c 	.word	0x0800da6c
 80049b0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0220 	orr.w	r2, r2, #32
 80049c2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049d4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049dc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049ec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049ee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f8:	d115      	bne.n	8004a26 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	3b01      	subs	r3, #1
 8004a06:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a08:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a12:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a22:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a24:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	4413      	add	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004a5a:	f023 0107 	bic.w	r1, r3, #7
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	3360      	adds	r3, #96	; 0x60
 8004a66:	443b      	add	r3, r7
 8004a68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d011      	beq.n	8004aa2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a86:	f023 0107 	bic.w	r1, r3, #7
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	3360      	adds	r3, #96	; 0x60
 8004a92:	443b      	add	r3, r7
 8004a94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ab2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3360      	adds	r3, #96	; 0x60
 8004abe:	443b      	add	r3, r7
 8004ac0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ae0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	3360      	adds	r3, #96	; 0x60
 8004aec:	443b      	add	r3, r7
 8004aee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_FDCAN_Init+0x3b8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d107      	bne.n	8004b18 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f022 0203 	bic.w	r2, r2, #3
 8004b16:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f80b 	bl	8004b4c <FDCAN_CalcultateRamBlockAddresses>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004b3c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3760      	adds	r7, #96	; 0x60
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	4000a000 	.word	0x4000a000

08004b4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b62:	4ba7      	ldr	r3, [pc, #668]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0091      	lsls	r1, r2, #2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	4413      	add	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ba2:	4b97      	ldr	r3, [pc, #604]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0091      	lsls	r1, r2, #2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	041a      	lsls	r2, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004be4:	4b86      	ldr	r3, [pc, #536]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	0091      	lsls	r1, r2, #2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	041a      	lsls	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	4413      	add	r3, r2
 8004c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004c2c:	4b74      	ldr	r3, [pc, #464]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	0091      	lsls	r1, r2, #2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	041a      	lsls	r2, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4413      	add	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004c74:	4b62      	ldr	r3, [pc, #392]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	0091      	lsls	r1, r2, #2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004ca0:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	0091      	lsls	r1, r2, #2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	041a      	lsls	r2, r3, #16
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	0091      	lsls	r1, r2, #2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004cfc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	041a      	lsls	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d20:	061a      	lsls	r2, r3, #24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004d32:	4413      	add	r3, r2
 8004d34:	009a      	lsls	r2, r3, #2
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d915      	bls.n	8004e28 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004dfc:	e006      	b.n	8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004dfe:	bf00      	nop
 8004e00:	ffff0003 	.word	0xffff0003
 8004e04:	10002b00 	.word	0x10002b00
 8004e08:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e010      	b.n	8004e4a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e005      	b.n	8004e3c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d3f3      	bcc.n	8004e30 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop

08004e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e66:	4b89      	ldr	r3, [pc, #548]	; (800508c <HAL_GPIO_Init+0x234>)
 8004e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e6a:	e194      	b.n	8005196 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8186 	beq.w	8005190 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d005      	beq.n	8004e9c <HAL_GPIO_Init+0x44>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d130      	bne.n	8004efe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0201 	and.w	r2, r3, #1
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d017      	beq.n	8004f3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	2203      	movs	r2, #3
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d123      	bne.n	8004f8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	08da      	lsrs	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3208      	adds	r2, #8
 8004f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	69b9      	ldr	r1, [r7, #24]
 8004f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	2203      	movs	r2, #3
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0203 	and.w	r2, r3, #3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80e0 	beq.w	8005190 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <HAL_GPIO_Init+0x238>)
 8004fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fd6:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <HAL_GPIO_Init+0x238>)
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <HAL_GPIO_Init+0x238>)
 8004fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fee:	4a29      	ldr	r2, [pc, #164]	; (8005094 <HAL_GPIO_Init+0x23c>)
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	089b      	lsrs	r3, r3, #2
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	220f      	movs	r2, #15
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4013      	ands	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a20      	ldr	r2, [pc, #128]	; (8005098 <HAL_GPIO_Init+0x240>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d052      	beq.n	80050c0 <HAL_GPIO_Init+0x268>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1f      	ldr	r2, [pc, #124]	; (800509c <HAL_GPIO_Init+0x244>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d031      	beq.n	8005086 <HAL_GPIO_Init+0x22e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <HAL_GPIO_Init+0x248>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02b      	beq.n	8005082 <HAL_GPIO_Init+0x22a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_GPIO_Init+0x24c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d025      	beq.n	800507e <HAL_GPIO_Init+0x226>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_GPIO_Init+0x250>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01f      	beq.n	800507a <HAL_GPIO_Init+0x222>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_GPIO_Init+0x254>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d019      	beq.n	8005076 <HAL_GPIO_Init+0x21e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1a      	ldr	r2, [pc, #104]	; (80050b0 <HAL_GPIO_Init+0x258>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_GPIO_Init+0x21a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_GPIO_Init+0x25c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00d      	beq.n	800506e <HAL_GPIO_Init+0x216>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_GPIO_Init+0x260>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d007      	beq.n	800506a <HAL_GPIO_Init+0x212>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a17      	ldr	r2, [pc, #92]	; (80050bc <HAL_GPIO_Init+0x264>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <HAL_GPIO_Init+0x20e>
 8005062:	2309      	movs	r3, #9
 8005064:	e02d      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 8005066:	230a      	movs	r3, #10
 8005068:	e02b      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 800506a:	2308      	movs	r3, #8
 800506c:	e029      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 800506e:	2307      	movs	r3, #7
 8005070:	e027      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 8005072:	2306      	movs	r3, #6
 8005074:	e025      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 8005076:	2305      	movs	r3, #5
 8005078:	e023      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 800507a:	2304      	movs	r3, #4
 800507c:	e021      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 800507e:	2303      	movs	r3, #3
 8005080:	e01f      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 8005082:	2302      	movs	r3, #2
 8005084:	e01d      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 8005086:	2301      	movs	r3, #1
 8005088:	e01b      	b.n	80050c2 <HAL_GPIO_Init+0x26a>
 800508a:	bf00      	nop
 800508c:	58000080 	.word	0x58000080
 8005090:	58024400 	.word	0x58024400
 8005094:	58000400 	.word	0x58000400
 8005098:	58020000 	.word	0x58020000
 800509c:	58020400 	.word	0x58020400
 80050a0:	58020800 	.word	0x58020800
 80050a4:	58020c00 	.word	0x58020c00
 80050a8:	58021000 	.word	0x58021000
 80050ac:	58021400 	.word	0x58021400
 80050b0:	58021800 	.word	0x58021800
 80050b4:	58021c00 	.word	0x58021c00
 80050b8:	58022000 	.word	0x58022000
 80050bc:	58022400 	.word	0x58022400
 80050c0:	2300      	movs	r3, #0
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	f002 0203 	and.w	r2, r2, #3
 80050c8:	0092      	lsls	r2, r2, #2
 80050ca:	4093      	lsls	r3, r2
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d2:	4938      	ldr	r1, [pc, #224]	; (80051b4 <HAL_GPIO_Init+0x35c>)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	3302      	adds	r3, #2
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	43db      	mvns	r3, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4013      	ands	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f47f ae63 	bne.w	8004e6c <HAL_GPIO_Init+0x14>
  }
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	3724      	adds	r7, #36	; 0x24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	58000400 	.word	0x58000400

080051b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	807b      	strh	r3, [r7, #2]
 80051c4:	4613      	mov	r3, r2
 80051c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051c8:	787b      	ldrb	r3, [r7, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ce:	887a      	ldrh	r2, [r7, #2]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051d4:	e003      	b.n	80051de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	041a      	lsls	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	619a      	str	r2, [r3, #24]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0bf      	b.n	800537e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc fd6c 	bl	8001cf0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800522e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6999      	ldr	r1, [r3, #24]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005244:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b4a      	ldr	r3, [pc, #296]	; (8005388 <HAL_LTDC_Init+0x19c>)
 8005260:	400b      	ands	r3, r1
 8005262:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6899      	ldr	r1, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68d9      	ldr	r1, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_LTDC_Init+0x19c>)
 800528e:	400b      	ands	r3, r1
 8005290:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68d9      	ldr	r1, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6919      	ldr	r1, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_LTDC_Init+0x19c>)
 80052bc:	400b      	ands	r3, r1
 80052be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6919      	ldr	r1, [r3, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6959      	ldr	r1, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <HAL_LTDC_Init+0x19c>)
 80052ea:	400b      	ands	r3, r1
 80052ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6959      	ldr	r1, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0206 	orr.w	r2, r2, #6
 800535a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	f000f800 	.word	0xf000f800

0800538c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_LTDC_ConfigLayer+0x1a>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e02c      	b.n	8005400 <HAL_LTDC_ConfigLayer+0x74>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2134      	movs	r1, #52	; 0x34
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4614      	mov	r4, r2
 80053ca:	461d      	mov	r5, r3
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f811 	bl	8005408 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bdb0      	pop	{r4, r5, r7, pc}

08005408 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005424:	4413      	add	r3, r2
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	01db      	lsls	r3, r3, #7
 8005434:	4413      	add	r3, r2
 8005436:	3384      	adds	r3, #132	; 0x84
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	4611      	mov	r1, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	01d2      	lsls	r2, r2, #7
 8005444:	440a      	add	r2, r1
 8005446:	3284      	adds	r2, #132	; 0x84
 8005448:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800544c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800545e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005460:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	01db      	lsls	r3, r3, #7
 800546c:	440b      	add	r3, r1
 800546e:	3384      	adds	r3, #132	; 0x84
 8005470:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005476:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005486:	4413      	add	r3, r2
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	01db      	lsls	r3, r3, #7
 8005496:	4413      	add	r3, r2
 8005498:	3384      	adds	r3, #132	; 0x84
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	4611      	mov	r1, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	01d2      	lsls	r2, r2, #7
 80054a6:	440a      	add	r2, r1
 80054a8:	3284      	adds	r2, #132	; 0x84
 80054aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80054ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054be:	4413      	add	r3, r2
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	01db      	lsls	r3, r3, #7
 80054cc:	440b      	add	r3, r1
 80054ce:	3384      	adds	r3, #132	; 0x84
 80054d0:	4619      	mov	r1, r3
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	01db      	lsls	r3, r3, #7
 80054e2:	4413      	add	r3, r2
 80054e4:	3384      	adds	r3, #132	; 0x84
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	4611      	mov	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	01d2      	lsls	r2, r2, #7
 80054f2:	440a      	add	r2, r1
 80054f4:	3284      	adds	r2, #132	; 0x84
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	01db      	lsls	r3, r3, #7
 8005506:	4413      	add	r3, r2
 8005508:	3384      	adds	r3, #132	; 0x84
 800550a:	461a      	mov	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005522:	041b      	lsls	r3, r3, #16
 8005524:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	01db      	lsls	r3, r3, #7
 8005538:	4413      	add	r3, r2
 800553a:	3384      	adds	r3, #132	; 0x84
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	01db      	lsls	r3, r3, #7
 8005548:	4413      	add	r3, r2
 800554a:	3384      	adds	r3, #132	; 0x84
 800554c:	461a      	mov	r2, r3
 800554e:	2300      	movs	r3, #0
 8005550:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005558:	461a      	mov	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	431a      	orrs	r2, r3
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	01db      	lsls	r3, r3, #7
 800556c:	440b      	add	r3, r1
 800556e:	3384      	adds	r3, #132	; 0x84
 8005570:	4619      	mov	r1, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	4413      	add	r3, r2
 8005584:	3384      	adds	r3, #132	; 0x84
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4611      	mov	r1, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	01d2      	lsls	r2, r2, #7
 8005592:	440a      	add	r2, r1
 8005594:	3284      	adds	r2, #132	; 0x84
 8005596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800559a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	01db      	lsls	r3, r3, #7
 80055a6:	4413      	add	r3, r2
 80055a8:	3384      	adds	r3, #132	; 0x84
 80055aa:	461a      	mov	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	01db      	lsls	r3, r3, #7
 80055bc:	4413      	add	r3, r2
 80055be:	3384      	adds	r3, #132	; 0x84
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	01db      	lsls	r3, r3, #7
 80055cc:	440b      	add	r3, r1
 80055ce:	3384      	adds	r3, #132	; 0x84
 80055d0:	4619      	mov	r1, r3
 80055d2:	4b58      	ldr	r3, [pc, #352]	; (8005734 <LTDC_SetConfig+0x32c>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	6809      	ldr	r1, [r1, #0]
 80055e4:	4608      	mov	r0, r1
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	01c9      	lsls	r1, r1, #7
 80055ea:	4401      	add	r1, r0
 80055ec:	3184      	adds	r1, #132	; 0x84
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	4413      	add	r3, r2
 80055fe:	3384      	adds	r3, #132	; 0x84
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	01db      	lsls	r3, r3, #7
 800560c:	4413      	add	r3, r2
 800560e:	3384      	adds	r3, #132	; 0x84
 8005610:	461a      	mov	r2, r3
 8005612:	2300      	movs	r3, #0
 8005614:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	01db      	lsls	r3, r3, #7
 8005620:	4413      	add	r3, r2
 8005622:	3384      	adds	r3, #132	; 0x84
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005634:	2304      	movs	r3, #4
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e01b      	b.n	8005672 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005642:	2303      	movs	r3, #3
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e014      	b.n	8005672 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b04      	cmp	r3, #4
 800564e:	d00b      	beq.n	8005668 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005654:	2b02      	cmp	r3, #2
 8005656:	d007      	beq.n	8005668 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800565c:	2b03      	cmp	r3, #3
 800565e:	d003      	beq.n	8005668 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005664:	2b07      	cmp	r3, #7
 8005666:	d102      	bne.n	800566e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005668:	2302      	movs	r3, #2
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	e001      	b.n	8005672 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800566e:	2301      	movs	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	01db      	lsls	r3, r3, #7
 800567c:	4413      	add	r3, r2
 800567e:	3384      	adds	r3, #132	; 0x84
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	4611      	mov	r1, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	01d2      	lsls	r2, r2, #7
 800568c:	440a      	add	r2, r1
 800568e:	3284      	adds	r2, #132	; 0x84
 8005690:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005694:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	041a      	lsls	r2, r3, #16
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6859      	ldr	r1, [r3, #4]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	1acb      	subs	r3, r1, r3
 80056ac:	69f9      	ldr	r1, [r7, #28]
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	3307      	adds	r3, #7
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	6809      	ldr	r1, [r1, #0]
 80056b8:	4608      	mov	r0, r1
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	01c9      	lsls	r1, r1, #7
 80056be:	4401      	add	r1, r0
 80056c0:	3184      	adds	r1, #132	; 0x84
 80056c2:	4313      	orrs	r3, r2
 80056c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	01db      	lsls	r3, r3, #7
 80056d0:	4413      	add	r3, r2
 80056d2:	3384      	adds	r3, #132	; 0x84
 80056d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4619      	mov	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	01db      	lsls	r3, r3, #7
 80056e0:	440b      	add	r3, r1
 80056e2:	3384      	adds	r3, #132	; 0x84
 80056e4:	4619      	mov	r1, r3
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <LTDC_SetConfig+0x330>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	01db      	lsls	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	3384      	adds	r3, #132	; 0x84
 80056fa:	461a      	mov	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	01db      	lsls	r3, r3, #7
 800570c:	4413      	add	r3, r2
 800570e:	3384      	adds	r3, #132	; 0x84
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	4611      	mov	r1, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	01d2      	lsls	r2, r2, #7
 800571c:	440a      	add	r2, r1
 800571e:	3284      	adds	r2, #132	; 0x84
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	bf00      	nop
 8005728:	3724      	adds	r7, #36	; 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	fffff8f8 	.word	0xfffff8f8
 8005738:	fffff800 	.word	0xfffff800

0800573c <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e031      	b.n	80057b2 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fc fcb1 	bl	80020c8 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2203      	movs	r2, #3
 800576a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f824 	bl	80057bc <HAL_MMC_InitCard>
 8005774:	4603      	mov	r3, r0
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e019      	b.n	80057b2 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fb47 	bl	8005e34 <HAL_MMC_ConfigWideBusOperation>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b08d      	sub	sp, #52	; 0x34
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80057d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f003 fb14 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e070      	b.n	80058de <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	0a1b      	lsrs	r3, r3, #8
 8005800:	4a39      	ldr	r2, [pc, #228]	; (80058e8 <HAL_MMC_InitCard+0x12c>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681c      	ldr	r4, [r3, #0]
 800580e:	466a      	mov	r2, sp
 8005810:	f107 0318 	add.w	r3, r7, #24
 8005814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005818:	e882 0003 	stmia.w	r2, {r0, r1}
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005822:	4620      	mov	r0, r4
 8005824:	f006 fd86 	bl	800c334 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f006 fdb8 	bl	800c3a2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800584a:	4a28      	ldr	r2, [pc, #160]	; (80058ec <HAL_MMC_InitCard+0x130>)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	3301      	adds	r3, #1
 8005854:	4618      	mov	r0, r3
 8005856:	f7fd f9ab 	bl	8002bb0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fcb4 	bl	80061c8 <MMC_PowerON>
 8005860:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e02e      	b.n	80058de <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fba3 	bl	8005fcc <MMC_InitCard>
 8005886:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e01b      	b.n	80058de <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058ae:	4618      	mov	r0, r3
 80058b0:	f006 fe0c 	bl	800c4cc <SDMMC_CmdBlockLength>
 80058b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00f      	beq.n	80058dc <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0b      	ldr	r2, [pc, #44]	; (80058f0 <HAL_MMC_InitCard+0x134>)
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	372c      	adds	r7, #44	; 0x2c
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	014f8b59 	.word	0x014f8b59
 80058ec:	00012110 	.word	0x00012110
 80058f0:	1fe00fff 	.word	0x1fe00fff

080058f4 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	0f9b      	lsrs	r3, r3, #30
 8005908:	b2da      	uxtb	r2, r3
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	0e9b      	lsrs	r3, r3, #26
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	b2da      	uxtb	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	0e1b      	lsrs	r3, r3, #24
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	b2da      	uxtb	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b2da      	uxtb	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b2da      	uxtb	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	b2da      	uxtb	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	0d1b      	lsrs	r3, r3, #20
 800595a:	b29a      	uxth	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	b2da      	uxtb	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	0bdb      	lsrs	r3, r3, #15
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005988:	0b9b      	lsrs	r3, r3, #14
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	0b5b      	lsrs	r3, r3, #13
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	0b1b      	lsrs	r3, r3, #12
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80059c0:	f107 010c 	add.w	r1, r7, #12
 80059c4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80059c8:	22d4      	movs	r2, #212	; 0xd4
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc4c 	bl	8006268 <MMC_ReadExtCSD>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e129      	b.n	8005c2e <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d163      	bne.n	8005aaa <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	009a      	lsls	r2, r3, #2
 80059e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059f2:	0f92      	lsrs	r2, r2, #30
 80059f4:	431a      	orrs	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	0edb      	lsrs	r3, r3, #27
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a10:	0e1b      	lsrs	r3, r3, #24
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	0d5b      	lsrs	r3, r3, #21
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	0c9b      	lsrs	r3, r3, #18
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	0bdb      	lsrs	r3, r3, #15
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	7e1b      	ldrb	r3, [r3, #24]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	3302      	adds	r3, #2
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a74:	fb03 f202 	mul.w	r2, r3, r2
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	7a1b      	ldrb	r3, [r3, #8]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	2201      	movs	r2, #1
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a96:	0a52      	lsrs	r2, r2, #9
 8005a98:	fb03 f202 	mul.w	r2, r3, r2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	651a      	str	r2, [r3, #80]	; 0x50
 8005aa8:	e023      	b.n	8005af2 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10f      	bne.n	8005ad2 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	651a      	str	r2, [r3, #80]	; 0x50
 8005ad0:	e00f      	b.n	8005af2 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a58      	ldr	r2, [pc, #352]	; (8005c38 <HAL_MMC_GetCardCSD+0x344>)
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e09d      	b.n	8005c2e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	0b9b      	lsrs	r3, r3, #14
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b08:	09db      	lsrs	r3, r3, #7
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2a:	0fdb      	lsrs	r3, r3, #31
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	0f5b      	lsrs	r3, r3, #29
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	0e9b      	lsrs	r3, r3, #26
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	0d9b      	lsrs	r3, r3, #22
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	0d5b      	lsrs	r3, r3, #21
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	0bdb      	lsrs	r3, r3, #15
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	0b9b      	lsrs	r3, r3, #14
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc4:	0b5b      	lsrs	r3, r3, #13
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	0b1b      	lsrs	r3, r3, #12
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bec:	0a9b      	lsrs	r3, r3, #10
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	1fe00fff 	.word	0x1fe00fff

08005c3c <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	; 0x38
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c48:	f7fc ffa6 	bl	8002b98 <HAL_GetTick>
 8005c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0de      	b.n	8005e22 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	f040 80d7 	bne.w	8005e20 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8005c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c96:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005c98:	2390      	movs	r3, #144	; 0x90
 8005c9a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f107 0210 	add.w	r2, r7, #16
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f006 fbde 	bl	800c474 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc6:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f006 fd2a 	bl	800c728 <SDMMC_CmdSendEXTCSD>
 8005cd4:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d045      	beq.n	8005d68 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	; (8005e2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e092      	b.n	8005e22 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0e:	e00d      	b.n	8005d2c <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f006 fb37 	bl	800c388 <SDMMC_ReadFIFO>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	3304      	adds	r3, #4
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 8005d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d28:	3301      	adds	r3, #1
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	2b07      	cmp	r3, #7
 8005d30:	d9ee      	bls.n	8005d10 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005d32:	f7fc ff31 	bl	8002b98 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d902      	bls.n	8005d48 <HAL_MMC_GetCardExtCSD+0x10c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10f      	bne.n	8005d68 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a37      	ldr	r2, [pc, #220]	; (8005e2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e05c      	b.n	8005e22 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c2      	beq.n	8005cfc <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d84:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00f      	beq.n	8005db4 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	f043 0208 	orr.w	r2, r3, #8
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e036      	b.n	8005e22 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00f      	beq.n	8005de2 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f043 0202 	orr.w	r2, r3, #2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e01f      	b.n	8005e22 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00f      	beq.n	8005e10 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	f043 0220 	orr.w	r2, r3, #32
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e008      	b.n	8005e22 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a06      	ldr	r2, [pc, #24]	; (8005e30 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3738      	adds	r7, #56	; 0x38
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	1fe00fff 	.word	0x1fe00fff
 8005e30:	18000f3a 	.word	0x18000f3a

08005e34 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8005e34:	b5b0      	push	{r4, r5, r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2203      	movs	r2, #3
 8005e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d014      	beq.n	8005e82 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d006      	beq.n	8005e74 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8005e66:	2204      	movs	r2, #4
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 faf0 	bl	8006450 <MMC_PwrClassUpdate>
 8005e70:	6238      	str	r0, [r7, #32]
 8005e72:	e00c      	b.n	8005e8e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8005e74:	2202      	movs	r2, #2
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fae9 	bl	8006450 <MMC_PwrClassUpdate>
 8005e7e:	6238      	str	r0, [r7, #32]
 8005e80:	e005      	b.n	8005e8e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8005e82:	2201      	movs	r2, #1
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fae2 	bl	8006450 <MMC_PwrClassUpdate>
 8005e8c:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d17b      	bne.n	8005f8c <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9a:	d107      	bne.n	8005eac <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4946      	ldr	r1, [pc, #280]	; (8005fbc <HAL_MMC_ConfigWideBusOperation+0x188>)
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f006 fc1d 	bl	800c6e2 <SDMMC_CmdSwitch>
 8005ea8:	6238      	str	r0, [r7, #32]
 8005eaa:	e019      	b.n	8005ee0 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb2:	d107      	bne.n	8005ec4 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4941      	ldr	r1, [pc, #260]	; (8005fc0 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f006 fc11 	bl	800c6e2 <SDMMC_CmdSwitch>
 8005ec0:	6238      	str	r0, [r7, #32]
 8005ec2:	e00d      	b.n	8005ee0 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d107      	bne.n	8005eda <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	493d      	ldr	r1, [pc, #244]	; (8005fc4 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f006 fc06 	bl	800c6e2 <SDMMC_CmdSwitch>
 8005ed6:	6238      	str	r0, [r7, #32]
 8005ed8:	e002      	b.n	8005ee0 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8005eda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ede:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d152      	bne.n	8005f8c <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8005ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f006 fbaf 	bl	800c65c <SDMMC_CmdSendStatus>
 8005efe:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d112      	bne.n	8005f2c <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f006 fa9e 	bl	800c44e <SDMMC_GetResponse>
 8005f12:	61f8      	str	r0, [r7, #28]
        count--;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	3b01      	subs	r3, #1
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <HAL_MMC_ConfigWideBusOperation+0xfa>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e0      	bne.n	8005eec <HAL_MMC_ConfigWideBusOperation+0xb8>
 8005f2a:	e000      	b.n	8005f2e <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8005f2c:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d025      	beq.n	8005f80 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d122      	bne.n	8005f80 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f48:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8005f4a:	e01f      	b.n	8005f8c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f107 0408 	add.w	r4, r7, #8
 8005f52:	1d1d      	adds	r5, r3, #4
 8005f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681c      	ldr	r4, [r3, #0]
 8005f64:	466a      	mov	r2, sp
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f006 f9db 	bl	800c334 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8005f7e:	e005      	b.n	8005f8c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8005f86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f8a:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bdb0      	pop	{r4, r5, r7, pc}
 8005fbc:	03b70200 	.word	0x03b70200
 8005fc0:	03b70100 	.word	0x03b70100
 8005fc4:	03b70000 	.word	0x03b70000
 8005fc8:	1fe00fff 	.word	0x1fe00fff

08005fcc <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8005fcc:	b5b0      	push	{r4, r5, r7, lr}
 8005fce:	b096      	sub	sp, #88	; 0x58
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f006 f9f0 	bl	800c3c4 <SDMMC_GetPowerState>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8005fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005fee:	e0e6      	b.n	80061be <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f006 facd 	bl	800c594 <SDMMC_CmdSendCID>
 8005ffa:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8006002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006004:	e0db      	b.n	80061be <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f006 fa1e 	bl	800c44e <SDMMC_GetResponse>
 8006012:	4602      	mov	r2, r0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2104      	movs	r1, #4
 800601e:	4618      	mov	r0, r3
 8006020:	f006 fa15 	bl	800c44e <SDMMC_GetResponse>
 8006024:	4602      	mov	r2, r0
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2108      	movs	r1, #8
 8006030:	4618      	mov	r0, r3
 8006032:	f006 fa0c 	bl	800c44e <SDMMC_GetResponse>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	210c      	movs	r1, #12
 8006042:	4618      	mov	r0, r3
 8006044:	f006 fa03 	bl	800c44e <SDMMC_GetResponse>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f006 fada 	bl	800c612 <SDMMC_CmdSetRelAddMmc>
 800605e:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MMC_InitCard+0x9e>
  {
    return errorstate;
 8006066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006068:	e0a9      	b.n	80061be <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800606a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f006 faa7 	bl	800c5d2 <SDMMC_CmdSendCSD>
 8006084:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MMC_InitCard+0xc4>
  {
    return errorstate;
 800608c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608e:	e096      	b.n	80061be <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f006 f9d9 	bl	800c44e <SDMMC_GetResponse>
 800609c:	4602      	mov	r2, r0
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2104      	movs	r1, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f006 f9d0 	bl	800c44e <SDMMC_GetResponse>
 80060ae:	4602      	mov	r2, r0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2108      	movs	r1, #8
 80060ba:	4618      	mov	r0, r3
 80060bc:	f006 f9c7 	bl	800c44e <SDMMC_GetResponse>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	210c      	movs	r1, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f006 f9be 	bl	800c44e <SDMMC_GetResponse>
 80060d2:	4602      	mov	r2, r0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2104      	movs	r1, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f006 f9b5 	bl	800c44e <SDMMC_GetResponse>
 80060e4:	4603      	mov	r3, r0
 80060e6:	0d1a      	lsrs	r2, r3, #20
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	041b      	lsls	r3, r3, #16
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f006 fa0a 	bl	800c512 <SDMMC_CmdSelDesel>
 80060fe:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <MMC_InitCard+0x13e>
  {
    return errorstate;
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006108:	e059      	b.n	80061be <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 800610a:	f107 031c 	add.w	r3, r7, #28
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fbef 	bl	80058f4 <HAL_MMC_GetCardCSD>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	e04d      	b.n	80061be <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f006 fa94 	bl	800c65c <SDMMC_CmdSendStatus>
 8006134:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3374      	adds	r3, #116	; 0x74
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fd72 	bl	8005c3c <HAL_MMC_GetCardExtCSD>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	e02c      	b.n	80061be <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f006 fa73 	bl	800c65c <SDMMC_CmdSendStatus>
 8006176:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8006178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f107 0408 	add.w	r4, r7, #8
 8006190:	1d1d      	adds	r5, r3, #4
 8006192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681c      	ldr	r4, [r3, #0]
 80061a2:	466a      	mov	r2, sp
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80061b0:	f107 0308 	add.w	r3, r7, #8
 80061b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061b6:	4620      	mov	r0, r4
 80061b8:	f006 f8bc 	bl	800c334 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3750      	adds	r7, #80	; 0x50
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061c8 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f006 f9b9 	bl	800c558 <SDMMC_CmdGoIdleState>
 80061e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d027      	beq.n	800623e <MMC_PowerON+0x76>
  {
    return errorstate;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	e034      	b.n	800625c <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	60ba      	str	r2, [r7, #8]
 80061f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d102      	bne.n	8006206 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8006200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006204:	e02a      	b.n	800625c <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4916      	ldr	r1, [pc, #88]	; (8006264 <MMC_PowerON+0x9c>)
 800620c:	4618      	mov	r0, r3
 800620e:	f006 fa48 	bl	800c6a2 <SDMMC_CmdOpCondition>
 8006212:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800621a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800621e:	e01d      	b.n	800625c <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f006 f911 	bl	800c44e <SDMMC_GetResponse>
 800622c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	0fdb      	lsrs	r3, r3, #31
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <MMC_PowerON+0x72>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <MMC_PowerON+0x74>
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0d6      	beq.n	80061f2 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	0e1b      	lsrs	r3, r3, #24
 8006248:	2bc0      	cmp	r3, #192	; 0xc0
 800624a:	d103      	bne.n	8006254 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
 8006252:	e002      	b.n	800625a <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	c0ff8000 	.word	0xc0ff8000

08006268 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b090      	sub	sp, #64	; 0x40
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006278:	f7fc fc8e 	bl	8002b98 <HAL_GetTick>
 800627c:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006290:	f04f 33ff 	mov.w	r3, #4294967295
 8006294:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8006296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800629c:	2390      	movs	r3, #144	; 0x90
 800629e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062a0:	2302      	movs	r3, #2
 80062a2:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f107 0214 	add.w	r2, r7, #20
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f006 f8dc 	bl	800c474 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f006 fa30 	bl	800c728 <SDMMC_CmdSendEXTCSD>
 80062c8:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d04e      	beq.n	800636e <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a5c      	ldr	r2, [pc, #368]	; (8006448 <MMC_ReadExtCSD+0x1e0>)
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	431a      	orrs	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0a6      	b.n	800643e <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01c      	beq.n	8006338 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 80062fe:	2300      	movs	r3, #0
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006302:	e013      	b.n	800632c <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f006 f83d 	bl	800c388 <SDMMC_ReadFIFO>
 800630e:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8006310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006314:	4413      	add	r3, r2
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	0892      	lsrs	r2, r2, #2
 800631a:	b292      	uxth	r2, r2
 800631c:	4293      	cmp	r3, r2
 800631e:	d102      	bne.n	8006326 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006324:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	3301      	adds	r3, #1
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632e:	2b07      	cmp	r3, #7
 8006330:	d9e8      	bls.n	8006304 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	3308      	adds	r3, #8
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006338:	f7fc fc2e 	bl	8002b98 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d902      	bls.n	800634e <MMC_ReadExtCSD+0xe6>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3d      	ldr	r2, [pc, #244]	; (8006448 <MMC_ReadExtCSD+0x1e0>)
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e067      	b.n	800643e <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0b9      	beq.n	80062f0 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2e      	ldr	r2, [pc, #184]	; (8006448 <MMC_ReadExtCSD+0x1e0>)
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	f043 0208 	orr.w	r2, r3, #8
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e049      	b.n	800643e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00f      	beq.n	80063d8 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a22      	ldr	r2, [pc, #136]	; (8006448 <MMC_ReadExtCSD+0x1e0>)
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	f043 0202 	orr.w	r2, r3, #2
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e032      	b.n	800643e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <MMC_ReadExtCSD+0x1e0>)
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f2:	f043 0220 	orr.w	r2, r3, #32
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e01b      	b.n	800643e <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f006 f922 	bl	800c65c <SDMMC_CmdSendStatus>
 8006418:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a06      	ldr	r2, [pc, #24]	; (800644c <MMC_ReadExtCSD+0x1e4>)
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3740      	adds	r7, #64	; 0x40
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	1fe00fff 	.word	0x1fe00fff
 800644c:	18000f3a 	.word	0x18000f3a

08006450 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646a:	d004      	beq.n	8006476 <MMC_PwrClassUpdate+0x26>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006472:	f040 8085 	bne.w	8006580 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 800647a:	f107 0114 	add.w	r1, r7, #20
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	22bb      	movs	r2, #187	; 0xbb
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff feef 	bl	8006268 <MMC_ReadExtCSD>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e002      	b.n	800649e <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	0e1b      	lsrs	r3, r3, #24
 800649c:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d105      	bne.n	80064b0 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80064aa:	0e1b      	lsrs	r3, r3, #24
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e00e      	b.n	80064ce <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d106      	bne.n	80064c4 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e004      	b.n	80064ce <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80064ca:	0e1b      	lsrs	r3, r3, #24
 80064cc:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d155      	bne.n	8006580 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064da:	d102      	bne.n	80064e2 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	091b      	lsrs	r3, r3, #4
 80064e0:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	4053      	eors	r3, r2
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d047      	beq.n	8006580 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80064fc:	4b23      	ldr	r3, [pc, #140]	; (800658c <MMC_PwrClassUpdate+0x13c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	4619      	mov	r1, r3
 8006502:	f006 f8ee 	bl	800c6e2 <SDMMC_CmdSwitch>
 8006506:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d138      	bne.n	8006580 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 800650e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f006 f89b 	bl	800c65c <SDMMC_CmdSendStatus>
 8006526:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d112      	bne.n	8006554 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f005 ff8a 	bl	800c44e <SDMMC_GetResponse>
 800653a:	6238      	str	r0, [r7, #32]
            count--;
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	3b01      	subs	r3, #1
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <MMC_PwrClassUpdate+0x106>
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e0      	bne.n	8006514 <MMC_PwrClassUpdate+0xc4>
 8006552:	e000      	b.n	8006556 <MMC_PwrClassUpdate+0x106>
              break;
 8006554:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <MMC_PwrClassUpdate+0x124>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d108      	bne.n	8006574 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800656c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006570:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8006572:	e005      	b.n	8006580 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 800657a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800657e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8006580:	69fb      	ldr	r3, [r7, #28]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3728      	adds	r7, #40	; 0x28
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	03bb0000 	.word	0x03bb0000

08006590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	b08f      	sub	sp, #60	; 0x3c
 8006594:	af0a      	add	r7, sp, #40	; 0x28
 8006596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e116      	b.n	80067d0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb ff6d 	bl	800249c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2203      	movs	r2, #3
 80065c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f006 fadd 	bl	800cba0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	687e      	ldr	r6, [r7, #4]
 80065ee:	466d      	mov	r5, sp
 80065f0:	f106 0410 	add.w	r4, r6, #16
 80065f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006600:	e885 0003 	stmia.w	r5, {r0, r1}
 8006604:	1d33      	adds	r3, r6, #4
 8006606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006608:	6838      	ldr	r0, [r7, #0]
 800660a:	f006 fa5b 	bl	800cac4 <USB_CoreInit>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0d7      	b.n	80067d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f006 facb 	bl	800cbc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e04a      	b.n	80066c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	333d      	adds	r3, #61	; 0x3d
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	333c      	adds	r3, #60	; 0x3c
 8006656:	7bfa      	ldrb	r2, [r7, #15]
 8006658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800665a:	7bfa      	ldrb	r2, [r7, #15]
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	b298      	uxth	r0, r3
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3356      	adds	r3, #86	; 0x56
 800666e:	4602      	mov	r2, r0
 8006670:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	3340      	adds	r3, #64	; 0x40
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006686:	7bfa      	ldrb	r2, [r7, #15]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3344      	adds	r3, #68	; 0x44
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800669a:	7bfa      	ldrb	r2, [r7, #15]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3348      	adds	r3, #72	; 0x48
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	334c      	adds	r3, #76	; 0x4c
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	3301      	adds	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
 80066c8:	7bfa      	ldrb	r2, [r7, #15]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d3af      	bcc.n	8006632 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
 80066d6:	e044      	b.n	8006762 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066d8:	7bfa      	ldrb	r2, [r7, #15]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006700:	7bfa      	ldrb	r2, [r7, #15]
 8006702:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006704:	7bfa      	ldrb	r2, [r7, #15]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800671a:	7bfa      	ldrb	r2, [r7, #15]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	3301      	adds	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
 8006762:	7bfa      	ldrb	r2, [r7, #15]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d3b5      	bcc.n	80066d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	687e      	ldr	r6, [r7, #4]
 8006774:	466d      	mov	r5, sp
 8006776:	f106 0410 	add.w	r4, r6, #16
 800677a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800677c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800677e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006786:	e885 0003 	stmia.w	r5, {r0, r1}
 800678a:	1d33      	adds	r3, r6, #4
 800678c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800678e:	6838      	ldr	r0, [r7, #0]
 8006790:	f006 fa64 	bl	800cc5c <USB_DevInit>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e014      	b.n	80067d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d102      	bne.n	80067c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f80a 	bl	80067d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f006 fc22 	bl	800d012 <USB_DevDisconnect>

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_PCDEx_ActivateLPM+0x44>)
 8006808:	4313      	orrs	r3, r2
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	10000003 	.word	0x10000003

08006820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b04      	cmp	r3, #4
 8006832:	d00a      	beq.n	800684a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e01f      	b.n	8006886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e01d      	b.n	8006886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800684a:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f023 0207 	bic.w	r2, r3, #7
 8006852:	490f      	ldr	r1, [pc, #60]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4313      	orrs	r3, r2
 8006858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800685a:	f7fc f99d 	bl	8002b98 <HAL_GetTick>
 800685e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006860:	e009      	b.n	8006876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006862:	f7fc f999 	bl	8002b98 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006870:	d901      	bls.n	8006876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e007      	b.n	8006886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <HAL_PWREx_ConfigSupply+0x70>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006882:	d1ee      	bne.n	8006862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	58024800 	.word	0x58024800

08006894 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	4a04      	ldr	r2, [pc, #16]	; (80068b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800689e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068a2:	60d3      	str	r3, [r2, #12]
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	58024800 	.word	0x58024800

080068b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80068bc:	f7fc f96c 	bl	8002b98 <HAL_GetTick>
 80068c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e05f      	b.n	800698c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fb faf7 	bl	8001ecc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068de:	f241 3188 	movw	r1, #5000	; 0x1388
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f85a 	bl	800699c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	021a      	lsls	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	2120      	movs	r1, #32
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f852 	bl	80069b8 <QSPI_WaitFlagStateUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d135      	bne.n	800698a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <HAL_QSPI_Init+0xe0>)
 8006926:	4013      	ands	r3, r2
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6852      	ldr	r2, [r2, #4]
 800692c:	0611      	lsls	r1, r2, #24
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	68d2      	ldr	r2, [r2, #12]
 8006932:	4311      	orrs	r1, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	69d2      	ldr	r2, [r2, #28]
 8006938:	4311      	orrs	r1, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6a12      	ldr	r2, [r2, #32]
 800693e:	4311      	orrs	r1, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	430b      	orrs	r3, r1
 8006946:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <HAL_QSPI_Init+0xe4>)
 8006950:	4013      	ands	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6912      	ldr	r2, [r2, #16]
 8006956:	0411      	lsls	r1, r2, #16
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6952      	ldr	r2, [r2, #20]
 800695c:	4311      	orrs	r1, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6992      	ldr	r2, [r2, #24]
 8006962:	4311      	orrs	r1, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	430b      	orrs	r3, r1
 800696a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800698a:	7afb      	ldrb	r3, [r7, #11]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	00ffff2f 	.word	0x00ffff2f
 8006998:	ffe0f8fe 	.word	0xffe0f8fe

0800699c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069c8:	e01a      	b.n	8006a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d016      	beq.n	8006a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fc f8e1 	bl	8002b98 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2204      	movs	r2, #4
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f4:	f043 0201 	orr.w	r2, r3, #1
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e00e      	b.n	8006a1e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bf14      	ite	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	2300      	moveq	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d1d6      	bne.n	80069ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f000 bc48 	b.w	80072cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8088 	beq.w	8006b5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a4a:	4b99      	ldr	r3, [pc, #612]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a54:	4b96      	ldr	r3, [pc, #600]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d007      	beq.n	8006a70 <HAL_RCC_OscConfig+0x48>
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b18      	cmp	r3, #24
 8006a64:	d111      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62>
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d10c      	bne.n	8006a8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a70:	4b8f      	ldr	r3, [pc, #572]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d06d      	beq.n	8006b58 <HAL_RCC_OscConfig+0x130>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d169      	bne.n	8006b58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f000 bc21 	b.w	80072cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x7a>
 8006a94:	4b86      	ldr	r3, [pc, #536]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a85      	ldr	r2, [pc, #532]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	e02e      	b.n	8006b00 <HAL_RCC_OscConfig+0xd8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10c      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x9c>
 8006aaa:	4b81      	ldr	r3, [pc, #516]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a80      	ldr	r2, [pc, #512]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	4b7e      	ldr	r3, [pc, #504]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a7d      	ldr	r2, [pc, #500]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e01d      	b.n	8006b00 <HAL_RCC_OscConfig+0xd8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0xc0>
 8006ace:	4b78      	ldr	r3, [pc, #480]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a77      	ldr	r2, [pc, #476]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4b75      	ldr	r3, [pc, #468]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a74      	ldr	r2, [pc, #464]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0xd8>
 8006ae8:	4b71      	ldr	r3, [pc, #452]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a70      	ldr	r2, [pc, #448]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	4b6e      	ldr	r3, [pc, #440]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a6d      	ldr	r2, [pc, #436]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b08:	f7fc f846 	bl	8002b98 <HAL_GetTick>
 8006b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fc f842 	bl	8002b98 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	; 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e3d4      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b22:	4b63      	ldr	r3, [pc, #396]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0xe8>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fc f832 	bl	8002b98 <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fc f82e 	bl	8002b98 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	; 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e3c0      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b4a:	4b59      	ldr	r3, [pc, #356]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0x110>
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80ca 	beq.w	8006cfc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b68:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b72:	4b4f      	ldr	r3, [pc, #316]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <HAL_RCC_OscConfig+0x166>
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	2b18      	cmp	r3, #24
 8006b82:	d156      	bne.n	8006c32 <HAL_RCC_OscConfig+0x20a>
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d151      	bne.n	8006c32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b8e:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x17e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e392      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ba6:	4b42      	ldr	r3, [pc, #264]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 0219 	bic.w	r2, r3, #25
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	493f      	ldr	r1, [pc, #252]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fb ffee 	bl	8002b98 <HAL_GetTick>
 8006bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc0:	f7fb ffea 	bl	8002b98 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e37c      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bd2:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	f7fc f80b 	bl	8002bf8 <HAL_GetREVID>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d817      	bhi.n	8006c1c <HAL_RCC_OscConfig+0x1f4>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d108      	bne.n	8006c06 <HAL_RCC_OscConfig+0x1de>
 8006bf4:	4b2e      	ldr	r3, [pc, #184]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bfc:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c04:	e07a      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c06:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	031b      	lsls	r3, r3, #12
 8006c14:	4926      	ldr	r1, [pc, #152]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c1a:	e06f      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1c:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	4921      	ldr	r1, [pc, #132]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c30:	e064      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d047      	beq.n	8006cca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c3a:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 0219 	bic.w	r2, r3, #25
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	491a      	ldr	r1, [pc, #104]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4c:	f7fb ffa4 	bl	8002b98 <HAL_GetTick>
 8006c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c54:	f7fb ffa0 	bl	8002b98 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e332      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c66:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c72:	f7fb ffc1 	bl	8002bf8 <HAL_GetREVID>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d819      	bhi.n	8006cb4 <HAL_RCC_OscConfig+0x28c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d108      	bne.n	8006c9a <HAL_RCC_OscConfig+0x272>
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c90:	4a07      	ldr	r2, [pc, #28]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c96:	6053      	str	r3, [r2, #4]
 8006c98:	e030      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	031b      	lsls	r3, r3, #12
 8006ca8:	4901      	ldr	r1, [pc, #4]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	604b      	str	r3, [r1, #4]
 8006cae:	e025      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	4b9a      	ldr	r3, [pc, #616]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	061b      	lsls	r3, r3, #24
 8006cc2:	4997      	ldr	r1, [pc, #604]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	e018      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cca:	4b95      	ldr	r3, [pc, #596]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a94      	ldr	r2, [pc, #592]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd6:	f7fb ff5f 	bl	8002b98 <HAL_GetTick>
 8006cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cde:	f7fb ff5b 	bl	8002b98 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e2ed      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cf0:	4b8b      	ldr	r3, [pc, #556]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80a9 	beq.w	8006e5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0a:	4b85      	ldr	r3, [pc, #532]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d14:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d007      	beq.n	8006d30 <HAL_RCC_OscConfig+0x308>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b18      	cmp	r3, #24
 8006d24:	d13a      	bne.n	8006d9c <HAL_RCC_OscConfig+0x374>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d135      	bne.n	8006d9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d30:	4b7b      	ldr	r3, [pc, #492]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_OscConfig+0x320>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e2c1      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d48:	f7fb ff56 	bl	8002bf8 <HAL_GetREVID>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d817      	bhi.n	8006d86 <HAL_RCC_OscConfig+0x35e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d108      	bne.n	8006d70 <HAL_RCC_OscConfig+0x348>
 8006d5e:	4b70      	ldr	r3, [pc, #448]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d66:	4a6e      	ldr	r2, [pc, #440]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d6e:	e075      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d70:	4b6b      	ldr	r3, [pc, #428]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	069b      	lsls	r3, r3, #26
 8006d7e:	4968      	ldr	r1, [pc, #416]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d84:	e06a      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d86:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	4962      	ldr	r1, [pc, #392]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d9a:	e05f      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d042      	beq.n	8006e2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006da4:	4b5e      	ldr	r3, [pc, #376]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5d      	ldr	r2, [pc, #372]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fb fef2 	bl	8002b98 <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006db8:	f7fb feee 	bl	8002b98 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e280      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dca:	4b55      	ldr	r3, [pc, #340]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dd6:	f7fb ff0f 	bl	8002bf8 <HAL_GetREVID>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d817      	bhi.n	8006e14 <HAL_RCC_OscConfig+0x3ec>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d108      	bne.n	8006dfe <HAL_RCC_OscConfig+0x3d6>
 8006dec:	4b4c      	ldr	r3, [pc, #304]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006df4:	4a4a      	ldr	r2, [pc, #296]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dfa:	6053      	str	r3, [r2, #4]
 8006dfc:	e02e      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	069b      	lsls	r3, r3, #26
 8006e0c:	4944      	ldr	r1, [pc, #272]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	604b      	str	r3, [r1, #4]
 8006e12:	e023      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
 8006e14:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	493f      	ldr	r1, [pc, #252]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60cb      	str	r3, [r1, #12]
 8006e28:	e018      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e2a:	4b3d      	ldr	r3, [pc, #244]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3c      	ldr	r2, [pc, #240]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e36:	f7fb feaf 	bl	8002b98 <HAL_GetTick>
 8006e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e3e:	f7fb feab 	bl	8002b98 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e23d      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e50:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f0      	bne.n	8006e3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d036      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d019      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e70:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e74:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7c:	f7fb fe8c 	bl	8002b98 <HAL_GetTick>
 8006e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e84:	f7fb fe88 	bl	8002b98 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e21a      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e96:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <HAL_RCC_OscConfig+0x45c>
 8006ea2:	e018      	b.n	8006ed6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb0:	f7fb fe72 	bl	8002b98 <HAL_GetTick>
 8006eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb8:	f7fb fe6e 	bl	8002b98 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e200      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d039      	beq.n	8006f56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01c      	beq.n	8006f24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ef4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ef6:	f7fb fe4f 	bl	8002b98 <HAL_GetTick>
 8006efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006efe:	f7fb fe4b 	bl	8002b98 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e1dd      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <HAL_RCC_OscConfig+0x4d6>
 8006f1c:	e01b      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f24:	4b9b      	ldr	r3, [pc, #620]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a9a      	ldr	r2, [pc, #616]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f30:	f7fb fe32 	bl	8002b98 <HAL_GetTick>
 8006f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f38:	f7fb fe2e 	bl	8002b98 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e1c0      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f4a:	4b92      	ldr	r3, [pc, #584]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f0      	bne.n	8006f38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 8081 	beq.w	8007066 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f64:	4b8c      	ldr	r3, [pc, #560]	; (8007198 <HAL_RCC_OscConfig+0x770>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a8b      	ldr	r2, [pc, #556]	; (8007198 <HAL_RCC_OscConfig+0x770>)
 8006f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f70:	f7fb fe12 	bl	8002b98 <HAL_GetTick>
 8006f74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f78:	f7fb fe0e 	bl	8002b98 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b64      	cmp	r3, #100	; 0x64
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e1a0      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f8a:	4b83      	ldr	r3, [pc, #524]	; (8007198 <HAL_RCC_OscConfig+0x770>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d106      	bne.n	8006fac <HAL_RCC_OscConfig+0x584>
 8006f9e:	4b7d      	ldr	r3, [pc, #500]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a7c      	ldr	r2, [pc, #496]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006faa:	e02d      	b.n	8007008 <HAL_RCC_OscConfig+0x5e0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10c      	bne.n	8006fce <HAL_RCC_OscConfig+0x5a6>
 8006fb4:	4b77      	ldr	r3, [pc, #476]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb8:	4a76      	ldr	r2, [pc, #472]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc0:	4b74      	ldr	r3, [pc, #464]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	4a73      	ldr	r2, [pc, #460]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fc6:	f023 0304 	bic.w	r3, r3, #4
 8006fca:	6713      	str	r3, [r2, #112]	; 0x70
 8006fcc:	e01c      	b.n	8007008 <HAL_RCC_OscConfig+0x5e0>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x5c8>
 8006fd6:	4b6f      	ldr	r3, [pc, #444]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a6e      	ldr	r2, [pc, #440]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	f043 0304 	orr.w	r3, r3, #4
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe2:	4b6c      	ldr	r3, [pc, #432]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a6b      	ldr	r2, [pc, #428]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
 8006fee:	e00b      	b.n	8007008 <HAL_RCC_OscConfig+0x5e0>
 8006ff0:	4b68      	ldr	r3, [pc, #416]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	4a67      	ldr	r2, [pc, #412]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffc:	4b65      	ldr	r3, [pc, #404]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	4a64      	ldr	r2, [pc, #400]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007002:	f023 0304 	bic.w	r3, r3, #4
 8007006:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fb fdc2 	bl	8002b98 <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007016:	e00a      	b.n	800702e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007018:	f7fb fdbe 	bl	8002b98 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e14e      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800702e:	4b59      	ldr	r3, [pc, #356]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ee      	beq.n	8007018 <HAL_RCC_OscConfig+0x5f0>
 800703a:	e014      	b.n	8007066 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fb fdac 	bl	8002b98 <HAL_GetTick>
 8007040:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007042:	e00a      	b.n	800705a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fb fda8 	bl	8002b98 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e138      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800705a:	4b4e      	ldr	r3, [pc, #312]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1ee      	bne.n	8007044 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 812d 	beq.w	80072ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007070:	4b48      	ldr	r3, [pc, #288]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007078:	2b18      	cmp	r3, #24
 800707a:	f000 80bd 	beq.w	80071f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b02      	cmp	r3, #2
 8007084:	f040 809e 	bne.w	80071c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007088:	4b42      	ldr	r3, [pc, #264]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a41      	ldr	r2, [pc, #260]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800708e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fb fd80 	bl	8002b98 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800709c:	f7fb fd7c 	bl	8002b98 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e10e      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f0      	bne.n	800709c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ba:	4b36      	ldr	r3, [pc, #216]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 80070bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070be:	4b37      	ldr	r3, [pc, #220]	; (800719c <HAL_RCC_OscConfig+0x774>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070ca:	0112      	lsls	r2, r2, #4
 80070cc:	430a      	orrs	r2, r1
 80070ce:	4931      	ldr	r1, [pc, #196]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	628b      	str	r3, [r1, #40]	; 0x28
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	3b01      	subs	r3, #1
 80070da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	3b01      	subs	r3, #1
 80070e4:	025b      	lsls	r3, r3, #9
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	3b01      	subs	r3, #1
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	3b01      	subs	r3, #1
 80070fe:	061b      	lsls	r3, r3, #24
 8007100:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007104:	4923      	ldr	r1, [pc, #140]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007116:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <HAL_RCC_OscConfig+0x778>)
 800711c:	4013      	ands	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007122:	00d2      	lsls	r2, r2, #3
 8007124:	491b      	ldr	r1, [pc, #108]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	f023 020c 	bic.w	r2, r3, #12
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	4917      	ldr	r1, [pc, #92]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800713c:	4b15      	ldr	r3, [pc, #84]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	f023 0202 	bic.w	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	4912      	ldr	r1, [pc, #72]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	4a10      	ldr	r2, [pc, #64]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800716c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	4a07      	ldr	r2, [pc, #28]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a04      	ldr	r2, [pc, #16]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718a:	f7fb fd05 	bl	8002b98 <HAL_GetTick>
 800718e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007190:	e011      	b.n	80071b6 <HAL_RCC_OscConfig+0x78e>
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400
 8007198:	58024800 	.word	0x58024800
 800719c:	fffffc0c 	.word	0xfffffc0c
 80071a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a4:	f7fb fcf8 	bl	8002b98 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e08a      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071b6:	4b47      	ldr	r3, [pc, #284]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCC_OscConfig+0x77c>
 80071c2:	e082      	b.n	80072ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c4:	4b43      	ldr	r3, [pc, #268]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a42      	ldr	r2, [pc, #264]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80071ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fb fce2 	bl	8002b98 <HAL_GetTick>
 80071d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d8:	f7fb fcde 	bl	8002b98 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e070      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071ea:	4b3a      	ldr	r3, [pc, #232]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0x7b0>
 80071f6:	e068      	b.n	80072ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071f8:	4b36      	ldr	r3, [pc, #216]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071fe:	4b35      	ldr	r3, [pc, #212]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b01      	cmp	r3, #1
 800720a:	d031      	beq.n	8007270 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f003 0203 	and.w	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007216:	429a      	cmp	r2, r3
 8007218:	d12a      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	429a      	cmp	r2, r3
 8007228:	d122      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007236:	429a      	cmp	r2, r3
 8007238:	d11a      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0a5b      	lsrs	r3, r3, #9
 800723e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007248:	429a      	cmp	r2, r3
 800724a:	d111      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d108      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d001      	beq.n	8007274 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e02b      	b.n	80072cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007274:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	08db      	lsrs	r3, r3, #3
 800727a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800727e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d01f      	beq.n	80072ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	4a11      	ldr	r2, [pc, #68]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007296:	f7fb fc7f 	bl	8002b98 <HAL_GetTick>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800729c:	bf00      	nop
 800729e:	f7fb fc7b 	bl	8002b98 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d0f9      	beq.n	800729e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80072ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <HAL_RCC_OscConfig+0x8b0>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072b6:	00d2      	lsls	r2, r2, #3
 80072b8:	4906      	ldr	r1, [pc, #24]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <HAL_RCC_OscConfig+0x8ac>)
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3730      	adds	r7, #48	; 0x30
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	58024400 	.word	0x58024400
 80072d8:	ffff0007 	.word	0xffff0007

080072dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e19c      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072f0:	4b8a      	ldr	r3, [pc, #552]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d910      	bls.n	8007320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fe:	4b87      	ldr	r3, [pc, #540]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 020f 	bic.w	r2, r3, #15
 8007306:	4985      	ldr	r1, [pc, #532]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	4313      	orrs	r3, r2
 800730c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730e:	4b83      	ldr	r3, [pc, #524]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d001      	beq.n	8007320 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e184      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	4b7b      	ldr	r3, [pc, #492]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007338:	429a      	cmp	r2, r3
 800733a:	d908      	bls.n	800734e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800733c:	4b78      	ldr	r3, [pc, #480]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	4975      	ldr	r1, [pc, #468]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800734a:	4313      	orrs	r3, r2
 800734c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d010      	beq.n	800737c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	4b70      	ldr	r3, [pc, #448]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007366:	429a      	cmp	r2, r3
 8007368:	d908      	bls.n	800737c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800736a:	4b6d      	ldr	r3, [pc, #436]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	496a      	ldr	r1, [pc, #424]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007378:	4313      	orrs	r3, r2
 800737a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d010      	beq.n	80073aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	4b64      	ldr	r3, [pc, #400]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007394:	429a      	cmp	r2, r3
 8007396:	d908      	bls.n	80073aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007398:	4b61      	ldr	r3, [pc, #388]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	495e      	ldr	r1, [pc, #376]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d010      	beq.n	80073d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	4b59      	ldr	r3, [pc, #356]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d908      	bls.n	80073d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073c6:	4b56      	ldr	r3, [pc, #344]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	4953      	ldr	r1, [pc, #332]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	4b4d      	ldr	r3, [pc, #308]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d908      	bls.n	8007406 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073f4:	4b4a      	ldr	r3, [pc, #296]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f023 020f 	bic.w	r2, r3, #15
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	4947      	ldr	r1, [pc, #284]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007402:	4313      	orrs	r3, r2
 8007404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d055      	beq.n	80074be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007412:	4b43      	ldr	r3, [pc, #268]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	4940      	ldr	r1, [pc, #256]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007420:	4313      	orrs	r3, r2
 8007422:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d107      	bne.n	800743c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800742c:	4b3c      	ldr	r3, [pc, #240]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d121      	bne.n	800747c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0f6      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d107      	bne.n	8007454 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007444:	4b36      	ldr	r3, [pc, #216]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d115      	bne.n	800747c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0ea      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d107      	bne.n	800746c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800745c:	4b30      	ldr	r3, [pc, #192]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d109      	bne.n	800747c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0de      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800746c:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e0d6      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800747c:	4b28      	ldr	r3, [pc, #160]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f023 0207 	bic.w	r2, r3, #7
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4925      	ldr	r1, [pc, #148]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 800748a:	4313      	orrs	r3, r2
 800748c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7fb fb83 	bl	8002b98 <HAL_GetTick>
 8007492:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007494:	e00a      	b.n	80074ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007496:	f7fb fb7f 	bl	8002b98 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e0be      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ac:	4b1c      	ldr	r3, [pc, #112]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d1eb      	bne.n	8007496 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d010      	beq.n	80074ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	4b14      	ldr	r3, [pc, #80]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d208      	bcs.n	80074ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	490e      	ldr	r1, [pc, #56]	; (8007520 <HAL_RCC_ClockConfig+0x244>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d214      	bcs.n	8007524 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f023 020f 	bic.w	r2, r3, #15
 8007502:	4906      	ldr	r1, [pc, #24]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	4313      	orrs	r3, r2
 8007508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750a:	4b04      	ldr	r3, [pc, #16]	; (800751c <HAL_RCC_ClockConfig+0x240>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d005      	beq.n	8007524 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e086      	b.n	800762a <HAL_RCC_ClockConfig+0x34e>
 800751c:	52002000 	.word	0x52002000
 8007520:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d010      	beq.n	8007552 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	4b3f      	ldr	r3, [pc, #252]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800753c:	429a      	cmp	r2, r3
 800753e:	d208      	bcs.n	8007552 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007540:	4b3c      	ldr	r3, [pc, #240]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	4939      	ldr	r1, [pc, #228]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 800754e:	4313      	orrs	r3, r2
 8007550:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d010      	beq.n	8007580 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695a      	ldr	r2, [r3, #20]
 8007562:	4b34      	ldr	r3, [pc, #208]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800756a:	429a      	cmp	r2, r3
 800756c:	d208      	bcs.n	8007580 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800756e:	4b31      	ldr	r3, [pc, #196]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	492e      	ldr	r1, [pc, #184]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 800757c:	4313      	orrs	r3, r2
 800757e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	d010      	beq.n	80075ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699a      	ldr	r2, [r3, #24]
 8007590:	4b28      	ldr	r3, [pc, #160]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007598:	429a      	cmp	r2, r3
 800759a:	d208      	bcs.n	80075ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800759c:	4b25      	ldr	r3, [pc, #148]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	4922      	ldr	r1, [pc, #136]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d010      	beq.n	80075dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69da      	ldr	r2, [r3, #28]
 80075be:	4b1d      	ldr	r3, [pc, #116]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d208      	bcs.n	80075dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075ca:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	4917      	ldr	r1, [pc, #92]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075dc:	f000 f834 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b14      	ldr	r3, [pc, #80]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	4912      	ldr	r1, [pc, #72]	; (8007638 <HAL_RCC_ClockConfig+0x35c>)
 80075ee:	5ccb      	ldrb	r3, [r1, r3]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075fa:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <HAL_RCC_ClockConfig+0x358>)
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	4a0d      	ldr	r2, [pc, #52]	; (8007638 <HAL_RCC_ClockConfig+0x35c>)
 8007604:	5cd3      	ldrb	r3, [r2, r3]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
 8007610:	4a0a      	ldr	r2, [pc, #40]	; (800763c <HAL_RCC_ClockConfig+0x360>)
 8007612:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007614:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <HAL_RCC_ClockConfig+0x364>)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <HAL_RCC_ClockConfig+0x368>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fb fa70 	bl	8002b04 <HAL_InitTick>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
 8007638:	0800dab8 	.word	0x0800dab8
 800763c:	24000004 	.word	0x24000004
 8007640:	24000000 	.word	0x24000000
 8007644:	24000008 	.word	0x24000008

08007648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007648:	b480      	push	{r7}
 800764a:	b089      	sub	sp, #36	; 0x24
 800764c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800764e:	4bb3      	ldr	r3, [pc, #716]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007656:	2b18      	cmp	r3, #24
 8007658:	f200 8155 	bhi.w	8007906 <HAL_RCC_GetSysClockFreq+0x2be>
 800765c:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <HAL_RCC_GetSysClockFreq+0x1c>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	080076c9 	.word	0x080076c9
 8007668:	08007907 	.word	0x08007907
 800766c:	08007907 	.word	0x08007907
 8007670:	08007907 	.word	0x08007907
 8007674:	08007907 	.word	0x08007907
 8007678:	08007907 	.word	0x08007907
 800767c:	08007907 	.word	0x08007907
 8007680:	08007907 	.word	0x08007907
 8007684:	080076ef 	.word	0x080076ef
 8007688:	08007907 	.word	0x08007907
 800768c:	08007907 	.word	0x08007907
 8007690:	08007907 	.word	0x08007907
 8007694:	08007907 	.word	0x08007907
 8007698:	08007907 	.word	0x08007907
 800769c:	08007907 	.word	0x08007907
 80076a0:	08007907 	.word	0x08007907
 80076a4:	080076f5 	.word	0x080076f5
 80076a8:	08007907 	.word	0x08007907
 80076ac:	08007907 	.word	0x08007907
 80076b0:	08007907 	.word	0x08007907
 80076b4:	08007907 	.word	0x08007907
 80076b8:	08007907 	.word	0x08007907
 80076bc:	08007907 	.word	0x08007907
 80076c0:	08007907 	.word	0x08007907
 80076c4:	080076fb 	.word	0x080076fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076c8:	4b94      	ldr	r3, [pc, #592]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0320 	and.w	r3, r3, #32
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d009      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076d4:	4b91      	ldr	r3, [pc, #580]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	08db      	lsrs	r3, r3, #3
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	4a90      	ldr	r2, [pc, #576]	; (8007920 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80076e6:	e111      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076e8:	4b8d      	ldr	r3, [pc, #564]	; (8007920 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076ea:	61bb      	str	r3, [r7, #24]
      break;
 80076ec:	e10e      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80076ee:	4b8d      	ldr	r3, [pc, #564]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076f0:	61bb      	str	r3, [r7, #24]
      break;
 80076f2:	e10b      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80076f4:	4b8c      	ldr	r3, [pc, #560]	; (8007928 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076f6:	61bb      	str	r3, [r7, #24]
      break;
 80076f8:	e108      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076fa:	4b88      	ldr	r3, [pc, #544]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007704:	4b85      	ldr	r3, [pc, #532]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	091b      	lsrs	r3, r3, #4
 800770a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007710:	4b82      	ldr	r3, [pc, #520]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800771a:	4b80      	ldr	r3, [pc, #512]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771e:	08db      	lsrs	r3, r3, #3
 8007720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	fb02 f303 	mul.w	r3, r2, r3
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80e1 	beq.w	8007900 <HAL_RCC_GetSysClockFreq+0x2b8>
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b02      	cmp	r3, #2
 8007742:	f000 8083 	beq.w	800784c <HAL_RCC_GetSysClockFreq+0x204>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b02      	cmp	r3, #2
 800774a:	f200 80a1 	bhi.w	8007890 <HAL_RCC_GetSysClockFreq+0x248>
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_RCC_GetSysClockFreq+0x114>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d056      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0x1c0>
 800775a:	e099      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800775c:	4b6f      	ldr	r3, [pc, #444]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d02d      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007768:	4b6c      	ldr	r3, [pc, #432]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	08db      	lsrs	r3, r3, #3
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	4a6b      	ldr	r2, [pc, #428]	; (8007920 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007792:	4b62      	ldr	r3, [pc, #392]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800792c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80077c2:	e087      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007930 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d6:	4b51      	ldr	r3, [pc, #324]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800792c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007806:	e065      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781a:	4b40      	ldr	r3, [pc, #256]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782a:	ed97 6a02 	vldr	s12, [r7, #8]
 800782e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800792c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800784a:	e043      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007938 <HAL_RCC_GetSysClockFreq+0x2f0>
 800785a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785e:	4b2f      	ldr	r3, [pc, #188]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007872:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800792c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800788e:	e021      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007934 <HAL_RCC_GetSysClockFreq+0x2ec>
 800789e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800792c <HAL_RCC_GetSysClockFreq+0x2e4>
 80078ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	0a5b      	lsrs	r3, r3, #9
 80078da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078de:	3301      	adds	r3, #1
 80078e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f8:	ee17 3a90 	vmov	r3, s15
 80078fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80078fe:	e005      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	61bb      	str	r3, [r7, #24]
      break;
 8007904:	e002      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007908:	61bb      	str	r3, [r7, #24]
      break;
 800790a:	bf00      	nop
  }

  return sysclockfreq;
 800790c:	69bb      	ldr	r3, [r7, #24]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3724      	adds	r7, #36	; 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
 8007928:	017d7840 	.word	0x017d7840
 800792c:	46000000 	.word	0x46000000
 8007930:	4c742400 	.word	0x4c742400
 8007934:	4a742400 	.word	0x4a742400
 8007938:	4bbebc20 	.word	0x4bbebc20

0800793c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007942:	f7ff fe81 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8007946:	4602      	mov	r2, r0
 8007948:	4b10      	ldr	r3, [pc, #64]	; (800798c <HAL_RCC_GetHCLKFreq+0x50>)
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	0a1b      	lsrs	r3, r3, #8
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	490f      	ldr	r1, [pc, #60]	; (8007990 <HAL_RCC_GetHCLKFreq+0x54>)
 8007954:	5ccb      	ldrb	r3, [r1, r3]
 8007956:	f003 031f 	and.w	r3, r3, #31
 800795a:	fa22 f303 	lsr.w	r3, r2, r3
 800795e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <HAL_RCC_GetHCLKFreq+0x50>)
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <HAL_RCC_GetHCLKFreq+0x54>)
 800796a:	5cd3      	ldrb	r3, [r2, r3]
 800796c:	f003 031f 	and.w	r3, r3, #31
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	fa22 f303 	lsr.w	r3, r2, r3
 8007976:	4a07      	ldr	r2, [pc, #28]	; (8007994 <HAL_RCC_GetHCLKFreq+0x58>)
 8007978:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <HAL_RCC_GetHCLKFreq+0x5c>)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <HAL_RCC_GetHCLKFreq+0x58>)
 8007982:	681b      	ldr	r3, [r3, #0]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	58024400 	.word	0x58024400
 8007990:	0800dab8 	.word	0x0800dab8
 8007994:	24000004 	.word	0x24000004
 8007998:	24000000 	.word	0x24000000

0800799c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079a0:	f7ff ffcc 	bl	800793c <HAL_RCC_GetHCLKFreq>
 80079a4:	4602      	mov	r2, r0
 80079a6:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	091b      	lsrs	r3, r3, #4
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	4904      	ldr	r1, [pc, #16]	; (80079c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079b2:	5ccb      	ldrb	r3, [r1, r3]
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079bc:	4618      	mov	r0, r3
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	58024400 	.word	0x58024400
 80079c4:	0800dab8 	.word	0x0800dab8

080079c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079cc:	f7ff ffb6 	bl	800793c <HAL_RCC_GetHCLKFreq>
 80079d0:	4602      	mov	r2, r0
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	4904      	ldr	r1, [pc, #16]	; (80079f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079de:	5ccb      	ldrb	r3, [r1, r3]
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	58024400 	.word	0x58024400
 80079f0:	0800dab8 	.word	0x0800dab8

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079f8:	b0ca      	sub	sp, #296	; 0x128
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007a18:	2500      	movs	r5, #0
 8007a1a:	ea54 0305 	orrs.w	r3, r4, r5
 8007a1e:	d049      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a2a:	d02f      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a30:	d828      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a36:	d01a      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a3c:	d822      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a46:	d007      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a48:	e01c      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4a:	4bb8      	ldr	r3, [pc, #736]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	4ab7      	ldr	r2, [pc, #732]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a56:	e01a      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f002 fb61 	bl	800a128 <RCCEx_PLL2_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00f      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a72:	3328      	adds	r3, #40	; 0x28
 8007a74:	2102      	movs	r1, #2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f002 fc08 	bl	800a28c <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a82:	e004      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a8a:	e000      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a96:	4ba5      	ldr	r3, [pc, #660]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa4:	4aa1      	ldr	r2, [pc, #644]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	6513      	str	r3, [r2, #80]	; 0x50
 8007aaa:	e003      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	ea58 0309 	orrs.w	r3, r8, r9
 8007ac8:	d047      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d82a      	bhi.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007aff 	.word	0x08007aff
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b33 	.word	0x08007b33
 8007aec:	08007b33 	.word	0x08007b33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af0:	4b8e      	ldr	r3, [pc, #568]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a8d      	ldr	r2, [pc, #564]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007afc:	e01a      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b02:	3308      	adds	r3, #8
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f002 fb0e 	bl	800a128 <RCCEx_PLL2_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b12:	e00f      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b18:	3328      	adds	r3, #40	; 0x28
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f002 fbb5 	bl	800a28c <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b28:	e004      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b30:	e000      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b3c:	4b7b      	ldr	r3, [pc, #492]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b40:	f023 0107 	bic.w	r1, r3, #7
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4a:	4a78      	ldr	r2, [pc, #480]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8007b50:	e003      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007b66:	f04f 0b00 	mov.w	fp, #0
 8007b6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b6e:	d04c      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7a:	d030      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b80:	d829      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b82:	2bc0      	cmp	r3, #192	; 0xc0
 8007b84:	d02d      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007b86:	2bc0      	cmp	r3, #192	; 0xc0
 8007b88:	d825      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b8a:	2b80      	cmp	r3, #128	; 0x80
 8007b8c:	d018      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d821      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d007      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007b9a:	e01c      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b9c:	4b63      	ldr	r3, [pc, #396]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a62      	ldr	r2, [pc, #392]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ba8:	e01c      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bae:	3308      	adds	r3, #8
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f002 fab8 	bl	800a128 <RCCEx_PLL2_Config>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bbe:	e011      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc4:	3328      	adds	r3, #40	; 0x28
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f002 fb5f 	bl	800a28c <RCCEx_PLL3_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bd4:	e006      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bdc:	e002      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007bde:	bf00      	nop
 8007be0:	e000      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007bec:	4b4f      	ldr	r3, [pc, #316]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	4a4c      	ldr	r2, [pc, #304]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6513      	str	r3, [r2, #80]	; 0x50
 8007c00:	e003      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007c16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007c20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007c24:	460b      	mov	r3, r1
 8007c26:	4313      	orrs	r3, r2
 8007c28:	d053      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c36:	d035      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c3c:	d82e      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c42:	d031      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007c44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c48:	d828      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c4e:	d01a      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c54:	d822      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c5e:	d007      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007c60:	e01c      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c62:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	4a31      	ldr	r2, [pc, #196]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e01c      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c74:	3308      	adds	r3, #8
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 fa55 	bl	800a128 <RCCEx_PLL2_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c84:	e011      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8a:	3328      	adds	r3, #40	; 0x28
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f002 fafc 	bl	800a28c <RCCEx_PLL3_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c9a:	e006      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ca2:	e002      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cb2:	4b1e      	ldr	r3, [pc, #120]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8007cc8:	e003      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007cde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d056      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cfe:	d038      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d04:	d831      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d0a:	d034      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d10:	d82b      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d16:	d01d      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d1c:	d825      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d006      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d28:	e01f      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d2a:	bf00      	nop
 8007d2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d30:	4ba2      	ldr	r3, [pc, #648]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4aa1      	ldr	r2, [pc, #644]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d3c:	e01c      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	3308      	adds	r3, #8
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f002 f9ee 	bl	800a128 <RCCEx_PLL2_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d52:	e011      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d58:	3328      	adds	r3, #40	; 0x28
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f002 fa95 	bl	800a28c <RCCEx_PLL3_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d68:	e006      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10b      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d80:	4b8e      	ldr	r3, [pc, #568]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d90:	4a8a      	ldr	r2, [pc, #552]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d92:	430b      	orrs	r3, r1
 8007d94:	6593      	str	r3, [r2, #88]	; 0x58
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007db0:	2300      	movs	r3, #0
 8007db2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007db6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	d03a      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	2b30      	cmp	r3, #48	; 0x30
 8007dc8:	d01f      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007dca:	2b30      	cmp	r3, #48	; 0x30
 8007dcc:	d819      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d00c      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d815      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d019      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d111      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dde:	4b77      	ldr	r3, [pc, #476]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	4a76      	ldr	r2, [pc, #472]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007dea:	e011      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df0:	3308      	adds	r3, #8
 8007df2:	2102      	movs	r1, #2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f002 f997 	bl	800a128 <RCCEx_PLL2_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e00:	e006      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e08:	e002      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e0a:	bf00      	nop
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e18:	4b68      	ldr	r3, [pc, #416]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	4a65      	ldr	r2, [pc, #404]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e2c:	e003      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007e42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e46:	2300      	movs	r3, #0
 8007e48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4313      	orrs	r3, r2
 8007e54:	d051      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e60:	d035      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e66:	d82e      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e6c:	d031      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e72:	d828      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e78:	d01a      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e7e:	d822      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e88:	d007      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007e8a:	e01c      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	4a4a      	ldr	r2, [pc, #296]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e98:	e01c      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 f940 	bl	800a128 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	3328      	adds	r3, #40	; 0x28
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 f9e7 	bl	800a28c <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007edc:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eea:	4a34      	ldr	r2, [pc, #208]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6513      	str	r3, [r2, #80]	; 0x50
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007f14:	460b      	mov	r3, r1
 8007f16:	4313      	orrs	r3, r2
 8007f18:	d056      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f24:	d033      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f2a:	d82c      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f30:	d02f      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f36:	d826      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f3c:	d02b      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007f3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f42:	d820      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f48:	d012      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f4e:	d81a      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d022      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f58:	d115      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5e:	3308      	adds	r3, #8
 8007f60:	2101      	movs	r1, #1
 8007f62:	4618      	mov	r0, r3
 8007f64:	f002 f8e0 	bl	800a128 <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f6e:	e015      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f74:	3328      	adds	r3, #40	; 0x28
 8007f76:	2101      	movs	r1, #1
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f002 f987 	bl	800a28c <RCCEx_PLL3_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f84:	e00a      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f8c:	e006      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e004      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb2:	4a02      	ldr	r2, [pc, #8]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6513      	str	r3, [r2, #80]	; 0x50
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fba:	bf00      	nop
 8007fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	d055      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ff4:	d033      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ffa:	d82c      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008000:	d02f      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008006:	d826      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008008:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800800c:	d02b      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800800e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008012:	d820      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008018:	d012      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801e:	d81a      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d022      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008028:	d115      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802e:	3308      	adds	r3, #8
 8008030:	2101      	movs	r1, #1
 8008032:	4618      	mov	r0, r3
 8008034:	f002 f878 	bl	800a128 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800803e:	e015      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008044:	3328      	adds	r3, #40	; 0x28
 8008046:	2101      	movs	r1, #1
 8008048:	4618      	mov	r0, r3
 800804a:	f002 f91f 	bl	800a28c <RCCEx_PLL3_Config>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008054:	e00a      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800805c:	e006      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800805e:	bf00      	nop
 8008060:	e004      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008062:	bf00      	nop
 8008064:	e002      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800806a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800806c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10b      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008074:	4ba3      	ldr	r3, [pc, #652]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008078:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008084:	4a9f      	ldr	r2, [pc, #636]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008086:	430b      	orrs	r3, r1
 8008088:	6593      	str	r3, [r2, #88]	; 0x58
 800808a:	e003      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80080a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080a4:	2300      	movs	r3, #0
 80080a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080ae:	460b      	mov	r3, r1
 80080b0:	4313      	orrs	r3, r2
 80080b2:	d037      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080be:	d00e      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80080c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c4:	d816      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d018      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ce:	d111      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4b8c      	ldr	r3, [pc, #560]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4a8b      	ldr	r2, [pc, #556]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080dc:	e00f      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e2:	3308      	adds	r3, #8
 80080e4:	2101      	movs	r1, #1
 80080e6:	4618      	mov	r0, r3
 80080e8:	f002 f81e 	bl	800a128 <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080f2:	e004      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080fa:	e000      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80080fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008106:	4b7f      	ldr	r3, [pc, #508]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	4a7b      	ldr	r2, [pc, #492]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008116:	430b      	orrs	r3, r1
 8008118:	6513      	str	r3, [r2, #80]	; 0x50
 800811a:	e003      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008134:	2300      	movs	r3, #0
 8008136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800813a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800813e:	460b      	mov	r3, r1
 8008140:	4313      	orrs	r3, r2
 8008142:	d039      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814a:	2b03      	cmp	r3, #3
 800814c:	d81c      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008191 	.word	0x08008191
 8008158:	08008165 	.word	0x08008165
 800815c:	08008173 	.word	0x08008173
 8008160:	08008191 	.word	0x08008191
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008164:	4b67      	ldr	r3, [pc, #412]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	4a66      	ldr	r2, [pc, #408]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008170:	e00f      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008176:	3308      	adds	r3, #8
 8008178:	2102      	movs	r1, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f001 ffd4 	bl	800a128 <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008186:	e004      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800818e:	e000      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800819a:	4b5a      	ldr	r3, [pc, #360]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819e:	f023 0103 	bic.w	r1, r3, #3
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a8:	4a56      	ldr	r2, [pc, #344]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081aa:	430b      	orrs	r3, r1
 80081ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ae:	e003      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80081c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80081d2:	460b      	mov	r3, r1
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f000 809f 	beq.w	8008318 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081da:	4b4b      	ldr	r3, [pc, #300]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a4a      	ldr	r2, [pc, #296]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081e6:	f7fa fcd7 	bl	8002b98 <HAL_GetTick>
 80081ea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ee:	e00b      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f0:	f7fa fcd2 	bl	8002b98 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b64      	cmp	r3, #100	; 0x64
 80081fe:	d903      	bls.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008206:	e005      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008208:	4b3f      	ldr	r3, [pc, #252]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0ed      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008218:	2b00      	cmp	r3, #0
 800821a:	d179      	bne.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800821c:	4b39      	ldr	r3, [pc, #228]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800821e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008228:	4053      	eors	r3, r2
 800822a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822e:	2b00      	cmp	r3, #0
 8008230:	d015      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008232:	4b34      	ldr	r3, [pc, #208]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	4a30      	ldr	r2, [pc, #192]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008248:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800824a:	4b2e      	ldr	r3, [pc, #184]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a2d      	ldr	r2, [pc, #180]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008254:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008256:	4a2b      	ldr	r2, [pc, #172]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008258:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800825c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826a:	d118      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826c:	f7fa fc94 	bl	8002b98 <HAL_GetTick>
 8008270:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008274:	e00d      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008276:	f7fa fc8f 	bl	8002b98 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	f241 3388 	movw	r3, #5000	; 0x1388
 8008286:	429a      	cmp	r2, r3
 8008288:	d903      	bls.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008290:	e005      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008292:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0eb      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800829e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d129      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b6:	d10e      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80082b8:	4b12      	ldr	r3, [pc, #72]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082c8:	091a      	lsrs	r2, r3, #4
 80082ca:	4b10      	ldr	r3, [pc, #64]	; (800830c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	4a0d      	ldr	r2, [pc, #52]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6113      	str	r3, [r2, #16]
 80082d4:	e005      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80082d6:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	4a0a      	ldr	r2, [pc, #40]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082e0:	6113      	str	r3, [r2, #16]
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f2:	4a04      	ldr	r2, [pc, #16]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f4:	430b      	orrs	r3, r1
 80082f6:	6713      	str	r3, [r2, #112]	; 0x70
 80082f8:	e00e      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008302:	e009      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008304:	58024400 	.word	0x58024400
 8008308:	58024800 	.word	0x58024800
 800830c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f002 0301 	and.w	r3, r2, #1
 8008324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008328:	2300      	movs	r3, #0
 800832a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800832e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008332:	460b      	mov	r3, r1
 8008334:	4313      	orrs	r3, r2
 8008336:	f000 8089 	beq.w	800844c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008340:	2b28      	cmp	r3, #40	; 0x28
 8008342:	d86b      	bhi.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008425 	.word	0x08008425
 8008350:	0800841d 	.word	0x0800841d
 8008354:	0800841d 	.word	0x0800841d
 8008358:	0800841d 	.word	0x0800841d
 800835c:	0800841d 	.word	0x0800841d
 8008360:	0800841d 	.word	0x0800841d
 8008364:	0800841d 	.word	0x0800841d
 8008368:	0800841d 	.word	0x0800841d
 800836c:	080083f1 	.word	0x080083f1
 8008370:	0800841d 	.word	0x0800841d
 8008374:	0800841d 	.word	0x0800841d
 8008378:	0800841d 	.word	0x0800841d
 800837c:	0800841d 	.word	0x0800841d
 8008380:	0800841d 	.word	0x0800841d
 8008384:	0800841d 	.word	0x0800841d
 8008388:	0800841d 	.word	0x0800841d
 800838c:	08008407 	.word	0x08008407
 8008390:	0800841d 	.word	0x0800841d
 8008394:	0800841d 	.word	0x0800841d
 8008398:	0800841d 	.word	0x0800841d
 800839c:	0800841d 	.word	0x0800841d
 80083a0:	0800841d 	.word	0x0800841d
 80083a4:	0800841d 	.word	0x0800841d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	08008425 	.word	0x08008425
 80083b0:	0800841d 	.word	0x0800841d
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	0800841d 	.word	0x0800841d
 80083c0:	0800841d 	.word	0x0800841d
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008425 	.word	0x08008425
 80083d0:	0800841d 	.word	0x0800841d
 80083d4:	0800841d 	.word	0x0800841d
 80083d8:	0800841d 	.word	0x0800841d
 80083dc:	0800841d 	.word	0x0800841d
 80083e0:	0800841d 	.word	0x0800841d
 80083e4:	0800841d 	.word	0x0800841d
 80083e8:	0800841d 	.word	0x0800841d
 80083ec:	08008425 	.word	0x08008425
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f4:	3308      	adds	r3, #8
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fe95 	bl	800a128 <RCCEx_PLL2_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008404:	e00f      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840a:	3328      	adds	r3, #40	; 0x28
 800840c:	2101      	movs	r1, #1
 800840e:	4618      	mov	r0, r3
 8008410:	f001 ff3c 	bl	800a28c <RCCEx_PLL3_Config>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800841a:	e004      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008422:	e000      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800842e:	4bbf      	ldr	r3, [pc, #764]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800843a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843c:	4abb      	ldr	r2, [pc, #748]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800843e:	430b      	orrs	r3, r1
 8008440:	6553      	str	r3, [r2, #84]	; 0x54
 8008442:	e003      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f002 0302 	and.w	r3, r2, #2
 8008458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800845c:	2300      	movs	r3, #0
 800845e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008462:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008466:	460b      	mov	r3, r1
 8008468:	4313      	orrs	r3, r2
 800846a:	d041      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008472:	2b05      	cmp	r3, #5
 8008474:	d824      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084c9 	.word	0x080084c9
 8008480:	08008495 	.word	0x08008495
 8008484:	080084ab 	.word	0x080084ab
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008498:	3308      	adds	r3, #8
 800849a:	2101      	movs	r1, #1
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fe43 	bl	800a128 <RCCEx_PLL2_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084a8:	e00f      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ae:	3328      	adds	r3, #40	; 0x28
 80084b0:	2101      	movs	r1, #1
 80084b2:	4618      	mov	r0, r3
 80084b4:	f001 feea 	bl	800a28c <RCCEx_PLL3_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084be:	e004      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084c6:	e000      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80084c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084d2:	4b96      	ldr	r3, [pc, #600]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d6:	f023 0107 	bic.w	r1, r3, #7
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e0:	4a92      	ldr	r2, [pc, #584]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	6553      	str	r3, [r2, #84]	; 0x54
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f002 0304 	and.w	r3, r2, #4
 80084fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008506:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d044      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008518:	2b05      	cmp	r3, #5
 800851a:	d825      	bhi.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008571 	.word	0x08008571
 8008528:	0800853d 	.word	0x0800853d
 800852c:	08008553 	.word	0x08008553
 8008530:	08008571 	.word	0x08008571
 8008534:	08008571 	.word	0x08008571
 8008538:	08008571 	.word	0x08008571
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008540:	3308      	adds	r3, #8
 8008542:	2101      	movs	r1, #1
 8008544:	4618      	mov	r0, r3
 8008546:	f001 fdef 	bl	800a128 <RCCEx_PLL2_Config>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008550:	e00f      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008556:	3328      	adds	r3, #40	; 0x28
 8008558:	2101      	movs	r1, #1
 800855a:	4618      	mov	r0, r3
 800855c:	f001 fe96 	bl	800a28c <RCCEx_PLL3_Config>
 8008560:	4603      	mov	r3, r0
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008566:	e004      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800856e:	e000      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800857a:	4b6c      	ldr	r3, [pc, #432]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800857c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857e:	f023 0107 	bic.w	r1, r3, #7
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800858a:	4a68      	ldr	r2, [pc, #416]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800858c:	430b      	orrs	r3, r1
 800858e:	6593      	str	r3, [r2, #88]	; 0x58
 8008590:	e003      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f002 0320 	and.w	r3, r2, #32
 80085a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085b4:	460b      	mov	r3, r1
 80085b6:	4313      	orrs	r3, r2
 80085b8:	d055      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c6:	d033      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80085c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085cc:	d82c      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d2:	d02f      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d826      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085de:	d02b      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80085e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085e4:	d820      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ea:	d012      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d81a      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d022      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80085f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085fa:	d115      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008600:	3308      	adds	r3, #8
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f001 fd8f 	bl	800a128 <RCCEx_PLL2_Config>
 800860a:	4603      	mov	r3, r0
 800860c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008610:	e015      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008616:	3328      	adds	r3, #40	; 0x28
 8008618:	2102      	movs	r1, #2
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fe36 	bl	800a28c <RCCEx_PLL3_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008626:	e00a      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800862e:	e006      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008630:	bf00      	nop
 8008632:	e004      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800863c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008646:	4b39      	ldr	r3, [pc, #228]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008656:	4a35      	ldr	r2, [pc, #212]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008658:	430b      	orrs	r3, r1
 800865a:	6553      	str	r3, [r2, #84]	; 0x54
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008676:	2300      	movs	r3, #0
 8008678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800867c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d058      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800868a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800868e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008692:	d033      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008694:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008698:	d82c      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800869a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869e:	d02f      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80086a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a4:	d826      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086aa:	d02b      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80086ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b0:	d820      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b6:	d012      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80086b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086bc:	d81a      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d022      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c6:	d115      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	3308      	adds	r3, #8
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fd29 	bl	800a128 <RCCEx_PLL2_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086dc:	e015      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e2:	3328      	adds	r3, #40	; 0x28
 80086e4:	2102      	movs	r1, #2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 fdd0 	bl	800a28c <RCCEx_PLL3_Config>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086f2:	e00a      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086fa:	e006      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80086fc:	bf00      	nop
 80086fe:	e004      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008700:	bf00      	nop
 8008702:	e002      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800870a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10e      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008722:	4a02      	ldr	r2, [pc, #8]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008724:	430b      	orrs	r3, r1
 8008726:	6593      	str	r3, [r2, #88]	; 0x58
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800874e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008752:	460b      	mov	r3, r1
 8008754:	4313      	orrs	r3, r2
 8008756:	d055      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008760:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008764:	d033      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008766:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800876a:	d82c      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008770:	d02f      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008776:	d826      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008778:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800877c:	d02b      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800877e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008782:	d820      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008788:	d012      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800878a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800878e:	d81a      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d022      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008798:	d115      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879e:	3308      	adds	r3, #8
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 fcc0 	bl	800a128 <RCCEx_PLL2_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087ae:	e015      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b4:	3328      	adds	r3, #40	; 0x28
 80087b6:	2102      	movs	r1, #2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 fd67 	bl	800a28c <RCCEx_PLL3_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087c4:	e00a      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087cc:	e006      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087ce:	bf00      	nop
 80087d0:	e004      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087d2:	bf00      	nop
 80087d4:	e002      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087d6:	bf00      	nop
 80087d8:	e000      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10b      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087e4:	4ba1      	ldr	r3, [pc, #644]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087f4:	4a9d      	ldr	r2, [pc, #628]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f6:	430b      	orrs	r3, r1
 80087f8:	6593      	str	r3, [r2, #88]	; 0x58
 80087fa:	e003      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008800:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f002 0308 	and.w	r3, r2, #8
 8008810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008814:	2300      	movs	r3, #0
 8008816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800881a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800881e:	460b      	mov	r3, r1
 8008820:	4313      	orrs	r3, r2
 8008822:	d01e      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008830:	d10c      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008836:	3328      	adds	r3, #40	; 0x28
 8008838:	2102      	movs	r1, #2
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fd26 	bl	800a28c <RCCEx_PLL3_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800884c:	4b87      	ldr	r3, [pc, #540]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800885c:	4a83      	ldr	r2, [pc, #524]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800885e:	430b      	orrs	r3, r1
 8008860:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f002 0310 	and.w	r3, r2, #16
 800886e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008872:	2300      	movs	r3, #0
 8008874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008878:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800887c:	460b      	mov	r3, r1
 800887e:	4313      	orrs	r3, r2
 8008880:	d01e      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800888a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888e:	d10c      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008894:	3328      	adds	r3, #40	; 0x28
 8008896:	2102      	movs	r1, #2
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fcf7 	bl	800a28c <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088aa:	4b70      	ldr	r3, [pc, #448]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ba:	4a6c      	ldr	r2, [pc, #432]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088bc:	430b      	orrs	r3, r1
 80088be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80088cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80088da:	460b      	mov	r3, r1
 80088dc:	4313      	orrs	r3, r2
 80088de:	d03e      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ec:	d022      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80088ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f2:	d81b      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80088f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088fc:	d00b      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80088fe:	e015      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008904:	3308      	adds	r3, #8
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f001 fc0d 	bl	800a128 <RCCEx_PLL2_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008914:	e00f      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891a:	3328      	adds	r3, #40	; 0x28
 800891c:	2102      	movs	r1, #2
 800891e:	4618      	mov	r0, r3
 8008920:	f001 fcb4 	bl	800a28c <RCCEx_PLL3_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800892a:	e004      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008932:	e000      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800893e:	4b4b      	ldr	r3, [pc, #300]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008942:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800894e:	4a47      	ldr	r2, [pc, #284]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008950:	430b      	orrs	r3, r1
 8008952:	6593      	str	r3, [r2, #88]	; 0x58
 8008954:	e003      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800895a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800896a:	67bb      	str	r3, [r7, #120]	; 0x78
 800896c:	2300      	movs	r3, #0
 800896e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008970:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d03b      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800897a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008986:	d01f      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800898c:	d818      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800898e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008992:	d003      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008998:	d007      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800899a:	e011      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899c:	4b33      	ldr	r3, [pc, #204]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4a32      	ldr	r2, [pc, #200]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80089a8:	e00f      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	3328      	adds	r3, #40	; 0x28
 80089b0:	2101      	movs	r1, #1
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fc6a 	bl	800a28c <RCCEx_PLL3_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089d2:	4b26      	ldr	r3, [pc, #152]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e2:	4a22      	ldr	r2, [pc, #136]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6553      	str	r3, [r2, #84]	; 0x54
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80089fe:	673b      	str	r3, [r7, #112]	; 0x70
 8008a00:	2300      	movs	r3, #0
 8008a02:	677b      	str	r3, [r7, #116]	; 0x74
 8008a04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	d034      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a1c:	d007      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008a1e:	e011      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a20:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a2c:	e00e      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a32:	3308      	adds	r3, #8
 8008a34:	2102      	movs	r1, #2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f001 fb76 	bl	800a128 <RCCEx_PLL2_Config>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a42:	e003      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a54:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a62:	4a02      	ldr	r2, [pc, #8]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a64:	430b      	orrs	r3, r1
 8008a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a68:	e006      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008a6a:	bf00      	nop
 8008a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a86:	2300      	movs	r3, #0
 8008a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	d00c      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a98:	3328      	adds	r3, #40	; 0x28
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f001 fbf5 	bl	800a28c <RCCEx_PLL3_Config>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008aba:	663b      	str	r3, [r7, #96]	; 0x60
 8008abc:	2300      	movs	r3, #0
 8008abe:	667b      	str	r3, [r7, #100]	; 0x64
 8008ac0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	d038      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ad6:	d018      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008adc:	d811      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae2:	d014      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae8:	d80b      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d011      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af2:	d106      	bne.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af4:	4bc3      	ldr	r3, [pc, #780]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4ac2      	ldr	r2, [pc, #776]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b00:	e008      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b08:	e004      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b0a:	bf00      	nop
 8008b0c:	e002      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b0e:	bf00      	nop
 8008b10:	e000      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10b      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b1c:	4bb9      	ldr	r3, [pc, #740]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b2c:	4ab5      	ldr	r2, [pc, #724]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	6553      	str	r3, [r2, #84]	; 0x54
 8008b32:	e003      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d009      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b58:	4baa      	ldr	r3, [pc, #680]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b66:	4aa7      	ldr	r2, [pc, #668]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008b78:	653b      	str	r3, [r7, #80]	; 0x50
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d00a      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b88:	4b9e      	ldr	r3, [pc, #632]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b98:	4a9a      	ldr	r2, [pc, #616]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bac:	2300      	movs	r3, #0
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	d009      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bba:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc8:	4a8e      	ldr	r2, [pc, #568]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008bda:	643b      	str	r3, [r7, #64]	; 0x40
 8008bdc:	2300      	movs	r3, #0
 8008bde:	647b      	str	r3, [r7, #68]	; 0x44
 8008be0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d00e      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bea:	4b86      	ldr	r3, [pc, #536]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	4a85      	ldr	r2, [pc, #532]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bf4:	6113      	str	r3, [r2, #16]
 8008bf6:	4b83      	ldr	r3, [pc, #524]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf8:	6919      	ldr	r1, [r3, #16]
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c02:	4a80      	ldr	r2, [pc, #512]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c16:	2300      	movs	r3, #0
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4313      	orrs	r3, r2
 8008c22:	d009      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c24:	4b77      	ldr	r3, [pc, #476]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c28:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	4a74      	ldr	r2, [pc, #464]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c34:	430b      	orrs	r3, r1
 8008c36:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008c44:	633b      	str	r3, [r7, #48]	; 0x30
 8008c46:	2300      	movs	r3, #0
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d00a      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c54:	4b6b      	ldr	r3, [pc, #428]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c58:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c64:	4a67      	ldr	r2, [pc, #412]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c66:	430b      	orrs	r3, r1
 8008c68:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	2100      	movs	r1, #0
 8008c74:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008c80:	460b      	mov	r3, r1
 8008c82:	4313      	orrs	r3, r2
 8008c84:	d011      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 fa4a 	bl	800a128 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ca6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	6239      	str	r1, [r7, #32]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
 8008cbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	d011      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cca:	3308      	adds	r3, #8
 8008ccc:	2101      	movs	r1, #1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fa2a 	bl	800a128 <RCCEx_PLL2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	61b9      	str	r1, [r7, #24]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	61fb      	str	r3, [r7, #28]
 8008cfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d00:	460b      	mov	r3, r1
 8008d02:	4313      	orrs	r3, r2
 8008d04:	d011      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fa0a 	bl	800a128 <RCCEx_PLL2_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	2100      	movs	r1, #0
 8008d34:	6139      	str	r1, [r7, #16]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d40:	460b      	mov	r3, r1
 8008d42:	4313      	orrs	r3, r2
 8008d44:	d011      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4a:	3328      	adds	r3, #40	; 0x28
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 fa9c 	bl	800a28c <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	2100      	movs	r1, #0
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d80:	460b      	mov	r3, r1
 8008d82:	4313      	orrs	r3, r2
 8008d84:	d011      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8a:	3328      	adds	r3, #40	; 0x28
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fa7c 	bl	800a28c <RCCEx_PLL3_Config>
 8008d94:	4603      	mov	r3, r0
 8008d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	2100      	movs	r1, #0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	d011      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dca:	3328      	adds	r3, #40	; 0x28
 8008dcc:	2102      	movs	r1, #2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 fa5c 	bl	800a28c <RCCEx_PLL3_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008dea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	e000      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e04:	58024400 	.word	0x58024400

08008e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b090      	sub	sp, #64	; 0x40
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	f040 8094 	bne.w	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e20:	4b9e      	ldr	r3, [pc, #632]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	f200 8087 	bhi.w	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e4d 	.word	0x08008e4d
 8008e3c:	08008e75 	.word	0x08008e75
 8008e40:	08008e9d 	.word	0x08008e9d
 8008e44:	08008f39 	.word	0x08008f39
 8008e48:	08008ec5 	.word	0x08008ec5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e4c:	4b93      	ldr	r3, [pc, #588]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e58:	d108      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 f810 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e68:	f000 bd45 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e70:	f000 bd41 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e74:	4b89      	ldr	r3, [pc, #548]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e80:	d108      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e82:	f107 0318 	add.w	r3, r7, #24
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fd54 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e90:	f000 bd31 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e98:	f000 bd2d 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e9c:	4b7f      	ldr	r3, [pc, #508]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea8:	d108      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eaa:	f107 030c 	add.w	r3, r7, #12
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fe94 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb8:	f000 bd1d 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec0:	f000 bd19 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ec4:	4b75      	ldr	r3, [pc, #468]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ecc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ece:	4b73      	ldr	r3, [pc, #460]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ee0:	4b6e      	ldr	r3, [pc, #440]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	08db      	lsrs	r3, r3, #3
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	4a6d      	ldr	r2, [pc, #436]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef2:	e01f      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ef4:	4b69      	ldr	r3, [pc, #420]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f00:	d106      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f08:	d102      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f0a:	4b66      	ldr	r3, [pc, #408]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f0e:	e011      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f10:	4b62      	ldr	r3, [pc, #392]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f1c:	d106      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f24:	d102      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f26:	4b60      	ldr	r3, [pc, #384]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f2a:	e003      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f30:	f000 bce1 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f34:	f000 bcdf 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f38:	4b5c      	ldr	r3, [pc, #368]	; (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f3c:	f000 bcdb 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f44:	f000 bcd7 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008f50:	430b      	orrs	r3, r1
 8008f52:	f040 80ad 	bne.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008f56:	4b51      	ldr	r3, [pc, #324]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f5a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008f5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f66:	d056      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6e:	f200 8090 	bhi.w	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2bc0      	cmp	r3, #192	; 0xc0
 8008f76:	f000 8088 	beq.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2bc0      	cmp	r3, #192	; 0xc0
 8008f7e:	f200 8088 	bhi.w	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d032      	beq.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	2b80      	cmp	r3, #128	; 0x80
 8008f8c:	f200 8081 	bhi.w	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	d014      	beq.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008f9c:	e079      	b.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f9e:	4b3f      	ldr	r3, [pc, #252]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008faa:	d108      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 ff67 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fba:	f000 bc9c 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc2:	f000 bc98 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc6:	4b35      	ldr	r3, [pc, #212]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd2:	d108      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd4:	f107 0318 	add.w	r3, r7, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fcab 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe2:	f000 bc88 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fea:	f000 bc84 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fee:	4b2b      	ldr	r3, [pc, #172]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffa:	d108      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffc:	f107 030c 	add.w	r3, r7, #12
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fdeb 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900a:	f000 bc74 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009012:	f000 bc70 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009016:	4b21      	ldr	r3, [pc, #132]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800901e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0304 	and.w	r3, r3, #4
 8009028:	2b04      	cmp	r3, #4
 800902a:	d10c      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800902c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902e:	2b00      	cmp	r3, #0
 8009030:	d109      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	08db      	lsrs	r3, r3, #3
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800903e:	fa22 f303 	lsr.w	r3, r2, r3
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009044:	e01f      	b.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009046:	4b15      	ldr	r3, [pc, #84]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009052:	d106      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800905a:	d102      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800905c:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	e011      	b.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009062:	4b0e      	ldr	r3, [pc, #56]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800906a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800906e:	d106      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009076:	d102      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009078:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907c:	e003      	b.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009082:	f000 bc38 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009086:	f000 bc36 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800908a:	4b08      	ldr	r3, [pc, #32]	; (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800908e:	f000 bc32 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009096:	f000 bc2e 	b.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800909a:	bf00      	nop
 800909c:	58024400 	.word	0x58024400
 80090a0:	03d09000 	.word	0x03d09000
 80090a4:	003d0900 	.word	0x003d0900
 80090a8:	017d7840 	.word	0x017d7840
 80090ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80090b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80090b8:	430b      	orrs	r3, r1
 80090ba:	f040 809c 	bne.w	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80090be:	4b9e      	ldr	r3, [pc, #632]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80090c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ce:	d054      	beq.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090d6:	f200 808b 	bhi.w	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090e0:	f000 8083 	beq.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090ea:	f200 8081 	bhi.w	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090f4:	d02f      	beq.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090fc:	d878      	bhi.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800910a:	d012      	beq.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800910c:	e070      	b.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800910e:	4b8a      	ldr	r3, [pc, #552]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800911a:	d107      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800911c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009120:	4618      	mov	r0, r3
 8009122:	f000 feaf 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912a:	e3e4      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009130:	e3e1      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009132:	4b81      	ldr	r3, [pc, #516]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800913a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800913e:	d107      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009140:	f107 0318 	add.w	r3, r7, #24
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fbf5 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914e:	e3d2      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009154:	e3cf      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009156:	4b78      	ldr	r3, [pc, #480]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009162:	d107      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fd37 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009172:	e3c0      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009178:	e3bd      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800917a:	4b6f      	ldr	r3, [pc, #444]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800917c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009182:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009184:	4b6c      	ldr	r3, [pc, #432]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b04      	cmp	r3, #4
 800918e:	d10c      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009196:	4b68      	ldr	r3, [pc, #416]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	08db      	lsrs	r3, r3, #3
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	4a66      	ldr	r2, [pc, #408]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091a2:	fa22 f303 	lsr.w	r3, r2, r3
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a8:	e01e      	b.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091aa:	4b63      	ldr	r3, [pc, #396]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b6:	d106      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091be:	d102      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091c0:	4b5f      	ldr	r3, [pc, #380]	; (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091c4:	e010      	b.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091c6:	4b5c      	ldr	r3, [pc, #368]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d2:	d106      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80091d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091da:	d102      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091dc:	4b59      	ldr	r3, [pc, #356]	; (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091e0:	e002      	b.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80091e6:	e386      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091e8:	e385      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091ea:	4b57      	ldr	r3, [pc, #348]	; (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ee:	e382      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f4:	e37f      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80091f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091fa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80091fe:	430b      	orrs	r3, r1
 8009200:	f040 80a7 	bne.w	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009204:	4b4c      	ldr	r3, [pc, #304]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009208:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800920c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009214:	d055      	beq.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800921c:	f200 8096 	bhi.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009226:	f000 8084 	beq.w	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009230:	f200 808c 	bhi.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800923a:	d030      	beq.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009242:	f200 8083 	bhi.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009252:	d012      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009254:	e07a      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009256:	4b38      	ldr	r3, [pc, #224]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800925e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009262:	d107      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fe0b 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009272:	e340      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009278:	e33d      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800927a:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009286:	d107      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009288:	f107 0318 	add.w	r3, r7, #24
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fb51 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009296:	e32e      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800929c:	e32b      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800929e:	4b26      	ldr	r3, [pc, #152]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092aa:	d107      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ac:	f107 030c 	add.w	r3, r7, #12
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fc93 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ba:	e31c      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c0:	e319      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092c2:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092cc:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d10c      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092de:	4b16      	ldr	r3, [pc, #88]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	08db      	lsrs	r3, r3, #3
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	4a14      	ldr	r2, [pc, #80]	; (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80092ea:	fa22 f303 	lsr.w	r3, r2, r3
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f0:	e01e      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fe:	d106      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009306:	d102      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800930c:	e010      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800930e:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800931a:	d106      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009322:	d102      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009324:	4b07      	ldr	r3, [pc, #28]	; (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009328:	e002      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800932e:	e2e2      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009330:	e2e1      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009336:	e2de      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009338:	58024400 	.word	0x58024400
 800933c:	03d09000 	.word	0x03d09000
 8009340:	003d0900 	.word	0x003d0900
 8009344:	017d7840 	.word	0x017d7840
 8009348:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009350:	e2d1      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009356:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800935a:	430b      	orrs	r3, r1
 800935c:	f040 809c 	bne.w	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009360:	4b93      	ldr	r3, [pc, #588]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009364:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009368:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009370:	d054      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009378:	f200 808b 	bhi.w	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009382:	f000 8083 	beq.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800938c:	f200 8081 	bhi.w	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009396:	d02f      	beq.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939e:	d878      	bhi.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d004      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ac:	d012      	beq.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80093ae:	e070      	b.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093b0:	4b7f      	ldr	r3, [pc, #508]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093bc:	d107      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fd5e 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093cc:	e293      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d2:	e290      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093d4:	4b76      	ldr	r3, [pc, #472]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093e0:	d107      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e2:	f107 0318 	add.w	r3, r7, #24
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 faa4 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f0:	e281      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f6:	e27e      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093f8:	4b6d      	ldr	r3, [pc, #436]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009404:	d107      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009406:	f107 030c 	add.w	r3, r7, #12
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fbe6 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009414:	e26f      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941a:	e26c      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800941c:	4b64      	ldr	r3, [pc, #400]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800941e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009424:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009426:	4b62      	ldr	r3, [pc, #392]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b04      	cmp	r3, #4
 8009430:	d10c      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009434:	2b00      	cmp	r3, #0
 8009436:	d109      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009438:	4b5d      	ldr	r3, [pc, #372]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	08db      	lsrs	r3, r3, #3
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	4a5c      	ldr	r2, [pc, #368]	; (80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009444:	fa22 f303 	lsr.w	r3, r2, r3
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944a:	e01e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800944c:	4b58      	ldr	r3, [pc, #352]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009458:	d106      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009460:	d102      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009462:	4b55      	ldr	r3, [pc, #340]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009466:	e010      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009468:	4b51      	ldr	r3, [pc, #324]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009474:	d106      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800947c:	d102      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800947e:	4b4f      	ldr	r3, [pc, #316]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009482:	e002      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009488:	e235      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800948a:	e234      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800948c:	4b4c      	ldr	r3, [pc, #304]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009490:	e231      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009496:	e22e      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80094a0:	430b      	orrs	r3, r1
 80094a2:	f040 808f 	bne.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80094a6:	4b42      	ldr	r3, [pc, #264]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80094ae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094b6:	d06b      	beq.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094be:	d874      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094c6:	d056      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094ce:	d86c      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094d6:	d03b      	beq.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094de:	d864      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094e6:	d021      	beq.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094ee:	d85c      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094fc:	d004      	beq.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80094fe:	e054      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009500:	f7fe fa4c 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 8009504:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009506:	e1f6      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009508:	4b29      	ldr	r3, [pc, #164]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009514:	d107      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009516:	f107 0318 	add.w	r3, r7, #24
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa0a 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009524:	e1e7      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800952a:	e1e4      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800952c:	4b20      	ldr	r3, [pc, #128]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009538:	d107      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fb4c 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009548:	e1d5      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800954e:	e1d2      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009550:	4b17      	ldr	r3, [pc, #92]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b04      	cmp	r3, #4
 800955a:	d109      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800955c:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	08db      	lsrs	r3, r3, #3
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
 800956c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800956e:	e1c2      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009574:	e1bf      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009576:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800957e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009582:	d102      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009584:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009588:	e1b5      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800958e:	e1b2      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800959c:	d102      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800959e:	4b07      	ldr	r3, [pc, #28]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a2:	e1a8      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a8:	e1a5      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ae:	e1a2      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095b0:	58024400 	.word	0x58024400
 80095b4:	03d09000 	.word	0x03d09000
 80095b8:	003d0900 	.word	0x003d0900
 80095bc:	017d7840 	.word	0x017d7840
 80095c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80095c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80095cc:	430b      	orrs	r3, r1
 80095ce:	d173      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80095d0:	4b9c      	ldr	r3, [pc, #624]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e0:	d02f      	beq.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e8:	d863      	bhi.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f6:	d012      	beq.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80095f8:	e05b      	b.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095fa:	4b92      	ldr	r3, [pc, #584]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009606:	d107      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009608:	f107 0318 	add.w	r3, r7, #24
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f991 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009616:	e16e      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800961c:	e16b      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800961e:	4b89      	ldr	r3, [pc, #548]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800962a:	d107      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800962c:	f107 030c 	add.w	r3, r7, #12
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fad3 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963a:	e15c      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009640:	e159      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009642:	4b80      	ldr	r3, [pc, #512]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800964a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800964c:	4b7d      	ldr	r3, [pc, #500]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b04      	cmp	r3, #4
 8009656:	d10c      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800965e:	4b79      	ldr	r3, [pc, #484]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	08db      	lsrs	r3, r3, #3
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	4a77      	ldr	r2, [pc, #476]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009670:	e01e      	b.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009672:	4b74      	ldr	r3, [pc, #464]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967e:	d106      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009686:	d102      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009688:	4b70      	ldr	r3, [pc, #448]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800968c:	e010      	b.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800968e:	4b6d      	ldr	r3, [pc, #436]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800969a:	d106      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800969c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a2:	d102      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096a4:	4b6a      	ldr	r3, [pc, #424]	; (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a8:	e002      	b.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80096ae:	e122      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096b0:	e121      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096b6:	e11e      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096bc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80096c0:	430b      	orrs	r3, r1
 80096c2:	d133      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80096c4:	4b5f      	ldr	r3, [pc, #380]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096da:	d012      	beq.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80096dc:	e023      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096de:	4b59      	ldr	r3, [pc, #356]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096ea:	d107      	bne.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fbc7 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096fa:	e0fc      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009700:	e0f9      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009702:	4b50      	ldr	r3, [pc, #320]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800970a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800970e:	d107      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009710:	f107 0318 	add.w	r3, r7, #24
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f90d 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800971e:	e0ea      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009724:	e0e7      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800972a:	e0e4      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800972c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009730:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009734:	430b      	orrs	r3, r1
 8009736:	f040 808d 	bne.w	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800973a:	4b42      	ldr	r3, [pc, #264]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800973c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800973e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009742:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800974a:	d06b      	beq.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009752:	d874      	bhi.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800975a:	d056      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009762:	d86c      	bhi.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800976a:	d03b      	beq.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009772:	d864      	bhi.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800977a:	d021      	beq.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009782:	d85c      	bhi.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009790:	d004      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009792:	e054      	b.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009794:	f000 f8b8 	bl	8009908 <HAL_RCCEx_GetD3PCLK1Freq>
 8009798:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800979a:	e0ac      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800979c:	4b29      	ldr	r3, [pc, #164]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097a8:	d107      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097aa:	f107 0318 	add.w	r3, r7, #24
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f8c0 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b8:	e09d      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097be:	e09a      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097c0:	4b20      	ldr	r3, [pc, #128]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097cc:	d107      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ce:	f107 030c 	add.w	r3, r7, #12
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fa02 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097dc:	e08b      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e2:	e088      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d109      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097f0:	4b14      	ldr	r3, [pc, #80]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	08db      	lsrs	r3, r3, #3
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	4a13      	ldr	r2, [pc, #76]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80097fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009802:	e078      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009808:	e075      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800980a:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d102      	bne.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009818:	4b0c      	ldr	r3, [pc, #48]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800981c:	e06b      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009822:	e068      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009824:	4b07      	ldr	r3, [pc, #28]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800982c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009830:	d102      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009836:	e05e      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800983c:	e05b      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009842:	e058      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009844:	58024400 	.word	0x58024400
 8009848:	03d09000 	.word	0x03d09000
 800984c:	003d0900 	.word	0x003d0900
 8009850:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009858:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800985c:	430b      	orrs	r3, r1
 800985e:	d148      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009860:	4b27      	ldr	r3, [pc, #156]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009868:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009870:	d02a      	beq.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009878:	d838      	bhi.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	d004      	beq.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009886:	d00d      	beq.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009888:	e030      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009896:	d102      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009898:	4b1a      	ldr	r3, [pc, #104]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989c:	e02b      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a2:	e028      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098a4:	4b16      	ldr	r3, [pc, #88]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098b0:	d107      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fae4 	bl	8009e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c0:	e019      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c6:	e016      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098c8:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098d4:	d107      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098d6:	f107 0318 	add.w	r3, r7, #24
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f82a 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e4:	e007      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ea:	e004      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098f0:	e001      	b.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80098f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3740      	adds	r7, #64	; 0x40
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	58024400 	.word	0x58024400
 8009904:	017d7840 	.word	0x017d7840

08009908 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800990c:	f7fe f816 	bl	800793c <HAL_RCC_GetHCLKFreq>
 8009910:	4602      	mov	r2, r0
 8009912:	4b06      	ldr	r3, [pc, #24]	; (800992c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	091b      	lsrs	r3, r3, #4
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	4904      	ldr	r1, [pc, #16]	; (8009930 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800991e:	5ccb      	ldrb	r3, [r1, r3]
 8009920:	f003 031f 	and.w	r3, r3, #31
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009928:	4618      	mov	r0, r3
 800992a:	bd80      	pop	{r7, pc}
 800992c:	58024400 	.word	0x58024400
 8009930:	0800dab8 	.word	0x0800dab8

08009934 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009934:	b480      	push	{r7}
 8009936:	b089      	sub	sp, #36	; 0x24
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800993c:	4ba1      	ldr	r3, [pc, #644]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009946:	4b9f      	ldr	r3, [pc, #636]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	0b1b      	lsrs	r3, r3, #12
 800994c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009950:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009952:	4b9c      	ldr	r3, [pc, #624]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	091b      	lsrs	r3, r3, #4
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800995e:	4b99      	ldr	r3, [pc, #612]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009962:	08db      	lsrs	r3, r3, #3
 8009964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	fb02 f303 	mul.w	r3, r2, r3
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 8111 	beq.w	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	2b02      	cmp	r3, #2
 8009986:	f000 8083 	beq.w	8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b02      	cmp	r3, #2
 800998e:	f200 80a1 	bhi.w	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d056      	beq.n	8009a4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800999e:	e099      	b.n	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a0:	4b88      	ldr	r3, [pc, #544]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02d      	beq.n	8009a08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ac:	4b85      	ldr	r3, [pc, #532]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	08db      	lsrs	r3, r3, #3
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	4a84      	ldr	r2, [pc, #528]	; (8009bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099b8:	fa22 f303 	lsr.w	r3, r2, r3
 80099bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b7b      	ldr	r3, [pc, #492]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a06:	e087      	b.n	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b6a      	ldr	r3, [pc, #424]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a4a:	e065      	b.n	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5e:	4b59      	ldr	r3, [pc, #356]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a8e:	e043      	b.n	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa2:	4b48      	ldr	r3, [pc, #288]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ab6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ad2:	e021      	b.n	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b37      	ldr	r3, [pc, #220]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b18:	4b2a      	ldr	r3, [pc, #168]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	0a5b      	lsrs	r3, r3, #9
 8009b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b3e:	ee17 2a90 	vmov	r2, s15
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b50:	ee07 3a90 	vmov	s15, r3
 8009b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6c:	ee17 2a90 	vmov	r2, s15
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009b74:	4b13      	ldr	r3, [pc, #76]	; (8009bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	0e1b      	lsrs	r3, r3, #24
 8009b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9a:	ee17 2a90 	vmov	r2, s15
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
}
 8009bb6:	bf00      	nop
 8009bb8:	3724      	adds	r7, #36	; 0x24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	58024400 	.word	0x58024400
 8009bc8:	03d09000 	.word	0x03d09000
 8009bcc:	46000000 	.word	0x46000000
 8009bd0:	4c742400 	.word	0x4c742400
 8009bd4:	4a742400 	.word	0x4a742400
 8009bd8:	4bbebc20 	.word	0x4bbebc20

08009bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b089      	sub	sp, #36	; 0x24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009be4:	4ba1      	ldr	r3, [pc, #644]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009bee:	4b9f      	ldr	r3, [pc, #636]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	0d1b      	lsrs	r3, r3, #20
 8009bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009bfa:	4b9c      	ldr	r3, [pc, #624]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfe:	0a1b      	lsrs	r3, r3, #8
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c06:	4b99      	ldr	r3, [pc, #612]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0a:	08db      	lsrs	r3, r3, #3
 8009c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	fb02 f303 	mul.w	r3, r2, r3
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8111 	beq.w	8009e4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	f000 8083 	beq.w	8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	f200 80a1 	bhi.w	8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d056      	beq.n	8009cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c46:	e099      	b.n	8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c48:	4b88      	ldr	r3, [pc, #544]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d02d      	beq.n	8009cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c54:	4b85      	ldr	r3, [pc, #532]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	08db      	lsrs	r3, r3, #3
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	4a84      	ldr	r2, [pc, #528]	; (8009e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
 8009c64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7e:	4b7b      	ldr	r3, [pc, #492]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cae:	e087      	b.n	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc2:	4b6a      	ldr	r3, [pc, #424]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cf2:	e065      	b.n	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d06:	4b59      	ldr	r3, [pc, #356]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d36:	e043      	b.n	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4a:	4b48      	ldr	r3, [pc, #288]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d7a:	e021      	b.n	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009dc0:	4b2a      	ldr	r3, [pc, #168]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	0a5b      	lsrs	r3, r3, #9
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de6:	ee17 2a90 	vmov	r2, s15
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009dee:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e14:	ee17 2a90 	vmov	r2, s15
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e1c:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e20:	0e1b      	lsrs	r3, r3, #24
 8009e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e42:	ee17 2a90 	vmov	r2, s15
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e4a:	e008      	b.n	8009e5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	609a      	str	r2, [r3, #8]
}
 8009e5e:	bf00      	nop
 8009e60:	3724      	adds	r7, #36	; 0x24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	58024400 	.word	0x58024400
 8009e70:	03d09000 	.word	0x03d09000
 8009e74:	46000000 	.word	0x46000000
 8009e78:	4c742400 	.word	0x4c742400
 8009e7c:	4a742400 	.word	0x4a742400
 8009e80:	4bbebc20 	.word	0x4bbebc20

08009e84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b089      	sub	sp, #36	; 0x24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e8c:	4ba0      	ldr	r3, [pc, #640]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009e96:	4b9e      	ldr	r3, [pc, #632]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	091b      	lsrs	r3, r3, #4
 8009e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ea2:	4b9b      	ldr	r3, [pc, #620]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009eac:	4b98      	ldr	r3, [pc, #608]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb0:	08db      	lsrs	r3, r3, #3
 8009eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	fb02 f303 	mul.w	r3, r2, r3
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8111 	beq.w	800a0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	f000 8083 	beq.w	8009fde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	f200 80a1 	bhi.w	800a022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d056      	beq.n	8009f9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009eec:	e099      	b.n	800a022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eee:	4b88      	ldr	r3, [pc, #544]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d02d      	beq.n	8009f56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009efa:	4b85      	ldr	r3, [pc, #532]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	08db      	lsrs	r3, r3, #3
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	4a83      	ldr	r2, [pc, #524]	; (800a114 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f06:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	ee07 3a90 	vmov	s15, r3
 8009f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f24:	4b7a      	ldr	r3, [pc, #488]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f38:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f54:	e087      	b.n	800a066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a11c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f68:	4b69      	ldr	r3, [pc, #420]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f70:	ee07 3a90 	vmov	s15, r3
 8009f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f98:	e065      	b.n	800a066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	ee07 3a90 	vmov	s15, r3
 8009fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a120 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fac:	4b58      	ldr	r3, [pc, #352]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb4:	ee07 3a90 	vmov	s15, r3
 8009fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fdc:	e043      	b.n	800a066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	ee07 3a90 	vmov	s15, r3
 8009fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a124 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff0:	4b47      	ldr	r3, [pc, #284]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a000:	ed97 6a03 	vldr	s12, [r7, #12]
 800a004:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a020:	e021      	b.n	800a066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	ee07 3a90 	vmov	s15, r3
 800a028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a11c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a034:	4b36      	ldr	r3, [pc, #216]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03c:	ee07 3a90 	vmov	s15, r3
 800a040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a044:	ed97 6a03 	vldr	s12, [r7, #12]
 800a048:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a064:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a066:	4b2a      	ldr	r3, [pc, #168]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06a:	0a5b      	lsrs	r3, r3, #9
 800a06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a07c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a080:	edd7 6a07 	vldr	s13, [r7, #28]
 800a084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08c:	ee17 2a90 	vmov	r2, s15
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a094:	4b1e      	ldr	r3, [pc, #120]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	0c1b      	lsrs	r3, r3, #16
 800a09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ba:	ee17 2a90 	vmov	r2, s15
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a0c2:	4b13      	ldr	r3, [pc, #76]	; (800a110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	0e1b      	lsrs	r3, r3, #24
 800a0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0e8:	ee17 2a90 	vmov	r2, s15
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a0f0:	e008      	b.n	800a104 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	609a      	str	r2, [r3, #8]
}
 800a104:	bf00      	nop
 800a106:	3724      	adds	r7, #36	; 0x24
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	58024400 	.word	0x58024400
 800a114:	03d09000 	.word	0x03d09000
 800a118:	46000000 	.word	0x46000000
 800a11c:	4c742400 	.word	0x4c742400
 800a120:	4a742400 	.word	0x4a742400
 800a124:	4bbebc20 	.word	0x4bbebc20

0800a128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a136:	4b53      	ldr	r3, [pc, #332]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d101      	bne.n	800a146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e099      	b.n	800a27a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a146:	4b4f      	ldr	r3, [pc, #316]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a4e      	ldr	r2, [pc, #312]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a14c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a152:	f7f8 fd21 	bl	8002b98 <HAL_GetTick>
 800a156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a158:	e008      	b.n	800a16c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a15a:	f7f8 fd1d 	bl	8002b98 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d901      	bls.n	800a16c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a168:	2303      	movs	r3, #3
 800a16a:	e086      	b.n	800a27a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a16c:	4b45      	ldr	r3, [pc, #276]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1f0      	bne.n	800a15a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a178:	4b42      	ldr	r3, [pc, #264]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	031b      	lsls	r3, r3, #12
 800a186:	493f      	ldr	r1, [pc, #252]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	628b      	str	r3, [r1, #40]	; 0x28
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	3b01      	subs	r3, #1
 800a192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	025b      	lsls	r3, r3, #9
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	041b      	lsls	r3, r3, #16
 800a1aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	061b      	lsls	r3, r3, #24
 800a1b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1bc:	4931      	ldr	r1, [pc, #196]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1c2:	4b30      	ldr	r3, [pc, #192]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	492d      	ldr	r1, [pc, #180]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a1d4:	4b2b      	ldr	r3, [pc, #172]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d8:	f023 0220 	bic.w	r2, r3, #32
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	4928      	ldr	r1, [pc, #160]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a1e6:	4b27      	ldr	r3, [pc, #156]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ea:	4a26      	ldr	r2, [pc, #152]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1ec:	f023 0310 	bic.w	r3, r3, #16
 800a1f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a1f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1f6:	4b24      	ldr	r3, [pc, #144]	; (800a288 <RCCEx_PLL2_Config+0x160>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	69d2      	ldr	r2, [r2, #28]
 800a1fe:	00d2      	lsls	r2, r2, #3
 800a200:	4920      	ldr	r1, [pc, #128]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a202:	4313      	orrs	r3, r2
 800a204:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a206:	4b1f      	ldr	r3, [pc, #124]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	4a1e      	ldr	r2, [pc, #120]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a20c:	f043 0310 	orr.w	r3, r3, #16
 800a210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a218:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21c:	4a19      	ldr	r2, [pc, #100]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a21e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a222:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a224:	e00f      	b.n	800a246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d106      	bne.n	800a23a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a22c:	4b15      	ldr	r3, [pc, #84]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	4a14      	ldr	r2, [pc, #80]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a236:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a238:	e005      	b.n	800a246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a23a:	4b12      	ldr	r3, [pc, #72]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23e:	4a11      	ldr	r2, [pc, #68]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a0e      	ldr	r2, [pc, #56]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a24c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a252:	f7f8 fca1 	bl	8002b98 <HAL_GetTick>
 800a256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a258:	e008      	b.n	800a26c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a25a:	f7f8 fc9d 	bl	8002b98 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b02      	cmp	r3, #2
 800a266:	d901      	bls.n	800a26c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e006      	b.n	800a27a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <RCCEx_PLL2_Config+0x15c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0f0      	beq.n	800a25a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a278:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	58024400 	.word	0x58024400
 800a288:	ffff0007 	.word	0xffff0007

0800a28c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a29a:	4b53      	ldr	r3, [pc, #332]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d101      	bne.n	800a2aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e099      	b.n	800a3de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2aa:	4b4f      	ldr	r3, [pc, #316]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a4e      	ldr	r2, [pc, #312]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a2b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b6:	f7f8 fc6f 	bl	8002b98 <HAL_GetTick>
 800a2ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2bc:	e008      	b.n	800a2d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2be:	f7f8 fc6b 	bl	8002b98 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d901      	bls.n	800a2d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e086      	b.n	800a3de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2d0:	4b45      	ldr	r3, [pc, #276]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1f0      	bne.n	800a2be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a2dc:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	051b      	lsls	r3, r3, #20
 800a2ea:	493f      	ldr	r1, [pc, #252]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	628b      	str	r3, [r1, #40]	; 0x28
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	025b      	lsls	r3, r3, #9
 800a302:	b29b      	uxth	r3, r3
 800a304:	431a      	orrs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	041b      	lsls	r3, r3, #16
 800a30e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	3b01      	subs	r3, #1
 800a31a:	061b      	lsls	r3, r3, #24
 800a31c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a320:	4931      	ldr	r1, [pc, #196]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a322:	4313      	orrs	r3, r2
 800a324:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a326:	4b30      	ldr	r3, [pc, #192]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	492d      	ldr	r1, [pc, #180]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a334:	4313      	orrs	r3, r2
 800a336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a338:	4b2b      	ldr	r3, [pc, #172]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	4928      	ldr	r1, [pc, #160]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a346:	4313      	orrs	r3, r2
 800a348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a34a:	4b27      	ldr	r3, [pc, #156]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	4a26      	ldr	r2, [pc, #152]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a356:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a35a:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <RCCEx_PLL3_Config+0x160>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	69d2      	ldr	r2, [r2, #28]
 800a362:	00d2      	lsls	r2, r2, #3
 800a364:	4920      	ldr	r1, [pc, #128]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a366:	4313      	orrs	r3, r2
 800a368:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a36a:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	4a1e      	ldr	r2, [pc, #120]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a37c:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	4a19      	ldr	r2, [pc, #100]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a386:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a388:	e00f      	b.n	800a3aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d106      	bne.n	800a39e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a390:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a39a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a39c:	e005      	b.n	800a3aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a2:	4a11      	ldr	r2, [pc, #68]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a3a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3aa:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a0e      	ldr	r2, [pc, #56]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a3b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3b6:	f7f8 fbef 	bl	8002b98 <HAL_GetTick>
 800a3ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3bc:	e008      	b.n	800a3d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3be:	f7f8 fbeb 	bl	8002b98 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d901      	bls.n	800a3d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e006      	b.n	800a3de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3d0:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <RCCEx_PLL3_Config+0x15c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0f0      	beq.n	800a3be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	58024400 	.word	0x58024400
 800a3ec:	ffff0007 	.word	0xffff0007

0800a3f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d071      	beq.n	800a4e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7f7 fe24 	bl	8002064 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d050      	beq.n	800a4d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	22ca      	movs	r2, #202	; 0xca
 800a438:	625a      	str	r2, [r3, #36]	; 0x24
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2253      	movs	r2, #83	; 0x53
 800a440:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f87a 	bl	800a53c <RTC_EnterInitMode>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d124      	bne.n	800a49c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6899      	ldr	r1, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	4b24      	ldr	r3, [pc, #144]	; (800a4f0 <HAL_RTC_Init+0x100>)
 800a45e:	400b      	ands	r3, r1
 800a460:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6899      	ldr	r1, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	431a      	orrs	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	0419      	lsls	r1, r3, #16
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f886 	bl	800a5a4 <RTC_ExitInitMode>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d113      	bne.n	800a4ca <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0203 	bic.w	r2, r2, #3
 800a4b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	69da      	ldr	r2, [r3, #28]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	22ff      	movs	r2, #255	; 0xff
 800a4d0:	625a      	str	r2, [r3, #36]	; 0x24
 800a4d2:	e001      	b.n	800a4d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d103      	bne.n	800a4e6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	ff8fffbf 	.word	0xff8fffbf

0800a4f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <HAL_RTC_WaitForSynchro+0x44>)
 800a502:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a504:	f7f8 fb48 	bl	8002b98 <HAL_GetTick>
 800a508:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a50a:	e009      	b.n	800a520 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a50c:	f7f8 fb44 	bl	8002b98 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a51a:	d901      	bls.n	800a520 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e007      	b.n	800a530 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0ee      	beq.n	800a50c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	0003ff5f 	.word	0x0003ff5f

0800a53c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d120      	bne.n	800a598 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f04f 32ff 	mov.w	r2, #4294967295
 800a55e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a560:	f7f8 fb1a 	bl	8002b98 <HAL_GetTick>
 800a564:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a566:	e00d      	b.n	800a584 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a568:	f7f8 fb16 	bl	8002b98 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a576:	d905      	bls.n	800a584 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2203      	movs	r2, #3
 800a580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <RTC_EnterInitMode+0x5c>
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d1e7      	bne.n	800a568 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a5b0:	4b1a      	ldr	r3, [pc, #104]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	4a19      	ldr	r2, [pc, #100]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ba:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a5bc:	4b17      	ldr	r3, [pc, #92]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f003 0320 	and.w	r3, r3, #32
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10c      	bne.n	800a5e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff93 	bl	800a4f4 <HAL_RTC_WaitForSynchro>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01e      	beq.n	800a612 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	73fb      	strb	r3, [r7, #15]
 800a5e0:	e017      	b.n	800a612 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5e2:	4b0e      	ldr	r3, [pc, #56]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	4a0d      	ldr	r2, [pc, #52]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a5e8:	f023 0320 	bic.w	r3, r3, #32
 800a5ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff ff80 	bl	800a4f4 <HAL_RTC_WaitForSynchro>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d005      	beq.n	800a606 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2203      	movs	r2, #3
 800a5fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	4a04      	ldr	r2, [pc, #16]	; (800a61c <RTC_ExitInitMode+0x78>)
 800a60c:	f043 0320 	orr.w	r3, r3, #32
 800a610:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	58004000 	.word	0x58004000

0800a620 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08a      	sub	sp, #40	; 0x28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e28e      	b.n	800ab50 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a632:	f7f8 fae1 	bl	8002bf8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d113      	bne.n	800a668 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a96      	ldr	r2, [pc, #600]	; (800a8a0 <HAL_SAI_Init+0x280>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d004      	beq.n	800a654 <HAL_SAI_Init+0x34>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a95      	ldr	r2, [pc, #596]	; (800a8a4 <HAL_SAI_Init+0x284>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d107      	bne.n	800a664 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d103      	bne.n	800a664 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e273      	b.n	800ab50 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a8c      	ldr	r2, [pc, #560]	; (800a8a0 <HAL_SAI_Init+0x280>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d004      	beq.n	800a67c <HAL_SAI_Init+0x5c>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a8c      	ldr	r2, [pc, #560]	; (800a8a8 <HAL_SAI_Init+0x288>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d102      	bne.n	800a682 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a67c:	4b8b      	ldr	r3, [pc, #556]	; (800a8ac <HAL_SAI_Init+0x28c>)
 800a67e:	61bb      	str	r3, [r7, #24]
 800a680:	e028      	b.n	800a6d4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a8a      	ldr	r2, [pc, #552]	; (800a8b0 <HAL_SAI_Init+0x290>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d004      	beq.n	800a696 <HAL_SAI_Init+0x76>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a88      	ldr	r2, [pc, #544]	; (800a8b4 <HAL_SAI_Init+0x294>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d102      	bne.n	800a69c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a696:	4b88      	ldr	r3, [pc, #544]	; (800a8b8 <HAL_SAI_Init+0x298>)
 800a698:	61bb      	str	r3, [r7, #24]
 800a69a:	e01b      	b.n	800a6d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a86      	ldr	r2, [pc, #536]	; (800a8bc <HAL_SAI_Init+0x29c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d004      	beq.n	800a6b0 <HAL_SAI_Init+0x90>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a85      	ldr	r2, [pc, #532]	; (800a8c0 <HAL_SAI_Init+0x2a0>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d102      	bne.n	800a6b6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a6b0:	4b84      	ldr	r3, [pc, #528]	; (800a8c4 <HAL_SAI_Init+0x2a4>)
 800a6b2:	61bb      	str	r3, [r7, #24]
 800a6b4:	e00e      	b.n	800a6d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a7a      	ldr	r2, [pc, #488]	; (800a8a4 <HAL_SAI_Init+0x284>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d004      	beq.n	800a6ca <HAL_SAI_Init+0xaa>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a80      	ldr	r2, [pc, #512]	; (800a8c8 <HAL_SAI_Init+0x2a8>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d102      	bne.n	800a6d0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a6ca:	4b80      	ldr	r3, [pc, #512]	; (800a8cc <HAL_SAI_Init+0x2ac>)
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	e001      	b.n	800a6d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e23d      	b.n	800ab50 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d106      	bne.n	800a6ee <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7f8 f819 	bl	8002720 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fa40 	bl	800ab74 <SAI_Disable>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e228      	b.n	800ab50 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2202      	movs	r2, #2
 800a702:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d00c      	beq.n	800a728 <HAL_SAI_Init+0x108>
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d80d      	bhi.n	800a72e <HAL_SAI_Init+0x10e>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <HAL_SAI_Init+0xfc>
 800a716:	2b01      	cmp	r3, #1
 800a718:	d003      	beq.n	800a722 <HAL_SAI_Init+0x102>
 800a71a:	e008      	b.n	800a72e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a720:	e008      	b.n	800a734 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a722:	2310      	movs	r3, #16
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a726:	e005      	b.n	800a734 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a728:	2320      	movs	r3, #32
 800a72a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a72c:	e002      	b.n	800a734 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a732:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	2b05      	cmp	r3, #5
 800a73a:	d832      	bhi.n	800a7a2 <HAL_SAI_Init+0x182>
 800a73c:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <HAL_SAI_Init+0x124>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a763 	.word	0x0800a763
 800a74c:	0800a76b 	.word	0x0800a76b
 800a750:	0800a773 	.word	0x0800a773
 800a754:	0800a783 	.word	0x0800a783
 800a758:	0800a793 	.word	0x0800a793
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61fb      	str	r3, [r7, #28]
      break;
 800a760:	e022      	b.n	800a7a8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a766:	61fb      	str	r3, [r7, #28]
      break;
 800a768:	e01e      	b.n	800a7a8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a76a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a76e:	61fb      	str	r3, [r7, #28]
      break;
 800a770:	e01a      	b.n	800a7a8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a776:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a780:	e012      	b.n	800a7a8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a786:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	f043 0302 	orr.w	r3, r3, #2
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a790:	e00a      	b.n	800a7a8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a796:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	f043 0303 	orr.w	r3, r3, #3
 800a79e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a7a0:	e002      	b.n	800a7a8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
      break;
 800a7a6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ac:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 80c5 	beq.w	800a942 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a37      	ldr	r2, [pc, #220]	; (800a8a0 <HAL_SAI_Init+0x280>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d004      	beq.n	800a7d0 <HAL_SAI_Init+0x1b0>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a37      	ldr	r2, [pc, #220]	; (800a8a8 <HAL_SAI_Init+0x288>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d106      	bne.n	800a7de <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a7d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a7d4:	f04f 0100 	mov.w	r1, #0
 800a7d8:	f7fe fb16 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7dc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a33      	ldr	r2, [pc, #204]	; (800a8b0 <HAL_SAI_Init+0x290>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d004      	beq.n	800a7f2 <HAL_SAI_Init+0x1d2>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a31      	ldr	r2, [pc, #196]	; (800a8b4 <HAL_SAI_Init+0x294>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d106      	bne.n	800a800 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a7f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a7f6:	f04f 0100 	mov.w	r1, #0
 800a7fa:	f7fe fb05 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7fe:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a2d      	ldr	r2, [pc, #180]	; (800a8bc <HAL_SAI_Init+0x29c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d004      	beq.n	800a814 <HAL_SAI_Init+0x1f4>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a2c      	ldr	r2, [pc, #176]	; (800a8c0 <HAL_SAI_Init+0x2a0>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d106      	bne.n	800a822 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a814:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a818:	f04f 0100 	mov.w	r1, #0
 800a81c:	f7fe faf4 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a820:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a1f      	ldr	r2, [pc, #124]	; (800a8a4 <HAL_SAI_Init+0x284>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d106      	bne.n	800a83a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a82c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a830:	f04f 0100 	mov.w	r1, #0
 800a834:	f7fe fae8 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a838:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a22      	ldr	r2, [pc, #136]	; (800a8c8 <HAL_SAI_Init+0x2a8>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d106      	bne.n	800a852 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a844:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a848:	f04f 0100 	mov.w	r1, #0
 800a84c:	f7fe fadc 	bl	8008e08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a850:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a85a:	d139      	bne.n	800a8d0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a860:	2b04      	cmp	r3, #4
 800a862:	d102      	bne.n	800a86a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a864:	2340      	movs	r3, #64	; 0x40
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	e00a      	b.n	800a880 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86e:	2b08      	cmp	r3, #8
 800a870:	d103      	bne.n	800a87a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	e002      	b.n	800a880 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	4619      	mov	r1, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	fb02 f303 	mul.w	r3, r2, r3
 800a896:	fbb1 f3f3 	udiv	r3, r1, r3
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	e030      	b.n	800a900 <HAL_SAI_Init+0x2e0>
 800a89e:	bf00      	nop
 800a8a0:	40015804 	.word	0x40015804
 800a8a4:	58005404 	.word	0x58005404
 800a8a8:	40015824 	.word	0x40015824
 800a8ac:	40015800 	.word	0x40015800
 800a8b0:	40015c04 	.word	0x40015c04
 800a8b4:	40015c24 	.word	0x40015c24
 800a8b8:	40015c00 	.word	0x40015c00
 800a8bc:	40016004 	.word	0x40016004
 800a8c0:	40016024 	.word	0x40016024
 800a8c4:	40016000 	.word	0x40016000
 800a8c8:	58005424 	.word	0x58005424
 800a8cc:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8d8:	d101      	bne.n	800a8de <HAL_SAI_Init+0x2be>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e000      	b.n	800a8e0 <HAL_SAI_Init+0x2c0>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	fb02 f303 	mul.w	r3, r2, r3
 800a8f8:	021b      	lsls	r3, r3, #8
 800a8fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a8fe:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	4a95      	ldr	r2, [pc, #596]	; (800ab58 <HAL_SAI_Init+0x538>)
 800a904:	fba2 2303 	umull	r2, r3, r2, r3
 800a908:	08da      	lsrs	r2, r3, #3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a90e:	6939      	ldr	r1, [r7, #16]
 800a910:	4b91      	ldr	r3, [pc, #580]	; (800ab58 <HAL_SAI_Init+0x538>)
 800a912:	fba3 2301 	umull	r2, r3, r3, r1
 800a916:	08da      	lsrs	r2, r3, #3
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	005b      	lsls	r3, r3, #1
 800a920:	1aca      	subs	r2, r1, r3
 800a922:	2a08      	cmp	r2, #8
 800a924:	d904      	bls.n	800a930 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a934:	2b04      	cmp	r3, #4
 800a936:	d104      	bne.n	800a942 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	085a      	lsrs	r2, r3, #1
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <HAL_SAI_Init+0x332>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d109      	bne.n	800a966 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_SAI_Init+0x33e>
 800a95a:	2300      	movs	r3, #0
 800a95c:	e001      	b.n	800a962 <HAL_SAI_Init+0x342>
 800a95e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a962:	623b      	str	r3, [r7, #32]
 800a964:	e008      	b.n	800a978 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d102      	bne.n	800a974 <HAL_SAI_Init+0x354>
 800a96e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a972:	e000      	b.n	800a976 <HAL_SAI_Init+0x356>
 800a974:	2300      	movs	r3, #0
 800a976:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a978:	f7f8 f93e 	bl	8002bf8 <HAL_GetREVID>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a982:	d331      	bcc.n	800a9e8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6819      	ldr	r1, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b73      	ldr	r3, [pc, #460]	; (800ab5c <HAL_SAI_Init+0x53c>)
 800a990:	400b      	ands	r3, r1
 800a992:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6819      	ldr	r1, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9a8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a9bc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9c8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	051b      	lsls	r3, r3, #20
 800a9d0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a9d6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	e02d      	b.n	800aa44 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6819      	ldr	r1, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	4b5b      	ldr	r3, [pc, #364]	; (800ab60 <HAL_SAI_Init+0x540>)
 800a9f4:	400b      	ands	r3, r1
 800a9f6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6819      	ldr	r1, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa06:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa0c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa12:	431a      	orrs	r2, r3
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aa20:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aa2c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa32:	051b      	lsls	r3, r3, #20
 800aa34:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aa3a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6859      	ldr	r1, [r3, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b45      	ldr	r3, [pc, #276]	; (800ab64 <HAL_SAI_Init+0x544>)
 800aa50:	400b      	ands	r3, r1
 800aa52:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6859      	ldr	r1, [r3, #4]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69da      	ldr	r2, [r3, #28]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa62:	431a      	orrs	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6899      	ldr	r1, [r3, #8]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	4b3a      	ldr	r3, [pc, #232]	; (800ab68 <HAL_SAI_Init+0x548>)
 800aa7e:	400b      	ands	r3, r1
 800aa80:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6899      	ldr	r1, [r3, #8]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aa92:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800aa98:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800aa9e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800aaa8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68d9      	ldr	r1, [r3, #12]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800aac0:	400b      	ands	r3, r1
 800aac2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68d9      	ldr	r1, [r3, #12]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aada:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae0:	3b01      	subs	r3, #1
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <HAL_SAI_Init+0x54c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d004      	beq.n	800ab02 <HAL_SAI_Init+0x4e2>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a1c      	ldr	r2, [pc, #112]	; (800ab70 <HAL_SAI_Init+0x550>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d119      	bne.n	800ab36 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab06:	f023 0201 	bic.w	r2, r3, #1
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d10e      	bne.n	800ab36 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab20:	3b01      	subs	r3, #1
 800ab22:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ab24:	431a      	orrs	r2, r3
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2e:	f043 0201 	orr.w	r2, r3, #1
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3728      	adds	r7, #40	; 0x28
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	cccccccd 	.word	0xcccccccd
 800ab5c:	f005c010 	.word	0xf005c010
 800ab60:	f805c010 	.word	0xf805c010
 800ab64:	ffff1ff0 	.word	0xffff1ff0
 800ab68:	fff88000 	.word	0xfff88000
 800ab6c:	40015804 	.word	0x40015804
 800ab70:	58005404 	.word	0x58005404

0800ab74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ab7c:	4b18      	ldr	r3, [pc, #96]	; (800abe0 <SAI_Disable+0x6c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a18      	ldr	r2, [pc, #96]	; (800abe4 <SAI_Disable+0x70>)
 800ab82:	fba2 2303 	umull	r2, r3, r2, r3
 800ab86:	0b1b      	lsrs	r3, r3, #12
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ab9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10a      	bne.n	800abbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	72fb      	strb	r3, [r7, #11]
      break;
 800abba:	e009      	b.n	800abd0 <SAI_Disable+0x5c>
    }
    count--;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e7      	bne.n	800aba0 <SAI_Disable+0x2c>

  return status;
 800abd0:	7afb      	ldrb	r3, [r7, #11]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	24000000 	.word	0x24000000
 800abe4:	95cbec1b 	.word	0x95cbec1b

0800abe8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e02b      	b.n	800ac54 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d106      	bne.n	800ac16 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7f7 fd7b 	bl	800270c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2202      	movs	r2, #2
 800ac1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4619      	mov	r1, r3
 800ac28:	4610      	mov	r0, r2
 800ac2a:	f001 fabd 	bl	800c1a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	461a      	mov	r2, r3
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	f001 fb11 	bl	800c260 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ac3e:	4b07      	ldr	r3, [pc, #28]	; (800ac5c <HAL_SDRAM_Init+0x74>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a06      	ldr	r2, [pc, #24]	; (800ac5c <HAL_SDRAM_Init+0x74>)
 800ac44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac48:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	52004000 	.word	0x52004000

0800ac60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e10f      	b.n	800ae92 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a87      	ldr	r2, [pc, #540]	; (800ae9c <HAL_SPI_Init+0x23c>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d00f      	beq.n	800aca2 <HAL_SPI_Init+0x42>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a86      	ldr	r2, [pc, #536]	; (800aea0 <HAL_SPI_Init+0x240>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d00a      	beq.n	800aca2 <HAL_SPI_Init+0x42>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a84      	ldr	r2, [pc, #528]	; (800aea4 <HAL_SPI_Init+0x244>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d005      	beq.n	800aca2 <HAL_SPI_Init+0x42>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	2b0f      	cmp	r3, #15
 800ac9c:	d901      	bls.n	800aca2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e0f7      	b.n	800ae92 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f900 	bl	800aea8 <SPI_GetPacketSize>
 800aca8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a7b      	ldr	r2, [pc, #492]	; (800ae9c <HAL_SPI_Init+0x23c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d00c      	beq.n	800acce <HAL_SPI_Init+0x6e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a79      	ldr	r2, [pc, #484]	; (800aea0 <HAL_SPI_Init+0x240>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d007      	beq.n	800acce <HAL_SPI_Init+0x6e>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a78      	ldr	r2, [pc, #480]	; (800aea4 <HAL_SPI_Init+0x244>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d002      	beq.n	800acce <HAL_SPI_Init+0x6e>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b08      	cmp	r3, #8
 800accc:	d811      	bhi.n	800acf2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acd2:	4a72      	ldr	r2, [pc, #456]	; (800ae9c <HAL_SPI_Init+0x23c>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d009      	beq.n	800acec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a70      	ldr	r2, [pc, #448]	; (800aea0 <HAL_SPI_Init+0x240>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d004      	beq.n	800acec <HAL_SPI_Init+0x8c>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a6f      	ldr	r2, [pc, #444]	; (800aea4 <HAL_SPI_Init+0x244>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d104      	bne.n	800acf6 <HAL_SPI_Init+0x96>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b10      	cmp	r3, #16
 800acf0:	d901      	bls.n	800acf6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e0cd      	b.n	800ae92 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7f7 fa92 	bl	8002234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2202      	movs	r2, #2
 800ad14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 0201 	bic.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ad32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad3c:	d119      	bne.n	800ad72 <HAL_SPI_Init+0x112>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad46:	d103      	bne.n	800ad50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d008      	beq.n	800ad62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10c      	bne.n	800ad72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad60:	d107      	bne.n	800ad72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00f      	beq.n	800ad9e <HAL_SPI_Init+0x13e>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	2b06      	cmp	r3, #6
 800ad84:	d90b      	bls.n	800ad9e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	e007      	b.n	800adae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69da      	ldr	r2, [r3, #28]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb6:	431a      	orrs	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	431a      	orrs	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc0:	ea42 0103 	orr.w	r1, r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	431a      	orrs	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	431a      	orrs	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae02:	431a      	orrs	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae0e:	ea42 0103 	orr.w	r1, r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d113      	bne.n	800ae4e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0201 	bic.w	r2, r2, #1
 800ae5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	40013000 	.word	0x40013000
 800aea0:	40003800 	.word	0x40003800
 800aea4:	40003c00 	.word	0x40003c00

0800aea8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	3307      	adds	r3, #7
 800aec6:	08db      	lsrs	r3, r3, #3
 800aec8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	fb02 f303 	mul.w	r3, r2, r3
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e042      	b.n	800af76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7f7 fa60 	bl	80023c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2224      	movs	r2, #36	; 0x24
 800af0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 0201 	bic.w	r2, r2, #1
 800af1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f8bb 	bl	800b09c <UART_SetConfig>
 800af26:	4603      	mov	r3, r0
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e022      	b.n	800af76 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fe17 	bl	800bb6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f042 0201 	orr.w	r2, r2, #1
 800af6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fe9e 	bl	800bcb0 <UART_CheckIdleState>
 800af74:	4603      	mov	r3, r0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b08a      	sub	sp, #40	; 0x28
 800af82:	af02      	add	r7, sp, #8
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	60b9      	str	r1, [r7, #8]
 800af88:	603b      	str	r3, [r7, #0]
 800af8a:	4613      	mov	r3, r2
 800af8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af94:	2b20      	cmp	r3, #32
 800af96:	d17b      	bne.n	800b090 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <HAL_UART_Transmit+0x26>
 800af9e:	88fb      	ldrh	r3, [r7, #6]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e074      	b.n	800b092 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2221      	movs	r2, #33	; 0x21
 800afb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afb8:	f7f7 fdee 	bl	8002b98 <HAL_GetTick>
 800afbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	88fa      	ldrh	r2, [r7, #6]
 800afc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd6:	d108      	bne.n	800afea <HAL_UART_Transmit+0x6c>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	61bb      	str	r3, [r7, #24]
 800afe8:	e003      	b.n	800aff2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aff2:	e030      	b.n	800b056 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2200      	movs	r2, #0
 800affc:	2180      	movs	r1, #128	; 0x80
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 ff00 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e03d      	b.n	800b092 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	3302      	adds	r3, #2
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	e007      	b.n	800b044 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	781a      	ldrb	r2, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	3301      	adds	r3, #1
 800b042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1c8      	bne.n	800aff4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2200      	movs	r2, #0
 800b06a:	2140      	movs	r1, #64	; 0x40
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 fec9 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d005      	beq.n	800b084 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e006      	b.n	800b092 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b09c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a0:	b092      	sub	sp, #72	; 0x48
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	4bbe      	ldr	r3, [pc, #760]	; (800b3c4 <UART_SetConfig+0x328>)
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	6812      	ldr	r2, [r2, #0]
 800b0d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0d4:	430b      	orrs	r3, r1
 800b0d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4ab3      	ldr	r2, [pc, #716]	; (800b3c8 <UART_SetConfig+0x32c>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d004      	beq.n	800b108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b104:	4313      	orrs	r3, r2
 800b106:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	4baf      	ldr	r3, [pc, #700]	; (800b3cc <UART_SetConfig+0x330>)
 800b110:	4013      	ands	r3, r2
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	6812      	ldr	r2, [r2, #0]
 800b116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b118:	430b      	orrs	r3, r1
 800b11a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b122:	f023 010f 	bic.w	r1, r3, #15
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4aa6      	ldr	r2, [pc, #664]	; (800b3d0 <UART_SetConfig+0x334>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d177      	bne.n	800b22c <UART_SetConfig+0x190>
 800b13c:	4ba5      	ldr	r3, [pc, #660]	; (800b3d4 <UART_SetConfig+0x338>)
 800b13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b144:	2b28      	cmp	r3, #40	; 0x28
 800b146:	d86d      	bhi.n	800b224 <UART_SetConfig+0x188>
 800b148:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <UART_SetConfig+0xb4>)
 800b14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14e:	bf00      	nop
 800b150:	0800b1f5 	.word	0x0800b1f5
 800b154:	0800b225 	.word	0x0800b225
 800b158:	0800b225 	.word	0x0800b225
 800b15c:	0800b225 	.word	0x0800b225
 800b160:	0800b225 	.word	0x0800b225
 800b164:	0800b225 	.word	0x0800b225
 800b168:	0800b225 	.word	0x0800b225
 800b16c:	0800b225 	.word	0x0800b225
 800b170:	0800b1fd 	.word	0x0800b1fd
 800b174:	0800b225 	.word	0x0800b225
 800b178:	0800b225 	.word	0x0800b225
 800b17c:	0800b225 	.word	0x0800b225
 800b180:	0800b225 	.word	0x0800b225
 800b184:	0800b225 	.word	0x0800b225
 800b188:	0800b225 	.word	0x0800b225
 800b18c:	0800b225 	.word	0x0800b225
 800b190:	0800b205 	.word	0x0800b205
 800b194:	0800b225 	.word	0x0800b225
 800b198:	0800b225 	.word	0x0800b225
 800b19c:	0800b225 	.word	0x0800b225
 800b1a0:	0800b225 	.word	0x0800b225
 800b1a4:	0800b225 	.word	0x0800b225
 800b1a8:	0800b225 	.word	0x0800b225
 800b1ac:	0800b225 	.word	0x0800b225
 800b1b0:	0800b20d 	.word	0x0800b20d
 800b1b4:	0800b225 	.word	0x0800b225
 800b1b8:	0800b225 	.word	0x0800b225
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b225 	.word	0x0800b225
 800b1c4:	0800b225 	.word	0x0800b225
 800b1c8:	0800b225 	.word	0x0800b225
 800b1cc:	0800b225 	.word	0x0800b225
 800b1d0:	0800b215 	.word	0x0800b215
 800b1d4:	0800b225 	.word	0x0800b225
 800b1d8:	0800b225 	.word	0x0800b225
 800b1dc:	0800b225 	.word	0x0800b225
 800b1e0:	0800b225 	.word	0x0800b225
 800b1e4:	0800b225 	.word	0x0800b225
 800b1e8:	0800b225 	.word	0x0800b225
 800b1ec:	0800b225 	.word	0x0800b225
 800b1f0:	0800b21d 	.word	0x0800b21d
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fa:	e222      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b202:	e21e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b204:	2308      	movs	r3, #8
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20a:	e21a      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b212:	e216      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b214:	2320      	movs	r3, #32
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21a:	e212      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b21c:	2340      	movs	r3, #64	; 0x40
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b222:	e20e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b224:	2380      	movs	r3, #128	; 0x80
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22a:	e20a      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a69      	ldr	r2, [pc, #420]	; (800b3d8 <UART_SetConfig+0x33c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d130      	bne.n	800b298 <UART_SetConfig+0x1fc>
 800b236:	4b67      	ldr	r3, [pc, #412]	; (800b3d4 <UART_SetConfig+0x338>)
 800b238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23a:	f003 0307 	and.w	r3, r3, #7
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d826      	bhi.n	800b290 <UART_SetConfig+0x1f4>
 800b242:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <UART_SetConfig+0x1ac>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b261 	.word	0x0800b261
 800b24c:	0800b269 	.word	0x0800b269
 800b250:	0800b271 	.word	0x0800b271
 800b254:	0800b279 	.word	0x0800b279
 800b258:	0800b281 	.word	0x0800b281
 800b25c:	0800b289 	.word	0x0800b289
 800b260:	2300      	movs	r3, #0
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e1ec      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b268:	2304      	movs	r3, #4
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e1e8      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b270:	2308      	movs	r3, #8
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b276:	e1e4      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b278:	2310      	movs	r3, #16
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e1e0      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b280:	2320      	movs	r3, #32
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b286:	e1dc      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b288:	2340      	movs	r3, #64	; 0x40
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28e:	e1d8      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b290:	2380      	movs	r3, #128	; 0x80
 800b292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b296:	e1d4      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a4f      	ldr	r2, [pc, #316]	; (800b3dc <UART_SetConfig+0x340>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d130      	bne.n	800b304 <UART_SetConfig+0x268>
 800b2a2:	4b4c      	ldr	r3, [pc, #304]	; (800b3d4 <UART_SetConfig+0x338>)
 800b2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b05      	cmp	r3, #5
 800b2ac:	d826      	bhi.n	800b2fc <UART_SetConfig+0x260>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <UART_SetConfig+0x218>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b2cd 	.word	0x0800b2cd
 800b2b8:	0800b2d5 	.word	0x0800b2d5
 800b2bc:	0800b2dd 	.word	0x0800b2dd
 800b2c0:	0800b2e5 	.word	0x0800b2e5
 800b2c4:	0800b2ed 	.word	0x0800b2ed
 800b2c8:	0800b2f5 	.word	0x0800b2f5
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d2:	e1b6      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b2d4:	2304      	movs	r3, #4
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2da:	e1b2      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b2dc:	2308      	movs	r3, #8
 800b2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e2:	e1ae      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b2e4:	2310      	movs	r3, #16
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ea:	e1aa      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f2:	e1a6      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b2f4:	2340      	movs	r3, #64	; 0x40
 800b2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fa:	e1a2      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b2fc:	2380      	movs	r3, #128	; 0x80
 800b2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b302:	e19e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a35      	ldr	r2, [pc, #212]	; (800b3e0 <UART_SetConfig+0x344>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d130      	bne.n	800b370 <UART_SetConfig+0x2d4>
 800b30e:	4b31      	ldr	r3, [pc, #196]	; (800b3d4 <UART_SetConfig+0x338>)
 800b310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	2b05      	cmp	r3, #5
 800b318:	d826      	bhi.n	800b368 <UART_SetConfig+0x2cc>
 800b31a:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0x284>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b339 	.word	0x0800b339
 800b324:	0800b341 	.word	0x0800b341
 800b328:	0800b349 	.word	0x0800b349
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b359 	.word	0x0800b359
 800b334:	0800b361 	.word	0x0800b361
 800b338:	2300      	movs	r3, #0
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33e:	e180      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b340:	2304      	movs	r3, #4
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b346:	e17c      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b348:	2308      	movs	r3, #8
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34e:	e178      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b350:	2310      	movs	r3, #16
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b356:	e174      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b358:	2320      	movs	r3, #32
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35e:	e170      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b360:	2340      	movs	r3, #64	; 0x40
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b366:	e16c      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b368:	2380      	movs	r3, #128	; 0x80
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36e:	e168      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a1b      	ldr	r2, [pc, #108]	; (800b3e4 <UART_SetConfig+0x348>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d142      	bne.n	800b400 <UART_SetConfig+0x364>
 800b37a:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <UART_SetConfig+0x338>)
 800b37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	2b05      	cmp	r3, #5
 800b384:	d838      	bhi.n	800b3f8 <UART_SetConfig+0x35c>
 800b386:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <UART_SetConfig+0x2f0>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b3a5 	.word	0x0800b3a5
 800b390:	0800b3ad 	.word	0x0800b3ad
 800b394:	0800b3b5 	.word	0x0800b3b5
 800b398:	0800b3bd 	.word	0x0800b3bd
 800b39c:	0800b3e9 	.word	0x0800b3e9
 800b3a0:	0800b3f1 	.word	0x0800b3f1
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3aa:	e14a      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b2:	e146      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ba:	e142      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b3bc:	2310      	movs	r3, #16
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c2:	e13e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b3c4:	cfff69f3 	.word	0xcfff69f3
 800b3c8:	58000c00 	.word	0x58000c00
 800b3cc:	11fff4ff 	.word	0x11fff4ff
 800b3d0:	40011000 	.word	0x40011000
 800b3d4:	58024400 	.word	0x58024400
 800b3d8:	40004400 	.word	0x40004400
 800b3dc:	40004800 	.word	0x40004800
 800b3e0:	40004c00 	.word	0x40004c00
 800b3e4:	40005000 	.word	0x40005000
 800b3e8:	2320      	movs	r3, #32
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e128      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b3f0:	2340      	movs	r3, #64	; 0x40
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e124      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b3f8:	2380      	movs	r3, #128	; 0x80
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fe:	e120      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4acb      	ldr	r2, [pc, #812]	; (800b734 <UART_SetConfig+0x698>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d176      	bne.n	800b4f8 <UART_SetConfig+0x45c>
 800b40a:	4bcb      	ldr	r3, [pc, #812]	; (800b738 <UART_SetConfig+0x69c>)
 800b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b412:	2b28      	cmp	r3, #40	; 0x28
 800b414:	d86c      	bhi.n	800b4f0 <UART_SetConfig+0x454>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <UART_SetConfig+0x380>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b4c1 	.word	0x0800b4c1
 800b420:	0800b4f1 	.word	0x0800b4f1
 800b424:	0800b4f1 	.word	0x0800b4f1
 800b428:	0800b4f1 	.word	0x0800b4f1
 800b42c:	0800b4f1 	.word	0x0800b4f1
 800b430:	0800b4f1 	.word	0x0800b4f1
 800b434:	0800b4f1 	.word	0x0800b4f1
 800b438:	0800b4f1 	.word	0x0800b4f1
 800b43c:	0800b4c9 	.word	0x0800b4c9
 800b440:	0800b4f1 	.word	0x0800b4f1
 800b444:	0800b4f1 	.word	0x0800b4f1
 800b448:	0800b4f1 	.word	0x0800b4f1
 800b44c:	0800b4f1 	.word	0x0800b4f1
 800b450:	0800b4f1 	.word	0x0800b4f1
 800b454:	0800b4f1 	.word	0x0800b4f1
 800b458:	0800b4f1 	.word	0x0800b4f1
 800b45c:	0800b4d1 	.word	0x0800b4d1
 800b460:	0800b4f1 	.word	0x0800b4f1
 800b464:	0800b4f1 	.word	0x0800b4f1
 800b468:	0800b4f1 	.word	0x0800b4f1
 800b46c:	0800b4f1 	.word	0x0800b4f1
 800b470:	0800b4f1 	.word	0x0800b4f1
 800b474:	0800b4f1 	.word	0x0800b4f1
 800b478:	0800b4f1 	.word	0x0800b4f1
 800b47c:	0800b4d9 	.word	0x0800b4d9
 800b480:	0800b4f1 	.word	0x0800b4f1
 800b484:	0800b4f1 	.word	0x0800b4f1
 800b488:	0800b4f1 	.word	0x0800b4f1
 800b48c:	0800b4f1 	.word	0x0800b4f1
 800b490:	0800b4f1 	.word	0x0800b4f1
 800b494:	0800b4f1 	.word	0x0800b4f1
 800b498:	0800b4f1 	.word	0x0800b4f1
 800b49c:	0800b4e1 	.word	0x0800b4e1
 800b4a0:	0800b4f1 	.word	0x0800b4f1
 800b4a4:	0800b4f1 	.word	0x0800b4f1
 800b4a8:	0800b4f1 	.word	0x0800b4f1
 800b4ac:	0800b4f1 	.word	0x0800b4f1
 800b4b0:	0800b4f1 	.word	0x0800b4f1
 800b4b4:	0800b4f1 	.word	0x0800b4f1
 800b4b8:	0800b4f1 	.word	0x0800b4f1
 800b4bc:	0800b4e9 	.word	0x0800b4e9
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c6:	e0bc      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4c8:	2304      	movs	r3, #4
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ce:	e0b8      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4d0:	2308      	movs	r3, #8
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d6:	e0b4      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4d8:	2310      	movs	r3, #16
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4de:	e0b0      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4e0:	2320      	movs	r3, #32
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e6:	e0ac      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4e8:	2340      	movs	r3, #64	; 0x40
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ee:	e0a8      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4f0:	2380      	movs	r3, #128	; 0x80
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f6:	e0a4      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a8f      	ldr	r2, [pc, #572]	; (800b73c <UART_SetConfig+0x6a0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d130      	bne.n	800b564 <UART_SetConfig+0x4c8>
 800b502:	4b8d      	ldr	r3, [pc, #564]	; (800b738 <UART_SetConfig+0x69c>)
 800b504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b506:	f003 0307 	and.w	r3, r3, #7
 800b50a:	2b05      	cmp	r3, #5
 800b50c:	d826      	bhi.n	800b55c <UART_SetConfig+0x4c0>
 800b50e:	a201      	add	r2, pc, #4	; (adr r2, 800b514 <UART_SetConfig+0x478>)
 800b510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b514:	0800b52d 	.word	0x0800b52d
 800b518:	0800b535 	.word	0x0800b535
 800b51c:	0800b53d 	.word	0x0800b53d
 800b520:	0800b545 	.word	0x0800b545
 800b524:	0800b54d 	.word	0x0800b54d
 800b528:	0800b555 	.word	0x0800b555
 800b52c:	2300      	movs	r3, #0
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e086      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b534:	2304      	movs	r3, #4
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53a:	e082      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b53c:	2308      	movs	r3, #8
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b542:	e07e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b544:	2310      	movs	r3, #16
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54a:	e07a      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b54c:	2320      	movs	r3, #32
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b552:	e076      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b554:	2340      	movs	r3, #64	; 0x40
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55a:	e072      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b562:	e06e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a75      	ldr	r2, [pc, #468]	; (800b740 <UART_SetConfig+0x6a4>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d130      	bne.n	800b5d0 <UART_SetConfig+0x534>
 800b56e:	4b72      	ldr	r3, [pc, #456]	; (800b738 <UART_SetConfig+0x69c>)
 800b570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	2b05      	cmp	r3, #5
 800b578:	d826      	bhi.n	800b5c8 <UART_SetConfig+0x52c>
 800b57a:	a201      	add	r2, pc, #4	; (adr r2, 800b580 <UART_SetConfig+0x4e4>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b599 	.word	0x0800b599
 800b584:	0800b5a1 	.word	0x0800b5a1
 800b588:	0800b5a9 	.word	0x0800b5a9
 800b58c:	0800b5b1 	.word	0x0800b5b1
 800b590:	0800b5b9 	.word	0x0800b5b9
 800b594:	0800b5c1 	.word	0x0800b5c1
 800b598:	2300      	movs	r3, #0
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e050      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a6:	e04c      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5a8:	2308      	movs	r3, #8
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ae:	e048      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b6:	e044      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5b8:	2320      	movs	r3, #32
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5be:	e040      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5c0:	2340      	movs	r3, #64	; 0x40
 800b5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c6:	e03c      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5c8:	2380      	movs	r3, #128	; 0x80
 800b5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ce:	e038      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a5b      	ldr	r2, [pc, #364]	; (800b744 <UART_SetConfig+0x6a8>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d130      	bne.n	800b63c <UART_SetConfig+0x5a0>
 800b5da:	4b57      	ldr	r3, [pc, #348]	; (800b738 <UART_SetConfig+0x69c>)
 800b5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5de:	f003 0307 	and.w	r3, r3, #7
 800b5e2:	2b05      	cmp	r3, #5
 800b5e4:	d826      	bhi.n	800b634 <UART_SetConfig+0x598>
 800b5e6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <UART_SetConfig+0x550>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b605 	.word	0x0800b605
 800b5f0:	0800b60d 	.word	0x0800b60d
 800b5f4:	0800b615 	.word	0x0800b615
 800b5f8:	0800b61d 	.word	0x0800b61d
 800b5fc:	0800b625 	.word	0x0800b625
 800b600:	0800b62d 	.word	0x0800b62d
 800b604:	2302      	movs	r3, #2
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60a:	e01a      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b60c:	2304      	movs	r3, #4
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b612:	e016      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b614:	2308      	movs	r3, #8
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61a:	e012      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b61c:	2310      	movs	r3, #16
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b622:	e00e      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b624:	2320      	movs	r3, #32
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62a:	e00a      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b62c:	2340      	movs	r3, #64	; 0x40
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b632:	e006      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b634:	2380      	movs	r3, #128	; 0x80
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63a:	e002      	b.n	800b642 <UART_SetConfig+0x5a6>
 800b63c:	2380      	movs	r3, #128	; 0x80
 800b63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a3f      	ldr	r2, [pc, #252]	; (800b744 <UART_SetConfig+0x6a8>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	f040 80f8 	bne.w	800b83e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b64e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b652:	2b20      	cmp	r3, #32
 800b654:	dc46      	bgt.n	800b6e4 <UART_SetConfig+0x648>
 800b656:	2b02      	cmp	r3, #2
 800b658:	f2c0 8082 	blt.w	800b760 <UART_SetConfig+0x6c4>
 800b65c:	3b02      	subs	r3, #2
 800b65e:	2b1e      	cmp	r3, #30
 800b660:	d87e      	bhi.n	800b760 <UART_SetConfig+0x6c4>
 800b662:	a201      	add	r2, pc, #4	; (adr r2, 800b668 <UART_SetConfig+0x5cc>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b6eb 	.word	0x0800b6eb
 800b66c:	0800b761 	.word	0x0800b761
 800b670:	0800b6f3 	.word	0x0800b6f3
 800b674:	0800b761 	.word	0x0800b761
 800b678:	0800b761 	.word	0x0800b761
 800b67c:	0800b761 	.word	0x0800b761
 800b680:	0800b703 	.word	0x0800b703
 800b684:	0800b761 	.word	0x0800b761
 800b688:	0800b761 	.word	0x0800b761
 800b68c:	0800b761 	.word	0x0800b761
 800b690:	0800b761 	.word	0x0800b761
 800b694:	0800b761 	.word	0x0800b761
 800b698:	0800b761 	.word	0x0800b761
 800b69c:	0800b761 	.word	0x0800b761
 800b6a0:	0800b713 	.word	0x0800b713
 800b6a4:	0800b761 	.word	0x0800b761
 800b6a8:	0800b761 	.word	0x0800b761
 800b6ac:	0800b761 	.word	0x0800b761
 800b6b0:	0800b761 	.word	0x0800b761
 800b6b4:	0800b761 	.word	0x0800b761
 800b6b8:	0800b761 	.word	0x0800b761
 800b6bc:	0800b761 	.word	0x0800b761
 800b6c0:	0800b761 	.word	0x0800b761
 800b6c4:	0800b761 	.word	0x0800b761
 800b6c8:	0800b761 	.word	0x0800b761
 800b6cc:	0800b761 	.word	0x0800b761
 800b6d0:	0800b761 	.word	0x0800b761
 800b6d4:	0800b761 	.word	0x0800b761
 800b6d8:	0800b761 	.word	0x0800b761
 800b6dc:	0800b761 	.word	0x0800b761
 800b6e0:	0800b753 	.word	0x0800b753
 800b6e4:	2b40      	cmp	r3, #64	; 0x40
 800b6e6:	d037      	beq.n	800b758 <UART_SetConfig+0x6bc>
 800b6e8:	e03a      	b.n	800b760 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b6ea:	f7fe f90d 	bl	8009908 <HAL_RCCEx_GetD3PCLK1Freq>
 800b6ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b6f0:	e03c      	b.n	800b76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe f91c 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b700:	e034      	b.n	800b76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b702:	f107 0318 	add.w	r3, r7, #24
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe fa68 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b710:	e02c      	b.n	800b76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b712:	4b09      	ldr	r3, [pc, #36]	; (800b738 <UART_SetConfig+0x69c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0320 	and.w	r3, r3, #32
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d016      	beq.n	800b74c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b71e:	4b06      	ldr	r3, [pc, #24]	; (800b738 <UART_SetConfig+0x69c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	08db      	lsrs	r3, r3, #3
 800b724:	f003 0303 	and.w	r3, r3, #3
 800b728:	4a07      	ldr	r2, [pc, #28]	; (800b748 <UART_SetConfig+0x6ac>)
 800b72a:	fa22 f303 	lsr.w	r3, r2, r3
 800b72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b730:	e01c      	b.n	800b76c <UART_SetConfig+0x6d0>
 800b732:	bf00      	nop
 800b734:	40011400 	.word	0x40011400
 800b738:	58024400 	.word	0x58024400
 800b73c:	40007800 	.word	0x40007800
 800b740:	40007c00 	.word	0x40007c00
 800b744:	58000c00 	.word	0x58000c00
 800b748:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b74c:	4b9d      	ldr	r3, [pc, #628]	; (800b9c4 <UART_SetConfig+0x928>)
 800b74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b750:	e00c      	b.n	800b76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b752:	4b9d      	ldr	r3, [pc, #628]	; (800b9c8 <UART_SetConfig+0x92c>)
 800b754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b756:	e009      	b.n	800b76c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b75e:	e005      	b.n	800b76c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b76a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 81de 	beq.w	800bb30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	4a94      	ldr	r2, [pc, #592]	; (800b9cc <UART_SetConfig+0x930>)
 800b77a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b77e:	461a      	mov	r2, r3
 800b780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b782:	fbb3 f3f2 	udiv	r3, r3, r2
 800b786:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	4613      	mov	r3, r2
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	4413      	add	r3, r2
 800b792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b794:	429a      	cmp	r2, r3
 800b796:	d305      	bcc.n	800b7a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b79e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d903      	bls.n	800b7ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b7aa:	e1c1      	b.n	800bb30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	60bb      	str	r3, [r7, #8]
 800b7b2:	60fa      	str	r2, [r7, #12]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	4a84      	ldr	r2, [pc, #528]	; (800b9cc <UART_SetConfig+0x930>)
 800b7ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	607a      	str	r2, [r7, #4]
 800b7c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7ce:	f7f4 fddf 	bl	8000390 <__aeabi_uldivmod>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	4619      	mov	r1, r3
 800b7da:	f04f 0200 	mov.w	r2, #0
 800b7de:	f04f 0300 	mov.w	r3, #0
 800b7e2:	020b      	lsls	r3, r1, #8
 800b7e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7e8:	0202      	lsls	r2, r0, #8
 800b7ea:	6979      	ldr	r1, [r7, #20]
 800b7ec:	6849      	ldr	r1, [r1, #4]
 800b7ee:	0849      	lsrs	r1, r1, #1
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	eb12 0804 	adds.w	r8, r2, r4
 800b7fa:	eb43 0905 	adc.w	r9, r3, r5
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	469a      	mov	sl, r3
 800b806:	4693      	mov	fp, r2
 800b808:	4652      	mov	r2, sl
 800b80a:	465b      	mov	r3, fp
 800b80c:	4640      	mov	r0, r8
 800b80e:	4649      	mov	r1, r9
 800b810:	f7f4 fdbe 	bl	8000390 <__aeabi_uldivmod>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4613      	mov	r3, r2
 800b81a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b822:	d308      	bcc.n	800b836 <UART_SetConfig+0x79a>
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b82a:	d204      	bcs.n	800b836 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b832:	60da      	str	r2, [r3, #12]
 800b834:	e17c      	b.n	800bb30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b83c:	e178      	b.n	800bb30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b846:	f040 80c5 	bne.w	800b9d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b84a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b84e:	2b20      	cmp	r3, #32
 800b850:	dc48      	bgt.n	800b8e4 <UART_SetConfig+0x848>
 800b852:	2b00      	cmp	r3, #0
 800b854:	db7b      	blt.n	800b94e <UART_SetConfig+0x8b2>
 800b856:	2b20      	cmp	r3, #32
 800b858:	d879      	bhi.n	800b94e <UART_SetConfig+0x8b2>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <UART_SetConfig+0x7c4>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b8eb 	.word	0x0800b8eb
 800b864:	0800b8f3 	.word	0x0800b8f3
 800b868:	0800b94f 	.word	0x0800b94f
 800b86c:	0800b94f 	.word	0x0800b94f
 800b870:	0800b8fb 	.word	0x0800b8fb
 800b874:	0800b94f 	.word	0x0800b94f
 800b878:	0800b94f 	.word	0x0800b94f
 800b87c:	0800b94f 	.word	0x0800b94f
 800b880:	0800b90b 	.word	0x0800b90b
 800b884:	0800b94f 	.word	0x0800b94f
 800b888:	0800b94f 	.word	0x0800b94f
 800b88c:	0800b94f 	.word	0x0800b94f
 800b890:	0800b94f 	.word	0x0800b94f
 800b894:	0800b94f 	.word	0x0800b94f
 800b898:	0800b94f 	.word	0x0800b94f
 800b89c:	0800b94f 	.word	0x0800b94f
 800b8a0:	0800b91b 	.word	0x0800b91b
 800b8a4:	0800b94f 	.word	0x0800b94f
 800b8a8:	0800b94f 	.word	0x0800b94f
 800b8ac:	0800b94f 	.word	0x0800b94f
 800b8b0:	0800b94f 	.word	0x0800b94f
 800b8b4:	0800b94f 	.word	0x0800b94f
 800b8b8:	0800b94f 	.word	0x0800b94f
 800b8bc:	0800b94f 	.word	0x0800b94f
 800b8c0:	0800b94f 	.word	0x0800b94f
 800b8c4:	0800b94f 	.word	0x0800b94f
 800b8c8:	0800b94f 	.word	0x0800b94f
 800b8cc:	0800b94f 	.word	0x0800b94f
 800b8d0:	0800b94f 	.word	0x0800b94f
 800b8d4:	0800b94f 	.word	0x0800b94f
 800b8d8:	0800b94f 	.word	0x0800b94f
 800b8dc:	0800b94f 	.word	0x0800b94f
 800b8e0:	0800b941 	.word	0x0800b941
 800b8e4:	2b40      	cmp	r3, #64	; 0x40
 800b8e6:	d02e      	beq.n	800b946 <UART_SetConfig+0x8aa>
 800b8e8:	e031      	b.n	800b94e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ea:	f7fc f857 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 800b8ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8f0:	e033      	b.n	800b95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8f2:	f7fc f869 	bl	80079c8 <HAL_RCC_GetPCLK2Freq>
 800b8f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8f8:	e02f      	b.n	800b95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe f818 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b908:	e027      	b.n	800b95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b90a:	f107 0318 	add.w	r3, r7, #24
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f964 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b918:	e01f      	b.n	800b95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b91a:	4b2d      	ldr	r3, [pc, #180]	; (800b9d0 <UART_SetConfig+0x934>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d009      	beq.n	800b93a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b926:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <UART_SetConfig+0x934>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	08db      	lsrs	r3, r3, #3
 800b92c:	f003 0303 	and.w	r3, r3, #3
 800b930:	4a24      	ldr	r2, [pc, #144]	; (800b9c4 <UART_SetConfig+0x928>)
 800b932:	fa22 f303 	lsr.w	r3, r2, r3
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b938:	e00f      	b.n	800b95a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b93a:	4b22      	ldr	r3, [pc, #136]	; (800b9c4 <UART_SetConfig+0x928>)
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b93e:	e00c      	b.n	800b95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b940:	4b21      	ldr	r3, [pc, #132]	; (800b9c8 <UART_SetConfig+0x92c>)
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b944:	e009      	b.n	800b95a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b94c:	e005      	b.n	800b95a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 80e7 	beq.w	800bb30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	4a19      	ldr	r2, [pc, #100]	; (800b9cc <UART_SetConfig+0x930>)
 800b968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b96c:	461a      	mov	r2, r3
 800b96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b970:	fbb3 f3f2 	udiv	r3, r3, r2
 800b974:	005a      	lsls	r2, r3, #1
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	085b      	lsrs	r3, r3, #1
 800b97c:	441a      	add	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	fbb2 f3f3 	udiv	r3, r2, r3
 800b986:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	2b0f      	cmp	r3, #15
 800b98c:	d916      	bls.n	800b9bc <UART_SetConfig+0x920>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b994:	d212      	bcs.n	800b9bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	b29b      	uxth	r3, r3
 800b99a:	f023 030f 	bic.w	r3, r3, #15
 800b99e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	085b      	lsrs	r3, r3, #1
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b9b8:	60da      	str	r2, [r3, #12]
 800b9ba:	e0b9      	b.n	800bb30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b9c2:	e0b5      	b.n	800bb30 <UART_SetConfig+0xa94>
 800b9c4:	03d09000 	.word	0x03d09000
 800b9c8:	003d0900 	.word	0x003d0900
 800b9cc:	0800dac8 	.word	0x0800dac8
 800b9d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9d8:	2b20      	cmp	r3, #32
 800b9da:	dc49      	bgt.n	800ba70 <UART_SetConfig+0x9d4>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	db7c      	blt.n	800bada <UART_SetConfig+0xa3e>
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d87a      	bhi.n	800bada <UART_SetConfig+0xa3e>
 800b9e4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <UART_SetConfig+0x950>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800ba77 	.word	0x0800ba77
 800b9f0:	0800ba7f 	.word	0x0800ba7f
 800b9f4:	0800badb 	.word	0x0800badb
 800b9f8:	0800badb 	.word	0x0800badb
 800b9fc:	0800ba87 	.word	0x0800ba87
 800ba00:	0800badb 	.word	0x0800badb
 800ba04:	0800badb 	.word	0x0800badb
 800ba08:	0800badb 	.word	0x0800badb
 800ba0c:	0800ba97 	.word	0x0800ba97
 800ba10:	0800badb 	.word	0x0800badb
 800ba14:	0800badb 	.word	0x0800badb
 800ba18:	0800badb 	.word	0x0800badb
 800ba1c:	0800badb 	.word	0x0800badb
 800ba20:	0800badb 	.word	0x0800badb
 800ba24:	0800badb 	.word	0x0800badb
 800ba28:	0800badb 	.word	0x0800badb
 800ba2c:	0800baa7 	.word	0x0800baa7
 800ba30:	0800badb 	.word	0x0800badb
 800ba34:	0800badb 	.word	0x0800badb
 800ba38:	0800badb 	.word	0x0800badb
 800ba3c:	0800badb 	.word	0x0800badb
 800ba40:	0800badb 	.word	0x0800badb
 800ba44:	0800badb 	.word	0x0800badb
 800ba48:	0800badb 	.word	0x0800badb
 800ba4c:	0800badb 	.word	0x0800badb
 800ba50:	0800badb 	.word	0x0800badb
 800ba54:	0800badb 	.word	0x0800badb
 800ba58:	0800badb 	.word	0x0800badb
 800ba5c:	0800badb 	.word	0x0800badb
 800ba60:	0800badb 	.word	0x0800badb
 800ba64:	0800badb 	.word	0x0800badb
 800ba68:	0800badb 	.word	0x0800badb
 800ba6c:	0800bacd 	.word	0x0800bacd
 800ba70:	2b40      	cmp	r3, #64	; 0x40
 800ba72:	d02e      	beq.n	800bad2 <UART_SetConfig+0xa36>
 800ba74:	e031      	b.n	800bada <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba76:	f7fb ff91 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 800ba7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba7c:	e033      	b.n	800bae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba7e:	f7fb ffa3 	bl	80079c8 <HAL_RCC_GetPCLK2Freq>
 800ba82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba84:	e02f      	b.n	800bae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fd ff52 	bl	8009934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba94:	e027      	b.n	800bae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba96:	f107 0318 	add.w	r3, r7, #24
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe f89e 	bl	8009bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa4:	e01f      	b.n	800bae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baa6:	4b2d      	ldr	r3, [pc, #180]	; (800bb5c <UART_SetConfig+0xac0>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bab2:	4b2a      	ldr	r3, [pc, #168]	; (800bb5c <UART_SetConfig+0xac0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	08db      	lsrs	r3, r3, #3
 800bab8:	f003 0303 	and.w	r3, r3, #3
 800babc:	4a28      	ldr	r2, [pc, #160]	; (800bb60 <UART_SetConfig+0xac4>)
 800babe:	fa22 f303 	lsr.w	r3, r2, r3
 800bac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bac4:	e00f      	b.n	800bae6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bac6:	4b26      	ldr	r3, [pc, #152]	; (800bb60 <UART_SetConfig+0xac4>)
 800bac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baca:	e00c      	b.n	800bae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bacc:	4b25      	ldr	r3, [pc, #148]	; (800bb64 <UART_SetConfig+0xac8>)
 800bace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad0:	e009      	b.n	800bae6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad8:	e005      	b.n	800bae6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bada:	2300      	movs	r3, #0
 800badc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bae4:	bf00      	nop
    }

    if (pclk != 0U)
 800bae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d021      	beq.n	800bb30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	4a1d      	ldr	r2, [pc, #116]	; (800bb68 <UART_SetConfig+0xacc>)
 800baf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baf6:	461a      	mov	r2, r3
 800baf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafa:	fbb3 f2f2 	udiv	r2, r3, r2
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	441a      	add	r2, r3
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	2b0f      	cmp	r3, #15
 800bb14:	d909      	bls.n	800bb2a <UART_SetConfig+0xa8e>
 800bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1c:	d205      	bcs.n	800bb2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60da      	str	r2, [r3, #12]
 800bb28:	e002      	b.n	800bb30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2200      	movs	r2, #0
 800bb44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bb4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3748      	adds	r7, #72	; 0x48
 800bb54:	46bd      	mov	sp, r7
 800bb56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb5a:	bf00      	nop
 800bb5c:	58024400 	.word	0x58024400
 800bb60:	03d09000 	.word	0x03d09000
 800bb64:	003d0900 	.word	0x003d0900
 800bb68:	0800dac8 	.word	0x0800dac8

0800bb6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00a      	beq.n	800bb96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	430a      	orrs	r2, r1
 800bbb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbde:	f003 0308 	and.w	r3, r3, #8
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00a      	beq.n	800bbfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc00:	f003 0310 	and.w	r3, r3, #16
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00a      	beq.n	800bc1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d01a      	beq.n	800bc82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc6a:	d10a      	bne.n	800bc82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	430a      	orrs	r2, r1
 800bc80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	430a      	orrs	r2, r1
 800bca2:	605a      	str	r2, [r3, #4]
  }
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b098      	sub	sp, #96	; 0x60
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcc0:	f7f6 ff6a 	bl	8002b98 <HAL_GetTick>
 800bcc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b08      	cmp	r3, #8
 800bcd2:	d12f      	bne.n	800bd34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f88e 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d022      	beq.n	800bd34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	e853 3f00 	ldrex	r3, [r3]
 800bcfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd02:	653b      	str	r3, [r7, #80]	; 0x50
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd0c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd14:	e841 2300 	strex	r3, r2, [r1]
 800bd18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1e6      	bne.n	800bcee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2220      	movs	r2, #32
 800bd24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e063      	b.n	800bdfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	d149      	bne.n	800bdd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f857 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d03c      	beq.n	800bdd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	623b      	str	r3, [r7, #32]
   return(result);
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	633b      	str	r3, [r7, #48]	; 0x30
 800bd7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd82:	e841 2300 	strex	r3, r2, [r1]
 800bd86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e6      	bne.n	800bd5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3308      	adds	r3, #8
 800bd94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	e853 3f00 	ldrex	r3, [r3]
 800bd9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f023 0301 	bic.w	r3, r3, #1
 800bda4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3308      	adds	r3, #8
 800bdac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdae:	61fa      	str	r2, [r7, #28]
 800bdb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb2:	69b9      	ldr	r1, [r7, #24]
 800bdb4:	69fa      	ldr	r2, [r7, #28]
 800bdb6:	e841 2300 	strex	r3, r2, [r1]
 800bdba:	617b      	str	r3, [r7, #20]
   return(result);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1e5      	bne.n	800bd8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2220      	movs	r2, #32
 800bdc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	e012      	b.n	800bdfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2220      	movs	r2, #32
 800bde2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3758      	adds	r7, #88	; 0x58
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	4613      	mov	r3, r2
 800be12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be14:	e049      	b.n	800beaa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d045      	beq.n	800beaa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be1e:	f7f6 febb 	bl	8002b98 <HAL_GetTick>
 800be22:	4602      	mov	r2, r0
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	69ba      	ldr	r2, [r7, #24]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d302      	bcc.n	800be34 <UART_WaitOnFlagUntilTimeout+0x30>
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be34:	2303      	movs	r3, #3
 800be36:	e048      	b.n	800beca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 0304 	and.w	r3, r3, #4
 800be42:	2b00      	cmp	r3, #0
 800be44:	d031      	beq.n	800beaa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	69db      	ldr	r3, [r3, #28]
 800be4c:	f003 0308 	and.w	r3, r3, #8
 800be50:	2b08      	cmp	r3, #8
 800be52:	d110      	bne.n	800be76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2208      	movs	r2, #8
 800be5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f839 	bl	800bed4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2208      	movs	r2, #8
 800be66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e029      	b.n	800beca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be84:	d111      	bne.n	800beaa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 f81f 	bl	800bed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2220      	movs	r2, #32
 800be9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e00f      	b.n	800beca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	69da      	ldr	r2, [r3, #28]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4013      	ands	r3, r2
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	bf0c      	ite	eq
 800beba:	2301      	moveq	r3, #1
 800bebc:	2300      	movne	r3, #0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	461a      	mov	r2, r3
 800bec2:	79fb      	ldrb	r3, [r7, #7]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d0a6      	beq.n	800be16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
	...

0800bed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b095      	sub	sp, #84	; 0x54
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	e853 3f00 	ldrex	r3, [r3]
 800bee8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800befa:	643b      	str	r3, [r7, #64]	; 0x40
 800befc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e6      	bne.n	800bedc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3308      	adds	r3, #8
 800bf14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	e853 3f00 	ldrex	r3, [r3]
 800bf1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	4b1e      	ldr	r3, [pc, #120]	; (800bf9c <UART_EndRxTransfer+0xc8>)
 800bf22:	4013      	ands	r3, r2
 800bf24:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf36:	e841 2300 	strex	r3, r2, [r1]
 800bf3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1e5      	bne.n	800bf0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d118      	bne.n	800bf7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	e853 3f00 	ldrex	r3, [r3]
 800bf56:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f023 0310 	bic.w	r3, r3, #16
 800bf5e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf68:	61bb      	str	r3, [r7, #24]
 800bf6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6979      	ldr	r1, [r7, #20]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	613b      	str	r3, [r7, #16]
   return(result);
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e6      	bne.n	800bf4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bf90:	bf00      	nop
 800bf92:	3754      	adds	r7, #84	; 0x54
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	effffffe 	.word	0xeffffffe

0800bfa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d101      	bne.n	800bfb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	e027      	b.n	800c006 <HAL_UARTEx_DisableFifoMode+0x66>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2224      	movs	r2, #36	; 0x24
 800bfc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0201 	bic.w	r2, r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2220      	movs	r2, #32
 800bff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c026:	2302      	movs	r3, #2
 800c028:	e02d      	b.n	800c086 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2224      	movs	r2, #36	; 0x24
 800c036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f022 0201 	bic.w	r2, r2, #1
 800c050:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f850 	bl	800c10c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d101      	bne.n	800c0a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e02d      	b.n	800c102 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2224      	movs	r2, #36	; 0x24
 800c0b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f022 0201 	bic.w	r2, r2, #1
 800c0cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f812 	bl	800c10c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2220      	movs	r2, #32
 800c0f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d108      	bne.n	800c12e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c12c:	e031      	b.n	800c192 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c12e:	2310      	movs	r3, #16
 800c130:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c132:	2310      	movs	r3, #16
 800c134:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	0e5b      	lsrs	r3, r3, #25
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	f003 0307 	and.w	r3, r3, #7
 800c144:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	0f5b      	lsrs	r3, r3, #29
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	7b3a      	ldrb	r2, [r7, #12]
 800c15a:	4911      	ldr	r1, [pc, #68]	; (800c1a0 <UARTEx_SetNbDataToProcess+0x94>)
 800c15c:	5c8a      	ldrb	r2, [r1, r2]
 800c15e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c162:	7b3a      	ldrb	r2, [r7, #12]
 800c164:	490f      	ldr	r1, [pc, #60]	; (800c1a4 <UARTEx_SetNbDataToProcess+0x98>)
 800c166:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c168:	fb93 f3f2 	sdiv	r3, r3, r2
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	7b7a      	ldrb	r2, [r7, #13]
 800c178:	4909      	ldr	r1, [pc, #36]	; (800c1a0 <UARTEx_SetNbDataToProcess+0x94>)
 800c17a:	5c8a      	ldrb	r2, [r1, r2]
 800c17c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c180:	7b7a      	ldrb	r2, [r7, #13]
 800c182:	4908      	ldr	r1, [pc, #32]	; (800c1a4 <UARTEx_SetNbDataToProcess+0x98>)
 800c184:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c186:	fb93 f3f2 	sdiv	r3, r3, r2
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c192:	bf00      	nop
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	0800dae0 	.word	0x0800dae0
 800c1a4:	0800dae8 	.word	0x0800dae8

0800c1a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d121      	bne.n	800c1fe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4b27      	ldr	r3, [pc, #156]	; (800c25c <FMC_SDRAM_Init+0xb4>)
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	6851      	ldr	r1, [r2, #4]
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	6892      	ldr	r2, [r2, #8]
 800c1ca:	4311      	orrs	r1, r2
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	68d2      	ldr	r2, [r2, #12]
 800c1d0:	4311      	orrs	r1, r2
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	6912      	ldr	r2, [r2, #16]
 800c1d6:	4311      	orrs	r1, r2
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	6952      	ldr	r2, [r2, #20]
 800c1dc:	4311      	orrs	r1, r2
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	6992      	ldr	r2, [r2, #24]
 800c1e2:	4311      	orrs	r1, r2
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	69d2      	ldr	r2, [r2, #28]
 800c1e8:	4311      	orrs	r1, r2
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	6a12      	ldr	r2, [r2, #32]
 800c1ee:	4311      	orrs	r1, r2
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c1f4:	430a      	orrs	r2, r1
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	e026      	b.n	800c24c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	69d9      	ldr	r1, [r3, #28]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	4319      	orrs	r1, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	430b      	orrs	r3, r1
 800c216:	431a      	orrs	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <FMC_SDRAM_Init+0xb4>)
 800c222:	4013      	ands	r3, r2
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	6851      	ldr	r1, [r2, #4]
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	6892      	ldr	r2, [r2, #8]
 800c22c:	4311      	orrs	r1, r2
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	68d2      	ldr	r2, [r2, #12]
 800c232:	4311      	orrs	r1, r2
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	6912      	ldr	r2, [r2, #16]
 800c238:	4311      	orrs	r1, r2
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	6952      	ldr	r2, [r2, #20]
 800c23e:	4311      	orrs	r1, r2
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	6992      	ldr	r2, [r2, #24]
 800c244:	430a      	orrs	r2, r1
 800c246:	431a      	orrs	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	ffff8000 	.word	0xffff8000

0800c260 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d128      	bne.n	800c2c4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	1e59      	subs	r1, r3, #1
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	3b01      	subs	r3, #1
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	4319      	orrs	r1, r3
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	3b01      	subs	r3, #1
 800c290:	021b      	lsls	r3, r3, #8
 800c292:	4319      	orrs	r1, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	3b01      	subs	r3, #1
 800c29a:	031b      	lsls	r3, r3, #12
 800c29c:	4319      	orrs	r1, r3
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	041b      	lsls	r3, r3, #16
 800c2a6:	4319      	orrs	r1, r3
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	051b      	lsls	r3, r3, #20
 800c2b0:	4319      	orrs	r1, r3
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	061b      	lsls	r3, r3, #24
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	431a      	orrs	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	609a      	str	r2, [r3, #8]
 800c2c2:	e02d      	b.n	800c320 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	4b19      	ldr	r3, [pc, #100]	; (800c330 <FMC_SDRAM_Timing_Init+0xd0>)
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68d2      	ldr	r2, [r2, #12]
 800c2d0:	3a01      	subs	r2, #1
 800c2d2:	0311      	lsls	r1, r2, #12
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	6952      	ldr	r2, [r2, #20]
 800c2d8:	3a01      	subs	r2, #1
 800c2da:	0512      	lsls	r2, r2, #20
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	1e59      	subs	r1, r3, #1
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	4319      	orrs	r1, r3
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	3b01      	subs	r3, #1
 800c302:	021b      	lsls	r3, r3, #8
 800c304:	4319      	orrs	r1, r3
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	041b      	lsls	r3, r3, #16
 800c30e:	4319      	orrs	r1, r3
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	3b01      	subs	r3, #1
 800c316:	061b      	lsls	r3, r3, #24
 800c318:	430b      	orrs	r3, r1
 800c31a:	431a      	orrs	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	ff0f0fff 	.word	0xff0f0fff

0800c334 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c334:	b084      	sub	sp, #16
 800c336:	b480      	push	{r7}
 800c338:	b085      	sub	sp, #20
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	f107 001c 	add.w	r0, r7, #28
 800c342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c34a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c34c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c34e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800c352:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800c356:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800c35a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4313      	orrs	r3, r2
 800c360:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	4b07      	ldr	r3, [pc, #28]	; (800c384 <SDMMC_Init+0x50>)
 800c368:	4013      	ands	r3, r2
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	431a      	orrs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	b004      	add	sp, #16
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	ffc02c00 	.word	0xffc02c00

0800c388 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c396:	4618      	mov	r0, r3
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f043 0203 	orr.w	r2, r3, #3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0303 	and.w	r3, r3, #3
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c3fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c404:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c40a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	4b06      	ldr	r3, [pc, #24]	; (800c430 <SDMMC_SendCommand+0x50>)
 800c418:	4013      	ands	r3, r2
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	431a      	orrs	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	fffee0c0 	.word	0xfffee0c0

0800c434 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	b2db      	uxtb	r3, r3
}
 800c442:	4618      	mov	r0, r3
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c44e:	b480      	push	{r7}
 800c450:	b085      	sub	sp, #20
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3314      	adds	r3, #20
 800c45c:	461a      	mov	r2, r3
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	4413      	add	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c49a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c4a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c4a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0

}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c4da:	2310      	movs	r3, #16
 800c4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ee:	f107 0308 	add.w	r3, r7, #8
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7ff ff73 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4fe:	2110      	movs	r1, #16
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f935 	bl	800c770 <SDMMC_GetCmdResp1>
 800c506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c508:	69fb      	ldr	r3, [r7, #28]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3720      	adds	r7, #32
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b088      	sub	sp, #32
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c520:	2307      	movs	r3, #7
 800c522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c524:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c52a:	2300      	movs	r3, #0
 800c52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c52e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c534:	f107 0308 	add.w	r3, r7, #8
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff ff50 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c540:	f241 3288 	movw	r2, #5000	; 0x1388
 800c544:	2107      	movs	r1, #7
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f912 	bl	800c770 <SDMMC_GetCmdResp1>
 800c54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c54e:	69fb      	ldr	r3, [r7, #28]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3720      	adds	r7, #32
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c560:	2300      	movs	r3, #0
 800c562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c564:	2300      	movs	r3, #0
 800c566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c568:	2300      	movs	r3, #0
 800c56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c576:	f107 0308 	add.w	r3, r7, #8
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ff2f 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fa70 	bl	800ca68 <SDMMC_GetCmdError>
 800c588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c58a:	69fb      	ldr	r3, [r7, #28]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3720      	adds	r7, #32
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c5a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5b4:	f107 0308 	add.w	r3, r7, #8
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff ff10 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f9c7 	bl	800c954 <SDMMC_GetCmdResp2>
 800c5c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5c8:	69fb      	ldr	r3, [r7, #28]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b088      	sub	sp, #32
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c5e0:	2309      	movs	r3, #9
 800c5e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c5e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c5e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5f4:	f107 0308 	add.w	r3, r7, #8
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff fef0 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f9a7 	bl	800c954 <SDMMC_GetCmdResp2>
 800c606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c608:	69fb      	ldr	r3, [r7, #28]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3720      	adds	r7, #32
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b088      	sub	sp, #32
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	460b      	mov	r3, r1
 800c61c:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800c61e:	887b      	ldrh	r3, [r7, #2]
 800c620:	041b      	lsls	r3, r3, #16
 800c622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c624:	2303      	movs	r3, #3
 800c626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c62c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c62e:	2300      	movs	r3, #0
 800c630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c638:	f107 0308 	add.w	r3, r7, #8
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff fece 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800c644:	f241 3288 	movw	r2, #5000	; 0x1388
 800c648:	2103      	movs	r1, #3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f890 	bl	800c770 <SDMMC_GetCmdResp1>
 800c650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c652:	69fb      	ldr	r3, [r7, #28]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3720      	adds	r7, #32
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b088      	sub	sp, #32
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c66a:	230d      	movs	r3, #13
 800c66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c66e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c674:	2300      	movs	r3, #0
 800c676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c67c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff feab 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c68e:	210d      	movs	r1, #13
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f86d 	bl	800c770 <SDMMC_GetCmdResp1>
 800c696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c698:	69fb      	ldr	r3, [r7, #28]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b088      	sub	sp, #32
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fe88 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f989 	bl	800c9e8 <SDMMC_GetCmdResp3>
 800c6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6d8:	69fb      	ldr	r3, [r7, #28]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3720      	adds	r7, #32
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b088      	sub	sp, #32
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800c6f0:	2306      	movs	r3, #6
 800c6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c704:	f107 0308 	add.w	r3, r7, #8
 800c708:	4619      	mov	r1, r3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff fe68 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800c710:	f241 3288 	movw	r2, #5000	; 0x1388
 800c714:	2106      	movs	r1, #6
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f82a 	bl	800c770 <SDMMC_GetCmdResp1>
 800c71c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c71e:	69fb      	ldr	r3, [r7, #28]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3720      	adds	r7, #32
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c736:	2308      	movs	r3, #8
 800c738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c73a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c73e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fe45 	bl	800c3e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800c756:	f241 3288 	movw	r2, #5000	; 0x1388
 800c75a:	2108      	movs	r1, #8
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f807 	bl	800c770 <SDMMC_GetCmdResp1>
 800c762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c764:	69fb      	ldr	r3, [r7, #28]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3720      	adds	r7, #32
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b088      	sub	sp, #32
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	460b      	mov	r3, r1
 800c77a:	607a      	str	r2, [r7, #4]
 800c77c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c77e:	4b70      	ldr	r3, [pc, #448]	; (800c940 <SDMMC_GetCmdResp1+0x1d0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a70      	ldr	r2, [pc, #448]	; (800c944 <SDMMC_GetCmdResp1+0x1d4>)
 800c784:	fba2 2303 	umull	r2, r3, r2, r3
 800c788:	0a5a      	lsrs	r2, r3, #9
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	fb02 f303 	mul.w	r3, r2, r3
 800c790:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	1e5a      	subs	r2, r3, #1
 800c796:	61fa      	str	r2, [r7, #28]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c79c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7a0:	e0c9      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	4b67      	ldr	r3, [pc, #412]	; (800c948 <SDMMC_GetCmdResp1+0x1d8>)
 800c7ac:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0ef      	beq.n	800c792 <SDMMC_GetCmdResp1+0x22>
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1ea      	bne.n	800c792 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c0:	f003 0304 	and.w	r3, r3, #4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d004      	beq.n	800c7d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2204      	movs	r2, #4
 800c7cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7ce:	2304      	movs	r3, #4
 800c7d0:	e0b1      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d004      	beq.n	800c7e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e0a6      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4a58      	ldr	r2, [pc, #352]	; (800c94c <SDMMC_GetCmdResp1+0x1dc>)
 800c7ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7ff fe20 	bl	800c434 <SDMMC_GetCommandResponse>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d001      	beq.n	800c802 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7fe:	2301      	movs	r3, #1
 800c800:	e099      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c802:	2100      	movs	r1, #0
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff fe22 	bl	800c44e <SDMMC_GetResponse>
 800c80a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	4b50      	ldr	r3, [pc, #320]	; (800c950 <SDMMC_GetCmdResp1+0x1e0>)
 800c810:	4013      	ands	r3, r2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c816:	2300      	movs	r3, #0
 800c818:	e08d      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	da02      	bge.n	800c826 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c824:	e087      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c830:	2340      	movs	r3, #64	; 0x40
 800c832:	e080      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c83e:	2380      	movs	r3, #128	; 0x80
 800c840:	e079      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c850:	e071      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c85c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c860:	e069      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c870:	e061      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c87c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c880:	e059      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c88c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c890:	e051      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c89c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c8a0:	e049      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c8ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c8b0:	e041      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c8bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8c0:	e039      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c8cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c8d0:	e031      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c8dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c8e0:	e029      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c8ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c8f0:	e021      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c8fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c900:	e019      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c90c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c910:	e011      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c91c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c920:	e009      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f003 0308 	and.w	r3, r3, #8
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c92c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c930:	e001      	b.n	800c936 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c936:	4618      	mov	r0, r3
 800c938:	3720      	adds	r7, #32
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	24000000 	.word	0x24000000
 800c944:	10624dd3 	.word	0x10624dd3
 800c948:	00200045 	.word	0x00200045
 800c94c:	002000c5 	.word	0x002000c5
 800c950:	fdffe008 	.word	0xfdffe008

0800c954 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c95c:	4b1f      	ldr	r3, [pc, #124]	; (800c9dc <SDMMC_GetCmdResp2+0x88>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1f      	ldr	r2, [pc, #124]	; (800c9e0 <SDMMC_GetCmdResp2+0x8c>)
 800c962:	fba2 2303 	umull	r2, r3, r2, r3
 800c966:	0a5b      	lsrs	r3, r3, #9
 800c968:	f241 3288 	movw	r2, #5000	; 0x1388
 800c96c:	fb02 f303 	mul.w	r3, r2, r3
 800c970:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	1e5a      	subs	r2, r3, #1
 800c976:	60fa      	str	r2, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d102      	bne.n	800c982 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c97c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c980:	e026      	b.n	800c9d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c986:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0ef      	beq.n	800c972 <SDMMC_GetCmdResp2+0x1e>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1ea      	bne.n	800c972 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d004      	beq.n	800c9b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9ae:	2304      	movs	r3, #4
 800c9b0:	e00e      	b.n	800c9d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b6:	f003 0301 	and.w	r3, r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d004      	beq.n	800c9c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e003      	b.n	800c9d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a06      	ldr	r2, [pc, #24]	; (800c9e4 <SDMMC_GetCmdResp2+0x90>)
 800c9cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	24000000 	.word	0x24000000
 800c9e0:	10624dd3 	.word	0x10624dd3
 800c9e4:	002000c5 	.word	0x002000c5

0800c9e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ca5c <SDMMC_GetCmdResp3+0x74>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a1a      	ldr	r2, [pc, #104]	; (800ca60 <SDMMC_GetCmdResp3+0x78>)
 800c9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9fa:	0a5b      	lsrs	r3, r3, #9
 800c9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca00:	fb02 f303 	mul.w	r3, r2, r3
 800ca04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	1e5a      	subs	r2, r3, #1
 800ca0a:	60fa      	str	r2, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d102      	bne.n	800ca16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca14:	e01b      	b.n	800ca4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0ef      	beq.n	800ca06 <SDMMC_GetCmdResp3+0x1e>
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ea      	bne.n	800ca06 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca34:	f003 0304 	and.w	r3, r3, #4
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d004      	beq.n	800ca46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2204      	movs	r2, #4
 800ca40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca42:	2304      	movs	r3, #4
 800ca44:	e003      	b.n	800ca4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a06      	ldr	r2, [pc, #24]	; (800ca64 <SDMMC_GetCmdResp3+0x7c>)
 800ca4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	24000000 	.word	0x24000000
 800ca60:	10624dd3 	.word	0x10624dd3
 800ca64:	002000c5 	.word	0x002000c5

0800ca68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ca70:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <SDMMC_GetCmdError+0x50>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a11      	ldr	r2, [pc, #68]	; (800cabc <SDMMC_GetCmdError+0x54>)
 800ca76:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7a:	0a5b      	lsrs	r3, r3, #9
 800ca7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca80:	fb02 f303 	mul.w	r3, r2, r3
 800ca84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1e5a      	subs	r2, r3, #1
 800ca8a:	60fa      	str	r2, [r7, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d102      	bne.n	800ca96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca94:	e009      	b.n	800caaa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0f1      	beq.n	800ca86 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a06      	ldr	r2, [pc, #24]	; (800cac0 <SDMMC_GetCmdError+0x58>)
 800caa6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	24000000 	.word	0x24000000
 800cabc:	10624dd3 	.word	0x10624dd3
 800cac0:	002000c5 	.word	0x002000c5

0800cac4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cac4:	b084      	sub	sp, #16
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b084      	sub	sp, #16
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	f107 001c 	add.w	r0, r7, #28
 800cad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d120      	bne.n	800cb1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	4b2a      	ldr	r3, [pc, #168]	; (800cb98 <USB_CoreInit+0xd4>)
 800caee:	4013      	ands	r3, r2
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d105      	bne.n	800cb12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 faac 	bl	800d070 <USB_CoreReset>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	e01a      	b.n	800cb54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 faa0 	bl	800d070 <USB_CoreReset>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	639a      	str	r2, [r3, #56]	; 0x38
 800cb46:	e005      	b.n	800cb54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d116      	bne.n	800cb88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb68:	4b0c      	ldr	r3, [pc, #48]	; (800cb9c <USB_CoreInit+0xd8>)
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f043 0206 	orr.w	r2, r3, #6
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f043 0220 	orr.w	r2, r3, #32
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb94:	b004      	add	sp, #16
 800cb96:	4770      	bx	lr
 800cb98:	ffbdffbf 	.word	0xffbdffbf
 800cb9c:	03ee0000 	.word	0x03ee0000

0800cba0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	f023 0201 	bic.w	r2, r3, #1
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cbde:	78fb      	ldrb	r3, [r7, #3]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d115      	bne.n	800cc10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	f7f5 ffdd 	bl	8002bb0 <HAL_Delay>
      ms++;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fa29 	bl	800d054 <USB_GetMode>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d01e      	beq.n	800cc46 <USB_SetCurrentMode+0x84>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b31      	cmp	r3, #49	; 0x31
 800cc0c:	d9f0      	bls.n	800cbf0 <USB_SetCurrentMode+0x2e>
 800cc0e:	e01a      	b.n	800cc46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d115      	bne.n	800cc42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cc22:	2001      	movs	r0, #1
 800cc24:	f7f5 ffc4 	bl	8002bb0 <HAL_Delay>
      ms++;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fa10 	bl	800d054 <USB_GetMode>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d005      	beq.n	800cc46 <USB_SetCurrentMode+0x84>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2b31      	cmp	r3, #49	; 0x31
 800cc3e:	d9f0      	bls.n	800cc22 <USB_SetCurrentMode+0x60>
 800cc40:	e001      	b.n	800cc46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e005      	b.n	800cc52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b32      	cmp	r3, #50	; 0x32
 800cc4a:	d101      	bne.n	800cc50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e000      	b.n	800cc52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
	...

0800cc5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b086      	sub	sp, #24
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cc76:	2300      	movs	r3, #0
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	e009      	b.n	800cc90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	3340      	adds	r3, #64	; 0x40
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	2200      	movs	r2, #0
 800cc88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	613b      	str	r3, [r7, #16]
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	2b0e      	cmp	r3, #14
 800cc94:	d9f2      	bls.n	800cc7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d11c      	bne.n	800ccd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccaa:	f043 0302 	orr.w	r3, r3, #2
 800ccae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e005      	b.n	800cce2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cce8:	461a      	mov	r2, r3
 800ccea:	2300      	movs	r3, #0
 800ccec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	680b      	ldr	r3, [r1, #0]
 800cd00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d10c      	bne.n	800cd22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d104      	bne.n	800cd18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cd0e:	2100      	movs	r1, #0
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f965 	bl	800cfe0 <USB_SetDevSpeed>
 800cd16:	e008      	b.n	800cd2a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cd18:	2101      	movs	r1, #1
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f960 	bl	800cfe0 <USB_SetDevSpeed>
 800cd20:	e003      	b.n	800cd2a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd22:	2103      	movs	r1, #3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f95b 	bl	800cfe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd2a:	2110      	movs	r1, #16
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f8f3 	bl	800cf18 <USB_FlushTxFifo>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f91f 	bl	800cf80 <USB_FlushRxFifo>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd52:	461a      	mov	r2, r3
 800cd54:	2300      	movs	r3, #0
 800cd56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd5e:	461a      	mov	r2, r3
 800cd60:	2300      	movs	r3, #0
 800cd62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd70:	2300      	movs	r3, #0
 800cd72:	613b      	str	r3, [r7, #16]
 800cd74:	e043      	b.n	800cdfe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	015a      	lsls	r2, r3, #5
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd8c:	d118      	bne.n	800cdc0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda0:	461a      	mov	r2, r3
 800cda2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cda6:	6013      	str	r3, [r2, #0]
 800cda8:	e013      	b.n	800cdd2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	015a      	lsls	r2, r3, #5
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	e008      	b.n	800cdd2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	015a      	lsls	r2, r3, #5
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdcc:	461a      	mov	r2, r3
 800cdce:	2300      	movs	r3, #0
 800cdd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	015a      	lsls	r2, r3, #5
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	4413      	add	r3, r2
 800cdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdde:	461a      	mov	r2, r3
 800cde0:	2300      	movs	r3, #0
 800cde2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	015a      	lsls	r2, r3, #5
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d3b7      	bcc.n	800cd76 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce06:	2300      	movs	r3, #0
 800ce08:	613b      	str	r3, [r7, #16]
 800ce0a:	e043      	b.n	800ce94 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce22:	d118      	bne.n	800ce56 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10a      	bne.n	800ce40 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	015a      	lsls	r2, r3, #5
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce36:	461a      	mov	r2, r3
 800ce38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce3c:	6013      	str	r3, [r2, #0]
 800ce3e:	e013      	b.n	800ce68 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	015a      	lsls	r2, r3, #5
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	4413      	add	r3, r2
 800ce48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce52:	6013      	str	r3, [r2, #0]
 800ce54:	e008      	b.n	800ce68 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce62:	461a      	mov	r2, r3
 800ce64:	2300      	movs	r3, #0
 800ce66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce74:	461a      	mov	r2, r3
 800ce76:	2300      	movs	r3, #0
 800ce78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	015a      	lsls	r2, r3, #5
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	4413      	add	r3, r2
 800ce82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce86:	461a      	mov	r2, r3
 800ce88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	3301      	adds	r3, #1
 800ce92:	613b      	str	r3, [r7, #16]
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d3b7      	bcc.n	800ce0c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ceae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d105      	bne.n	800ced0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	f043 0210 	orr.w	r2, r3, #16
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	699a      	ldr	r2, [r3, #24]
 800ced4:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <USB_DevInit+0x2b4>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d005      	beq.n	800ceee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	f043 0208 	orr.w	r2, r3, #8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ceee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d105      	bne.n	800cf00 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	699a      	ldr	r2, [r3, #24]
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <USB_DevInit+0x2b8>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3718      	adds	r7, #24
 800cf06:	46bd      	mov	sp, r7
 800cf08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf0c:	b004      	add	sp, #16
 800cf0e:	4770      	bx	lr
 800cf10:	803c3800 	.word	0x803c3800
 800cf14:	40000004 	.word	0x40000004

0800cf18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cf22:	2300      	movs	r3, #0
 800cf24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4a13      	ldr	r2, [pc, #76]	; (800cf7c <USB_FlushTxFifo+0x64>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d901      	bls.n	800cf38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e01b      	b.n	800cf70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	daf2      	bge.n	800cf26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	019b      	lsls	r3, r3, #6
 800cf48:	f043 0220 	orr.w	r2, r3, #32
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	3301      	adds	r3, #1
 800cf54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4a08      	ldr	r2, [pc, #32]	; (800cf7c <USB_FlushTxFifo+0x64>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d901      	bls.n	800cf62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e006      	b.n	800cf70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d0f0      	beq.n	800cf50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	00030d40 	.word	0x00030d40

0800cf80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4a11      	ldr	r2, [pc, #68]	; (800cfdc <USB_FlushRxFifo+0x5c>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d901      	bls.n	800cf9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e018      	b.n	800cfd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	daf2      	bge.n	800cf8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2210      	movs	r2, #16
 800cfae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	4a08      	ldr	r2, [pc, #32]	; (800cfdc <USB_FlushRxFifo+0x5c>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d901      	bls.n	800cfc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e006      	b.n	800cfd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	f003 0310 	and.w	r3, r3, #16
 800cfca:	2b10      	cmp	r3, #16
 800cfcc:	d0f0      	beq.n	800cfb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	00030d40 	.word	0x00030d40

0800cfe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	78fb      	ldrb	r3, [r7, #3]
 800cffa:	68f9      	ldr	r1, [r7, #12]
 800cffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d000:	4313      	orrs	r3, r2
 800d002:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d012:	b480      	push	{r7}
 800d014:	b085      	sub	sp, #20
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d02c:	f023 0303 	bic.w	r3, r3, #3
 800d030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d040:	f043 0302 	orr.w	r3, r3, #2
 800d044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	695b      	ldr	r3, [r3, #20]
 800d060:	f003 0301 	and.w	r3, r3, #1
}
 800d064:	4618      	mov	r0, r3
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3301      	adds	r3, #1
 800d080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	4a13      	ldr	r2, [pc, #76]	; (800d0d4 <USB_CoreReset+0x64>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d901      	bls.n	800d08e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d08a:	2303      	movs	r3, #3
 800d08c:	e01b      	b.n	800d0c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	2b00      	cmp	r3, #0
 800d094:	daf2      	bge.n	800d07c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d096:	2300      	movs	r3, #0
 800d098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	f043 0201 	orr.w	r2, r3, #1
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4a09      	ldr	r2, [pc, #36]	; (800d0d4 <USB_CoreReset+0x64>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d901      	bls.n	800d0b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	e006      	b.n	800d0c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d0f0      	beq.n	800d0a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	00030d40 	.word	0x00030d40

0800d0d8 <__errno>:
 800d0d8:	4b01      	ldr	r3, [pc, #4]	; (800d0e0 <__errno+0x8>)
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	24000010 	.word	0x24000010

0800d0e4 <__libc_init_array>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	4d0d      	ldr	r5, [pc, #52]	; (800d11c <__libc_init_array+0x38>)
 800d0e8:	4c0d      	ldr	r4, [pc, #52]	; (800d120 <__libc_init_array+0x3c>)
 800d0ea:	1b64      	subs	r4, r4, r5
 800d0ec:	10a4      	asrs	r4, r4, #2
 800d0ee:	2600      	movs	r6, #0
 800d0f0:	42a6      	cmp	r6, r4
 800d0f2:	d109      	bne.n	800d108 <__libc_init_array+0x24>
 800d0f4:	4d0b      	ldr	r5, [pc, #44]	; (800d124 <__libc_init_array+0x40>)
 800d0f6:	4c0c      	ldr	r4, [pc, #48]	; (800d128 <__libc_init_array+0x44>)
 800d0f8:	f000 fca2 	bl	800da40 <_init>
 800d0fc:	1b64      	subs	r4, r4, r5
 800d0fe:	10a4      	asrs	r4, r4, #2
 800d100:	2600      	movs	r6, #0
 800d102:	42a6      	cmp	r6, r4
 800d104:	d105      	bne.n	800d112 <__libc_init_array+0x2e>
 800d106:	bd70      	pop	{r4, r5, r6, pc}
 800d108:	f855 3b04 	ldr.w	r3, [r5], #4
 800d10c:	4798      	blx	r3
 800d10e:	3601      	adds	r6, #1
 800d110:	e7ee      	b.n	800d0f0 <__libc_init_array+0xc>
 800d112:	f855 3b04 	ldr.w	r3, [r5], #4
 800d116:	4798      	blx	r3
 800d118:	3601      	adds	r6, #1
 800d11a:	e7f2      	b.n	800d102 <__libc_init_array+0x1e>
 800d11c:	0800db2c 	.word	0x0800db2c
 800d120:	0800db2c 	.word	0x0800db2c
 800d124:	0800db2c 	.word	0x0800db2c
 800d128:	0800db30 	.word	0x0800db30

0800d12c <memcpy>:
 800d12c:	440a      	add	r2, r1
 800d12e:	4291      	cmp	r1, r2
 800d130:	f100 33ff 	add.w	r3, r0, #4294967295
 800d134:	d100      	bne.n	800d138 <memcpy+0xc>
 800d136:	4770      	bx	lr
 800d138:	b510      	push	{r4, lr}
 800d13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d142:	4291      	cmp	r1, r2
 800d144:	d1f9      	bne.n	800d13a <memcpy+0xe>
 800d146:	bd10      	pop	{r4, pc}

0800d148 <memset>:
 800d148:	4402      	add	r2, r0
 800d14a:	4603      	mov	r3, r0
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d100      	bne.n	800d152 <memset+0xa>
 800d150:	4770      	bx	lr
 800d152:	f803 1b01 	strb.w	r1, [r3], #1
 800d156:	e7f9      	b.n	800d14c <memset+0x4>

0800d158 <sniprintf>:
 800d158:	b40c      	push	{r2, r3}
 800d15a:	b530      	push	{r4, r5, lr}
 800d15c:	4b17      	ldr	r3, [pc, #92]	; (800d1bc <sniprintf+0x64>)
 800d15e:	1e0c      	subs	r4, r1, #0
 800d160:	681d      	ldr	r5, [r3, #0]
 800d162:	b09d      	sub	sp, #116	; 0x74
 800d164:	da08      	bge.n	800d178 <sniprintf+0x20>
 800d166:	238b      	movs	r3, #139	; 0x8b
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	f04f 30ff 	mov.w	r0, #4294967295
 800d16e:	b01d      	add	sp, #116	; 0x74
 800d170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d174:	b002      	add	sp, #8
 800d176:	4770      	bx	lr
 800d178:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d17c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d180:	bf14      	ite	ne
 800d182:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d186:	4623      	moveq	r3, r4
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d190:	9002      	str	r0, [sp, #8]
 800d192:	9006      	str	r0, [sp, #24]
 800d194:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d198:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d19a:	ab21      	add	r3, sp, #132	; 0x84
 800d19c:	a902      	add	r1, sp, #8
 800d19e:	4628      	mov	r0, r5
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	f000 f869 	bl	800d278 <_svfiprintf_r>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	bfbc      	itt	lt
 800d1aa:	238b      	movlt	r3, #139	; 0x8b
 800d1ac:	602b      	strlt	r3, [r5, #0]
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	d0dd      	beq.n	800d16e <sniprintf+0x16>
 800d1b2:	9b02      	ldr	r3, [sp, #8]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	e7d9      	b.n	800d16e <sniprintf+0x16>
 800d1ba:	bf00      	nop
 800d1bc:	24000010 	.word	0x24000010

0800d1c0 <__ssputs_r>:
 800d1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c4:	688e      	ldr	r6, [r1, #8]
 800d1c6:	429e      	cmp	r6, r3
 800d1c8:	4682      	mov	sl, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	4690      	mov	r8, r2
 800d1ce:	461f      	mov	r7, r3
 800d1d0:	d838      	bhi.n	800d244 <__ssputs_r+0x84>
 800d1d2:	898a      	ldrh	r2, [r1, #12]
 800d1d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1d8:	d032      	beq.n	800d240 <__ssputs_r+0x80>
 800d1da:	6825      	ldr	r5, [r4, #0]
 800d1dc:	6909      	ldr	r1, [r1, #16]
 800d1de:	eba5 0901 	sub.w	r9, r5, r1
 800d1e2:	6965      	ldr	r5, [r4, #20]
 800d1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	444b      	add	r3, r9
 800d1f0:	106d      	asrs	r5, r5, #1
 800d1f2:	429d      	cmp	r5, r3
 800d1f4:	bf38      	it	cc
 800d1f6:	461d      	movcc	r5, r3
 800d1f8:	0553      	lsls	r3, r2, #21
 800d1fa:	d531      	bpl.n	800d260 <__ssputs_r+0xa0>
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	f000 fb55 	bl	800d8ac <_malloc_r>
 800d202:	4606      	mov	r6, r0
 800d204:	b950      	cbnz	r0, 800d21c <__ssputs_r+0x5c>
 800d206:	230c      	movs	r3, #12
 800d208:	f8ca 3000 	str.w	r3, [sl]
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	f04f 30ff 	mov.w	r0, #4294967295
 800d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21c:	6921      	ldr	r1, [r4, #16]
 800d21e:	464a      	mov	r2, r9
 800d220:	f7ff ff84 	bl	800d12c <memcpy>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	6126      	str	r6, [r4, #16]
 800d232:	6165      	str	r5, [r4, #20]
 800d234:	444e      	add	r6, r9
 800d236:	eba5 0509 	sub.w	r5, r5, r9
 800d23a:	6026      	str	r6, [r4, #0]
 800d23c:	60a5      	str	r5, [r4, #8]
 800d23e:	463e      	mov	r6, r7
 800d240:	42be      	cmp	r6, r7
 800d242:	d900      	bls.n	800d246 <__ssputs_r+0x86>
 800d244:	463e      	mov	r6, r7
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	4632      	mov	r2, r6
 800d24a:	4641      	mov	r1, r8
 800d24c:	f000 faa8 	bl	800d7a0 <memmove>
 800d250:	68a3      	ldr	r3, [r4, #8]
 800d252:	1b9b      	subs	r3, r3, r6
 800d254:	60a3      	str	r3, [r4, #8]
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	4433      	add	r3, r6
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	2000      	movs	r0, #0
 800d25e:	e7db      	b.n	800d218 <__ssputs_r+0x58>
 800d260:	462a      	mov	r2, r5
 800d262:	f000 fb97 	bl	800d994 <_realloc_r>
 800d266:	4606      	mov	r6, r0
 800d268:	2800      	cmp	r0, #0
 800d26a:	d1e1      	bne.n	800d230 <__ssputs_r+0x70>
 800d26c:	6921      	ldr	r1, [r4, #16]
 800d26e:	4650      	mov	r0, sl
 800d270:	f000 fab0 	bl	800d7d4 <_free_r>
 800d274:	e7c7      	b.n	800d206 <__ssputs_r+0x46>
	...

0800d278 <_svfiprintf_r>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	4698      	mov	r8, r3
 800d27e:	898b      	ldrh	r3, [r1, #12]
 800d280:	061b      	lsls	r3, r3, #24
 800d282:	b09d      	sub	sp, #116	; 0x74
 800d284:	4607      	mov	r7, r0
 800d286:	460d      	mov	r5, r1
 800d288:	4614      	mov	r4, r2
 800d28a:	d50e      	bpl.n	800d2aa <_svfiprintf_r+0x32>
 800d28c:	690b      	ldr	r3, [r1, #16]
 800d28e:	b963      	cbnz	r3, 800d2aa <_svfiprintf_r+0x32>
 800d290:	2140      	movs	r1, #64	; 0x40
 800d292:	f000 fb0b 	bl	800d8ac <_malloc_r>
 800d296:	6028      	str	r0, [r5, #0]
 800d298:	6128      	str	r0, [r5, #16]
 800d29a:	b920      	cbnz	r0, 800d2a6 <_svfiprintf_r+0x2e>
 800d29c:	230c      	movs	r3, #12
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a4:	e0d1      	b.n	800d44a <_svfiprintf_r+0x1d2>
 800d2a6:	2340      	movs	r3, #64	; 0x40
 800d2a8:	616b      	str	r3, [r5, #20]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ae:	2320      	movs	r3, #32
 800d2b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2b8:	2330      	movs	r3, #48	; 0x30
 800d2ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d464 <_svfiprintf_r+0x1ec>
 800d2be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2c2:	f04f 0901 	mov.w	r9, #1
 800d2c6:	4623      	mov	r3, r4
 800d2c8:	469a      	mov	sl, r3
 800d2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ce:	b10a      	cbz	r2, 800d2d4 <_svfiprintf_r+0x5c>
 800d2d0:	2a25      	cmp	r2, #37	; 0x25
 800d2d2:	d1f9      	bne.n	800d2c8 <_svfiprintf_r+0x50>
 800d2d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2d8:	d00b      	beq.n	800d2f2 <_svfiprintf_r+0x7a>
 800d2da:	465b      	mov	r3, fp
 800d2dc:	4622      	mov	r2, r4
 800d2de:	4629      	mov	r1, r5
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7ff ff6d 	bl	800d1c0 <__ssputs_r>
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	f000 80aa 	beq.w	800d440 <_svfiprintf_r+0x1c8>
 800d2ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2ee:	445a      	add	r2, fp
 800d2f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 80a2 	beq.w	800d440 <_svfiprintf_r+0x1c8>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d306:	f10a 0a01 	add.w	sl, sl, #1
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	9307      	str	r3, [sp, #28]
 800d30e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d312:	931a      	str	r3, [sp, #104]	; 0x68
 800d314:	4654      	mov	r4, sl
 800d316:	2205      	movs	r2, #5
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	4851      	ldr	r0, [pc, #324]	; (800d464 <_svfiprintf_r+0x1ec>)
 800d31e:	f7f2 ffe7 	bl	80002f0 <memchr>
 800d322:	9a04      	ldr	r2, [sp, #16]
 800d324:	b9d8      	cbnz	r0, 800d35e <_svfiprintf_r+0xe6>
 800d326:	06d0      	lsls	r0, r2, #27
 800d328:	bf44      	itt	mi
 800d32a:	2320      	movmi	r3, #32
 800d32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d330:	0711      	lsls	r1, r2, #28
 800d332:	bf44      	itt	mi
 800d334:	232b      	movmi	r3, #43	; 0x2b
 800d336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d33a:	f89a 3000 	ldrb.w	r3, [sl]
 800d33e:	2b2a      	cmp	r3, #42	; 0x2a
 800d340:	d015      	beq.n	800d36e <_svfiprintf_r+0xf6>
 800d342:	9a07      	ldr	r2, [sp, #28]
 800d344:	4654      	mov	r4, sl
 800d346:	2000      	movs	r0, #0
 800d348:	f04f 0c0a 	mov.w	ip, #10
 800d34c:	4621      	mov	r1, r4
 800d34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d352:	3b30      	subs	r3, #48	; 0x30
 800d354:	2b09      	cmp	r3, #9
 800d356:	d94e      	bls.n	800d3f6 <_svfiprintf_r+0x17e>
 800d358:	b1b0      	cbz	r0, 800d388 <_svfiprintf_r+0x110>
 800d35a:	9207      	str	r2, [sp, #28]
 800d35c:	e014      	b.n	800d388 <_svfiprintf_r+0x110>
 800d35e:	eba0 0308 	sub.w	r3, r0, r8
 800d362:	fa09 f303 	lsl.w	r3, r9, r3
 800d366:	4313      	orrs	r3, r2
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	46a2      	mov	sl, r4
 800d36c:	e7d2      	b.n	800d314 <_svfiprintf_r+0x9c>
 800d36e:	9b03      	ldr	r3, [sp, #12]
 800d370:	1d19      	adds	r1, r3, #4
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	9103      	str	r1, [sp, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	bfbb      	ittet	lt
 800d37a:	425b      	neglt	r3, r3
 800d37c:	f042 0202 	orrlt.w	r2, r2, #2
 800d380:	9307      	strge	r3, [sp, #28]
 800d382:	9307      	strlt	r3, [sp, #28]
 800d384:	bfb8      	it	lt
 800d386:	9204      	strlt	r2, [sp, #16]
 800d388:	7823      	ldrb	r3, [r4, #0]
 800d38a:	2b2e      	cmp	r3, #46	; 0x2e
 800d38c:	d10c      	bne.n	800d3a8 <_svfiprintf_r+0x130>
 800d38e:	7863      	ldrb	r3, [r4, #1]
 800d390:	2b2a      	cmp	r3, #42	; 0x2a
 800d392:	d135      	bne.n	800d400 <_svfiprintf_r+0x188>
 800d394:	9b03      	ldr	r3, [sp, #12]
 800d396:	1d1a      	adds	r2, r3, #4
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	9203      	str	r2, [sp, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	bfb8      	it	lt
 800d3a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3a4:	3402      	adds	r4, #2
 800d3a6:	9305      	str	r3, [sp, #20]
 800d3a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d474 <_svfiprintf_r+0x1fc>
 800d3ac:	7821      	ldrb	r1, [r4, #0]
 800d3ae:	2203      	movs	r2, #3
 800d3b0:	4650      	mov	r0, sl
 800d3b2:	f7f2 ff9d 	bl	80002f0 <memchr>
 800d3b6:	b140      	cbz	r0, 800d3ca <_svfiprintf_r+0x152>
 800d3b8:	2340      	movs	r3, #64	; 0x40
 800d3ba:	eba0 000a 	sub.w	r0, r0, sl
 800d3be:	fa03 f000 	lsl.w	r0, r3, r0
 800d3c2:	9b04      	ldr	r3, [sp, #16]
 800d3c4:	4303      	orrs	r3, r0
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	9304      	str	r3, [sp, #16]
 800d3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ce:	4826      	ldr	r0, [pc, #152]	; (800d468 <_svfiprintf_r+0x1f0>)
 800d3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3d4:	2206      	movs	r2, #6
 800d3d6:	f7f2 ff8b 	bl	80002f0 <memchr>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d038      	beq.n	800d450 <_svfiprintf_r+0x1d8>
 800d3de:	4b23      	ldr	r3, [pc, #140]	; (800d46c <_svfiprintf_r+0x1f4>)
 800d3e0:	bb1b      	cbnz	r3, 800d42a <_svfiprintf_r+0x1b2>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	3307      	adds	r3, #7
 800d3e6:	f023 0307 	bic.w	r3, r3, #7
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	9303      	str	r3, [sp, #12]
 800d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f0:	4433      	add	r3, r6
 800d3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f4:	e767      	b.n	800d2c6 <_svfiprintf_r+0x4e>
 800d3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	e7a5      	b.n	800d34c <_svfiprintf_r+0xd4>
 800d400:	2300      	movs	r3, #0
 800d402:	3401      	adds	r4, #1
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	4619      	mov	r1, r3
 800d408:	f04f 0c0a 	mov.w	ip, #10
 800d40c:	4620      	mov	r0, r4
 800d40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d412:	3a30      	subs	r2, #48	; 0x30
 800d414:	2a09      	cmp	r2, #9
 800d416:	d903      	bls.n	800d420 <_svfiprintf_r+0x1a8>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0c5      	beq.n	800d3a8 <_svfiprintf_r+0x130>
 800d41c:	9105      	str	r1, [sp, #20]
 800d41e:	e7c3      	b.n	800d3a8 <_svfiprintf_r+0x130>
 800d420:	fb0c 2101 	mla	r1, ip, r1, r2
 800d424:	4604      	mov	r4, r0
 800d426:	2301      	movs	r3, #1
 800d428:	e7f0      	b.n	800d40c <_svfiprintf_r+0x194>
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	462a      	mov	r2, r5
 800d430:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <_svfiprintf_r+0x1f8>)
 800d432:	a904      	add	r1, sp, #16
 800d434:	4638      	mov	r0, r7
 800d436:	f3af 8000 	nop.w
 800d43a:	1c42      	adds	r2, r0, #1
 800d43c:	4606      	mov	r6, r0
 800d43e:	d1d6      	bne.n	800d3ee <_svfiprintf_r+0x176>
 800d440:	89ab      	ldrh	r3, [r5, #12]
 800d442:	065b      	lsls	r3, r3, #25
 800d444:	f53f af2c 	bmi.w	800d2a0 <_svfiprintf_r+0x28>
 800d448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d44a:	b01d      	add	sp, #116	; 0x74
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	ab03      	add	r3, sp, #12
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	462a      	mov	r2, r5
 800d456:	4b06      	ldr	r3, [pc, #24]	; (800d470 <_svfiprintf_r+0x1f8>)
 800d458:	a904      	add	r1, sp, #16
 800d45a:	4638      	mov	r0, r7
 800d45c:	f000 f87a 	bl	800d554 <_printf_i>
 800d460:	e7eb      	b.n	800d43a <_svfiprintf_r+0x1c2>
 800d462:	bf00      	nop
 800d464:	0800daf0 	.word	0x0800daf0
 800d468:	0800dafa 	.word	0x0800dafa
 800d46c:	00000000 	.word	0x00000000
 800d470:	0800d1c1 	.word	0x0800d1c1
 800d474:	0800daf6 	.word	0x0800daf6

0800d478 <_printf_common>:
 800d478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47c:	4616      	mov	r6, r2
 800d47e:	4699      	mov	r9, r3
 800d480:	688a      	ldr	r2, [r1, #8]
 800d482:	690b      	ldr	r3, [r1, #16]
 800d484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d488:	4293      	cmp	r3, r2
 800d48a:	bfb8      	it	lt
 800d48c:	4613      	movlt	r3, r2
 800d48e:	6033      	str	r3, [r6, #0]
 800d490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d494:	4607      	mov	r7, r0
 800d496:	460c      	mov	r4, r1
 800d498:	b10a      	cbz	r2, 800d49e <_printf_common+0x26>
 800d49a:	3301      	adds	r3, #1
 800d49c:	6033      	str	r3, [r6, #0]
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	0699      	lsls	r1, r3, #26
 800d4a2:	bf42      	ittt	mi
 800d4a4:	6833      	ldrmi	r3, [r6, #0]
 800d4a6:	3302      	addmi	r3, #2
 800d4a8:	6033      	strmi	r3, [r6, #0]
 800d4aa:	6825      	ldr	r5, [r4, #0]
 800d4ac:	f015 0506 	ands.w	r5, r5, #6
 800d4b0:	d106      	bne.n	800d4c0 <_printf_common+0x48>
 800d4b2:	f104 0a19 	add.w	sl, r4, #25
 800d4b6:	68e3      	ldr	r3, [r4, #12]
 800d4b8:	6832      	ldr	r2, [r6, #0]
 800d4ba:	1a9b      	subs	r3, r3, r2
 800d4bc:	42ab      	cmp	r3, r5
 800d4be:	dc26      	bgt.n	800d50e <_printf_common+0x96>
 800d4c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4c4:	1e13      	subs	r3, r2, #0
 800d4c6:	6822      	ldr	r2, [r4, #0]
 800d4c8:	bf18      	it	ne
 800d4ca:	2301      	movne	r3, #1
 800d4cc:	0692      	lsls	r2, r2, #26
 800d4ce:	d42b      	bmi.n	800d528 <_printf_common+0xb0>
 800d4d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4d4:	4649      	mov	r1, r9
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	47c0      	blx	r8
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d01e      	beq.n	800d51c <_printf_common+0xa4>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	68e5      	ldr	r5, [r4, #12]
 800d4e2:	6832      	ldr	r2, [r6, #0]
 800d4e4:	f003 0306 	and.w	r3, r3, #6
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	bf08      	it	eq
 800d4ec:	1aad      	subeq	r5, r5, r2
 800d4ee:	68a3      	ldr	r3, [r4, #8]
 800d4f0:	6922      	ldr	r2, [r4, #16]
 800d4f2:	bf0c      	ite	eq
 800d4f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4f8:	2500      	movne	r5, #0
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	bfc4      	itt	gt
 800d4fe:	1a9b      	subgt	r3, r3, r2
 800d500:	18ed      	addgt	r5, r5, r3
 800d502:	2600      	movs	r6, #0
 800d504:	341a      	adds	r4, #26
 800d506:	42b5      	cmp	r5, r6
 800d508:	d11a      	bne.n	800d540 <_printf_common+0xc8>
 800d50a:	2000      	movs	r0, #0
 800d50c:	e008      	b.n	800d520 <_printf_common+0xa8>
 800d50e:	2301      	movs	r3, #1
 800d510:	4652      	mov	r2, sl
 800d512:	4649      	mov	r1, r9
 800d514:	4638      	mov	r0, r7
 800d516:	47c0      	blx	r8
 800d518:	3001      	adds	r0, #1
 800d51a:	d103      	bne.n	800d524 <_printf_common+0xac>
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d524:	3501      	adds	r5, #1
 800d526:	e7c6      	b.n	800d4b6 <_printf_common+0x3e>
 800d528:	18e1      	adds	r1, r4, r3
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	2030      	movs	r0, #48	; 0x30
 800d52e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d532:	4422      	add	r2, r4
 800d534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d53c:	3302      	adds	r3, #2
 800d53e:	e7c7      	b.n	800d4d0 <_printf_common+0x58>
 800d540:	2301      	movs	r3, #1
 800d542:	4622      	mov	r2, r4
 800d544:	4649      	mov	r1, r9
 800d546:	4638      	mov	r0, r7
 800d548:	47c0      	blx	r8
 800d54a:	3001      	adds	r0, #1
 800d54c:	d0e6      	beq.n	800d51c <_printf_common+0xa4>
 800d54e:	3601      	adds	r6, #1
 800d550:	e7d9      	b.n	800d506 <_printf_common+0x8e>
	...

0800d554 <_printf_i>:
 800d554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	7e0f      	ldrb	r7, [r1, #24]
 800d55a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d55c:	2f78      	cmp	r7, #120	; 0x78
 800d55e:	4691      	mov	r9, r2
 800d560:	4680      	mov	r8, r0
 800d562:	460c      	mov	r4, r1
 800d564:	469a      	mov	sl, r3
 800d566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d56a:	d807      	bhi.n	800d57c <_printf_i+0x28>
 800d56c:	2f62      	cmp	r7, #98	; 0x62
 800d56e:	d80a      	bhi.n	800d586 <_printf_i+0x32>
 800d570:	2f00      	cmp	r7, #0
 800d572:	f000 80d8 	beq.w	800d726 <_printf_i+0x1d2>
 800d576:	2f58      	cmp	r7, #88	; 0x58
 800d578:	f000 80a3 	beq.w	800d6c2 <_printf_i+0x16e>
 800d57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d584:	e03a      	b.n	800d5fc <_printf_i+0xa8>
 800d586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d58a:	2b15      	cmp	r3, #21
 800d58c:	d8f6      	bhi.n	800d57c <_printf_i+0x28>
 800d58e:	a101      	add	r1, pc, #4	; (adr r1, 800d594 <_printf_i+0x40>)
 800d590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d594:	0800d5ed 	.word	0x0800d5ed
 800d598:	0800d601 	.word	0x0800d601
 800d59c:	0800d57d 	.word	0x0800d57d
 800d5a0:	0800d57d 	.word	0x0800d57d
 800d5a4:	0800d57d 	.word	0x0800d57d
 800d5a8:	0800d57d 	.word	0x0800d57d
 800d5ac:	0800d601 	.word	0x0800d601
 800d5b0:	0800d57d 	.word	0x0800d57d
 800d5b4:	0800d57d 	.word	0x0800d57d
 800d5b8:	0800d57d 	.word	0x0800d57d
 800d5bc:	0800d57d 	.word	0x0800d57d
 800d5c0:	0800d70d 	.word	0x0800d70d
 800d5c4:	0800d631 	.word	0x0800d631
 800d5c8:	0800d6ef 	.word	0x0800d6ef
 800d5cc:	0800d57d 	.word	0x0800d57d
 800d5d0:	0800d57d 	.word	0x0800d57d
 800d5d4:	0800d72f 	.word	0x0800d72f
 800d5d8:	0800d57d 	.word	0x0800d57d
 800d5dc:	0800d631 	.word	0x0800d631
 800d5e0:	0800d57d 	.word	0x0800d57d
 800d5e4:	0800d57d 	.word	0x0800d57d
 800d5e8:	0800d6f7 	.word	0x0800d6f7
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	602a      	str	r2, [r5, #0]
 800d5f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e0a3      	b.n	800d748 <_printf_i+0x1f4>
 800d600:	6820      	ldr	r0, [r4, #0]
 800d602:	6829      	ldr	r1, [r5, #0]
 800d604:	0606      	lsls	r6, r0, #24
 800d606:	f101 0304 	add.w	r3, r1, #4
 800d60a:	d50a      	bpl.n	800d622 <_printf_i+0xce>
 800d60c:	680e      	ldr	r6, [r1, #0]
 800d60e:	602b      	str	r3, [r5, #0]
 800d610:	2e00      	cmp	r6, #0
 800d612:	da03      	bge.n	800d61c <_printf_i+0xc8>
 800d614:	232d      	movs	r3, #45	; 0x2d
 800d616:	4276      	negs	r6, r6
 800d618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d61c:	485e      	ldr	r0, [pc, #376]	; (800d798 <_printf_i+0x244>)
 800d61e:	230a      	movs	r3, #10
 800d620:	e019      	b.n	800d656 <_printf_i+0x102>
 800d622:	680e      	ldr	r6, [r1, #0]
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d62a:	bf18      	it	ne
 800d62c:	b236      	sxthne	r6, r6
 800d62e:	e7ef      	b.n	800d610 <_printf_i+0xbc>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	6820      	ldr	r0, [r4, #0]
 800d634:	1d19      	adds	r1, r3, #4
 800d636:	6029      	str	r1, [r5, #0]
 800d638:	0601      	lsls	r1, r0, #24
 800d63a:	d501      	bpl.n	800d640 <_printf_i+0xec>
 800d63c:	681e      	ldr	r6, [r3, #0]
 800d63e:	e002      	b.n	800d646 <_printf_i+0xf2>
 800d640:	0646      	lsls	r6, r0, #25
 800d642:	d5fb      	bpl.n	800d63c <_printf_i+0xe8>
 800d644:	881e      	ldrh	r6, [r3, #0]
 800d646:	4854      	ldr	r0, [pc, #336]	; (800d798 <_printf_i+0x244>)
 800d648:	2f6f      	cmp	r7, #111	; 0x6f
 800d64a:	bf0c      	ite	eq
 800d64c:	2308      	moveq	r3, #8
 800d64e:	230a      	movne	r3, #10
 800d650:	2100      	movs	r1, #0
 800d652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d656:	6865      	ldr	r5, [r4, #4]
 800d658:	60a5      	str	r5, [r4, #8]
 800d65a:	2d00      	cmp	r5, #0
 800d65c:	bfa2      	ittt	ge
 800d65e:	6821      	ldrge	r1, [r4, #0]
 800d660:	f021 0104 	bicge.w	r1, r1, #4
 800d664:	6021      	strge	r1, [r4, #0]
 800d666:	b90e      	cbnz	r6, 800d66c <_printf_i+0x118>
 800d668:	2d00      	cmp	r5, #0
 800d66a:	d04d      	beq.n	800d708 <_printf_i+0x1b4>
 800d66c:	4615      	mov	r5, r2
 800d66e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d672:	fb03 6711 	mls	r7, r3, r1, r6
 800d676:	5dc7      	ldrb	r7, [r0, r7]
 800d678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d67c:	4637      	mov	r7, r6
 800d67e:	42bb      	cmp	r3, r7
 800d680:	460e      	mov	r6, r1
 800d682:	d9f4      	bls.n	800d66e <_printf_i+0x11a>
 800d684:	2b08      	cmp	r3, #8
 800d686:	d10b      	bne.n	800d6a0 <_printf_i+0x14c>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	07de      	lsls	r6, r3, #31
 800d68c:	d508      	bpl.n	800d6a0 <_printf_i+0x14c>
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	6861      	ldr	r1, [r4, #4]
 800d692:	4299      	cmp	r1, r3
 800d694:	bfde      	ittt	le
 800d696:	2330      	movle	r3, #48	; 0x30
 800d698:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d69c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6a0:	1b52      	subs	r2, r2, r5
 800d6a2:	6122      	str	r2, [r4, #16]
 800d6a4:	f8cd a000 	str.w	sl, [sp]
 800d6a8:	464b      	mov	r3, r9
 800d6aa:	aa03      	add	r2, sp, #12
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	f7ff fee2 	bl	800d478 <_printf_common>
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	d14c      	bne.n	800d752 <_printf_i+0x1fe>
 800d6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6bc:	b004      	add	sp, #16
 800d6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c2:	4835      	ldr	r0, [pc, #212]	; (800d798 <_printf_i+0x244>)
 800d6c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d6c8:	6829      	ldr	r1, [r5, #0]
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6d0:	6029      	str	r1, [r5, #0]
 800d6d2:	061d      	lsls	r5, r3, #24
 800d6d4:	d514      	bpl.n	800d700 <_printf_i+0x1ac>
 800d6d6:	07df      	lsls	r7, r3, #31
 800d6d8:	bf44      	itt	mi
 800d6da:	f043 0320 	orrmi.w	r3, r3, #32
 800d6de:	6023      	strmi	r3, [r4, #0]
 800d6e0:	b91e      	cbnz	r6, 800d6ea <_printf_i+0x196>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	f023 0320 	bic.w	r3, r3, #32
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	2310      	movs	r3, #16
 800d6ec:	e7b0      	b.n	800d650 <_printf_i+0xfc>
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	f043 0320 	orr.w	r3, r3, #32
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	2378      	movs	r3, #120	; 0x78
 800d6f8:	4828      	ldr	r0, [pc, #160]	; (800d79c <_printf_i+0x248>)
 800d6fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6fe:	e7e3      	b.n	800d6c8 <_printf_i+0x174>
 800d700:	0659      	lsls	r1, r3, #25
 800d702:	bf48      	it	mi
 800d704:	b2b6      	uxthmi	r6, r6
 800d706:	e7e6      	b.n	800d6d6 <_printf_i+0x182>
 800d708:	4615      	mov	r5, r2
 800d70a:	e7bb      	b.n	800d684 <_printf_i+0x130>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	6826      	ldr	r6, [r4, #0]
 800d710:	6961      	ldr	r1, [r4, #20]
 800d712:	1d18      	adds	r0, r3, #4
 800d714:	6028      	str	r0, [r5, #0]
 800d716:	0635      	lsls	r5, r6, #24
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	d501      	bpl.n	800d720 <_printf_i+0x1cc>
 800d71c:	6019      	str	r1, [r3, #0]
 800d71e:	e002      	b.n	800d726 <_printf_i+0x1d2>
 800d720:	0670      	lsls	r0, r6, #25
 800d722:	d5fb      	bpl.n	800d71c <_printf_i+0x1c8>
 800d724:	8019      	strh	r1, [r3, #0]
 800d726:	2300      	movs	r3, #0
 800d728:	6123      	str	r3, [r4, #16]
 800d72a:	4615      	mov	r5, r2
 800d72c:	e7ba      	b.n	800d6a4 <_printf_i+0x150>
 800d72e:	682b      	ldr	r3, [r5, #0]
 800d730:	1d1a      	adds	r2, r3, #4
 800d732:	602a      	str	r2, [r5, #0]
 800d734:	681d      	ldr	r5, [r3, #0]
 800d736:	6862      	ldr	r2, [r4, #4]
 800d738:	2100      	movs	r1, #0
 800d73a:	4628      	mov	r0, r5
 800d73c:	f7f2 fdd8 	bl	80002f0 <memchr>
 800d740:	b108      	cbz	r0, 800d746 <_printf_i+0x1f2>
 800d742:	1b40      	subs	r0, r0, r5
 800d744:	6060      	str	r0, [r4, #4]
 800d746:	6863      	ldr	r3, [r4, #4]
 800d748:	6123      	str	r3, [r4, #16]
 800d74a:	2300      	movs	r3, #0
 800d74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d750:	e7a8      	b.n	800d6a4 <_printf_i+0x150>
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	462a      	mov	r2, r5
 800d756:	4649      	mov	r1, r9
 800d758:	4640      	mov	r0, r8
 800d75a:	47d0      	blx	sl
 800d75c:	3001      	adds	r0, #1
 800d75e:	d0ab      	beq.n	800d6b8 <_printf_i+0x164>
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	079b      	lsls	r3, r3, #30
 800d764:	d413      	bmi.n	800d78e <_printf_i+0x23a>
 800d766:	68e0      	ldr	r0, [r4, #12]
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	4298      	cmp	r0, r3
 800d76c:	bfb8      	it	lt
 800d76e:	4618      	movlt	r0, r3
 800d770:	e7a4      	b.n	800d6bc <_printf_i+0x168>
 800d772:	2301      	movs	r3, #1
 800d774:	4632      	mov	r2, r6
 800d776:	4649      	mov	r1, r9
 800d778:	4640      	mov	r0, r8
 800d77a:	47d0      	blx	sl
 800d77c:	3001      	adds	r0, #1
 800d77e:	d09b      	beq.n	800d6b8 <_printf_i+0x164>
 800d780:	3501      	adds	r5, #1
 800d782:	68e3      	ldr	r3, [r4, #12]
 800d784:	9903      	ldr	r1, [sp, #12]
 800d786:	1a5b      	subs	r3, r3, r1
 800d788:	42ab      	cmp	r3, r5
 800d78a:	dcf2      	bgt.n	800d772 <_printf_i+0x21e>
 800d78c:	e7eb      	b.n	800d766 <_printf_i+0x212>
 800d78e:	2500      	movs	r5, #0
 800d790:	f104 0619 	add.w	r6, r4, #25
 800d794:	e7f5      	b.n	800d782 <_printf_i+0x22e>
 800d796:	bf00      	nop
 800d798:	0800db01 	.word	0x0800db01
 800d79c:	0800db12 	.word	0x0800db12

0800d7a0 <memmove>:
 800d7a0:	4288      	cmp	r0, r1
 800d7a2:	b510      	push	{r4, lr}
 800d7a4:	eb01 0402 	add.w	r4, r1, r2
 800d7a8:	d902      	bls.n	800d7b0 <memmove+0x10>
 800d7aa:	4284      	cmp	r4, r0
 800d7ac:	4623      	mov	r3, r4
 800d7ae:	d807      	bhi.n	800d7c0 <memmove+0x20>
 800d7b0:	1e43      	subs	r3, r0, #1
 800d7b2:	42a1      	cmp	r1, r4
 800d7b4:	d008      	beq.n	800d7c8 <memmove+0x28>
 800d7b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7be:	e7f8      	b.n	800d7b2 <memmove+0x12>
 800d7c0:	4402      	add	r2, r0
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	428a      	cmp	r2, r1
 800d7c6:	d100      	bne.n	800d7ca <memmove+0x2a>
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7d2:	e7f7      	b.n	800d7c4 <memmove+0x24>

0800d7d4 <_free_r>:
 800d7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7d6:	2900      	cmp	r1, #0
 800d7d8:	d044      	beq.n	800d864 <_free_r+0x90>
 800d7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7de:	9001      	str	r0, [sp, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f1a1 0404 	sub.w	r4, r1, #4
 800d7e6:	bfb8      	it	lt
 800d7e8:	18e4      	addlt	r4, r4, r3
 800d7ea:	f000 f913 	bl	800da14 <__malloc_lock>
 800d7ee:	4a1e      	ldr	r2, [pc, #120]	; (800d868 <_free_r+0x94>)
 800d7f0:	9801      	ldr	r0, [sp, #4]
 800d7f2:	6813      	ldr	r3, [r2, #0]
 800d7f4:	b933      	cbnz	r3, 800d804 <_free_r+0x30>
 800d7f6:	6063      	str	r3, [r4, #4]
 800d7f8:	6014      	str	r4, [r2, #0]
 800d7fa:	b003      	add	sp, #12
 800d7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d800:	f000 b90e 	b.w	800da20 <__malloc_unlock>
 800d804:	42a3      	cmp	r3, r4
 800d806:	d908      	bls.n	800d81a <_free_r+0x46>
 800d808:	6825      	ldr	r5, [r4, #0]
 800d80a:	1961      	adds	r1, r4, r5
 800d80c:	428b      	cmp	r3, r1
 800d80e:	bf01      	itttt	eq
 800d810:	6819      	ldreq	r1, [r3, #0]
 800d812:	685b      	ldreq	r3, [r3, #4]
 800d814:	1949      	addeq	r1, r1, r5
 800d816:	6021      	streq	r1, [r4, #0]
 800d818:	e7ed      	b.n	800d7f6 <_free_r+0x22>
 800d81a:	461a      	mov	r2, r3
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	b10b      	cbz	r3, 800d824 <_free_r+0x50>
 800d820:	42a3      	cmp	r3, r4
 800d822:	d9fa      	bls.n	800d81a <_free_r+0x46>
 800d824:	6811      	ldr	r1, [r2, #0]
 800d826:	1855      	adds	r5, r2, r1
 800d828:	42a5      	cmp	r5, r4
 800d82a:	d10b      	bne.n	800d844 <_free_r+0x70>
 800d82c:	6824      	ldr	r4, [r4, #0]
 800d82e:	4421      	add	r1, r4
 800d830:	1854      	adds	r4, r2, r1
 800d832:	42a3      	cmp	r3, r4
 800d834:	6011      	str	r1, [r2, #0]
 800d836:	d1e0      	bne.n	800d7fa <_free_r+0x26>
 800d838:	681c      	ldr	r4, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	6053      	str	r3, [r2, #4]
 800d83e:	4421      	add	r1, r4
 800d840:	6011      	str	r1, [r2, #0]
 800d842:	e7da      	b.n	800d7fa <_free_r+0x26>
 800d844:	d902      	bls.n	800d84c <_free_r+0x78>
 800d846:	230c      	movs	r3, #12
 800d848:	6003      	str	r3, [r0, #0]
 800d84a:	e7d6      	b.n	800d7fa <_free_r+0x26>
 800d84c:	6825      	ldr	r5, [r4, #0]
 800d84e:	1961      	adds	r1, r4, r5
 800d850:	428b      	cmp	r3, r1
 800d852:	bf04      	itt	eq
 800d854:	6819      	ldreq	r1, [r3, #0]
 800d856:	685b      	ldreq	r3, [r3, #4]
 800d858:	6063      	str	r3, [r4, #4]
 800d85a:	bf04      	itt	eq
 800d85c:	1949      	addeq	r1, r1, r5
 800d85e:	6021      	streq	r1, [r4, #0]
 800d860:	6054      	str	r4, [r2, #4]
 800d862:	e7ca      	b.n	800d7fa <_free_r+0x26>
 800d864:	b003      	add	sp, #12
 800d866:	bd30      	pop	{r4, r5, pc}
 800d868:	240010e0 	.word	0x240010e0

0800d86c <sbrk_aligned>:
 800d86c:	b570      	push	{r4, r5, r6, lr}
 800d86e:	4e0e      	ldr	r6, [pc, #56]	; (800d8a8 <sbrk_aligned+0x3c>)
 800d870:	460c      	mov	r4, r1
 800d872:	6831      	ldr	r1, [r6, #0]
 800d874:	4605      	mov	r5, r0
 800d876:	b911      	cbnz	r1, 800d87e <sbrk_aligned+0x12>
 800d878:	f000 f8bc 	bl	800d9f4 <_sbrk_r>
 800d87c:	6030      	str	r0, [r6, #0]
 800d87e:	4621      	mov	r1, r4
 800d880:	4628      	mov	r0, r5
 800d882:	f000 f8b7 	bl	800d9f4 <_sbrk_r>
 800d886:	1c43      	adds	r3, r0, #1
 800d888:	d00a      	beq.n	800d8a0 <sbrk_aligned+0x34>
 800d88a:	1cc4      	adds	r4, r0, #3
 800d88c:	f024 0403 	bic.w	r4, r4, #3
 800d890:	42a0      	cmp	r0, r4
 800d892:	d007      	beq.n	800d8a4 <sbrk_aligned+0x38>
 800d894:	1a21      	subs	r1, r4, r0
 800d896:	4628      	mov	r0, r5
 800d898:	f000 f8ac 	bl	800d9f4 <_sbrk_r>
 800d89c:	3001      	adds	r0, #1
 800d89e:	d101      	bne.n	800d8a4 <sbrk_aligned+0x38>
 800d8a0:	f04f 34ff 	mov.w	r4, #4294967295
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	240010e4 	.word	0x240010e4

0800d8ac <_malloc_r>:
 800d8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b0:	1ccd      	adds	r5, r1, #3
 800d8b2:	f025 0503 	bic.w	r5, r5, #3
 800d8b6:	3508      	adds	r5, #8
 800d8b8:	2d0c      	cmp	r5, #12
 800d8ba:	bf38      	it	cc
 800d8bc:	250c      	movcc	r5, #12
 800d8be:	2d00      	cmp	r5, #0
 800d8c0:	4607      	mov	r7, r0
 800d8c2:	db01      	blt.n	800d8c8 <_malloc_r+0x1c>
 800d8c4:	42a9      	cmp	r1, r5
 800d8c6:	d905      	bls.n	800d8d4 <_malloc_r+0x28>
 800d8c8:	230c      	movs	r3, #12
 800d8ca:	603b      	str	r3, [r7, #0]
 800d8cc:	2600      	movs	r6, #0
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d4:	4e2e      	ldr	r6, [pc, #184]	; (800d990 <_malloc_r+0xe4>)
 800d8d6:	f000 f89d 	bl	800da14 <__malloc_lock>
 800d8da:	6833      	ldr	r3, [r6, #0]
 800d8dc:	461c      	mov	r4, r3
 800d8de:	bb34      	cbnz	r4, 800d92e <_malloc_r+0x82>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	f7ff ffc2 	bl	800d86c <sbrk_aligned>
 800d8e8:	1c43      	adds	r3, r0, #1
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	d14d      	bne.n	800d98a <_malloc_r+0xde>
 800d8ee:	6834      	ldr	r4, [r6, #0]
 800d8f0:	4626      	mov	r6, r4
 800d8f2:	2e00      	cmp	r6, #0
 800d8f4:	d140      	bne.n	800d978 <_malloc_r+0xcc>
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	4631      	mov	r1, r6
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	eb04 0803 	add.w	r8, r4, r3
 800d900:	f000 f878 	bl	800d9f4 <_sbrk_r>
 800d904:	4580      	cmp	r8, r0
 800d906:	d13a      	bne.n	800d97e <_malloc_r+0xd2>
 800d908:	6821      	ldr	r1, [r4, #0]
 800d90a:	3503      	adds	r5, #3
 800d90c:	1a6d      	subs	r5, r5, r1
 800d90e:	f025 0503 	bic.w	r5, r5, #3
 800d912:	3508      	adds	r5, #8
 800d914:	2d0c      	cmp	r5, #12
 800d916:	bf38      	it	cc
 800d918:	250c      	movcc	r5, #12
 800d91a:	4629      	mov	r1, r5
 800d91c:	4638      	mov	r0, r7
 800d91e:	f7ff ffa5 	bl	800d86c <sbrk_aligned>
 800d922:	3001      	adds	r0, #1
 800d924:	d02b      	beq.n	800d97e <_malloc_r+0xd2>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	442b      	add	r3, r5
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	e00e      	b.n	800d94c <_malloc_r+0xa0>
 800d92e:	6822      	ldr	r2, [r4, #0]
 800d930:	1b52      	subs	r2, r2, r5
 800d932:	d41e      	bmi.n	800d972 <_malloc_r+0xc6>
 800d934:	2a0b      	cmp	r2, #11
 800d936:	d916      	bls.n	800d966 <_malloc_r+0xba>
 800d938:	1961      	adds	r1, r4, r5
 800d93a:	42a3      	cmp	r3, r4
 800d93c:	6025      	str	r5, [r4, #0]
 800d93e:	bf18      	it	ne
 800d940:	6059      	strne	r1, [r3, #4]
 800d942:	6863      	ldr	r3, [r4, #4]
 800d944:	bf08      	it	eq
 800d946:	6031      	streq	r1, [r6, #0]
 800d948:	5162      	str	r2, [r4, r5]
 800d94a:	604b      	str	r3, [r1, #4]
 800d94c:	4638      	mov	r0, r7
 800d94e:	f104 060b 	add.w	r6, r4, #11
 800d952:	f000 f865 	bl	800da20 <__malloc_unlock>
 800d956:	f026 0607 	bic.w	r6, r6, #7
 800d95a:	1d23      	adds	r3, r4, #4
 800d95c:	1af2      	subs	r2, r6, r3
 800d95e:	d0b6      	beq.n	800d8ce <_malloc_r+0x22>
 800d960:	1b9b      	subs	r3, r3, r6
 800d962:	50a3      	str	r3, [r4, r2]
 800d964:	e7b3      	b.n	800d8ce <_malloc_r+0x22>
 800d966:	6862      	ldr	r2, [r4, #4]
 800d968:	42a3      	cmp	r3, r4
 800d96a:	bf0c      	ite	eq
 800d96c:	6032      	streq	r2, [r6, #0]
 800d96e:	605a      	strne	r2, [r3, #4]
 800d970:	e7ec      	b.n	800d94c <_malloc_r+0xa0>
 800d972:	4623      	mov	r3, r4
 800d974:	6864      	ldr	r4, [r4, #4]
 800d976:	e7b2      	b.n	800d8de <_malloc_r+0x32>
 800d978:	4634      	mov	r4, r6
 800d97a:	6876      	ldr	r6, [r6, #4]
 800d97c:	e7b9      	b.n	800d8f2 <_malloc_r+0x46>
 800d97e:	230c      	movs	r3, #12
 800d980:	603b      	str	r3, [r7, #0]
 800d982:	4638      	mov	r0, r7
 800d984:	f000 f84c 	bl	800da20 <__malloc_unlock>
 800d988:	e7a1      	b.n	800d8ce <_malloc_r+0x22>
 800d98a:	6025      	str	r5, [r4, #0]
 800d98c:	e7de      	b.n	800d94c <_malloc_r+0xa0>
 800d98e:	bf00      	nop
 800d990:	240010e0 	.word	0x240010e0

0800d994 <_realloc_r>:
 800d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	4680      	mov	r8, r0
 800d99a:	4614      	mov	r4, r2
 800d99c:	460e      	mov	r6, r1
 800d99e:	b921      	cbnz	r1, 800d9aa <_realloc_r+0x16>
 800d9a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	f7ff bf81 	b.w	800d8ac <_malloc_r>
 800d9aa:	b92a      	cbnz	r2, 800d9b8 <_realloc_r+0x24>
 800d9ac:	f7ff ff12 	bl	800d7d4 <_free_r>
 800d9b0:	4625      	mov	r5, r4
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b8:	f000 f838 	bl	800da2c <_malloc_usable_size_r>
 800d9bc:	4284      	cmp	r4, r0
 800d9be:	4607      	mov	r7, r0
 800d9c0:	d802      	bhi.n	800d9c8 <_realloc_r+0x34>
 800d9c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9c6:	d812      	bhi.n	800d9ee <_realloc_r+0x5a>
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	f7ff ff6e 	bl	800d8ac <_malloc_r>
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d0ed      	beq.n	800d9b2 <_realloc_r+0x1e>
 800d9d6:	42bc      	cmp	r4, r7
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4631      	mov	r1, r6
 800d9dc:	bf28      	it	cs
 800d9de:	463a      	movcs	r2, r7
 800d9e0:	f7ff fba4 	bl	800d12c <memcpy>
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7ff fef4 	bl	800d7d4 <_free_r>
 800d9ec:	e7e1      	b.n	800d9b2 <_realloc_r+0x1e>
 800d9ee:	4635      	mov	r5, r6
 800d9f0:	e7df      	b.n	800d9b2 <_realloc_r+0x1e>
	...

0800d9f4 <_sbrk_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4d06      	ldr	r5, [pc, #24]	; (800da10 <_sbrk_r+0x1c>)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	f7f4 ff5c 	bl	80028bc <_sbrk>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_sbrk_r+0x1a>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_sbrk_r+0x1a>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	240010e8 	.word	0x240010e8

0800da14 <__malloc_lock>:
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <__malloc_lock+0x8>)
 800da16:	f000 b811 	b.w	800da3c <__retarget_lock_acquire_recursive>
 800da1a:	bf00      	nop
 800da1c:	240010ec 	.word	0x240010ec

0800da20 <__malloc_unlock>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__malloc_unlock+0x8>)
 800da22:	f000 b80c 	b.w	800da3e <__retarget_lock_release_recursive>
 800da26:	bf00      	nop
 800da28:	240010ec 	.word	0x240010ec

0800da2c <_malloc_usable_size_r>:
 800da2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da30:	1f18      	subs	r0, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	bfbc      	itt	lt
 800da36:	580b      	ldrlt	r3, [r1, r0]
 800da38:	18c0      	addlt	r0, r0, r3
 800da3a:	4770      	bx	lr

0800da3c <__retarget_lock_acquire_recursive>:
 800da3c:	4770      	bx	lr

0800da3e <__retarget_lock_release_recursive>:
 800da3e:	4770      	bx	lr

0800da40 <_init>:
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da42:	bf00      	nop
 800da44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da46:	bc08      	pop	{r3}
 800da48:	469e      	mov	lr, r3
 800da4a:	4770      	bx	lr

0800da4c <_fini>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	bf00      	nop
 800da50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da52:	bc08      	pop	{r3}
 800da54:	469e      	mov	lr, r3
 800da56:	4770      	bx	lr
